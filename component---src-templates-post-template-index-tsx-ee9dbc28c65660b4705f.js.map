{"version":3,"file":"component---src-templates-post-template-index-tsx-ee9dbc28c65660b4705f.js","mappings":"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","sources":["webpack://danmin-gatsby-blog/./src/components/Utterances/styled.ts","webpack://danmin-gatsby-blog/./src/components/Utterances/index.tsx","webpack://danmin-gatsby-blog/./src/models/post.ts","webpack://danmin-gatsby-blog/./src/components/PostHeader/styled.ts","webpack://danmin-gatsby-blog/./src/components/PostHeader/index.tsx","webpack://danmin-gatsby-blog/./src/components/PostNavigator/styled.ts","webpack://danmin-gatsby-blog/./src/components/PostNavigator/index.tsx","webpack://danmin-gatsby-blog/./src/templates/post-template/styled.ts","webpack://danmin-gatsby-blog/./src/templates/post-template/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  margin: 30px 0;\n`;\n","import { ThemeManagerContext } from 'gatsby-emotion-dark-mode';\nimport React, { createRef, useContext, useEffect, useRef } from 'react';\n\nimport * as S from './styled';\n\nconst src = 'https://utteranc.es/client.js';\nconst branch = 'main';\n\ntype UtterancesProps = {\n  repo: string;\n  path: string;\n};\n\nconst Utterances: React.FC<UtterancesProps> = ({ repo, path }) => {\n  const rootElm = createRef<HTMLDivElement>();\n  const isUtterancesLoaded = useRef(false);\n  const theme = useContext(ThemeManagerContext);\n\n  useEffect(() => {\n    if (!rootElm.current) return;\n\n    const utterances = document.createElement('script');\n    const utterancesConfig: { [key: string]: unknown } = {\n      src,\n      repo,\n      branch,\n      'theme': theme.isDark ? 'photon-dark' : 'github-light',\n      'label': 'comment',\n      'async': true,\n      'issue-term': 'pathname',\n      'crossorigin': 'anonymous',\n    };\n\n    Object.keys(utterancesConfig).forEach((configKey) => {\n      utterances.setAttribute(configKey, utterancesConfig[configKey] as string);\n    });\n    rootElm.current.appendChild(utterances);\n\n    if (isUtterancesLoaded.current) {\n      rootElm.current.replaceChild(utterances, rootElm.current.firstChild as Node);\n    } else {\n      isUtterancesLoaded.current = true;\n    }\n  }, [rootElm, path, theme.isDark]);\n\n  return <S.Wrapper className='utterances' ref={rootElm} />;\n};\n\nexport default Utterances;\n","import { MarkdownRemark } from '../type';\n\nexport default class PostClass {\n  id;\n  excerpt;\n  emoji;\n  html;\n  slug;\n  title;\n  author;\n  date;\n  categories;\n  filteredCategories;\n\n  constructor(node: MarkdownRemark) {\n    const { id, html, excerpt, frontmatter, fields } = node;\n\n    const { slug } = fields;\n    const { emoji, categories, title, author, date } = frontmatter;\n\n    const categoryArr = categories.split(' ');\n\n    this.id = id;\n    this.excerpt = excerpt;\n    this.emoji = emoji;\n    this.html = html;\n    this.slug = slug;\n    this.title = title;\n    this.author = author;\n    this.date = date;\n    this.categories = categoryArr;\n    this.filteredCategories = categoryArr.map((category) => {\n      return category.replace('featured-', '').trim();\n    });\n  }\n}\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\n\nimport { hoverUnderline, MOBILE_MEDIA_QUERY } from '@/src/styles/const';\n\nexport const Header = styled.header`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 100%;\n  padding-bottom: 40px;\n  border-bottom: 1px solid ${({ theme }) => theme.color.gray20};\n  margin: 40px 0;\n  word-break: keep-all;\n`;\n\nexport const Emoji = styled.div`\n  font-size: 78px;\n  margin-bottom: 20px;\n`;\n\nexport const Info = styled.div`\n  display: flex;\n  font-size: 15px;\n  color: ${({ theme }) => theme.color.gray80};\n  font-family: GmarketSansLight;\n`;\n\nexport const Categories = styled.div`\n  margin-bottom: 5px;\n  font-size: 15px;\n`;\n\nexport const Category = styled(Link)`\n  margin-right: 4px;\n  color: ${({ theme }) => theme.color.gray60};\n  ${({ theme }) => hoverUnderline(theme)};\n  &:after {\n    background-color: ${({ theme }) => theme.color.gray60};\n  }\n`;\n\nexport const Title = styled.h1`\n  font-size: 32px;\n  margin-bottom: 6px;\n  line-height: 1.3;\n\n  @media ${MOBILE_MEDIA_QUERY} {\n    font-size: 25px;\n  }\n`;\n","import React from 'react';\n\nimport PostClass from '@/src/models/post';\n\nimport * as S from './styled';\n\ntype PostHeaderProps = {\n  post: PostClass;\n};\n\nconst PostHeader: React.FC<PostHeaderProps> = ({ post }) => {\n  return (\n    <S.Header>\n      {post.emoji && <S.Emoji>{post.emoji}</S.Emoji>}\n      <S.Categories>\n        {post.filteredCategories.map((category) => (\n          <S.Category key={category} to={`/posts/${category}`}>\n            {category}\n          </S.Category>\n        ))}\n      </S.Categories>\n\n      <S.Title>{post.title}</S.Title>\n      <S.Info>{post.date}</S.Info>\n    </S.Header>\n  );\n};\n\nexport default PostHeader;\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\n\nexport const Wrapper = styled.div`\n  display: grid;\n  width: 100%;\n  grid-template-columns: 49.3% 49.3%;\n  column-gap: 1.4%;\n`;\n\nexport const PostCard = styled(Link)`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  background-color: ${({ theme }) => theme.color.gray10};\n  border-radius: 6px;\n  padding: 15px;\n  height: 105px;\n\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.color.gray20};\n    .title {\n      text-decoration: underline;\n    }\n  }\n\n  &.prev {\n    margin-right: auto;\n  }\n\n  &.next {\n    margin-left: auto;\n  }\n`;\n\nexport const Direction = styled.div`\n  color: ${({ theme }) => theme.color.gray60};\n  margin-bottom: 10px;\n`;\n\nexport const Title = styled.div`\n  font-size: 16px;\n  line-height: 150%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  word-break: break-word;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n`;\n","import React from 'react';\n\nimport PostClass from '@/src/models/post';\n\nimport * as S from './styled';\n\ntype PostNavigatorProps = {\n  prevPost: PostClass;\n  nextPost: PostClass;\n};\n\nconst PostNavigator: React.FC<PostNavigatorProps> = ({ prevPost, nextPost }) => {\n  return (\n    <S.Wrapper>\n      <div>\n        {nextPost && (\n          <S.PostCard className='prev' key={nextPost.id} to={nextPost.slug}>\n            <S.Direction>이전 글</S.Direction>\n            <S.Title>{nextPost.title}</S.Title>\n          </S.PostCard>\n        )}\n      </div>\n      <div>\n        {prevPost && (\n          <S.PostCard className='next' key={prevPost.id} to={prevPost.slug}>\n            <S.Direction>다음 글</S.Direction>\n            <S.Title>{prevPost.title}</S.Title>\n          </S.PostCard>\n        )}\n      </div>\n    </S.Wrapper>\n  );\n};\n\nexport default PostNavigator;\n","import styled from '@emotion/styled';\n\nexport const PostContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  width: 100%;\n  margin-bottom: 30px;\n`;\n\nexport const BuyMeACoffeeWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 40px 0;\n  gap: 20px;\n`;\n","import styled from '@emotion/styled';\nimport { graphql } from 'gatsby';\nimport React from 'react';\n\n// import BuyMeACoffee from '@/src/components/BuyMeACoffee';\nimport PostHeader from '@/src/components/PostHeader';\nimport PostNavigator from '@/src/components/PostNavigator';\nimport ProjectCard from '@/src/components/ProjectCard';\nimport Seo from '@/src/components/Seo';\nimport Utterances from '@/src/components/Utterances';\nimport Layout from '@/src/layout';\nimport PostClass from '@/src/models/post';\nimport { MOBILE_MEDIA_QUERY } from '@/src/styles/const';\nimport { Post, SiteMetadata } from '@/src/type';\n\nimport * as S from './styled';\n\ntype PostTemplateProps = {\n  location: Location;\n  data: { prev: Post; next: Post; cur: Post; site: { siteMetadata: SiteMetadata }; markdownRemark: Post };\n};\n\nconst PostTemplate: React.FC<PostTemplateProps> = ({ location, data }) => {\n  const curPost = new PostClass(data.cur);\n  const prevPost = data.prev && new PostClass(data.prev);\n  const nextPost = data.next && new PostClass(data.next);\n  const utterancesRepo = data.site.siteMetadata.comments.utterances.repo;\n\n  const metaData = data.site.siteMetadata;\n  const { projects } = metaData;\n\n  return (\n    <Layout location={location}>\n      <Seo title={`MHLab | ${curPost?.title}`} description={curPost?.excerpt} />\n      <PostHeader post={curPost} />\n      <S.PostContent>\n        <div className='markdown' dangerouslySetInnerHTML={{ __html: curPost.html }} />\n      </S.PostContent>\n      <S.BuyMeACoffeeWrapper>\n        <StyledHR />\n        <MadeServiceTitle>작은 개인광고 양해 바랍니다 ^^;;</MadeServiceTitle>\n        <div>👇 주인장이 직접 만든 서비스 👇</div>\n        <ProjectCardsWrapper>\n          {projects.map((project, index) => (\n            <ProjectCard key={index} project={project} />\n          ))}\n        </ProjectCardsWrapper>\n\n        {/* <div>👇 도움이 되셨다면 👇</div> */}\n        {/* <BuyMeACoffee /> */}\n        <StyledHR />\n      </S.BuyMeACoffeeWrapper>\n\n      <PostNavigator prevPost={prevPost} nextPost={nextPost} />\n      <Utterances repo={utterancesRepo} path={curPost.slug} />\n    </Layout>\n  );\n};\n\nexport default PostTemplate;\n\nexport const pageQuery = graphql`\n  query ($slug: String, $nextSlug: String, $prevSlug: String) {\n    cur: markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      excerpt(pruneLength: 500, truncate: true)\n      frontmatter {\n        date(formatString: \"YYYY.MM.DD\")\n        title\n        categories\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"YYYY.MM.DD\")\n        title\n        categories\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"YYYY.MM.DD\")\n        title\n        categories\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    site {\n      siteMetadata {\n        siteUrl\n        comments {\n          utterances {\n            repo\n          }\n        }\n        projects {\n          title\n          description\n          techStack\n          thumbnailUrl\n          links {\n            post\n            github\n            web\n            googlePlay\n            appStore\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst StyledHR = styled.hr`\n  border: none !important;\n  border-top: 2px dashed black !important;\n  margin: 20px 0 !important;\n  width: 100%;\n  display: block !important;\n`;\n\nconst MadeServiceTitle = styled.div`\n  font-size: 25px;\n  font-weight: bold;\n`;\n\nconst ProjectCardsWrapper = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  column-gap: 10px;\n  margin-top: 10px;\n  row-gap: 24px;\n  /* column-gap: 29px;\n  margin-top: 60px;\n  row-gap: 64px; */\n  @media ${MOBILE_MEDIA_QUERY} {\n    display: flex;\n    flex-direction: column;\n    gap: 26px;\n    margin-top: 26px;\n  }\n`;\n"],"names":["Wrapper","_styled","target","name","styles","_ref","repo","path","rootElm","createRef","isUtterancesLoaded","useRef","theme","useContext","ThemeManagerContext","useEffect","current","utterances","document","createElement","utterancesConfig","src","branch","isDark","Object","keys","forEach","configKey","setAttribute","appendChild","replaceChild","firstChild","___EmotionJSX","S","className","ref","PostClass","node","id","html","excerpt","frontmatter","slug","fields","emoji","categories","title","author","date","categoryArr","split","this","filteredCategories","map","category","replace","trim","Header","color","gray20","Emoji","Info","_ref2","gray80","Categories","Category","Link","_ref3","gray60","_ref4","hoverUnderline","_ref5","Title","MOBILE_MEDIA_QUERY","post","key","to","PostCard","gray10","Direction","prevPost","nextPost","PostContent","BuyMeACoffeeWrapper","location","data","curPost","cur","prev","next","utterancesRepo","site","siteMetadata","comments","projects","Layout","Seo","description","PostHeader","dangerouslySetInnerHTML","__html","StyledHR","MadeServiceTitle","ProjectCardsWrapper","project","index","ProjectCard","PostNavigator","Utterances"],"sourceRoot":""}