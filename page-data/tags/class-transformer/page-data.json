{"componentChunkName":"component---src-templates-tag-jsx","path":"/tags/class-transformer/","result":{"data":{"allMarkdownRemark":{"totalCount":1,"nodes":[{"excerpt":"검증 예외 요새 마와셀 백엔드 쪽 개발을 하느라 이것저것 바쁘다. 앱도 리뉴얼을 해야 하는데 일단 웹쪽 연동해서 처리해야 하는 부분이 있어서 웹을 먼저 끝내고 앱을 끝내기로 했다. 백엔드던 프론트엔드던 개발하면서 예외 처리가 항상 중요한데, 원래 전달인자 검증을 자체적으로 만들어 쓰고 있었다. 근데 일일이 그걸 하려니 너무 비효율적인 것 같아서, 한번에 처리하는 방향으로 만들게 되었다. Nest.Js에서 대중적으로 가장 많이 사용하는 Class-Validator를 사용했다. 동작은 잘 했는데, 프론트 쪽에서 받을 때 응답 코드가 내가 원하는 형태로 떨어지지 않았다. 그래서 이 부분을 좀 내 입맛에 바꾸고 싶었다. How to? 먼저 검증 실패 시 발생하는 예외는 아래와 같은 코드로 구현되어 있다. 이건 그냥 자신의 프로젝트 취향에 맞게 작성하면 될 것 같다. 그리고 PipeTransform를 상속받는 객체를 하나 만들어준다. 이렇게 작성하면 아래와 같은 DTO가 전달되었을 때, 검…","fields":{"slug":"/nest_js/250111_validation_pipe_exception_handle/"},"frontmatter":{"title":"Nest.JS에서 class-validator 사용 시 예외 발생을 커스텀 처리하기","description":null,"date":"2025-01-11T12:41:00.000Z","tags":["NestJs","ClassValidator","ClassTransformer"],"series":"NestJs","previewImage":"nestjs_logo.jpg","isPrivate":null}}]}},"pageContext":{"tag":"ClassTransformer"}},"staticQueryHashes":[],"slicesMap":{}}