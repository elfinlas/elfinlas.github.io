{"componentChunkName":"component---src-templates-tag-jsx","path":"/tags/java/","result":{"data":{"allMarkdownRemark":{"totalCount":10,"nodes":[{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2019-09-23) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Java에서 Singleton 패턴이란? Singleton(이하 싱글톤) 패턴은 자바에서 많이 사용한다. 먼저 싱글톤이란 어떤 클래스가 최초 한번만 메모리를 할당하고(Static) 그 메모리에 객체를 만들어 사용하는 디자인 패턴 을 의미한다. 즉 생성자의 호출이 반복적으로 이뤄져도 실제로 생성되는 객체는 최초 생성된 객체를 반환 해주는 것이다. 보통 아래와 같이 사용하게 된다. 위 코드에서는 instance라는 전역 변수를 선언하는데 static을 줌으로써 인스턴스화 하지 않고 사용할 수 있게 하였지만 접근 제한자가 private 로 되어 있어 직접적인 접근은 불가능하다. 또한 생성자도 private으로 되어 있어 new 를 통한 객체 생성도 불가능하다. 결국 getInstance 메서드를 통해서 해당 인스턴스를 얻을 수 있게 된다.…","fields":{"slug":"/java/190923_java-singleton/"},"frontmatter":{"title":"Java에서 싱글톤(Singleton) 패턴을 사용하는 이유와 주의할 점","description":null,"date":"2019-09-23T16:10:07.000Z","tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null}},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2019-01-25) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 만약 1부를 안 보신 분이 있다면 이곳 1부 포스팅을 참고하자. 실제 구현 전 설치하거나 구성해야 할 것들이 있는데 이는 1부 포스팅의 참고 링크를 확인하자. 1부에 이어서.. 이번엔 바로 적용한 코드를 확인해보자. 1. Hwp to XHtml 아래의 메서드로 구현을 하였다. 위의 메서드는 hwp를 xhtml로 변환 후 변환된 경로를 반환하는 메서드이다. 자세한 것은 코드를 참고하자. 2. Xhtml to Pdf 이것도 아래의 메서드를 참고하면... 이 메서드도 변환 후 경로를 반환하는 메서드이다. 여기서 사용된 Pdf의 경우 WKHtmlToPdf 설치하기 포스팅의 번외 1편을 참고하자. 3. Pdf to Image 바로 코드를 보자면... 이곳에서는 PDF를 이미지로 변환하기 위해 PDFbox 를 사용하였다. 이것과 관련해서는 Ja…","fields":{"slug":"/tools/190125_hwp-image-part2/"},"frontmatter":{"title":"Java에서 Hwp를 Image로 변환하기 2부 (Java + Python)","description":null,"date":"2019-01-25T17:42:05.000Z","tags":["Tools","Java","Python","Hwp"],"series":"Tools","previewImage":"setting.png","isPrivate":null}},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2019-01-25) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Java에서 PDF를 이미지 파일로 변환하려면... 사내 프로젝트 중 Spring boot로 진행하는 프로젝트의 개발을 진행하던 중 위의 기능을 개발해야 했다. 이번 포스팅에서는 Java 라이브러리 중 PDFBox를 이용하여 Pdf를 이미지로 구현하는 방법을 정리해보려 한다. 개발환경은 Mac OS 이며 Spring boot 2.0, Java8을 사용하였다. 1. Gradle 추가하기 현재 포스팅을 하는 시점에서는 2.0.13 버전을 사용하였다. 아래의 Gradle을 추가해줘야 한다. Maven을 사용하시는 분은 아래를 참고하자. 2. Java Code... 아래의 코드를 참고하자. 위 메서드에서 전달인자는 InputStream을 받는데 이 부분은 PDF 파일을 FileInputStream으로 넘겨주면 된다.  와 같이 처리할 수 있…","fields":{"slug":"/java/190125_java-pdf-img/"},"frontmatter":{"title":"Java에서 PDF를 이미지로 변환하기","description":null,"date":"2019-01-25T16:50:21.000Z","tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null}},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2019-01-22) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Hwp 파일을 이미지로 변환? 회사를 이직한 뒤에 언어가 Python-Django에서 다시 Java-Spring으로 변하였다. 사실 다시 Java측으로 와도 가끔 집에서 토이 프로젝트나 그런 것을 할 때 Python을 애용한다. 무튼 이번 회사에서는 기존의 레거시 프로젝트의 기능 중 일부를 신규 서버에서 구현하기로 하고, 신규 서버를 개발하게 되었다. 그 레거시의 기능 중 일부를 구현하게 되었는데, 제목에도 나와있는 것처럼 **hwp(한글)**을 이미지로 변환하는 기능이 있었다. 기존에는 윈도우 프로그램에서 변환 처리를 진행하였는데 이제 이 기능을 서버단에서 처리하게 되었다. 혹시 결론을 좀 급하게 원하는 분들도 있을 거 같아서 미리 요약을 드리자면.. Java에서 바로 Hwp to Image를 처리하는 것은 불가능 하지만 몇 가지 …","fields":{"slug":"/tools/190122_hwp2img-java/"},"frontmatter":{"title":"Java에서 Hwp를 Image로 변환하기 1부 (Java + Python)","description":null,"date":"2019-01-22T19:33:44.000Z","tags":["Tools","Java","Python","Hwp"],"series":"Tools","previewImage":"setting.png","isPrivate":null}},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-02-28) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Java8의 LocalDateTime을 Json으로 변환하였더니... 제가 개발하는 프로젝트들은 Java8을 이용하여 개발을 하고 있습니다. 그 중 Java8의 Date 클래스를 보완하기 위해 나온 것이 Java8의 LocalDateTime입니다. 그런데 이 LocalDateTime을 Spring-Boot에서 Json 형식으로 호출할 경우 아래와 같이 Json을 만들게 됩니다.  위 사진에서 joinDate라는 값을 보면 날짜 정보가 상세하게 등록되어 있는 것을 확인할 수 있습니다. 하지만 요즘은 ISO-8601(한국위키)의 양식에 맞춰서 사용합니다.  위 사진처럼 결과를 나오게 하는 방법을 알아보겠습니다. 예제 환경은 아래와 같습니다. Spring Boot 1.5.8.RELEASE\nGradle 환경 1. build.gradle에 의…","fields":{"slug":"/java/180228_java8Localdate2Json/"},"frontmatter":{"title":"Java8의 LocalDateTime을 Json으로 전송 시 ISO-8601 형식으로 출력하기","description":null,"date":"2018-02-28T15:43:47.000Z","tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null}},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-02-11) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 너무 오랜만의 포스팅?? 간만에 작성을 하는 포스팅입니다. 요새 너무 정신없이 바빠져서 포스팅을 할 기회가 없었습니다. 계속 포스팅을 꾸준하게 해야 하지만...노오력을 해야 겠네요 ㅠ 근황은 근화이고 포스팅은 해야겠죠? Java에서 컬렉션에서 중복 제거 요새 Java 개발에 빠져서 허우적 중인데 개발을 하다 보면 데이터를 컬렉션에 담아서 처리하는 경우가 많습니다. 그리고 그 컬렉션에 중복된 데이터가 발생하는 문제가 있었는데 이런 문제를 해결하기 위한 방법을 알아보겠습니다. 먼저 예를 위해서 아래의 컬렉션을 사용하도록 하겠습니다. 최종 결과는 다음과 같이 나오게 됩니다. Step 1. HashSet을 사용하여 중복 제거하기 Java의 컬렉션 중 Set 컬렉션 중 하나인 HashSet을 통해서 제거하는 방법입니다. 중복된 컬렉션을 Has…","fields":{"slug":"/java/180211_javacollectionduplicate/"},"frontmatter":{"title":"Java에서 컬렉션의 중복을 제거하는 방법","description":null,"date":"2018-02-11T22:15:26.000Z","tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null}},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-12-14) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 19년 9월 8일 추가 19년 9월 8일 Github에 해당 소스를 등록하였다.\nGithub의 이곳을 참고하면 된다. 커스텀 어노테이션을 만들어 보자. Java에서 어노테이션(Annotation)이란?\n포스팅에서 어노테이션에 대해 간단히 알아보았습니다. 이번 포스팅에서는 직접 커스텀 어노테이션을 작성하는 방법에 대하여 알아보도록 하겠습니다. 두 가지의 예제를 통해 알아보도록 하겠습니다. 1. 정수 값 주입 예제 처음 주제는 어노테이션을 선언한 정수형 변수에 값을 넣는 예제를 진행해보겠습니다. 간단한 예제 이므로 주석은 달지 않거나 간단한 설명으로 대체하겠습니다. 1. 어노테이션 인터페이스 작성 인터페이스를 만들어주는데 앞에 @ 표시를 붙이면 됩니다. 1번과 2번에 대한 설명은 어노테이션 포스팅에서 정리하였습니다. 일단 멤버 변수에 d…","fields":{"slug":"/java/171214_java-custom-anotation-01/"},"frontmatter":{"title":"Java에서 커스텀 어노테이션(Annotation) 만들고 사용하기","description":null,"date":"2017-12-14T17:26:20.000Z","tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null}},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-10-31) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 문서를 시작하면서... Java를 사용할 때 본인의 경우 가장 많이 사용하는 클래스는 아무래도 String이 아닐까 싶습니다. String을 쓰다보면 문자열을 새로 문자열을 넣거나 또는 변경을 하는 경우 subString() 또는 split() 를 주로 사용합니다. 이것을 찾다보면 같이 마주치는 것은 StringBuffer 또는 StringBuilder가 있을 것입니다. 아마 면접질문 (신입 또는 주니어급 개발자)으로 저 세 가지의 차이점을 물어보는 경우가 많을 것입니다. 이번 포스팅을 통해서 한번 정리를 해보려 합니다. Java의 String. 이번 포스팅에서는 Java의 String을 집중적으로 포커싱을 하는 글은 아니니 간략하게만 확인하고 넘어가도록 하겠습니다. String은 일단 **불가변적(Immutable)**입니다. 이걸…","fields":{"slug":"/java/171031_javastrings/"},"frontmatter":{"title":"Java의 String, StringBuffer, String Builder에 대하여","description":null,"date":"2017-10-31T21:04:24.000Z","tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null}},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-10-31) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Java Bean 이란? 처음 자바 개발을 하다가 Java Bean이란 용어를 듣게 되었습니다. 구글에서 다양한 블로그에서 검색을 하여 찾아보았고, 이것을 정리하여 블로그 포스팅을 하게 되었습니다. Java Bean의 정의 데이터를 표현하는 것을 목적으로 하는 자바 클래스. 컴포넌트와 비슷한 의미로도 사용된다. JavaBean 규격서에 따라 작성된 자바 클래스를 가리킨다. Java Bean의 규격 클래스는 패키지화 하여야 한다. 멤버변수는 프로퍼티(Property)라 칭한다. 클래스는 필요에 따라 직렬화가 가능하다. 프로퍼티의 접근자는 private이다. 프로퍼티마다 getter/setter 가 존재해야 하며, 그 이름은 각각 get/set으로 시작해야 한다. 위의 프로퍼티 getter/setter 메서드의 접근자는 public이어야…","fields":{"slug":"/java/171031_javabean/"},"frontmatter":{"title":"Java Bean이란?","description":null,"date":"2017-10-31T20:03:19.000Z","tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null}},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-02-14) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Java에서 어노테이션(Annotation) 이란? 자바 개발을 하다 보면 클래스 또는 메서드 또는 변수 앞에 @Override 같은 @ 표시를 많이 봤을 것입니다. 이 어노테이션은 JEE5(Java Platform, Enterprise Edition 5)부터 새롭게 추가된 요소입니다. 이 어노테이션으로 인해 데이터의 유효성 검사 등을 쉽게 알 수 있고, 이와 관련한 코드가 깔끔해지게 됩니다. 일단 어노테이션의 용도는 다양한 목적이 있지만 메타 데이터의 비중이 가장 크다 할 수 있습니다. 메타-테이터(Meta-Data) : 데이터를 위한 데이터를 의미하며, 풀어 이야기하면 한 데이터에 대한 설명을 의미하는 데이터. (자신의 정보를 담고 있는 데이터) Java에서 기본적으로 제공하는 어노테이션 종류 @Override 선언한 메서드가 오…","fields":{"slug":"/java/171214_java-annotation/"},"frontmatter":{"title":"Java에서 어노테이션(Annotation)이란?","description":null,"date":"2017-02-14T19:09:19.000Z","tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null}}]}},"pageContext":{"tag":"Java"}},"staticQueryHashes":[],"slicesMap":{}}