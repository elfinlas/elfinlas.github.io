{"componentChunkName":"component---src-templates-tag-jsx","path":"/tags/redis/","result":{"data":{"allMarkdownRemark":{"totalCount":2,"nodes":[{"excerpt":"레디스를 쓰다가... 최근 아마존에 있던 1세대 흑우집합소를 더 이상 쓰지 않게 되어 로컬로 옮기기로 했다. 근데 내가 쓰는 도커 레디스랑 아마존 도커 레디스랑 버전이 맞지 않아서 문제가 생겼다. 버전을 확인해보려 했는데 잘 몰라서 찾다가 자주 보게 될거 같아서 포스팅으로 남겨둔다. 먼저 도커 내부로 접근해서 레디스 쉘로 가야 한다. 들어가서 다음과 같이 명령어를 쓴다. 이렇게 하고, 스크롤을 좀 올리면 redis_version에서 버전 확인이 가능하다.","fields":{"slug":"/redis/230727_docker_in_redis_version/"},"frontmatter":{"title":"Docker 내에서 구동중인 레디스 버전 확인하기","description":null,"date":"2023-07-27T21:07:08.000Z","tags":["Redis"],"series":"Redis","previewImage":"redis_logo.png","isPrivate":null}},{"excerpt":"세션을 사용하려다가... Node.JS에서 세션을 사용하려 했고, 저장소로 레디스(Redis) 를 사용하기로 했다. 설정법은 다음 포스팅에서 다루기로 하고... 일단 내가 쓰려 했던 패키지는 아래와 같다. 이렇게 설정하고 redis 설정을 해줬다. 참고로 설정 파일을 외부로 빼고 app.use() 에서 넣어서 쓰는 방식으로 개발했다. 이 부분을 참고하면 될 것 같다. 그리고 설정파일의 경우 전체 정보를 공개하기 어렵기에 공통적인 부분만 남긴다. 위와 같이 설정된 상태에서 node.js를 실행할 경우 아래와 같은 에러가 발생했다. 이런 문제가 발생하는 원인은 버전 문제다. 바로 connect-redis 패키지 문제이다. NPM 사이트 에서도 확인 가능하지만 일부 내용을 발췌하면 다음과 같다. 요기서 보면 redis를 사용할 때 v4를 사용할 경우 legacyMode를 사용해서 쓰라 되어 있다. 난 redis 버전을 낮췄다. \"redis\": \"v3\" 무튼 해결법은... redis 버전…","fields":{"slug":"/node-js/220208_node-session-cache/"},"frontmatter":{"title":"Node.Js에서 Redis 세션 사용시 UnhandledPromiseRejectionWarning The client is closed 문제 뜨는 경우","description":null,"date":"2022-02-08T18:41:08.000Z","tags":["NodeJS","Redis","Troubleshooting"],"series":"NodeJS","previewImage":"nodejs_logo.png","isPrivate":null}}]}},"pageContext":{"tag":"Redis"}},"staticQueryHashes":[],"slicesMap":{}}