{"componentChunkName":"component---src-templates-posts-template-index-tsx","path":"/posts/nest_js","result":{"pageContext":{"currentCategory":"nest_js","categories":["All","android","aws","basic_know","book","cloud","dart_flutter","gatsby","java","js_ts","letsencrypt","mac","mongodb","my_project","my_story","nest_js","next-js","nginx","node-js","react","redis","spring_spring-boot","thymeleaf","til","tools","ubuntu","utils","vcs_git"],"edges":[{"node":{"id":"c3860bc5-326d-51dc-af1d-1b91fc8e2c55","excerpt":"Chat GPT에게 코드를 맡기다가… MongoDB쪽에서 데이터를 가져오는 부분에 대해서 GPT에게 명령을 줬다. 근데 가져올 때 코드를 보니 신기한 게 있었다. 근데 GPT가 제공한 코드를 보면 끝에 **.exec()**를 사용한다. 그래서 이 부분에 대해 궁금했다. 쓰면서 딱히 문제는 안되었는데 이런 부분은 모르고 넘어가면 더 큰 문제가 발생할 수 있으니까? exec()는? 사실 exec()를 쓰고 안쓰고는 큰 차이는 없다. 왜냐하면 기능적으로는 완전히 동일하다. Mongoose에서 대부분의 쿼리 메서드는 exec()를 호출하지 않아도 잘 동작한다. 하지만 save() 같은 쿼리 메서드에는 붙이지 않는다. 근데 이게 Mogoose 3 버전대에서는 쿼리 메서드에서 사용하는 쿼리를 프로미스로 만들기 위해서는 exec()를 필수로 붙여줘야 했다. 하지만 4버전 이후부터는 자체적으로 처리를 하기 때문에 exec()를 붙이지 않아도 되게 되었다. 하지만 가독성과 다른 코드와의 일관성을 …","fields":{"slug":"/nest_js/230505_mongoose_exec/"},"frontmatter":{"categories":"nest_js","title":"Mongoose 사용 시 exec()는 무엇인가?","date":"2023.05.05"}},"next":{"fields":{"slug":"/til/230219_til/"}},"previous":{"fields":{"slug":"/next-js/230505_nextjs_title/"}},"categoriesMap":{"nest_js":true}},{"node":{"id":"22d35024-b1e2-5844-9951-14c981d1e829","excerpt":"네이버 로그인 포스팅 3부작 Part01 네이버 로그인 구현하기 (Nest.js 코드 구현) Part02 네이버 로그인 구현하기 (네이버 개발자 센터) (현재 글) Part03 네이버 로그인 구현하기 (검수 요청 및 거절 그리고 기타 경험) 검수 요청을 했다. 개발이 다 끝난 뒤 검수 요청을 어떻게 해야 할지 고민이 앞섰다. 먼저 선 배포를 하고 검수를 해야 하는 것인지… 아니면 배포 전 검수를 해야 하는 것인지… 만약 배포 전이면 접근 권한을 어떻게 해야 하는지…  그렇다. 이 글을 읽으며 네아로를 적용하는 독자가 어떤 서비스를 개발하는지 모르겠지만… 보통이라면 사실 일반 사용자는 여러분의 서비스에 관심이 없다. 아니 존재 자체를 잘 모른다. 슬픈 현실이지만 그렇다. 당사자야 서비스를 만든 사람이니 잘 알고 기능도 알며, 이제 출시했다 라는 정보를 알지. 일반인은 알 수가 없다. 내가 만든 로또 서비스 흑우집합소도 이렇게 언급 안하면 아무도 모를 것이다. 다시 돌아와서… 즉 보안…","fields":{"slug":"/nest_js/230405_naver_login_part03/"},"frontmatter":{"categories":"nest_js","title":"Nest.Js에서 네이버 로그인 구현하기 Part.03 (검수 요청 및 거절 그리고 기타 경험)","date":"2023.04.05"}},"next":{"fields":{"slug":"/nest_js/230405_naver_login_part02/"}},"previous":{"fields":{"slug":"/til/230307_til/"}},"categoriesMap":{"nest_js":true}},{"node":{"id":"5ba73130-23de-56d8-9bb7-0e3c20adbc0a","excerpt":"네이버 로그인 포스팅 3부작 Part01 네이버 로그인 구현하기 (Nest.js 코드 구현) (현재 글) Part02 네이버 로그인 구현하기 (네이버 개발자 센터) Part03 네이버 로그인 구현하기 (검수 요청 및 거절 그리고 기타 경험) 저번에 이어… 저번 포스팅인 Nest.Js에서 네이버 로그인 구현하기 Part.01에 이어서 작성한다. 혹시 코드쪽을 안하신 분은 저 포스팅을 참고하도록 하자. 네이버 개발자 페이지에서… 어플리케이션 등록 페이지로 이동한다. 이동하면 일단 로그인 API 신청을 위한 몇 가지 정보를 입력해야 한다.  위 사진에서 나온 정보는 따로 설명이 불 필요한 만큼 알아서 작성하자. 정보를 다 입력하면 이제 내 어플리케이션에 항목이 등록이 된다. 1. 개요 페이지  저기서 ClientID와 Client Secret 항목은 매우 중요하기에 외부로 노출이 안되게, 잘 관리해주자. 그리고 저 값은 Nest.JS 프로젝트 내에서 심어서 사용할 건데 env파일을 사용…","fields":{"slug":"/nest_js/230405_naver_login_part02/"},"frontmatter":{"categories":"nest_js","title":"Nest.Js에서 네이버 로그인 구현하기 Part.02 (네이버 개발자 센터)","date":"2023.04.05"}},"next":{"fields":{"slug":"/nest_js/230404_naver_login/"}},"previous":{"fields":{"slug":"/nest_js/230405_naver_login_part03/"}},"categoriesMap":{"nest_js":true}},{"node":{"id":"78e6eefc-9654-546c-b38a-2a58eb9788fa","excerpt":"네이버 로그인 포스팅 3부작 (현재 글) Part01 네이버 로그인 구현하기 (Nest.js 코드 구현) Part02 네이버 로그인 구현하기 (네이버 개발자 센터) Part03 네이버 로그인 구현하기 (검수 요청 및 거절 그리고 기타 경험) 서비스에 SNS 로그인을 구현하려 했다. (SNS Naver OAuth Login) 흑우집합소를 개발하다가 사용자 계정 관련해서 사용자 계정과 관련하여 고민을 했다. 직접 계정 가입을 받을 것인지… 아니면 SNS를 활용한 계정을 처리할 것인지… 마음은 SNS 로그인쪽으로 기울긴 했다. 왜냐하면 직접 받는다면, 계정의 신원을 E-Mail로 잡을텐데 여기서 검증 이메일을 보내는 로직과 더불어, 일일히 계정 정보를 다 입력받는 창을 만들고 하면 시간이 너무 많이 먹을 듯 싶었다. 그래서 구글 네이버 카카오를 사용하기로 결정했다. 카카오 사태때 SNS 로그인 문제가 있던걸 봐서 고민을 좀 했지만… 이 부분은 내가 따로 구현처리해서 피할 수 있는 것 같…","fields":{"slug":"/nest_js/230404_naver_login/"},"frontmatter":{"categories":"nest_js","title":"Nest.Js에서 네이버 로그인 구현하기 Part.01 (Naver OAuth Login)","date":"2023.04.04"}},"next":{"fields":{"slug":"/gatsby/230404_google_analytics/"}},"previous":{"fields":{"slug":"/nest_js/230405_naver_login_part02/"}},"categoriesMap":{"nest_js":true}},{"node":{"id":"e60e3535-0e51-5dbf-b163-d223bb2d970c","excerpt":"배포를 하기 전에… 흑우집합소 테섭에 배포를 하고나서 몇 가지 테스트를 진행하던 도중 pm2 로그를 잠시 확인했다.  저기 보면 clientIp라고 되어 있는 곳에 IP가 뜨는데 뭔가 좀 이상했다… IpV4가 나와야 하는데 IpV6 형식으로 나왔다. 사실 큰 상관은 없을 것 같은데 그래도 서버 내에서 로깅이나 확인할 때 IpV6 형식으로 되어 있다면 불편할 것 같았다. 그래서 이걸 V4 형식으로 바꿨다. 방법은 여러가지가 있지만, 제일 쉽고 아무것도 설치하지 않아도 되는 방식으로 했다. 저렇게 app.listen함수 뒤에 전달인자로 hostname을 전달해주면 된다. 저 함수를 타보면 아래와 같은 형태이다. 저 hostname에 ipv4 형식을 문자열로 전달하면 이제 Nest.Js 내에서 ip 주소 표현은 IpV4로 바뀌게 된다.","fields":{"slug":"/nest_js/230401_ipv6_ipv4/"},"frontmatter":{"categories":"nest_js","title":"Nest.js에서 Ip 조회할 때 IpV6로 표시되는 것을 IpV4로 바꾸기","date":"2023.04.01"}},"next":{"fields":{"slug":"/nginx/230331_file_upload_size/"}},"previous":{"fields":{"slug":"/nginx/230401_defense_attacker/"}},"categoriesMap":{"nest_js":true}},{"node":{"id":"752886b0-32a0-527a-ada5-034a7033896f","excerpt":"블로그용 작은 프로젝트를 만들다가… 이번에 Nest.Js에서 Jwt쓰기 주제로 포스팅을 준비중이다. 근데 처음부터 다시 설치해서 하려니까 몇 가지 막히는 부분이 있었다. 이런 코드가 있다. 근데 @Module 안에서 process.env로 설정파일에 접근하려 했다. 근데 아래와 같이 에러가 발생했다.  이유가 뭘까 잠깐 고민했는데… 기존 프로젝트는 이미 다 되어 있는 것이라서 내가 빼 먹은 설정과 패키지가 있었다. Next.js에서 Config 이유는 간단했다. 먼저 Config관련 패키지를 빼먹었었다. 먼저 아래의 명령어로 패키지를 설치해준다. 그리고 모듈의 최상단인 app.module을 연다. 아래와 같이 모듈 파일을 수정해준다. imports 부분에서 저렇게 처리하면 된다. 만약 구동 환경마다 설정파일을 좀 다르게 하고 싶다면 아래와 같이 처리가 가능하다. NODE_ENV는 실행 인자에서 전달해주는 것으로 처리했다. 이렇게 하면 각 구동 인자에 따라 설정 파일을 다르게 넣을 …","fields":{"slug":"/nest_js/230213_nestjs_module_config_load/"},"frontmatter":{"categories":"nest_js","title":"Nest.Js에서 @Module의 속성에서 process.env 사용하기","date":"2023.02.13"}},"next":{"fields":{"slug":"/nest_js/230212_start_nestjs/"}},"previous":{"fields":{"slug":"/til/230119_til/"}},"categoriesMap":{"nest_js":true}},{"node":{"id":"44351d83-6a48-55ee-95b1-afeec6de3875","excerpt":"Nest.Js 프로젝트 만들어보기 이번에는 Nest.Js 프로젝트 시작하는 포스팅을 준비했다. 워낙 기초적인 내용이고, 별로 설명할 것도 없으며 공식 홈페이지에 상세히 나와있지만… 내가 또 프로젝트 셋업할 때 잊을까봐 남겨두는 포스팅이다. 진행은 MacOS에서 했다. Nest.Js 설치 크게 두 가지 방법이 있다. 하나는 그냥 npm이나 yarn 등으로 cli를 받은 다음 설치하는 법과 Github 클론 방식이 있다. Npm (Yarn) 설치 Npm이나 Yarn이 설치되어 있다면 너무 간단하다. 프로젝트를 시작할 디렉토리에서 아래의 명령어를 입력해준다. 나는 개인적으로 글로벌 설치를 안좋아해서 단일 프로젝트 방식으로 설치했다. 이렇게 하면 프로젝트 디렉토리 내에 node_modules, package.json, yarn.lock 파일과 디렉토리가 생긴다. 여기서 아래와 같이 Next.Js를 설치해주면 된다. 만약 자신이 특정 디렉토리에서 Nest.Js를 시작하길 원한다면 프로젝트 …","fields":{"slug":"/nest_js/230212_start_nestjs/"},"frontmatter":{"categories":"nest_js","title":"Nest.Js 프로젝트 생성하기","date":"2023.02.12"}},"next":{"fields":{"slug":"/nest_js/230208_nesjs_jwt_part1/"}},"previous":{"fields":{"slug":"/nest_js/230213_nestjs_module_config_load/"}},"categoriesMap":{"nest_js":true}},{"node":{"id":"eb5a0c14-bca6-532f-a448-ef59fa31abec","excerpt":"JWT를 원래 쓰고 있었지만… 전에도 썼었고, 지금도 쓰고 있는 JWT JWT에 대한 개념적인 것은 넘어가고, Nest.js에서 JWT를 쓰는 방법에 대해서 포스팅 해보려 한다. 사실 JWT를 그냥 쓰면 안되고, 몇 가지 기본적인 정책이나 알아야 할 점이 있지만, 이번 포스팅에서는 Nest.js에서 JWT를 생성하는 것에 포커스를 두려 한다. JWT에 대해서는 아주 예전에 포스팅을 했었다. JWT의 이론적인 부분이 궁금한 분은 JWT 포스팅을 참고해주시길… 이와 관련한 코드는 Github에 등록하였다. 일단 메인 브런치인데 향후 Part별로 브런치를 나누거나, 커밋으로 할 예정이다. 이와 관련한 것은 향후 다시 업데이트 예정이다. Nest.js에서 JWT 사용하기 본격적으로 설명에 앞서 위에 언급한 것처럼… 이번 포스팅에서는 Nest.js에서 JWT를 생성하는 것에 포커스를 둔 코드다. 그래서 약간 코드가 엉성할 수 있다. 하지만 어떻게 사용해서 적용하는지를 볼 수 있는 예제성 코…","fields":{"slug":"/nest_js/230208_nesjs_jwt_part1/"},"frontmatter":{"categories":"nest_js","title":"Nest.Js에서 JWT 사용하기 (Part01 JWT 생성해보기)","date":"2023.02.08"}},"next":{"fields":{"slug":"/book/230208_effective_typescript/"}},"previous":{"fields":{"slug":"/nest_js/230212_start_nestjs/"}},"categoriesMap":{"nest_js":true}},{"node":{"id":"25661be2-fac1-5849-97cf-c686c89cf9c5","excerpt":"저번 포스팅에 이어… 저번 포스팅(CloudFlare R2 사용해보기 Part 1)에 이어 이번에는 R2에 파일 업로드와 다운로드, 삭제 등을 Nest.Js로 구현하는 것을 해보려 한다. 일단 프로젝트를 따로 파서 깃허브에 올려서 하려 했으나… 생각해보니 각 설정들 부터 해서 Wrangler의 설정 및 배포 등 생각할 것과 직접 구현해야 할 부분이 많아지는 관계로… 일단 코드 조각으로 예시를 만들어보려 한다. 그렇다고 생략을 엄청 하는 것은 아니고, 환경이 구성되어 있다면 해당 코드 예제가 도움될 것이라 생각이 든다. 설명에 앞서 구성, 그리고 기타 사항은 다음과 같이 되어 있다. Nest.JS 사용 Typescript 사용 CloudFlare R2 사용해보기 Part 1 포스팅까지 진행 완료된 CloudFlare 계정 Wrangler 프로젝트가 현재 진행하는(또는 따로 만든) 곳 내부에 존재하는 것을 예시로 진행 먼저 files라는 도메인에서 진행한다. (아래 사진은 참고용)  …","fields":{"slug":"/nest_js/230203_r2_nestjs/"},"frontmatter":{"categories":"nest_js","title":"CloudFlare R2 사용해보기 Part 2 (With Nest.Js)","date":"2023.02.03"}},"next":{"fields":{"slug":"/nest_js/230129_tast_scheduling/"}},"previous":{"fields":{"slug":"/utils/230203_web_carbon/"}},"categoriesMap":{"nest_js":true}},{"node":{"id":"ee1502f7-4126-570b-aef1-c2dba6a8a52b","excerpt":"NestJs에서 스케쥴링… 현재 하고 있는 프로젝트에서 스케쥴링이 필요하여 구현했었다. 그런데 스케쥴링을 돌렸는데 뭔가 시간이 안맞게 돌아간다고 해야 하나? 분과 초단위는 잘 도는데 시간대가 좀 안맞았다. 그래서 테스트를 하고 자료를 찾다가 원인을 알게되었다… 원인? 이유는 바로 TimeZone 문제였다. 내가 구현한 코드는 다음과 같이 구성되어 있다. 일요일에서 금요일까지 자정에서 11시까지 도는 스케쥴러다. 근데 로깅을 찍어보고 해봐도 뭔가 이상했다. 저 @Cron의 함수 형태인데 뒤에 옵션이 수상했다. 위에 선언된 속성 중 timezone이 옵셔널로 들어오는데 이게 문제였었다. 아무것도 선언을 안해주면 그냥 UTC 시간대가 적용된다. 그래서 이걸 아래와 같이 timezone을 선언해주면 아주 간단하게 해결되는 문제였다. 이렇게 해주니 한국시 기준으로 잘 동작하였다. 참고 참고 공식 문서 원인? 참고","fields":{"slug":"/nest_js/230129_tast_scheduling/"},"frontmatter":{"categories":"nest_js","title":"Nest.Js에서 한국시간 기준 스케쥴링할 때 주의점 (With Timezone)","date":"2023.01.29"}},"next":{"fields":{"slug":"/cloud-flare/"}},"previous":{"fields":{"slug":"/nest_js/230203_r2_nestjs/"}},"categoriesMap":{"nest_js":true}}]}},"staticQueryHashes":["1321405810","3649515864"]}