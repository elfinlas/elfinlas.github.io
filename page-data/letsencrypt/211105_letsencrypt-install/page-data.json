{"componentChunkName":"component---src-templates-blog-post-js","path":"/letsencrypt/211105_letsencrypt-install/","result":{"data":{"site":{"siteMetadata":{"title":"MHLab blog","author":"MHLab","siteUrl":"https://elfinlas.github.io","comment":{"disqusShortName":"","utterances":"elfinlas/blog_utterances"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"7b6d492d-2449-5436-8518-bbb73152391c","excerpt":"22.09.25 내용 추가 여기서 진행한 방식의 경우 standalone 방식이다. 이 방식은 80포트를 강제로 내려서 인증 대상이 진짜 사용하는 서비스인지를 체크하기에 매우 비효율적인 방식이다. 최근 방식의 경우 Webroot나 DNS 인증을 사용하는데, 이번에 DNS 인증에 대하여 포스팅을 진행했다. Webroot도 사용하지만 와일드카드(ex: *.api.com 등) 인증이 불가하기 때문에 DNS 인증을 사용할 것을 추천한다. DNS…","html":"<h1 id=\"220925-내용-추가\" style=\"position:relative;\"><a href=\"#220925-%EB%82%B4%EC%9A%A9-%EC%B6%94%EA%B0%80\" aria-label=\"220925 내용 추가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>22.09.25 내용 추가</h1>\n<p>여기서 진행한 방식의 경우 <strong>standalone</strong> 방식이다.<br>\n이 방식은 80포트를 강제로 내려서 인증 대상이 진짜 사용하는 서비스인지를 체크하기에 매우 비효율적인 방식이다.</p>\n<p>최근 방식의 경우 Webroot나 DNS 인증을 사용하는데, 이번에 DNS 인증에 대하여 포스팅을 진행했다.<br>\nWebroot도 사용하지만 와일드카드(ex: *.api.com 등) 인증이 불가하기 때문에 DNS 인증을 사용할 것을 추천한다.<br>\nDNS 인증 방식이 필요한 경우 아래 포스팅을 참고하자.</p>\n<p><a href=\"https://elfinlas.github.io/thymeleaf/letsencrypt/220923_use-letsencrypt\">LetsEncrypt 적용법 (DNS 인증 &#x26; AWS)</a></p>\n<br>\n<h2 id=\"letsencrypt\" style=\"position:relative;\"><a href=\"#letsencrypt\" aria-label=\"letsencrypt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let’sEncrypt?</h2>\n<p>이번에 서비스를 준비하면서 EC2에서 하나씩 올려서 해보기로 했다.</p>\n<p>사실 AWS 기반이라 로드벨런서에 인증서 물리면 되는데…<br>\n전에 해보던게 생각 나기도 했고..</p>\n<p>일단 서비스 규모가 더 커지면 그 때 안정적으로 가고 지금은 빌드업 수준으로 해보기로 했다.</p>\n<p>일단 뭐 <strong>Let’sEncrypt</strong>에 대한 자세한 것은 이미 알고 있다는 가정 하에 바로 설치법부터 들어간다.</p>\n<p>그 전에 환경은..</p>\n<blockquote>\n<p>AWS 기반 EC2 Ubuntu 20.04 LTS 기준으로 작업을 진행<br>\nNginx 사용 &#x3C;- 중요하진 않음</p>\n</blockquote>\n<br>\n<h3 id=\"part-1-설치-커맨드\" style=\"position:relative;\"><a href=\"#part-1-%EC%84%A4%EC%B9%98-%EC%BB%A4%EB%A7%A8%EB%93%9C\" aria-label=\"part 1 설치 커맨드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part 1 설치 커맨드</h3>\n<p>아래의 커맨드로 하나씩 진행하였다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo apt update\nsudo snap install core; sudo snap refresh core\nsudo apt-get remove certbot\nsudo snap install --classic certbot # 설치\nsudo ln -s /snap/bin/certbot /usr/bin/certbot # 링크\nsudo certbot certonly --email [인증에 사용할 이메일] --standalone -d [적용할 도메인]  실행</code></pre></div>\n<p>커맨드 설명은 아래와 같다</p>\n<p>1번 : 설치 전 업데이트 처리<br>\n2번 : 필요한 것들 설치<br>\n3번 : 기존에 설치된 certbot이 있다면 제거<br>\n4번 : certbot 설치<br>\n5번 : 심볼릭 링크 생성<br>\n6번 인증서 만드는데 email은 인증에 대한 대표자 메일(필자는 주로 쓰는 메일 사용)을 적고 -d는 적용할 도메인을 적어준다 (elfinlas.io.xx 등)</p>\n<p>6번 명령어 이후 아래와 같이 뜨면 정상적으로 된 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ubuntu@ip$ sudo certbot certonly --email test@test.com --standalone -d dev.net\nSaving debug log to /your/some/path/letsencrypt.log\nRequesting a certificate for dev.net\n\nSuccessfully received certificate.\nCertificate is saved at: /your/some/path/letsencrypt/live/dev.net/fullchain.pem\nKey is saved at:         /your/some/path/letsencrypt/live/dev.net/privkey.pem\nThis certificate expires on 9999-99-99. &lt;= 여긴 인증기간은 3개월인가 줘서 사람마다 틀림\nThese files will be updated when the certificate renews.\nCertbot has set up a scheduled task to automatically renew this certificate in the background.\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nIf you like Certbot, please consider supporting our work by:\n * Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n * Donating to EFF:                    https://eff.org/donate-le\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</code></pre></div>\n<blockquote>\n<p>커맨드에 대해 좀더 설명이 필요한 분은 <a href=\"https://certbot.eff.org/lets-encrypt/ubuntufocal-other\">이곳</a> 에서 직접 확인해보자</p>\n</blockquote>\n<h3 id=\"part-2-aws-작업\" style=\"position:relative;\"><a href=\"#part-2-aws-%EC%9E%91%EC%97%85\" aria-label=\"part 2 aws 작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part 2 AWS 작업</h3>\n<p>이렇게 진행하고 나서 AWS 콘솔로 가준다.<br>\n콘솔에서는 다음과 같은 절차로 진행한다.</p>\n<ol>\n<li>AWS 콘솔에서 Certificate Manager 이동</li>\n<li>\n<p>인증서 선택에서 각 항목에 해당 하는 값을 가져온다. (아까 생성한 pem 파일을 사용)</p>\n<ol>\n<li>인증서 본문 => cert.pem</li>\n<li>인증서 프라이빗 => privkey.pem</li>\n<li>인증서 체인 => fullchain.pem</li>\n</ol>\n</li>\n<li>\n<p>마무리 하면 ec2에 접속해서 콘솔에서 아랴와 같이 nginx를 재시작 해준다.</p>\n<ol>\n<li>sudo service nginx restart</li>\n</ol>\n</li>\n</ol>\n<br>\n<p>아마 다른 블로그에서는 설치법만 나오고 보통 AWS 설명도 약간 부실했는데 직접 찾아보고 적용한 방법이다.</p>\n<p>그리고 기반은 nginx 인데 아파치 쓰거나 다른 미들웨어 쓰시는 분들은 똑같이 서비스만 재시작 하면 된다.</p>","frontmatter":{"title":"Let'sEncrypt 설치후 AWS에 적용하기","date":"November 04, 2021"}}},"pageContext":{"slug":"/letsencrypt/211105_letsencrypt-install/","previous":{"fields":{"slug":"/java/190923_java-singleton/"},"frontmatter":{"title":"Java에서 싱글톤(Singleton) 패턴을 사용하는 이유와 주의할 점"}},"next":{"fields":{"slug":"/letsencrypt/211105_renew-certbot/"},"frontmatter":{"title":"Let'sEncrypt 자동 갱신 처리하기"}}}}}