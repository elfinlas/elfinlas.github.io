{"componentChunkName":"component---src-templates-blog-post-js","path":"/letsencrypt/220923_use-letsencrypt/","result":{"data":{"site":{"siteMetadata":{"title":"MHLab blog","author":"MHLab","siteUrl":"https://elfinlas.github.io","comment":{"disqusShortName":"","utterances":"elfinlas/blog_utterances"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"5872e2c3-eed1-5fe5-9d6d-94d0e41bcfb4","excerpt":"23.01.18 아마존에서 작업이 미흡해서 일부 내용을 추가합니다. 이번에 서비스를 개발하고 오픈하면서… 예전에 LetsEncrypt를 적용해봤던 적은 있었다. 하지만 방법이 너무 오래되었고, 와일드카드 방식으로 도메인을 사용해서 인증 방법을 다시 찾아보았다. 그 전에 앞서 먼저 내가 사용했었던 두 가지 방식을 간단하게 정리하고 넘어가겠다. Standalone 과 Webroot 방식 먼저 Standalone 방식의 경우 비 효율적인 방식이다. 적용 대상의 8…","html":"<h1 id=\"230118\" style=\"position:relative;\"><a href=\"#230118\" aria-label=\"230118 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>23.01.18</h1>\n<h3 id=\"아마존에서-작업이-미흡해서-일부-내용을-추가합니다\" style=\"position:relative;\"><a href=\"#%EC%95%84%EB%A7%88%EC%A1%B4%EC%97%90%EC%84%9C-%EC%9E%91%EC%97%85%EC%9D%B4-%EB%AF%B8%ED%9D%A1%ED%95%B4%EC%84%9C-%EC%9D%BC%EB%B6%80-%EB%82%B4%EC%9A%A9%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"아마존에서 작업이 미흡해서 일부 내용을 추가합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아마존에서 작업이 미흡해서 일부 내용을 추가합니다.</h3>\n<hr>\n<h1 id=\"이번에-서비스를-개발하고-오픈하면서\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EB%B2%88%EC%97%90-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B3%A0-%EC%98%A4%ED%94%88%ED%95%98%EB%A9%B4%EC%84%9C\" aria-label=\"이번에 서비스를 개발하고 오픈하면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이번에 서비스를 개발하고 오픈하면서…</h1>\n<p>예전에 LetsEncrypt를 적용해봤던 적은 있었다.<br>\n하지만 방법이 너무 오래되었고, 와일드카드 방식으로 도메인을 사용해서 인증 방법을 다시 찾아보았다.</p>\n<p>그 전에 앞서 먼저 내가 사용했었던 두 가지 방식을 간단하게 정리하고 넘어가겠다.</p>\n<br>\n<h2 id=\"standalone-과-webroot-방식\" style=\"position:relative;\"><a href=\"#standalone-%EA%B3%BC-webroot-%EB%B0%A9%EC%8B%9D\" aria-label=\"standalone 과 webroot 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Standalone 과 Webroot 방식</h2>\n<p>먼저 <strong>Standalone</strong> 방식의 경우 비 효율적인 방식이다.</p>\n<p>적용 대상의 80포트에 서버를 띄워서 인증하고 인증서를 발급받는 방식인데,<br>\n실제 서비스 시 인증을 하게 될 경우 매우 곤란한 상황이 연출될 것이다.<br>\n그리고 와일드카드 서브 도메인의 인증이 불가능하다.</p>\n<p><strong>Webroot</strong> 방식의 경우 위 방법보다는 덜 무식하다.</p>\n<p>서버의 특정 디렉토리에 접근 가능 여부를 테스트 해서 인증서를 발급해주는 방식이다.<br>\n하지만 서브도메인이 존재하는 경우 각각 인증서를 발급받아야 한다.</p>\n<p>예를 들어서 설명하면 www.test.com 과 test.com 이렇게 두 가지 적용을 하려면 둘 다 인증서를 받아야 한다.<br>\n또한 api.test.com apis.test.com 등과 같이 와일드카드 서브 도메인들도 일일히 적용을 해야 하는 단점이 있다.</p>\n<br>\n<h2 id=\"dns-인증-방법\" style=\"position:relative;\"><a href=\"#dns-%EC%9D%B8%EC%A6%9D-%EB%B0%A9%EB%B2%95\" aria-label=\"dns 인증 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DNS 인증 방법</h2>\n<p>오늘 소개할 방법이다.</p>\n<p>LetsEncrypt에서 요구하는 특정 값을 DNS의 TXT 레코드에 입력해서 인증을 하는 방식이다.<br>\n복잡할거 같은데 그냥 몇개 입력만 하면 끝난다.</p>\n<p>그리고 이 방법은 와일드카드 서브 도메인 인증을 지원하기에 확장성은 좋은 인증 방법이다.</p>\n<blockquote>\n<p>이번 적용 환경은 다음과 같다.<br>\nOS : Ubuntu 20.04<br>\nAWS EC2 환경 &#x26; Route53 기준 설명 (기타 DNS 서비스에서 유사 진행 가능)</p>\n</blockquote>\n<p>먼저 설치를 진행해야 한다.<br>\n<strong>Ubuntu</strong> 진행 기준이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">apt install letsencrypt\napt install certbot</code></pre></div>\n<p>설치 후 아래의 명령어를 통해 인증 절차를 진행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">certbot certonly --manual -d *.test.com -d test.com --preferred-challenges dns</code></pre></div>\n<p>아래는 실행 결과이다.<br>\n민감한 정보는 일부 가렸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ubuntu$ sudo certbot certonly --manual -d *.test.com -d test.com --preferred-challenges dns\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nYou have an existing certificate that contains a portion of the domains you\nrequested (ref: /etc/letsencrypt/renewal/test.com.conf)\n\nIt contains these names: test.com\n\nYou requested these names for the new certificate: *.test.com, test.com.\n\nDo you want to expand and replace this existing certificate with the new\ncertificate?\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n(E)xpand/(C)ancel: e\nRenewing an existing certificate for *.test.com and test.com\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nPlease deploy a DNS TXT record under the name:\n\n_acme-challenge.test.com.\n\nwith the following value:\n\nYou_Input_This_message\n\nBefore continuing, verify the TXT record has been deployed. Depending on the DNS\nprovider, this may take some time, from a few seconds to multiple minutes. You can\ncheck if it has finished deploying with aid of online tools, such as the Google\nAdmin Toolbox: https://toolbox.googleapps.com/apps/dig/#TXT/_acme-challenge.test.com.\nLook for one or more bolded line(s) below the line ';ANSWER'. It should show the\nvalue(s) you've just added.\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nPress Enter to Continue</code></pre></div>\n<p>여기까지 작업 후 AWS의 Route53에 접근 후 <strong>호스팅 영역</strong>의 호스팅을 선택한다.<br>\n아래의 순서대로 작업을 진행하다.</p>\n<ol>\n<li>레코드 생성을 한다.</li>\n<li>레코드 이름에는 _acme-challenge.test.com. 에서 앞에 _acme-challenge 을 입력한다.</li>\n<li>레코드 유형에는 TXT를 선택한다.</li>\n<li>값에는 <strong>with the following value:</strong>에 있는 You<em>Input</em>This_message 값을 입력한다.</li>\n</ol>\n<p>이렇게 설정을 다 한 후에 다시 저 설치 콘솔로 와서 엔터를 누르면 아래와 같이 진행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Successfully received certificate.\nCertificate is saved at: /etc/letsencrypt/live/test.com/fullchain.pem\nKey is saved at:         /etc/letsencrypt/live/test.com/privkey.pem\nThis certificate expires on 2022-12-15.\nThese files will be updated when the certificate renews.\n\nNEXT STEPS:\n- This certificate will not be renewed automatically. Autorenewal of --manual certificates requires the use of an authentication hook script (--manual-auth-hook) but one was not provided. To renew this certificate, repeat this same certbot command before the certificate's expiry date.\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nIf you like Certbot, please consider supporting our work by:\n * Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n * Donating to EFF:                    https://eff.org/donate-le\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nubuntu$</code></pre></div>\n<p>여기까지 하면 인증서 발급은 끝이며, 나와 같이 AWS EC2 환경에서 적용하는 사람이라면 다음과 같은 작업을 추가해줘야 한다.</p>\n<br>\n<h3 id=\"aws-작업\" style=\"position:relative;\"><a href=\"#aws-%EC%9E%91%EC%97%85\" aria-label=\"aws 작업 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS 작업</h3>\n<p>이렇게 진행하고 나서 AWS 콘솔로 가준다.<br>\n콘솔에서는 다음과 같은 절차로 진행한다.</p>\n<p>참고로 pem파일들은 아래의 경로에서 확인이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1> $ sudo ls /etc/letsencrypt/live/\n2> $ sudo cat /etc/letsencrypt/live/your.domain/fullchain.pem</code></pre></div>\n<p>위 명령어 중 1번을 수행하면 등록한 도메인이 디렉토리 형태로 뜨는데,<br>\n내용을 확인하려면 2번 명령어를 수행한다.<br>\n해당 디렉토리의 조작 및 조회에 root 권한이 필요하여 <strong>sudo</strong>를 붙인다.</p>\n<p>이렇게 준비 후 아래 순서대로 작업해준다.</p>\n<br>\n<ol>\n<li>AWS 콘솔에서 Certificate Manager 이동</li>\n<li>\n<p>인증서 선택에서 각 항목에 해당 하는 값을 가져온다. (아까 생성한 pem 파일을 사용)</p>\n<ol>\n<li>인증서 본문 => cert.pem</li>\n<li>인증서 프라이빗 => privkey.pem</li>\n<li>인증서 체인 => fullchain.pem</li>\n</ol>\n</li>\n<li>\n<p>마무리 하면 ec2에 접속해서 콘솔에서 아랴와 같이 nginx를 재시작 해준다.</p>\n<ol>\n<li>sudo service nginx restart</li>\n</ol>\n</li>\n</ol>\n<br>\n<h3 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h3>\n<p>nginx에도 몇 가지 작업을 해줘야 하는데 이 부분은 따로 포스팅해서 올릴 예정이다.</p>\n<p><a href=\"https://oasisfores.com/letsencrypt-wildcard-ssl-certificate/\">참고링크</a></p>","frontmatter":{"title":"Lets Encrypt 적용하기 (AWS EC2 기준)","date":"September 23, 2022"}}},"pageContext":{"slug":"/letsencrypt/220923_use-letsencrypt/","previous":{"fields":{"slug":"/my_story/new-blog-start/"},"frontmatter":{"title":"개발 블로그 재정비 및 새로운 환경에서 다시 시작"}},"next":{"fields":{"slug":"/js_ts/221027_array_combine/"},"frontmatter":{"title":"(Javascript) 배열 합치기"}}}},"staticQueryHashes":["3128451518","903436796"]}