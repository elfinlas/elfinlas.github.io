{"componentChunkName":"component---src-templates-blog-post-js","path":"/old_blog/171214_java-annotation/","result":{"data":{"site":{"siteMetadata":{"title":"MHLab blog","author":"MHLab","siteUrl":"https://elfinlas.github.io","comment":{"disqusShortName":"","utterances":"elfinlas/blog_utterances"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"99c70d14-e13b-55b7-ae9e-ece15384fe1a","excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-02-14) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Java에서 어노테이션(Annotation) 이란? 자바 개발을 하다 보면 클래스 또는 메서드 또는 변수 앞에 @Override 같은 @ 표시를 많이 봤을 것입니다. 이 어노테이션은 JEE5(Java Platform, Enterprise Edition…","html":"<h1 id=\"주의\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98\" aria-label=\"주의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의</h1>\n<h3 id=\"이-문건은-과거-hexo-블로그-2017-02-14-에서-이동된-문서입니다\" style=\"position:relative;\"><a href=\"#%EC%9D%B4-%EB%AC%B8%EA%B1%B4%EC%9D%80-%EA%B3%BC%EA%B1%B0-hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-2017-02-14-%EC%97%90%EC%84%9C-%EC%9D%B4%EB%8F%99%EB%90%9C-%EB%AC%B8%EC%84%9C%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"이 문건은 과거 hexo 블로그 2017 02 14 에서 이동된 문서입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이 문건은 과거 Hexo 블로그 (2017-02-14) 에서 이동된 문서입니다.</h3>\n<h4 id=\"시간이-지남에-따라-최신-기술과-다를-수-있으니-주의-바랍니다\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EA%B0%84%EC%9D%B4-%EC%A7%80%EB%82%A8%EC%97%90-%EB%94%B0%EB%9D%BC-%EC%B5%9C%EC%8B%A0-%EA%B8%B0%EC%88%A0%EA%B3%BC-%EB%8B%A4%EB%A5%BC-%EC%88%98-%EC%9E%88%EC%9C%BC%EB%8B%88-%EC%A3%BC%EC%9D%98-%EB%B0%94%EB%9E%8D%EB%8B%88%EB%8B%A4\" aria-label=\"시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.</h4>\n<hr>\n<br>\n<h1 id=\"java에서-어노테이션annotation-이란\" style=\"position:relative;\"><a href=\"#java%EC%97%90%EC%84%9C-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98annotation-%EC%9D%B4%EB%9E%80\" aria-label=\"java에서 어노테이션annotation 이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java에서 어노테이션(Annotation) 이란?</h1>\n<p>자바 개발을 하다 보면 클래스 또는 메서드 또는 변수 앞에 <strong>@Override</strong> 같은 <strong>@</strong> 표시를 많이 봤을 것입니다.<br>\n이 어노테이션은 JEE5(Java Platform, Enterprise Edition 5)부터 새롭게 추가된 요소입니다.</p>\n<p>이 어노테이션으로 인해 데이터의 유효성 검사 등을 쉽게 알 수 있고, 이와 관련한 코드가 깔끔해지게 됩니다.<br>\n일단 어노테이션의 용도는 다양한 목적이 있지만 <strong>메타 데이터</strong>의 비중이 가장 크다 할 수 있습니다.</p>\n<blockquote>\n<p>메타-테이터(Meta-Data) : 데이터를 위한 데이터를 의미하며, 풀어 이야기하면 한 데이터에 대한 설명을 의미하는 데이터. (자신의 정보를 담고 있는 데이터)</p>\n</blockquote>\n<h3 id=\"java에서-기본적으로-제공하는-어노테이션-종류\" style=\"position:relative;\"><a href=\"#java%EC%97%90%EC%84%9C-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98-%EC%A2%85%EB%A5%98\" aria-label=\"java에서 기본적으로 제공하는 어노테이션 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java에서 기본적으로 제공하는 어노테이션 종류</h3>\n<ol>\n<li>\n<p><strong>@Override</strong></p>\n<ul>\n<li>선언한 메서드가 오버라이드 되었다는 것을 나타냅니다.</li>\n<li>만약 상위(부모) 클래스(또는 인터페이스)에서 해당 메서드를 찾을 수 없다면 컴파일 에러를 발생 시킵니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@Deprecated</strong></p>\n<ul>\n<li>해당 메서드가 더 이상 사용되지 않음을 표시합니다.</li>\n<li>만약 사용할 경우 컴파일 경고를 발생 키십니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@SuppressWarnings</strong></p>\n<ul>\n<li>선언한 곳의 컴파일 경고를 무시하도록 합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@SafeVarargs</strong></p>\n<ul>\n<li>Java7 부터 지원하며, 제너릭 같은 가변인자의 매개변수를 사용할 때의 경고를 무시합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@FunctionalInterface</strong></p>\n<ul>\n<li>Java8 부터 지원하며, 함수형 인터페이스를 지정하는 어노테이션입니다.</li>\n<li>만약 메서드가 존재하지 않거나, 1개 이상의 메서드(default 메서드 제외)가 존재할 경우 컴파일 오류를 발생 시킵니다.</li>\n</ul>\n</li>\n</ol>\n<br>\n<h2 id=\"어노테이션은-어떻게-구성되어-있을까\" style=\"position:relative;\"><a href=\"#%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%EC%84%B1%EB%90%98%EC%96%B4-%EC%9E%88%EC%9D%84%EA%B9%8C\" aria-label=\"어노테이션은 어떻게 구성되어 있을까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어노테이션은 어떻게 구성되어 있을까?</h2>\n<p>먼저 어노테이션의 구조를 보기 위해서 아래의 코드를 참고해 봅니다. (예를 위해 작성된 커스텀 어노테이션입니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">CustomAnnotation</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">boolean</span> <span class=\"token function\">isCheck</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">default</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>먼저 1번, 2번의 어노테이션 선언에 쓰인 어노테이션은 <strong>메타 어노테이션(Meta Annotation)</strong>이라 하며 이를 이용해 커스텀 어노테이션을 작성할 수 있게 됩니다.</p>\n<h3 id=\"메타-어노테이션의-종류\" style=\"position:relative;\"><a href=\"#%EB%A9%94%ED%83%80-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"메타 어노테이션의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메타 어노테이션의 종류</h3>\n<ol>\n<li>\n<p><strong>@Retention</strong></p>\n<ul>\n<li>자바 컴파일러가 어노테이션을 다루는 방법을 기술하며, 특정 시점까지 영향을 미치는지를 결정합니다.</li>\n<li>종류는 다음과 같습니다. - <strong>RetentionPolicy.SOURCE</strong> : 컴파일 전까지만 유효. (컴파일 이후에는 사라짐) - <strong>RetentionPolicy.CLASS</strong> : 컴파일러가 클래스를 참조할 때까지 유효. - <strong>RetentionPolicy.RUNTIME</strong> : 컴파일 이후에도 JVM에 의해 계속 참조가 가능. (리플렉션 사용)</li>\n</ul>\n</li>\n<li>\n<p><strong>@Target</strong></p>\n<ul>\n<li>어노테이션이 적용할 위치를 선택합니다.</li>\n<li>\n<p>종류는 다음과 같습니다.</p>\n<ul>\n<li>ElementType.PACKAGE : 패키지 선언</li>\n<li>ElementType.TYPE : 타입 선언</li>\n<li>ElementType.ANNOTATION_TYPE : 어노테이션 타입 선언</li>\n<li>ElementType.CONSTRUCTOR : 생성자 선언</li>\n<li>ElementType.FIELD : 멤버 변수 선언</li>\n<li>ElementType.LOCAL_VARIABLE : 지역 변수 선언</li>\n<li>ElementType.METHOD : 메서드 선언</li>\n<li>ElementType.PARAMETER : 전달인자 선언</li>\n<li>ElementType.TYPE_PARAMETER : 전달인자 타입 선언</li>\n<li>ElementType.TYPE_USE : 타입 선언</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>@Documented</strong></p>\n<ul>\n<li>해당 어노테이션을 Javadoc에 포함시킵니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@Inherited</strong></p>\n<ul>\n<li>어노테이션의 상속을 가능하게 합니다.</li>\n</ul>\n</li>\n<li>\n<p><strong>@Repeatable</strong></p>\n<ul>\n<li>Java8 부터 지원하며, 연속적으로 어노테이션을 선언할 수 있게 해줍니다.</li>\n</ul>\n</li>\n</ol>\n<br>\n<p>어노테이션은 기본적으로 인터페이스 형태를 취하고 있으며, 단지 interface 앞에 <strong>@</strong> 표시를 해줍니다.<br>\n어노테이션의 필드에서는 <strong>enum</strong>, String이나 기본 자료형, 기본 자료형의 배열을 사용할 수 있습니다.</p>\n<p>어노테이션에 대한 이론적인 부분은 여기까지이며, 이를 활용하여 커스텀 어노테이션을 작성하는 것은 다음 포스트에서 다루도록 하겠습니다.</p>\n<p><a href=\"https://elfinlas.github.io/2017/12/14/java-custom-anotation-01/\">커스텀 어노테이션 만들고 사용하기</a></p>","frontmatter":{"title":"Java에서 어노테이션(Annotation)이란?","date":"February 14, 2017"}}},"pageContext":{"slug":"/old_blog/171214_java-annotation/","previous":null,"next":{"fields":{"slug":"/old_blog/180218_thymeleaf-if-exam/"},"frontmatter":{"title":"Thymeleaf에서 if else 조건문 사용법"}}}}}