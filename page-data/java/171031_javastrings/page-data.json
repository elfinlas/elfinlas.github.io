{"componentChunkName":"component---src-templates-post-jsx","path":"/java/171031_javastrings/","result":{"data":{"site":{"siteMetadata":{"title":"MHLab blog","author":"MHLab"}},"markdownRemark":{"id":"9d58bbd1-9065-5933-a3cb-f7a6dbb2ad90","excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-10-31) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 문서를 시작하면서... Java를 사용할 때 본인의 경우 가장 많이 사용하는 클래스는 아무래도 String…","html":"<h1 id=\"주의\" style=\"position:relative;\"><a href=\"#%EC%A3%BC%EC%9D%98\" aria-label=\"주의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>주의</h1>\n<h3 id=\"이-문건은-과거-hexo-블로그-2017-10-31-에서-이동된-문서입니다\" style=\"position:relative;\"><a href=\"#%EC%9D%B4-%EB%AC%B8%EA%B1%B4%EC%9D%80-%EA%B3%BC%EA%B1%B0-hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-2017-10-31-%EC%97%90%EC%84%9C-%EC%9D%B4%EB%8F%99%EB%90%9C-%EB%AC%B8%EC%84%9C%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"이 문건은 과거 hexo 블로그 2017 10 31 에서 이동된 문서입니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이 문건은 과거 Hexo 블로그 (2017-10-31) 에서 이동된 문서입니다.</h3>\n<h4 id=\"시간이-지남에-따라-최신-기술과-다를-수-있으니-주의-바랍니다\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EA%B0%84%EC%9D%B4-%EC%A7%80%EB%82%A8%EC%97%90-%EB%94%B0%EB%9D%BC-%EC%B5%9C%EC%8B%A0-%EA%B8%B0%EC%88%A0%EA%B3%BC-%EB%8B%A4%EB%A5%BC-%EC%88%98-%EC%9E%88%EC%9C%BC%EB%8B%88-%EC%A3%BC%EC%9D%98-%EB%B0%94%EB%9E%8D%EB%8B%88%EB%8B%A4\" aria-label=\"시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.</h4>\n<hr>\n<br>\n<h1 id=\"문서를-시작하면서\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%84%9C%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B4%EC%84%9C\" aria-label=\"문서를 시작하면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문서를 시작하면서...</h1>\n<p>Java를 사용할 때 본인의 경우 가장 많이 사용하는 클래스는 아무래도 <strong>String</strong>이 아닐까 싶습니다.</p>\n<p><strong>String</strong>을 쓰다보면 문자열을 새로 문자열을 넣거나 또는 변경을 하는 경우 <strong>subString() 또는 split()</strong> 를 주로 사용합니다.</p>\n<p>이것을 찾다보면 같이 마주치는 것은 <strong>StringBuffer</strong> 또는 <strong>StringBuilder</strong>가 있을 것입니다.</p>\n<p>아마 <strong>면접질문</strong> <b>(신입 또는 주니어급 개발자)</b>으로 저 세 가지의 차이점을 물어보는 경우가 많을 것입니다.</p>\n<p>이번 포스팅을 통해서 한번 정리를 해보려 합니다.</p>\n<br>\n<h2 id=\"java의-string\" style=\"position:relative;\"><a href=\"#java%EC%9D%98-string\" aria-label=\"java의 string permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java의 String.</h2>\n<p>이번 포스팅에서는 Java의 <strong>String</strong>을 집중적으로 포커싱을 하는 글은 아니니 간략하게만 확인하고 넘어가도록 하겠습니다.</p>\n<p><strong>String</strong>은 일단 **불가변적(Immutable)**입니다.</p>\n<p>이걸 쉽게 설명하자면 값을 변경하는 것이 불가능하다는 이야기입니다.</p>\n<p>하지만 우리는 이런 사실을 잊고 아래와 같이 자연스럽게 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> testStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span>\ntestStr <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello One\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 선언 중 첫 번째 줄에서는 testStr에 \"Hello World\"라는 문자열의 값이 들어가게 됩니다.</p>\n<p>하지만 두번 째 라인에서는 testStr에는 \"Hello One\" 문자열이 들어갑니다.</p>\n<p>위와 같은 작업을 할 때는 기존의 testStr 객체의 메모리 공간에 \"Hello World\"의 내용을 변경하는 것이 아닌,<br>\n<strong>기존의 공간에서 새로운 공간을 할당한 후</strong> 문자열을 생성합니다.</p>\n<p>결국 저장된 문자열을 변경하는 것이 아닌 <strong>새로운 객체를 만들어서 반환</strong>하는 것입니다.</p>\n<p>이것을 가리켜 <strong>불가변적(Immutable) 이다</strong> 라고 표현합니다.</p>\n<p>물론 이 <b>불가변적(Immutable)</b>인 객체는 사용이 간단하고, 멀티 쓰레드 환경에서 자유롭게 쓸 수 있는 장점이 있지만,<br>\n<strong>엄청난 양의 문자열을 변경하거나 치환을 하는 작업</strong>을 하게 될 경우 효율에 문제가 생길 수 있음을 예상할 수 있습니다.</p>\n<p>이런 문제를 봉착하게 되면 우리는 검색할 때 다음의 키워드를 확인하게 됩니다.</p>\n<br>\n<h2 id=\"stringbuffer-stringbuilder-우리는-string의-친척\" style=\"position:relative;\"><a href=\"#stringbuffer-stringbuilder-%EC%9A%B0%EB%A6%AC%EB%8A%94-string%EC%9D%98-%EC%B9%9C%EC%B2%99\" aria-label=\"stringbuffer stringbuilder 우리는 string의 친척 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>StringBuffer, StringBuilder. 우리는 String의 친척</h2>\n<p>위에서 확인한 <strong>String</strong> 의 경우 문자열 <strong>변경</strong>을 하는 것이 아닌 새로 객체를 <strong>생성하여 반환함</strong>을 확인하였습니다.</p>\n<p>만약 당신이 엄청난 문자열 연산을 하게 될 예정이라면 지금 소개하는 <strong>StringBuffer</strong> 또는 <strong>StringBuilder</strong>를 사용하면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">StringBuffer</span> testStr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Wolrd\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ntestStr<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 경우는 <strong>StringBuffer</strong>로 생성한 testStr을 delete 메서드를 사용하여 문자열을 변경한 예제입니다.</p>\n<p>testStr의 경우 결국 \"Hello\" 라는 문자열만 남게 될 것입니다.</p>\n<p>즉 새롭게 생성을 하는 것이 아닌 기존의 객체에서 문자열 변경을 하는 것입니다.</p>\n<p>이 <strong>StringBuffer</strong>나 <strong>StringBuilder</strong>의 경우 문자열 연산을 진행하며 버퍼 공간이 부족한 경우, 기존의 버퍼 크기를 늘리며 동작합니다.</p>\n<p>만약 <strong>작은 규모의 String</strong>의 문자열 변경의 경우 자꾸 변경할 경우 문자열 객체를 만들고 지우고를 반복하니<br>\n성능에 문제가 있지 않을까 싶지만...</p>\n<p>이런 경우 그냥 <strong>String</strong>을 사용해도 무방합니다.</p>\n<p>변경을 위한 연산을 진행하는 비용보다 새로 메모리 공간을 할당해서 사용하는 비용이 더 낮기 때문입니다.</p>\n<p>위에서도 이야기 하였지만 엄청난 문자열 변경 연산을 할 경우에만 <strong>StringBuffer</strong>, <strong>StringBuilder</strong>를 사용하는 것이 좋습니다.</p>\n<br>\n<h2 id=\"stringbuffer-stringbuilder-너희-둘의-차이점\" style=\"position:relative;\"><a href=\"#stringbuffer-stringbuilder-%EB%84%88%ED%9D%AC-%EB%91%98%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"stringbuffer stringbuilder 너희 둘의 차이점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>StringBuffer, StringBuilder 너희 둘의 차이점?</h2>\n<p>그런데 이 두 가지의 차이점은 무엇일까요?</p>\n<p><strong>StringBuffer</strong>의 경우 <b>동기화(Synchronization)를 보장</b>하고,<br>\n<strong>StringBuilder</strong>의 경우 <b>동기화(Synchronization)를 보장하지 않습니다.</b>.</p>\n<p>즉 <strong>Multi Thread</strong> 환경에서는 <strong>StringBuffer</strong> 를 사용하고,<br>\n<strong>Single Thread</strong> 환경에서는 <strong>StringBuilder</strong>를 사용하면 됩니다.</p>\n<br>\n<h2 id=\"새로운-부분\" style=\"position:relative;\"><a href=\"#%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B6%80%EB%B6%84\" aria-label=\"새로운 부분 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새로운 부분</h2>\n<p>과거 JDK 1.5 버전에서는 String에서 문자열 연산(+, concat 등)을 할 때 성능상의 이슈가 있었지만,<br>\nJDK1.5 버전 이후부터는 컴파일 단계에서 String 객체의 문자열 연산을 사용할 경우 StringBuilder로 컴파일 되도록 변경되었습니다.</p>\n<br>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p><strong>String</strong>은 짧은 문자열을 더하거나, 간단한 문자열 처리를 할 때 사용하고,<br>\n<strong>StringBuffer</strong>는 쓰레드에 안전한 프로그램이 필요할 때나, 개발 중인 시스템의 부분이 쓰레드에 안전한지 모를 경우 사용합니다.\n<strong>StringBuilder</strong>는 쓰레드에 안전성 여부에 관계가 없는 소프트웨어를 개발할 때 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"toc\"><pre class=\"language-toc\"><code class=\"language-toc\"></code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%A3%BC%EC%9D%98\">주의</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%EC%9D%B4-%EB%AC%B8%EA%B1%B4%EC%9D%80-%EA%B3%BC%EA%B1%B0-hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-2017-10-31-%EC%97%90%EC%84%9C-%EC%9D%B4%EB%8F%99%EB%90%9C-%EB%AC%B8%EC%84%9C%EC%9E%85%EB%8B%88%EB%8B%A4\">이 문건은 과거 Hexo 블로그 (2017-10-31) 에서 이동된 문서입니다.</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%84%9C%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B4%EC%84%9C\">문서를 시작하면서...</a></p>\n<ul>\n<li><a href=\"#java%EC%9D%98-string\">Java의 String.</a></li>\n<li><a href=\"#stringbuffer-stringbuilder-%EC%9A%B0%EB%A6%AC%EB%8A%94-string%EC%9D%98-%EC%B9%9C%EC%B2%99\">StringBuffer, StringBuilder. 우리는 String의 친척</a></li>\n<li><a href=\"#stringbuffer-stringbuilder-%EB%84%88%ED%9D%AC-%EB%91%98%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90\">StringBuffer, StringBuilder 너희 둘의 차이점?</a></li>\n<li><a href=\"#%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B6%80%EB%B6%84\">새로운 부분</a></li>\n<li><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Java의 String, StringBuffer, String Builder에 대하여","description":null,"date":"October 31, 2017","tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null,"writer":null}},"previous":{"fields":{"slug":"/java/171031_javabean/"},"frontmatter":{"title":"Java Bean이란?","isPrivate":null}},"next":{"fields":{"slug":"/android/171101_androidstudiomasterpw/"},"frontmatter":{"title":"Android Studio에서 Master Password 비활성(Disable) 방법","isPrivate":null}}},"pageContext":{"id":"9d58bbd1-9065-5933-a3cb-f7a6dbb2ad90","previousPostId":"a2e154f3-c1e3-5658-a6ed-e525844bb288","nextPostId":"57b63911-3e58-58b9-a5a2-b5706040b8b4"}},"staticQueryHashes":[],"slicesMap":{}}