{"componentChunkName":"component---src-templates-blog-post-js","path":"/node-js/220208_node-session-cache/","result":{"data":{"site":{"siteMetadata":{"title":"MHLab blog","author":"MHLab","siteUrl":"https://elfinlas.github.io","comment":{"disqusShortName":"","utterances":"elfinlas/blog_utterances"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"668d7ec9-85f8-57c4-99d3-861363b52fbf","excerpt":"세션을 사용하려다가… Node.JS에서 세션을 사용하려 했고, 저장소로 레디스(Redis) 를 사용하기로 했다. 설정법은 다음 포스팅에서 다루기로 하고… 일단 내가 쓰려 했던 패키지는 아래와 같다. 이렇게 설정하고 redis 설정을 해줬다. 참고로 설정 파일을 외부로 빼고 app.use() 에서 넣어서 쓰는 방식으로 개발했다. 이 부분을 참고하면 될 것 같다. 그리고 설정파일의 경우 전체 정보를 공개하기 어렵기에 공통적인 부분만 남긴다. 위와 같이 설정된 상태에서 node.js…","html":"<h1 id=\"세션을-사용하려다가\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A0%A4%EB%8B%A4%EA%B0%80\" aria-label=\"세션을 사용하려다가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세션을 사용하려다가…</h1>\n<p>Node.JS에서 세션을 사용하려 했고, 저장소로 레디스(Redis) 를 사용하기로 했다.<br>\n설정법은 다음 포스팅에서 다루기로 하고…<br>\n일단 내가 쓰려 했던 패키지는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"redis\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.0.3\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"express-session\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.17.2\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token property\">\"connect-redis\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.0\"</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>이렇게 설정하고 redis 설정을 해줬다.<br>\n참고로 설정 파일을 외부로 빼고 app.use() 에서 넣어서 쓰는 방식으로 개발했다.<br>\n이 부분을 참고하면 될 것 같다.<br>\n그리고 설정파일의 경우 전체 정보를 공개하기 어렵기에 공통적인 부분만 남긴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Redis 설정\n */</span>\n\n<span class=\"token keyword\">import</span> connectRedis <span class=\"token keyword\">from</span> <span class=\"token string\">'connect-redis'</span>\n<span class=\"token keyword\">import</span> redis <span class=\"token keyword\">from</span> <span class=\"token string\">'redis'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">session</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> RedisStore <span class=\"token operator\">=</span> <span class=\"token function\">connectRedis</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> redisClient <span class=\"token operator\">=</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">createClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// url: \"redis://127.0.0.1:10\",</span>\n    <span class=\"token literal-property property\">host</span><span class=\"token operator\">:</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'0000'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  redisClient<span class=\"token punctuation\">.</span><span class=\"token function\">unref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  redisClient<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> sessionInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">resave</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">saveUninitialized</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">secret</span><span class=\"token operator\">:</span> <span class=\"token string\">'sessionSecret'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'sessionId'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">cookie</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">httpOnly</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">secure</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">store</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">client</span><span class=\"token operator\">:</span> redisClient <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">session</span><span class=\"token punctuation\">(</span>sessionInfo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 설정된 상태에서 node.js를 실행할 경우 아래와 같은 에러가 발생했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[app] [2022-01-27T15:49:44.924Z] Server running to http://localhost:11 in dev\n(node:45453) UnhandledPromiseRejectionWarning: Error: The client is closed\n....</code></pre></div>\n<p>이런 문제가 발생하는 원인은 버전 문제다.<br>\n바로 <strong>connect-redis</strong> 패키지 문제이다.</p>\n<p><a href=\"https://www.npmjs.com/package/connect-redis\">NPM 사이트</a> 에서도 확인 가능하지만 일부 내용을 발췌하면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">RedisStore(options)\nThe RedisStore requires an existing Redis client. Any clients compatible with the redis API will work. See client option for more details.\n\nOptions\nclient\nAn instance of redis or a redis compatible client.\n\nKnown compatible and tested clients:\n\nredis (v3, v4 with legacyMode: true)</code></pre></div>\n<p>요기서 보면 redis를 사용할 때 v4를 사용할 경우 legacyMode를 사용해서 쓰라 되어 있다.<br>\n난 redis 버전을 낮췄다.</p>\n<blockquote>\n<p>“redis”: “v3”</p>\n</blockquote>\n<p>무튼 해결법은…</p>\n<ol>\n<li>redis 버전을 낮춘다.</li>\n<li>legacyMode를 활성화 한다.</li>\n</ol>\n<p>이 두가지를 조취한 다음 실행하면 아주 잘 된다.</p>\n<p>별거 아닌걸로 시간을 좀 많이 쓰니 답이 안보인다…-_-;;</p>","frontmatter":{"title":"Node.Js에서 Redis 세션 사용시 UnhandledPromiseRejectionWarning The client is closed 문제 뜨는 경우","date":"February 08, 2022"}}},"pageContext":{"slug":"/node-js/220208_node-session-cache/","previous":{"fields":{"slug":"/node-js/220228_node-absolute-path/"},"frontmatter":{"title":"Node.Js 에서 import의 절대경로(Absolute Path) 지옥 탈출기"}},"next":{"fields":{"slug":"/tools/220209_vscode-emmet/"},"frontmatter":{"title":"VSCode에서 에밋(Emmet)이 동작하지 않는 경우"}}}},"staticQueryHashes":["3128451518","903436796"]}