{"componentChunkName":"component---src-templates-post-jsx","path":"/node-js/211111_node-async/","result":{"data":{"site":{"siteMetadata":{"title":"MHLab blog","author":"MHLab"}},"markdownRemark":{"id":"cf122d2f-6c6c-5109-9471-c4b9614eed2b","excerpt":"Node.js에서 request를 사용하여... 현재 베타테스트 중인 내 프로젝트의 일부 기능을 Node.js로 변환하는 중이었다. 아직 Node…","html":"<h2 id=\"nodejs에서-request를-사용하여\" style=\"position:relative;\"><a href=\"#nodejs%EC%97%90%EC%84%9C-request%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC\" aria-label=\"nodejs에서 request를 사용하여 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Node.js에서 request를 사용하여...</h2>\n<p>현재 베타테스트 중인 내 프로젝트의 일부 기능을 Node.js로 변환하는 중이었다.<br>\n아직 Node를 학습하면서 붙이는 거라서 좀 익숙하지 않았다.</p>\n<p>일단 진행하면서 겪은 문제의 포인트는 아래와 같다.</p>\n<blockquote>\n<ol>\n<li>특정 사이트의 크롤링을 진행한 다음 해당 내역중에 필요한 데이터를 html 파싱 처리.</li>\n<li>테스트 환경이 Node.js로 구축한 서버의 특정 url로 접근 시 1번 기능이 호출된다.</li>\n<li>문제는 2번에 나온 url 호출을 하면 1번의 작업이 끝나고 그 결과를 json으로 뱉어야 하는데 {} 반환.</li>\n</ol>\n</blockquote>\n<p>난 거의 Java로만 개발을 많이 했던 사람이라 (물론 python도 많이 썼지만 그건 좀 과거라 패스하고...) 순차적인 흐름에 익숙한 사람이다.<br>\n일단 코드로 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//route에서 크롤링 처리 결과를 가져와서 json으로 응답 처리해주는 함수</span>\nrouter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token function\">crawling4Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">crawling4Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">return</span> someValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>내 개념으로는 <strong>crawling4Test()</strong> 함수의 처리 결과가 끝나고,<br>\n그 반환 값을 <strong>res.json()</strong> 에 전달하여 Json 응답이 처리되는 것으로 이해하고 있었다.<br>\n근데 아니었다.<br>\n먼저 <strong>crawling4Test()</strong> 함수의 로직도 함께 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">crawling4Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> targetUrlReq <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span><span class=\"token string\">'https://target_url.com'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> resultJson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>targetUrlReq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>body</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>err <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> enc <span class=\"token operator\">=</span> <span class=\"token function\">charset</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">const</span> i_result <span class=\"token operator\">=</span> iconv<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> enc<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">const</span> resultHtml <span class=\"token operator\">=</span> cheerio<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>i_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^0-9]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> targetA <span class=\"token operator\">=</span> <span class=\"token function\">resultHtml</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.target_a_tag).text().replace(regex, '</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> targetB <span class=\"token operator\">=</span> <span class=\"token function\">resultHtml</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.target_b_tag).text().replace(regex, '</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\">//체크용</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'targetA = '</span> <span class=\"token operator\">+</span> targetA<span class=\"token punctuation\">)</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'targetB = '</span> <span class=\"token operator\">+</span> targetB<span class=\"token punctuation\">)</span>\n\n                resultJson<span class=\"token punctuation\">[</span><span class=\"token string\">'targetA'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> targetA<span class=\"token punctuation\">;</span>\n                resultJson<span class=\"token punctuation\">[</span><span class=\"token string\">'targetB'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> targetB<span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>resultJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">error</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>res<span class=\"token punctuation\">.</span>statusCode<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                resultJson<span class=\"token punctuation\">[</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Some error'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>resultJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> resultJson<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에서도 언급했지만 저것의 처리 결과는 <strong>{}</strong> 비어있는 딕셔너리 객체였다.<br>\n(뭐 Map, Key-value 다양한 이름이지만 본문에서는 딕셔너리라 표현)</p>\n<p>근데 또 신기한 것은 <strong>crawling4Test()</strong> 함수 안에서 console.log 를 통해 로그를 띄우면 값은 잘 들어있다.<br>\n내가 원한건 <strong>router.get()</strong> 함수에서 <strong>crawling4Test()</strong> 함수의 처리를 기다리고 응답이 완료되면 <strong>res.json()</strong> 로 결과를 내보내는 <strong>동기적</strong> 처리 방식을 기대했던 것.</p>\n<p>그럼 원인은?</p>\n<blockquote>\n<p>그냥 함수들이 비 동기로 실행되었다.</p>\n</blockquote>\n<p>이 표현이 맞는지 모르겠지만 무튼 문맥상으로는 저렇게 표현했다.<br>\n내가 원하는 결과물은 <strong>동기처럼 보이는 순차적 비동기</strong> 뭐 좀 편한 표현으로 <strong>하나의 흐름으로 동작하는 비동기</strong> 였다.</p>\n<p>그래서 찾아보니 node에서는 비동기를 하나의 흐름으로 처리하기 위해서는 promise 그리고 await, async 라는게 필요했다.</p>\n<br>\n<h2 id=\"그래서-promise-await-async-이것들은-대충-감이-오는데\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-promise-await-async-%EC%9D%B4%EA%B2%83%EB%93%A4%EC%9D%80-%EB%8C%80%EC%B6%A9-%EA%B0%90%EC%9D%B4-%EC%98%A4%EB%8A%94%EB%8D%B0\" aria-label=\"그래서 promise await async 이것들은 대충 감이 오는데 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 promise, await, async 이것들은 대충 감이 오는데...</h2>\n<p>Node를 공부하는 사람이라면 주요 특징점이나 문제점(?) 같은걸 많이 들었을 것이다.<br>\n그 중 하나가 <strong>콜백지옥</strong> 이다.</p>\n<p>이거는 하도 설명이 많이 나와서 난 패스하겠다.<br>\n궁금하신 분은 검색하면 다른 블로그나 유튜브에 아주 자세히 설명되어 있으니 그곳을 참고해주시길...</p>\n<p>무튼 <strong>promise</strong>와 <strong>await</strong>, <strong>async</strong> 이거 3가지만 잘 조합하면 깔끔하게 처리할 수 있다.<br>\n(초창기 버전에서는 엄청 복잡했다는데..시간이 지나니 점점 편해지는건 덤...)</p>\n<p><strong>promise</strong>에 대해 설명글 쓰면 또 엄청 길어지니까...간단하게 말하자면..</p>\n<blockquote>\n<p>“A promise is an object that may produce a single value some time in the future”<br>\n하나의 요청 처리가 끝날때까지 기다리지 않고 다른 요청을 동시에 처리할수 있는 방식 ()</p>\n</blockquote>\n<p><strong>promise</strong> 소개 문구는 저렇다.\n즉 비동기를 하겠단 이야기인데 콜백의 지옥을 파훼하기 위한 해법이라 하는데 얘도 사실 보면 장황하지 않을 뿐 비슷하다.<br>\n그래서 <strong>await</strong>, <strong>async</strong> 이거 두 개랑 같이 쓰면 그 때는 어느정도 파훼법이 완성된다.</p>\n<p>이번 문제도 같다.<br>\n그럼 이걸 어떻게 해결했는지 한번 알아보도록 하자</p>\n<br>\n<h2 id=\"처리한-방법\" style=\"position:relative;\"><a href=\"#%EC%B2%98%EB%A6%AC%ED%95%9C-%EB%B0%A9%EB%B2%95\" aria-label=\"처리한 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>처리한 방법</h2>\n<p>먼저 변경된 <strong>crawling4Test()</strong> 함수를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">crawling4Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> targetUrlReq <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span><span class=\"token string\">'https://target_url.com'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> resultJson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>targetUrlReq<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">,</span>body</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>err <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> enc <span class=\"token operator\">=</span> <span class=\"token function\">charset</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">const</span> i_result <span class=\"token operator\">=</span> iconv<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">,</span> enc<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">const</span> resultHtml <span class=\"token operator\">=</span> cheerio<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>i_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">const</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^0-9]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> targetA <span class=\"token operator\">=</span> <span class=\"token function\">resultHtml</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.target_a_tag).text().replace(regex, '</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> targetB <span class=\"token operator\">=</span> <span class=\"token function\">resultHtml</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div.target_b_tag).text().replace(regex, '</span>'<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                resultJson<span class=\"token punctuation\">[</span><span class=\"token string\">'targetA'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> targetA<span class=\"token punctuation\">;</span>\n                resultJson<span class=\"token punctuation\">[</span><span class=\"token string\">'targetB'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> targetB<span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>resultJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                resultJson<span class=\"token punctuation\">[</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Some error'</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>resultJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>일단 반환 값이 json 이 아닌 <strong>Promise</strong>로 바뀌었다.<br>\n그거 외에는 로직은 같지만 반환의 경우 resolve 와 reject 인데 이거는 어렵지 않다.</p>\n<p>해당 값을 다시 또 가공하여 처리하는 함수를 호출해야 하는 경우 then() 으로 체이닝 해서 처리하면 되고, 예외가 생길 경우에도 마찬가지 이다.<br>\n이 글에서는 <strong>Promise</strong>에 대해 설명하는 공간은 아니기에 간략하게 여기까지만 알아보자.<br>\n(사실 너무 많은 자료가 많아서...다른 분들꺼 참고하자<br>\n&#x3C;하단에 참고로 주렁주렁 달아 놓을 예정>)</p>\n<p>이제는 그럼 저 함수를 호출하는 곳으로 가보자</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">crawling4Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그냥 단어 몇 개가 사이에 박힌거 빼곤 없다.<br>\n<strong>await</strong> 키워드는 <strong>promise</strong>를 반환하는 함수 앞에 써주고, <strong>async</strong> 키워드는 <strong>await</strong> 선언이 된 곳에 써주면 된다.<br>\n이것도 여기서는 이렇게만 설명한다.<br>\n좀 더 자세한 글은...아시죠? ㅎㅎ</p>\n<p>그래서 결국 저렇게 처리한 상태로 실행해보면 드디어 원하는 결과가 잘 나오게 된다.</p>\n<br>\n<h2 id=\"결론-및-여담\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0-%EB%B0%8F-%EC%97%AC%EB%8B%B4\" aria-label=\"결론 및 여담 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론 및 여담</h2>\n<p>Node는 뭔가 자바에서 온 사람을 당황하게(나만 그럴수 있다) 만드는 게 많은듯...<br>\n저 <strong>promise</strong>, <strong>async</strong>, <strong>await</strong> 에 대해 자세하게 알고 있음 좋을 것 같다.</p>\n<p>엄청 딥하게 알면 더 좋겠지만...<br>\n사실 구현하는데 바쁘니... 어떤 식으로 동작하는지...그리고 어떻게 사용하면 ㅈ 되는지, 어떻게 사용해야 하는지만 알면 될 것 같다.</p>\n<p>원리까지 설명하세요 이러는 건 면접에서나 하는거겠지?<br>\n근데 사실 이런거 면접에서 딥하게 묻는 것도 문제가 있는듯..</p>\n<p>위에 언급한 대로 어떻게 사용하는지 정확한 이해도 체크만 하면 되는데 이거 동작 방법을 화이트보드에 설명해보세요 한다?<br>\n그건 면접자에게 질문을 잘못 던진 케이스 같다.</p>\n<p>그런 질문 보다는 이걸 어떻게 썼을 때 잘못된 경우 있었냐? 이걸 어케 대처해야 하냐?<br>\n이게 옳바른 질문 아닐까? ㅎㅎ</p>\n<p>내가 예전에 3년전인가... 면접다닐때...특히 스프링 자바는 진짜 되도 않는 면접 질문 많이 받았다.<br>\n네이버랑 카카오 전화면접에서는 GC에 대해 다 설명해보고 java8의 GC가 뭐가 틀린지 설명해보랜다...<br>\n아니 트러블슈팅 성향이나 프로젝트에서 겪은 장애 처리나 어떻게 구현했냐 질문보단 저런걸로...</p>\n<p>아마 떨어트리려고 한거 같다는 생각이 많이 든 면접...(아님 내 정신승리일 수도...)</p>\n<p>그냥..다시 이런거 찾아보고 공부하다가 옛날 생각나서 주절거려봤다.</p>\n<h3 id=\"참고\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-label=\"참고 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고</h3>\n<ul>\n<li><a href=\"https://mwoo526.tistory.com/35\">Promise에 대하여</a></li>\n<li><a href=\"https://joshua1988.github.io/web-development/javascript/promise-for-beginners/\">자바스크립트 Promise 쉽게 이해하기</a></li>\n<li><a href=\"https://joshua1988.github.io/web-development/javascript/js-async-await/#async--await-%EB%A7%9B%EB%B3%B4%EA%B8%B0\">await, async에 대하여</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"toc\"><pre class=\"language-toc\"><code class=\"language-toc\"></code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#nodejs%EC%97%90%EC%84%9C-request%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC\">Node.js에서 request를 사용하여...</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-promise-await-async-%EC%9D%B4%EA%B2%83%EB%93%A4%EC%9D%80-%EB%8C%80%EC%B6%A9-%EA%B0%90%EC%9D%B4-%EC%98%A4%EB%8A%94%EB%8D%B0\">그래서 promise, await, async 이것들은 대충 감이 오는데...</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B2%98%EB%A6%AC%ED%95%9C-%EB%B0%A9%EB%B2%95\">처리한 방법</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0-%EB%B0%8F-%EC%97%AC%EB%8B%B4\">결론 및 여담</a></p>\n<ul>\n<li><a href=\"#%EC%B0%B8%EA%B3%A0\">참고</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Node.js에서 request를 통해 가져온 값을 화면에 뿌릴 때 문제가 생기는 경우 (async, await... 동기/비동기에 대한 간단한 이해)","description":null,"date":"November 11, 2021","tags":["NodeJS","Troubleshooting"],"series":"NodeJS","previewImage":"nodejs_logo.png","isPrivate":null,"writer":null}},"previous":{"fields":{"slug":"/tools/211109_local-install-hexo/211109_local-install-hexo/"},"frontmatter":{"title":"Hexo를 글로벌이 아닌 로컬에 설치하는 법","isPrivate":null}},"next":{"fields":{"slug":"/aws/211118_aws-ec2-swap/"},"frontmatter":{"title":"aws ubuntu에서 swap 메모리 설정하기 (with EC2가 갑자기 상태 이상으로 접속 및 접근 불가)","isPrivate":null}}},"pageContext":{"id":"cf122d2f-6c6c-5109-9471-c4b9614eed2b","previousPostId":"4daaa640-0af8-5e73-b12c-eccb51998d52","nextPostId":"4ab7f453-6359-5b37-8b56-7d7db69b94a2"}},"staticQueryHashes":[],"slicesMap":{}}